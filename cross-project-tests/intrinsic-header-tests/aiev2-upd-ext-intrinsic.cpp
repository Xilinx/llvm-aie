// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 4
//===- aie2-upd-ext-intrinsic.cpp -------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//

// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s
// Conversions

// v128uint4

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z21test_extract_v64uint4Dv64_DU8_i(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT4DV64_DU8_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT4DV64_DU8_I_EXIT]]
// CHECK:       _ZL16extract_v64uint4Dv64_DU8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v64uint4 test_extract_v64uint4(v128uint4 a, int idx) {
  return extract_v64uint4(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_insertDv64_DU8_iDv32_S_(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_DU8_IDV32_S__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_DU8_IDV32_S__EXIT]]
// CHECK:       _ZL6insertDv64_DU8_iDv32_S_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP3]]
//
v128uint4 test_insert(v128uint4 a, int idx, v64uint4 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z18test_set_v128uint4iDv32_DU8_(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT4IDV32_DU8__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT4IDV32_DU8__EXIT]]
// CHECK:       _ZL13set_v128uint4iDv32_DU8_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v128uint4 test_set_v128uint4(int idx, v64uint4 b) {
  return set_v128uint4(idx, b);
}

// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_concatDv32_DU8_S0_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[SHUFFLE_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v128uint4 test_concat(v64uint4 a0, v64uint4 a1) { return concat(a0, a1); }

// v128int4

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z20test_extract_v64int4Dv64_DB8_i(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT4DV64_DB8_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT4DV64_DB8_I_EXIT]]
// CHECK:       _ZL15extract_v64int4Dv64_DB8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v64int4 test_extract_v64int4(v128int4 a, int idx) {
  return extract_v64int4(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_insertDv64_DB8_iDv32_S_(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_DB8_IDV32_S__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_DB8_IDV32_S__EXIT]]
// CHECK:       _ZL6insertDv64_DB8_iDv32_S_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP3]]
//
v128int4 test_insert(v128int4 a, int idx, v64int4 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z17test_set_v128int4iDv32_DB8_(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT4IDV32_DB8__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT4IDV32_DB8__EXIT]]
// CHECK:       _ZL12set_v128int4iDv32_DB8_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v128int4 test_set_v128int4(int idx, v64int4 b) { return set_v128int4(idx, b); }

// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_concatDv32_DB8_S0_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[SHUFFLE_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v128int4 test_concat(v64int4 a0, v64int4 a1) { return concat(a0, a1); }

// v64uint8

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z21test_extract_v32uint8Dv64_hi(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32UINT8DV64_HI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32UINT8DV64_HI_EXIT]]
// CHECK:       _ZL16extract_v32uint8Dv64_hi.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32uint8 test_extract_v32uint8(v64uint8 a, int idx) {
  return extract_v32uint8(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_insertDv64_hiDv32_h(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_HIDV32_H_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_HIDV32_H_EXIT]]
// CHECK:       _ZL6insertDv64_hiDv32_h.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP3]]
//
v64uint8 test_insert(v64uint8 a, int idx, v32uint8 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z17test_set_v64uint8iDv32_h(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V64UINT8IDV32_H_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL12SET_V64UINT8IDV32_H_EXIT]]
// CHECK:       _ZL12set_v64uint8iDv32_h.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v64uint8 test_set_v64uint8(int idx, v32uint8 b) { return set_v64uint8(idx, b); }

// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_concatDv32_hS_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[SHUFFLE_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v64uint8 test_concat(v32uint8 a0, v32uint8 a1) { return concat(a0, a1); }

// v64int8

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z20test_extract_v32int8Dv64_ai(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V32INT8DV64_AI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V32INT8DV64_AI_EXIT]]
// CHECK:       _ZL15extract_v32int8Dv64_ai.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32int8 test_extract_v32int8(v64int8 a, int idx) {
  return extract_v32int8(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_insertDv64_aiDv32_a(
// CHECK-SAME: <64 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_AIDV32_A_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_AIDV32_A_EXIT]]
// CHECK:       _ZL6insertDv64_aiDv32_a.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP3]]
//
v64int8 test_insert(v64int8 a, int idx, v32int8 b) { return insert(a, idx, b); }

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z16test_set_v64int8iDv32_a(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL11SET_V64INT8IDV32_A_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL11SET_V64INT8IDV32_A_EXIT]]
// CHECK:       _ZL11set_v64int8iDv32_a.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v64int8 test_set_v64int8(int idx, v32int8 b) { return set_v64int8(idx, b); }

// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z11test_concatDv32_aS_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[SHUFFLE_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v64int8 test_concat(v32int8 a0, v32int8 a1) { return concat(a0, a1); }

// v32uint16

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x i16> @_Z22test_extract_v16uint16Dv32_ti(
// CHECK-SAME: <32 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT16DV32_TI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT16DV32_TI_EXIT]]
// CHECK:       _ZL17extract_v16uint16Dv32_ti.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <16 x i16>
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_extract_v16uint16(v32uint16 a, int idx) {
  return extract_v16uint16(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z11test_insertDv32_tiDv16_t(
// CHECK-SAME: <32 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_TIDV16_T_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_TIDV16_T_EXIT]]
// CHECK:       _ZL6insertDv32_tiDv16_t.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP3]]
//
v32uint16 test_insert(v32uint16 a, int idx, v16uint16 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z18test_set_v32uint16iDv16_t(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT16IDV16_T_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT16IDV16_T_EXIT]]
// CHECK:       _ZL13set_v32uint16iDv16_t.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32uint16 test_set_v32uint16(int idx, v16uint16 b) {
  return set_v32uint16(idx, b);
}

// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z11test_concatDv16_tS_(
// CHECK-SAME: <16 x i16> noundef [[A0:%.*]], <16 x i16> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[SHUFFLE_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32uint16 test_concat(v16uint16 a0, v16uint16 a1) { return concat(a0, a1); }

// v32int16

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x i16> @_Z21test_extract_v16int16Dv32_si(
// CHECK-SAME: <32 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT16DV32_SI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT16DV32_SI_EXIT]]
// CHECK:       _ZL16extract_v16int16Dv32_si.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <16 x i16>
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_extract_v16int16(v32int16 a, int idx) {
  return extract_v16int16(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z11test_insertDv32_siDv16_s(
// CHECK-SAME: <32 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_SIDV16_S_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_SIDV16_S_EXIT]]
// CHECK:       _ZL6insertDv32_siDv16_s.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP3]]
//
v32int16 test_insert(v32int16 a, int idx, v16int16 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z17test_set_v32int16iDv16_s(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT16IDV16_S_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT16IDV16_S_EXIT]]
// CHECK:       _ZL12set_v32int16iDv16_s.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32int16 test_set_v32int16(int idx, v16int16 b) { return set_v32int16(idx, b); }

// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z11test_concatDv16_sS_(
// CHECK-SAME: <16 x i16> noundef [[A0:%.*]], <16 x i16> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[SHUFFLE_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32int16 test_concat(v16int16 a0, v16int16 a1) { return concat(a0, a1); }

// v16uint32

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i32> @_Z21test_extract_v8uint32Dv16_ji(
// CHECK-SAME: <16 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[A]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V8UINT32DV16_JI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[A]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V8UINT32DV16_JI_EXIT]]
// CHECK:       _ZL16extract_v8uint32Dv16_ji.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <8 x i32> [[RETVAL_0_I_I]]
//
v8uint32 test_extract_v8uint32(v16uint32 a, int idx) {
  return extract_v8uint32(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z11test_insertDv16_jiDv8_j(
// CHECK-SAME: <16 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[A]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_JIDV8_J_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[A]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_JIDV8_J_EXIT]]
// CHECK:       _ZL6insertDv16_jiDv8_j.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <16 x i32> [[RETVAL_0_I_I]]
//
v16uint32 test_insert(v16uint32 a, int idx, v8uint32 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z18test_set_v16uint32iDv8_j(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V16UINT32IDV8_J_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL13SET_V16UINT32IDV8_J_EXIT]]
// CHECK:       _ZL13set_v16uint32iDv8_j.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <16 x i32> [[RETVAL_0_I_I]]
//
v16uint32 test_set_v16uint32(int idx, v8uint32 b) {
  return set_v16uint32(idx, b);
}

// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z11test_concatDv8_jS_(
// CHECK-SAME: <8 x i32> noundef [[A0:%.*]], <8 x i32> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[A0]], <8 x i32> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i32> [[SHUFFLE_I_I]]
//
v16uint32 test_concat(v8uint32 a0, v8uint32 a1) { return concat(a0, a1); }

// v16int32

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i32> @_Z20test_extract_v8int32Dv16_ii(
// CHECK-SAME: <16 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[A]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8INT32DV16_II_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[A]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8INT32DV16_II_EXIT]]
// CHECK:       _ZL15extract_v8int32Dv16_ii.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <8 x i32> [[RETVAL_0_I_I]]
//
v8int32 test_extract_v8int32(v16int32 a, int idx) {
  return extract_v8int32(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z11test_insertDv16_iiDv8_i(
// CHECK-SAME: <16 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[A]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_IIDV8_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[A]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_IIDV8_I_EXIT]]
// CHECK:       _ZL6insertDv16_iiDv8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <16 x i32> [[RETVAL_0_I_I]]
//
v16int32 test_insert(v16int32 a, int idx, v8int32 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z17test_set_v16int32iDv8_i(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V16INT32IDV8_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL12SET_V16INT32IDV8_I_EXIT]]
// CHECK:       _ZL12set_v16int32iDv8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <16 x i32> [[RETVAL_0_I_I]]
//
v16int32 test_set_v16int32(int idx, v8int32 b) { return set_v16int32(idx, b); }

// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z11test_concatDv8_iS_(
// CHECK-SAME: <8 x i32> noundef [[A0:%.*]], <8 x i32> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[A0]], <8 x i32> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i32> [[SHUFFLE_I_I]]
//
v16int32 test_concat(v8int32 a0, v8int32 a1) { return concat(a0, a1); }

// v32bfloat16

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x bfloat> @_Z24test_extract_v16bfloat16Dv32_u6__bf16i(
// CHECK-SAME: <32 x bfloat> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x bfloat> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16BFLOAT16DV32_U6__BF16I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16BFLOAT16DV32_U6__BF16I_EXIT]]
// CHECK:       _ZL19extract_v16bfloat16Dv32_u6__bf16i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <16 x bfloat>
// CHECK-NEXT:    ret <16 x bfloat> [[TMP2]]
//
v16bfloat16 test_extract_v16bfloat16(v32bfloat16 a, int idx) {
  return extract_v16bfloat16(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x bfloat> @_Z11test_insertDv32_u6__bf16iDv16_u6__bf16(
// CHECK-SAME: <32 x bfloat> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x bfloat> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x bfloat> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x bfloat> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U6__BF16IDV16_U6__BF16_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U6__BF16IDV16_U6__BF16_EXIT]]
// CHECK:       _ZL6insertDv32_u6__bf16iDv16_u6__bf16.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x bfloat>
// CHECK-NEXT:    ret <32 x bfloat> [[TMP3]]
//
v32bfloat16 test_insert(v32bfloat16 a, int idx, v16bfloat16 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <32 x bfloat> @_Z20test_set_v32bfloat16iDv16_u6__bf16(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x bfloat> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x bfloat> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V32BFLOAT16IDV16_U6__BF16_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15SET_V32BFLOAT16IDV16_U6__BF16_EXIT]]
// CHECK:       _ZL15set_v32bfloat16iDv16_u6__bf16.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x bfloat>
// CHECK-NEXT:    ret <32 x bfloat> [[TMP2]]
//
v32bfloat16 test_set_v32bfloat16(int idx, v16bfloat16 b) {
  return set_v32bfloat16(idx, b);
}

// CHECK-LABEL: define dso_local noundef <32 x bfloat> @_Z11test_concatDv16_u6__bf16S_(
// CHECK-SAME: <16 x bfloat> noundef [[A0:%.*]], <16 x bfloat> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x bfloat> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x bfloat> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[SHUFFLE_I_I]] to <32 x bfloat>
// CHECK-NEXT:    ret <32 x bfloat> [[TMP2]]
//
v32bfloat16 test_concat(v16bfloat16 a0, v16bfloat16 a1) {
  return concat(a0, a1);
}

// v16float

//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x float> @_Z20test_extract_v8floatDv16_fi(
// CHECK-SAME: <16 x float> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x float> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8FLOATDV16_FI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8FLOATDV16_FI_EXIT]]
// CHECK:       _ZL15extract_v8floatDv16_fi.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <8 x float>
// CHECK-NEXT:    ret <8 x float> [[TMP2]]
//
v8float test_extract_v8float(v16float a, int idx) {
  return extract_v8float(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x float> @_Z11test_insertDv16_fiDv8_f(
// CHECK-SAME: <16 x float> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x float> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x float> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x float> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_FIDV8_F_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_FIDV8_F_EXIT]]
// CHECK:       _ZL6insertDv16_fiDv8_f.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <16 x float>
// CHECK-NEXT:    ret <16 x float> [[TMP3]]
//
v16float test_insert(v16float a, int idx, v8float b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <16 x float> @_Z17test_set_v16floatiDv8_f(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x float> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x float> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V16FLOATIDV8_F_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL12SET_V16FLOATIDV8_F_EXIT]]
// CHECK:       _ZL12set_v16floatiDv8_f.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <16 x float>
// CHECK-NEXT:    ret <16 x float> [[TMP2]]
//
v16float test_set_v16float(int idx, v8float b) { return set_v16float(idx, b); }

// CHECK-LABEL: define dso_local noundef <16 x float> @_Z11test_concatDv8_fS_(
// CHECK-SAME: <8 x float> noundef [[A0:%.*]], <8 x float> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_UNCASTED_I:%.*]] = shufflevector <8 x float> [[A0]], <8 x float> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x float> [[SHUFFLE_I_UNCASTED_I]]
//
v16float test_concat(v8float a0, v8float a1) { return concat(a0, a1); }

// v256uint4

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z21test_extract_v64uint4Dv128_DU8_i(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT4DV128_DU8_I_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT4DV128_DU8_I_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT4DV128_DU8_I_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT4DV128_DU8_I_EXIT]]
// CHECK:       _ZL16extract_v64uint4Dv128_DU8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP1]]
//
v64uint4 test_extract_v64uint4(v256uint4 a, int idx) {
  return extract_v64uint4(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_DU8_iDv32_S_(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DU8_IDV32_S__EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DU8_IDV32_S__EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DU8_IDV32_S__EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DU8_IDV32_S__EXIT]]
// CHECK:       _ZL6insertDv128_DU8_iDv32_S_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v256uint4 test_insert(v256uint4 a, int idx, v64uint4 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z18test_set_v256uint4iDv32_DU8_(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V256UINT4IDV32_DU8__EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V256UINT4IDV32_DU8__EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V256UINT4IDV32_DU8__EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V256UINT4IDV32_DU8__EXIT]]
// CHECK:       _ZL13set_v256uint4iDv32_DU8_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP1]]
//
v256uint4 test_set_v256uint4(int idx, v64uint4 b) {
  return set_v256uint4(idx, b);
}

// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv32_DU8_S0_S0_S0_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]], <32 x i8> noundef [[A2:%.*]], <32 x i8> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i8> [[A2]] to <8 x i32>
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i8> [[A3]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> [[TMP3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[SHUFFLE2_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v256uint4 test_concat(v64uint4 a0, v64uint4 a1, v64uint4 a2, v64uint4 a3) {
  return concat(a0, a1, a2, a3);
}

// v256uint4

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z22test_extract_v128uint4Dv128_DU8_i(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V128UINT4DV128_DU8_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V128UINT4DV128_DU8_I_EXIT]]
// CHECK:       _ZL17extract_v128uint4Dv128_DU8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v128uint4 test_extract_v128uint4(v256uint4 a, int idx) {
  return extract_v128uint4(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_DU8_iDv64_S_(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DU8_IDV64_S__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DU8_IDV64_S__EXIT]]
// CHECK:       _ZL6insertDv128_DU8_iDv64_S_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP3]]
//
v256uint4 test_insert(v256uint4 a, int idx, v128uint4 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z18test_set_v256uint4iDv64_DU8_(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V256UINT4IDV64_DU8__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V256UINT4IDV64_DU8__EXIT]]
// CHECK:       _ZL13set_v256uint4iDv64_DU8_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v256uint4 test_set_v256uint4(int idx, v128uint4 b) {
  return set_v256uint4(idx, b);
}

// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv64_DU8_S0_(
// CHECK-SAME: <64 x i8> noundef [[A0:%.*]], <64 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A0]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[A1]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> [[TMP1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[SHUFFLE_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v256uint4 test_concat(v128uint4 a0, v128uint4 a1) { return concat(a0, a1); }

// v256int4

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z20test_extract_v64int4Dv128_DB8_i(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT4DV128_DB8_I_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT4DV128_DB8_I_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT4DV128_DB8_I_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT4DV128_DB8_I_EXIT]]
// CHECK:       _ZL15extract_v64int4Dv128_DB8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP1]]
//
v64int4 test_extract_v64int4(v256int4 a, int idx) {
  return extract_v64int4(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_DB8_iDv32_S_(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DB8_IDV32_S__EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DB8_IDV32_S__EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DB8_IDV32_S__EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DB8_IDV32_S__EXIT]]
// CHECK:       _ZL6insertDv128_DB8_iDv32_S_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v256int4 test_insert(v256int4 a, int idx, v64int4 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z17test_set_v256int4iDv32_DB8_(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V256INT4IDV32_DB8__EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V256INT4IDV32_DB8__EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V256INT4IDV32_DB8__EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V256INT4IDV32_DB8__EXIT]]
// CHECK:       _ZL12set_v256int4iDv32_DB8_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP1]]
//
v256int4 test_set_v256int4(int idx, v64int4 b) { return set_v256int4(idx, b); }

// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv32_DB8_S0_S0_S0_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]], <32 x i8> noundef [[A2:%.*]], <32 x i8> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i8> [[A2]] to <8 x i32>
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i8> [[A3]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> [[TMP3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[SHUFFLE2_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v256int4 test_concat(v64int4 a0, v64int4 a1, v64int4 a2, v64int4 a3) {
  return concat(a0, a1, a2, a3);
}

// v256int4

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z21test_extract_v128int4Dv128_DB8_i(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V128INT4DV128_DB8_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V128INT4DV128_DB8_I_EXIT]]
// CHECK:       _ZL16extract_v128int4Dv128_DB8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v128int4 test_extract_v128int4(v256int4 a, int idx) {
  return extract_v128int4(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_DB8_iDv64_S_(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DB8_IDV64_S__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_DB8_IDV64_S__EXIT]]
// CHECK:       _ZL6insertDv128_DB8_iDv64_S_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP3]]
//
v256int4 test_insert(v256int4 a, int idx, v128int4 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z17test_set_v256int4iDv64_DB8_(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V256INT4IDV64_DB8__EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V256INT4IDV64_DB8__EXIT]]
// CHECK:       _ZL12set_v256int4iDv64_DB8_.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v256int4 test_set_v256int4(int idx, v128int4 b) { return set_v256int4(idx, b); }

// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv64_DB8_S0_(
// CHECK-SAME: <64 x i8> noundef [[A0:%.*]], <64 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A0]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[A1]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> [[TMP1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[SHUFFLE_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v256int4 test_concat(v128int4 a0, v128int4 a1) { return concat(a0, a1); }

// v128uint8

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z21test_extract_v32uint8Dv128_hi(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32UINT8DV128_HI_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32UINT8DV128_HI_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32UINT8DV128_HI_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32UINT8DV128_HI_EXIT]]
// CHECK:       _ZL16extract_v32uint8Dv128_hi.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP1]]
//
v32uint8 test_extract_v32uint8(v128uint8 a, int idx) {
  return extract_v32uint8(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_hiDv32_h(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_HIDV32_H_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_HIDV32_H_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_HIDV32_H_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_HIDV32_H_EXIT]]
// CHECK:       _ZL6insertDv128_hiDv32_h.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v128uint8 test_insert(v128uint8 a, int idx, v32uint8 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z18test_set_v128uint8iDv32_h(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT8IDV32_H_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT8IDV32_H_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT8IDV32_H_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT8IDV32_H_EXIT]]
// CHECK:       _ZL13set_v128uint8iDv32_h.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP1]]
//
v128uint8 test_set_v128uint8(int idx, v32uint8 b) {
  return set_v128uint8(idx, b);
}

//
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv32_hS_S_S_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]], <32 x i8> noundef [[A2:%.*]], <32 x i8> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i8> [[A2]] to <8 x i32>
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i8> [[A3]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> [[TMP3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[SHUFFLE2_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v128uint8 test_concat(v32uint8 a0, v32uint8 a1, v32uint8 a2, v32uint8 a3) {
  return concat(a0, a1, a2, a3);
}

// v128uint8

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z21test_extract_v64uint8Dv128_hi(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT8DV128_HI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V64UINT8DV128_HI_EXIT]]
// CHECK:       _ZL16extract_v64uint8Dv128_hi.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v64uint8 test_extract_v64uint8(v128uint8 a, int idx) {
  return extract_v64uint8(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_hiDv64_h(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_HIDV64_H_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_HIDV64_H_EXIT]]
// CHECK:       _ZL6insertDv128_hiDv64_h.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP3]]
//
v128uint8 test_insert(v128uint8 a, int idx, v64uint8 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z18test_set_v128uint8iDv64_h(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT8IDV64_H_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V128UINT8IDV64_H_EXIT]]
// CHECK:       _ZL13set_v128uint8iDv64_h.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v128uint8 test_set_v128uint8(int idx, v64uint8 b) {
  return set_v128uint8(idx, b);
}

// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv64_hS_(
// CHECK-SAME: <64 x i8> noundef [[A0:%.*]], <64 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A0]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[A1]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> [[TMP1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[SHUFFLE_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v128uint8 test_concat(v64uint8 a0, v64uint8 a1) { return concat(a0, a1); }

// v128int8

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i8> @_Z20test_extract_v32int8Dv128_ai(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V32INT8DV128_AI_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V32INT8DV128_AI_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V32INT8DV128_AI_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V32INT8DV128_AI_EXIT]]
// CHECK:       _ZL15extract_v32int8Dv128_ai.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP1]]
//
v32int8 test_extract_v32int8(v128int8 a, int idx) {
  return extract_v32int8(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_aiDv32_a(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_AIDV32_A_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_AIDV32_A_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_AIDV32_A_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_AIDV32_A_EXIT]]
// CHECK:       _ZL6insertDv128_aiDv32_a.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v128int8 test_insert(v128int8 a, int idx, v32int8 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z17test_set_v128int8iDv32_a(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT8IDV32_A_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT8IDV32_A_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT8IDV32_A_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT8IDV32_A_EXIT]]
// CHECK:       _ZL12set_v128int8iDv32_a.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP1]]
//
v128int8 test_set_v128int8(int idx, v32int8 b) { return set_v128int8(idx, b); }

// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv32_aS_S_S_(
// CHECK-SAME: <32 x i8> noundef [[A0:%.*]], <32 x i8> noundef [[A1:%.*]], <32 x i8> noundef [[A2:%.*]], <32 x i8> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i8> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i8> [[A2]] to <8 x i32>
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i8> [[A3]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> [[TMP3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[SHUFFLE2_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v128int8 test_concat(v32int8 a0, v32int8 a1, v32int8 a2, v32int8 a3) {
  return concat(a0, a1, a2, a3);
}

// v128int8

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i8> @_Z20test_extract_v64int8Dv128_ai(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT8DV128_AI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V64INT8DV128_AI_EXIT]]
// CHECK:       _ZL15extract_v64int8Dv128_ai.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP2]]
//
v64int8 test_extract_v64int8(v128int8 a, int idx) {
  return extract_v64int8(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_insertDv128_aiDv64_a(
// CHECK-SAME: <128 x i8> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_AIDV64_A_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV128_AIDV64_A_EXIT]]
// CHECK:       _ZL6insertDv128_aiDv64_a.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP3]]
//
v128int8 test_insert(v128int8 a, int idx, v64int8 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z17test_set_v128int8iDv64_a(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <64 x i8> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT8IDV64_A_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V128INT8IDV64_A_EXIT]]
// CHECK:       _ZL12set_v128int8iDv64_a.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v128int8 test_set_v128int8(int idx, v64int8 b) { return set_v128int8(idx, b); }

// CHECK-LABEL: define dso_local noundef <128 x i8> @_Z11test_concatDv64_aS_(
// CHECK-SAME: <64 x i8> noundef [[A0:%.*]], <64 x i8> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A0]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <64 x i8> [[A1]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> [[TMP1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[SHUFFLE_I_I]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP2]]
//
v128int8 test_concat(v64int8 a0, v64int8 a1) { return concat(a0, a1); }

// v64uint16

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i16> @_Z22test_extract_v16uint16Dv64_ti(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT16DV64_TI_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT16DV64_TI_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT16DV64_TI_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT16DV64_TI_EXIT]]
// CHECK:       _ZL17extract_v16uint16Dv64_ti.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <16 x i16>
// CHECK-NEXT:    ret <16 x i16> [[TMP1]]
//
v16uint16 test_extract_v16uint16(v64uint16 a, int idx) {
  return extract_v16uint16(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_insertDv64_tiDv16_t(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_TIDV16_T_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_TIDV16_T_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_TIDV16_T_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_TIDV16_T_EXIT]]
// CHECK:       _ZL6insertDv64_tiDv16_t.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP2]]
//
v64uint16 test_insert(v64uint16 a, int idx, v16uint16 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z18test_set_v64uint16iDv16_t(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V64UINT16IDV16_T_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V64UINT16IDV16_T_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V64UINT16IDV16_T_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V64UINT16IDV16_T_EXIT]]
// CHECK:       _ZL13set_v64uint16iDv16_t.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP1]]
//
v64uint16 test_set_v64uint16(int idx, v16uint16 b) {
  return set_v64uint16(idx, b);
}

// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_concatDv16_tS_S_S_(
// CHECK-SAME: <16 x i16> noundef [[A0:%.*]], <16 x i16> noundef [[A1:%.*]], <16 x i16> noundef [[A2:%.*]], <16 x i16> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i16> [[A2]] to <8 x i32>
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i16> [[A3]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> [[TMP3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[SHUFFLE2_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP4]]
//
v64uint16 test_concat(v16uint16 a0, v16uint16 a1, v16uint16 a2, v16uint16 a3) {
  return concat(a0, a1, a2, a3);
}

// v64uint16

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z22test_extract_v32uint16Dv64_ti(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V32UINT16DV64_TI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V32UINT16DV64_TI_EXIT]]
// CHECK:       _ZL17extract_v32uint16Dv64_ti.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32uint16 test_extract_v32uint16(v64uint16 a, int idx) {
  return extract_v32uint16(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_insertDv64_tiDv32_t(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_TIDV32_T_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_TIDV32_T_EXIT]]
// CHECK:       _ZL6insertDv64_tiDv32_t.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP3]]
//
v64uint16 test_insert(v64uint16 a, int idx, v32uint16 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z18test_set_v64uint16iDv32_t(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V64UINT16IDV32_T_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V64UINT16IDV32_T_EXIT]]
// CHECK:       _ZL13set_v64uint16iDv32_t.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP2]]
//
v64uint16 test_set_v64uint16(int idx, v32uint16 b) {
  return set_v64uint16(idx, b);
}

// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_concatDv32_tS_(
// CHECK-SAME: <32 x i16> noundef [[A0:%.*]], <32 x i16> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A0]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[A1]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> [[TMP1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[SHUFFLE_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP2]]
//
v64uint16 test_concat(v32uint16 a0, v32uint16 a1) { return concat(a0, a1); }

// v64int16

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i16> @_Z21test_extract_v16int16Dv64_si(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT16DV64_SI_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT16DV64_SI_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT16DV64_SI_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT16DV64_SI_EXIT]]
// CHECK:       _ZL16extract_v16int16Dv64_si.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <16 x i16>
// CHECK-NEXT:    ret <16 x i16> [[TMP1]]
//
v16int16 test_extract_v16int16(v64int16 a, int idx) {
  return extract_v16int16(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
//
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_insertDv64_siDv16_s(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_SIDV16_S_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_SIDV16_S_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_SIDV16_S_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_SIDV16_S_EXIT]]
// CHECK:       _ZL6insertDv64_siDv16_s.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP2]]
//
v64int16 test_insert(v64int16 a, int idx, v16int16 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z17test_set_v64int16iDv16_s(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V64INT16IDV16_S_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V64INT16IDV16_S_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V64INT16IDV16_S_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V64INT16IDV16_S_EXIT]]
// CHECK:       _ZL12set_v64int16iDv16_s.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP1]]
//
v64int16 test_set_v64int16(int idx, v16int16 b) { return set_v64int16(idx, b); }

// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_concatDv16_sS_S_S_(
// CHECK-SAME: <16 x i16> noundef [[A0:%.*]], <16 x i16> noundef [[A1:%.*]], <16 x i16> noundef [[A2:%.*]], <16 x i16> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i16> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i16> [[A2]] to <8 x i32>
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i16> [[A3]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> [[TMP3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[SHUFFLE2_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP4]]
//
v64int16 test_concat(v16int16 a0, v16int16 a1, v16int16 a2, v16int16 a3) {
  return concat(a0, a1, a2, a3);
}

// v64int16

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i16> @_Z21test_extract_v32int16Dv64_si(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32INT16DV64_SI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V32INT16DV64_SI_EXIT]]
// CHECK:       _ZL16extract_v32int16Dv64_si.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32int16 test_extract_v32int16(v64int16 a, int idx) {
  return extract_v32int16(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_insertDv64_siDv32_s(
// CHECK-SAME: <64 x i16> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_SIDV32_S_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_SIDV32_S_EXIT]]
// CHECK:       _ZL6insertDv64_siDv32_s.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP3]]
//
v64int16 test_insert(v64int16 a, int idx, v32int16 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z17test_set_v64int16iDv32_s(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x i16> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V64INT16IDV32_S_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V64INT16IDV32_S_EXIT]]
// CHECK:       _ZL12set_v64int16iDv32_s.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP2]]
//
v64int16 test_set_v64int16(int idx, v32int16 b) { return set_v64int16(idx, b); }

// CHECK-LABEL: define dso_local noundef <64 x i16> @_Z11test_concatDv32_sS_(
// CHECK-SAME: <32 x i16> noundef [[A0:%.*]], <32 x i16> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A0]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[A1]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> [[TMP1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[SHUFFLE_I_I]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP2]]
//
v64int16 test_concat(v32int16 a0, v32int16 a1) { return concat(a0, a1); }

// v32uint32

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <8 x i32> @_Z21test_extract_v8uint32Dv32_ji(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V8UINT32DV32_JI_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V8UINT32DV32_JI_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V8UINT32DV32_JI_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V8UINT32DV32_JI_EXIT]]
// CHECK:       _ZL16extract_v8uint32Dv32_ji.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <8 x i32> [[RETVAL_0_I_I]]
//
v8uint32 test_extract_v8uint32(v32uint32 a, int idx) {
  return extract_v8uint32(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_insertDv32_jiDv8_j(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_JIDV8_J_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_JIDV8_J_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_JIDV8_J_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_JIDV8_J_EXIT]]
// CHECK:       _ZL6insertDv32_jiDv8_j.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32uint32 test_insert(v32uint32 a, int idx, v8uint32 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z18test_set_v32uint32iDv8_j(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT32IDV8_J_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT32IDV8_J_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT32IDV8_J_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT32IDV8_J_EXIT]]
// CHECK:       _ZL13set_v32uint32iDv8_j.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32uint32 test_set_v32uint32(int idx, v8uint32 b) {
  return set_v32uint32(idx, b);
}

// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_concatDv8_jS_S_S_(
// CHECK-SAME: <8 x i32> noundef [[A0:%.*]], <8 x i32> noundef [[A1:%.*]], <8 x i32> noundef [[A2:%.*]], <8 x i32> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[A0]], <8 x i32> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[A2]], <8 x i32> [[A3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    ret <32 x i32> [[SHUFFLE2_I_I]]
//
v32uint32 test_concat(v8uint32 a0, v8uint32 a1, v8uint32 a2, v8uint32 a3) {
  return concat(a0, a1, a2, a3);
}

// v32uint32

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z22test_extract_v16uint32Dv32_ji(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT32DV32_JI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL17EXTRACT_V16UINT32DV32_JI_EXIT]]
// CHECK:       _ZL17extract_v16uint32Dv32_ji.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <16 x i32> [[RETVAL_0_I_I]]
//
v16uint32 test_extract_v16uint32(v32uint32 a, int idx) {
  return extract_v16uint32(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_insertDv32_jiDv16_j(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[B]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[A]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_JIDV16_J_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_JIDV16_J_EXIT]]
// CHECK:       _ZL6insertDv32_jiDv16_j.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32uint32 test_insert(v32uint32 a, int idx, v16uint32 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z18test_set_v32uint32iDv16_j(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[B]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT32IDV16_J_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[B]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL13SET_V32UINT32IDV16_J_EXIT]]
// CHECK:       _ZL13set_v32uint32iDv16_j.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32uint32 test_set_v32uint32(int idx, v16uint32 b) {
  return set_v32uint32(idx, b);
}

// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_concatDv16_jS_(
// CHECK-SAME: <16 x i32> noundef [[A0:%.*]], <16 x i32> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[A0]], <16 x i32> [[A1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    ret <32 x i32> [[SHUFFLE_I_I]]
//
v32uint32 test_concat(v16uint32 a0, v16uint32 a1) { return concat(a0, a1); }

// v32int32

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <8 x i32> @_Z20test_extract_v8int32Dv32_ii(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8INT32DV32_II_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8INT32DV32_II_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8INT32DV32_II_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8INT32DV32_II_EXIT]]
// CHECK:       _ZL15extract_v8int32Dv32_ii.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <8 x i32> [[RETVAL_0_I_I]]
//
v8int32 test_extract_v8int32(v32int32 a, int idx) {
  return extract_v8int32(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_insertDv32_iiDv8_i(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_IIDV8_I_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_IIDV8_I_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_IIDV8_I_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_IIDV8_I_EXIT]]
// CHECK:       _ZL6insertDv32_iiDv8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32int32 test_insert(v32int32 a, int idx, v8int32 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z17test_set_v32int32iDv8_i(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT32IDV8_I_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT32IDV8_I_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT32IDV8_I_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[B]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT32IDV8_I_EXIT]]
// CHECK:       _ZL12set_v32int32iDv8_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32int32 test_set_v32int32(int idx, v8int32 b) { return set_v32int32(idx, b); }

// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_concatDv8_iS_S_S_(
// CHECK-SAME: <8 x i32> noundef [[A0:%.*]], <8 x i32> noundef [[A1:%.*]], <8 x i32> noundef [[A2:%.*]], <8 x i32> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[A0]], <8 x i32> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[A2]], <8 x i32> [[A3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    ret <32 x i32> [[SHUFFLE2_I_I]]
//
v32int32 test_concat(v8int32 a0, v8int32 a1, v8int32 a2, v8int32 a3) {
  return concat(a0, a1, a2, a3);
}

// v32int32

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i32> @_Z21test_extract_v16int32Dv32_ii(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT32DV32_II_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[A]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16INT32DV32_II_EXIT]]
// CHECK:       _ZL16extract_v16int32Dv32_ii.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <16 x i32> [[RETVAL_0_I_I]]
//
v16int32 test_extract_v16int32(v32int32 a, int idx) {
  return extract_v16int32(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_insertDv32_iiDv16_i(
// CHECK-SAME: <32 x i32> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[B]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[A]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_IIDV16_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[A]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_IIDV16_I_EXIT]]
// CHECK:       _ZL6insertDv32_iiDv16_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32int32 test_insert(v32int32 a, int idx, v16int32 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z17test_set_v32int32iDv16_i(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x i32> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[B]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT32IDV16_I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[B]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32INT32IDV16_I_EXIT]]
// CHECK:       _ZL12set_v32int32iDv16_i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    ret <32 x i32> [[RETVAL_0_I_I]]
//
v32int32 test_set_v32int32(int idx, v16int32 b) { return set_v32int32(idx, b); }

// CHECK-LABEL: define dso_local noundef <32 x i32> @_Z11test_concatDv16_iS_(
// CHECK-SAME: <16 x i32> noundef [[A0:%.*]], <16 x i32> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[A0]], <16 x i32> [[A1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    ret <32 x i32> [[SHUFFLE_I_I]]
//
v32int32 test_concat(v16int32 a0, v16int32 a1) { return concat(a0, a1); }

// v64bfloat16

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x bfloat> @_Z24test_extract_v16bfloat16Dv64_u6__bf16i(
// CHECK-SAME: <64 x bfloat> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x bfloat> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16BFLOAT16DV64_U6__BF16I_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16BFLOAT16DV64_U6__BF16I_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16BFLOAT16DV64_U6__BF16I_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16BFLOAT16DV64_U6__BF16I_EXIT]]
// CHECK:       _ZL19extract_v16bfloat16Dv64_u6__bf16i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <16 x bfloat>
// CHECK-NEXT:    ret <16 x bfloat> [[TMP1]]
//
v16bfloat16 test_extract_v16bfloat16(v64bfloat16 a, int idx) {
  return extract_v16bfloat16(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x bfloat> @_Z11test_insertDv64_u6__bf16iDv16_u6__bf16(
// CHECK-SAME: <64 x bfloat> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x bfloat> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x bfloat> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x bfloat> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_U6__BF16IDV16_U6__BF16_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_U6__BF16IDV16_U6__BF16_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_U6__BF16IDV16_U6__BF16_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_U6__BF16IDV16_U6__BF16_EXIT]]
// CHECK:       _ZL6insertDv64_u6__bf16iDv16_u6__bf16.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x bfloat>
// CHECK-NEXT:    ret <64 x bfloat> [[TMP2]]
//
v64bfloat16 test_insert(v64bfloat16 a, int idx, v16bfloat16 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x bfloat> @_Z20test_set_v64bfloat16iDv16_u6__bf16(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x bfloat> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x bfloat> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15SET_V64BFLOAT16IDV16_U6__BF16_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15SET_V64BFLOAT16IDV16_U6__BF16_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V64BFLOAT16IDV16_U6__BF16_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V64BFLOAT16IDV16_U6__BF16_EXIT]]
// CHECK:       _ZL15set_v64bfloat16iDv16_u6__bf16.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x bfloat>
// CHECK-NEXT:    ret <64 x bfloat> [[TMP1]]
//
v64bfloat16 test_set_v64bfloat16(int idx, v16bfloat16 b) {
  return set_v64bfloat16(idx, b);
}

// CHECK-LABEL: define dso_local noundef <64 x bfloat> @_Z11test_concatDv16_u6__bf16S_S_S_(
// CHECK-SAME: <16 x bfloat> noundef [[A0:%.*]], <16 x bfloat> noundef [[A1:%.*]], <16 x bfloat> noundef [[A2:%.*]], <16 x bfloat> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x bfloat> [[A0]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x bfloat> [[A1]] to <8 x i32>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x bfloat> [[A2]] to <8 x i32>
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x bfloat> [[A3]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> [[TMP3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[SHUFFLE1_I_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[SHUFFLE2_I_I]] to <64 x bfloat>
// CHECK-NEXT:    ret <64 x bfloat> [[TMP4]]
//
v64bfloat16 test_concat(v16bfloat16 a0, v16bfloat16 a1, v16bfloat16 a2,
                        v16bfloat16 a3) {
  return concat(a0, a1, a2, a3);
}

// v64bfloat16

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x bfloat> @_Z24test_extract_v32bfloat16Dv64_u6__bf16i(
// CHECK-SAME: <64 x bfloat> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x bfloat> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V32BFLOAT16DV64_U6__BF16I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V32BFLOAT16DV64_U6__BF16I_EXIT]]
// CHECK:       _ZL19extract_v32bfloat16Dv64_u6__bf16i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <32 x bfloat>
// CHECK-NEXT:    ret <32 x bfloat> [[TMP2]]
//
v32bfloat16 test_extract_v32bfloat16(v64bfloat16 a, int idx) {
  return extract_v32bfloat16(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x bfloat> @_Z11test_insertDv64_u6__bf16iDv32_u6__bf16(
// CHECK-SAME: <64 x bfloat> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <32 x bfloat> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x bfloat> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x bfloat> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_U6__BF16IDV32_U6__BF16_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV64_U6__BF16IDV32_U6__BF16_EXIT]]
// CHECK:       _ZL6insertDv64_u6__bf16iDv32_u6__bf16.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x bfloat>
// CHECK-NEXT:    ret <64 x bfloat> [[TMP3]]
//
v64bfloat16 test_insert(v64bfloat16 a, int idx, v32bfloat16 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <64 x bfloat> @_Z20test_set_v64bfloat16iDv32_u6__bf16(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <32 x bfloat> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x bfloat> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15SET_V64BFLOAT16IDV32_U6__BF16_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V64BFLOAT16IDV32_U6__BF16_EXIT]]
// CHECK:       _ZL15set_v64bfloat16iDv32_u6__bf16.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <64 x bfloat>
// CHECK-NEXT:    ret <64 x bfloat> [[TMP2]]
//
v64bfloat16 test_set_v64bfloat16(int idx, v32bfloat16 b) {
  return set_v64bfloat16(idx, b);
}

// CHECK-LABEL: define dso_local noundef <64 x bfloat> @_Z11test_concatDv32_u6__bf16S_(
// CHECK-SAME: <32 x bfloat> noundef [[A0:%.*]], <32 x bfloat> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x bfloat> [[A0]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x bfloat> [[A1]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> [[TMP1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[SHUFFLE_I_I]] to <64 x bfloat>
// CHECK-NEXT:    ret <64 x bfloat> [[TMP2]]
//
v64bfloat16 test_concat(v32bfloat16 a0, v32bfloat16 a1) {
  return concat(a0, a1);
}

// v32accfloat

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z24test_extract_v16accfloatDv32_u10__accfloati(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16ACCFLOATDV32_U10__ACCFLOATI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL19EXTRACT_V16ACCFLOATDV32_U10__ACCFLOATI_EXIT]]
// CHECK:       _ZL19extract_v16accfloatDv32_u10__accfloati.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP2]]
//
v16accfloat test_extract_v16accfloat(v32accfloat a, int idx) {
  return extract_v16accfloat(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_insertDv32_u10__accfloatiDv16_u10__accfloat(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i64> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U10__ACCFLOATIDV16_U10__ACCFLOAT_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U10__ACCFLOATIDV16_U10__ACCFLOAT_EXIT]]
// CHECK:       _ZL6insertDv32_u10__accfloatiDv16_u10__accfloat.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v32accfloat test_insert(v32accfloat a, int idx, v16accfloat b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z20test_set_v32accfloatiDv16_u10__accfloat(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15SET_V32ACCFLOATIDV16_U10__ACCFLOAT_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V32ACCFLOATIDV16_U10__ACCFLOAT_EXIT]]
// CHECK:       _ZL15set_v32accfloatiDv16_u10__accfloat.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v32accfloat test_set_v32accfloat(int idx, v16accfloat b) {
  return set_v32accfloat(idx, b);
}

// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_concatDv16_u10__accfloatS_(
// CHECK-SAME: <8 x i64> noundef [[A0:%.*]], <8 x i64> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <8 x i64> [[A0]], <8 x i64> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32accfloat test_concat(v16accfloat a0, v16accfloat a1) {
  return concat(a0, a1);
}

// v32float

//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <8 x float> @_Z20test_extract_v8floatDv32_fi(
// CHECK-SAME: <32 x float> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x float> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8FLOATDV32_FI_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8FLOATDV32_FI_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8FLOATDV32_FI_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8FLOATDV32_FI_EXIT]]
// CHECK:       _ZL15extract_v8floatDv32_fi.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <8 x float>
// CHECK-NEXT:    ret <8 x float> [[TMP1]]
//
v8float test_extract_v8float(v32float a, int idx) {
  return extract_v8float(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x float> @_Z11test_insertDv32_fiDv8_f(
// CHECK-SAME: <32 x float> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x float> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x float> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x float> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_FIDV8_F_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_FIDV8_F_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_FIDV8_F_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_FIDV8_F_EXIT]]
// CHECK:       _ZL6insertDv32_fiDv8_f.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <32 x float>
// CHECK-NEXT:    ret <32 x float> [[TMP2]]
//
v32float test_insert(v32float a, int idx, v8float b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x float> @_Z17test_set_v32floatiDv8_f(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x float> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x float> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32FLOATIDV8_F_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32FLOATIDV8_F_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32FLOATIDV8_F_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32FLOATIDV8_F_EXIT]]
// CHECK:       _ZL12set_v32floatiDv8_f.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <32 x float>
// CHECK-NEXT:    ret <32 x float> [[TMP1]]
//
v32float test_set_v32float(int idx, v8float b) { return set_v32float(idx, b); }

// CHECK-LABEL: define dso_local noundef <32 x float> @_Z11test_concatDv8_fS_S_S_(
// CHECK-SAME: <8 x float> noundef [[A0:%.*]], <8 x float> noundef [[A1:%.*]], <8 x float> noundef [[A2:%.*]], <8 x float> noundef [[A3:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_UNCASTED_I:%.*]] = shufflevector <8 x float> [[A0]], <8 x float> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_UNCASTED_I:%.*]] = shufflevector <8 x float> [[A2]], <8 x float> [[A3]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE2_I_UNCASTED_I:%.*]] = shufflevector <16 x float> [[SHUFFLE_I_UNCASTED_I]], <16 x float> [[SHUFFLE1_I_UNCASTED_I]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    ret <32 x float> [[SHUFFLE2_I_UNCASTED_I]]
//
v32float test_concat(v8float a0, v8float a1, v8float a2, v8float a3) {
  return concat(a0, a1, a2, a3);
}

// v32float

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x float> @_Z21test_extract_v16floatDv32_fi(
// CHECK-SAME: <32 x float> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x float> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16FLOATDV32_FI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16FLOATDV32_FI_EXIT]]
// CHECK:       _ZL16extract_v16floatDv32_fi.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <16 x float>
// CHECK-NEXT:    ret <16 x float> [[TMP2]]
//
v16float test_extract_v16float(v32float a, int idx) {
  return extract_v16float(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x float> @_Z11test_insertDv32_fiDv16_f(
// CHECK-SAME: <32 x float> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <16 x float> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x float> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x float> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_FIDV16_F_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_FIDV16_F_EXIT]]
// CHECK:       _ZL6insertDv32_fiDv16_f.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <32 x float>
// CHECK-NEXT:    ret <32 x float> [[TMP3]]
//
v32float test_insert(v32float a, int idx, v16float b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <32 x float> @_Z17test_set_v32floatiDv16_f(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <16 x float> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x float> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32FLOATIDV16_F_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32FLOATIDV16_F_EXIT]]
// CHECK:       _ZL12set_v32floatiDv16_f.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <32 x float>
// CHECK-NEXT:    ret <32 x float> [[TMP2]]
//
v32float test_set_v32float(int idx, v16float b) { return set_v32float(idx, b); }

// CHECK-LABEL: define dso_local noundef <32 x float> @_Z11test_concatDv16_fS_(
// CHECK-SAME: <16 x float> noundef [[A0:%.*]], <16 x float> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHUFFLE_I_UNCASTED_I:%.*]] = shufflevector <16 x float> [[A0]], <16 x float> [[A1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    ret <32 x float> [[SHUFFLE_I_UNCASTED_I]]
//
v32float test_concat(v16float a0, v16float a1) { return concat(a0, a1); }

// v32acc32

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z21test_extract_v16acc32Dv32_u7__acc32i(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16ACC32DV32_U7__ACC32I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL16EXTRACT_V16ACC32DV32_U7__ACC32I_EXIT]]
// CHECK:       _ZL16extract_v16acc32Dv32_u7__acc32i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP2]]
//
v16acc32 test_extract_v16acc32(v32acc32 a, int idx) {
  return extract_v16acc32(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_insertDv32_u7__acc32iDv16_u7__acc32(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i64> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U7__ACC32IDV16_U7__ACC32_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U7__ACC32IDV16_U7__ACC32_EXIT]]
// CHECK:       _ZL6insertDv32_u7__acc32iDv16_u7__acc32.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v32acc32 test_insert(v32acc32 a, int idx, v16acc32 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z17test_set_v32acc32iDv16_u7__acc32(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32ACC32IDV16_U7__ACC32_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32ACC32IDV16_U7__ACC32_EXIT]]
// CHECK:       _ZL12set_v32acc32iDv16_u7__acc32.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v32acc32 test_set_v32acc32(int idx, v16acc32 b) { return set_v32acc32(idx, b); }

// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_concatDv16_u7__acc32S_(
// CHECK-SAME: <8 x i64> noundef [[A0:%.*]], <8 x i64> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <8 x i64> [[A0]], <8 x i64> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_concat(v16acc32 a0, v16acc32 a1) { return concat(a0, a1); }

// v16acc64

//! @name Extract 512-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z20test_extract_v8acc64Dv16_u7__acc64i(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC64DV16_U7__ACC64I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC64DV16_U7__ACC64I_EXIT]]
// CHECK:       _ZL15extract_v8acc64Dv16_u7__acc64i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP2]]
//
v8acc64 test_extract_v8acc64(v16acc64 a, int idx) {
  return extract_v8acc64(a, idx);
}

//! @name Insert 512-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_insertDv16_u7__acc64iDv8_u7__acc64(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <8 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i64> [[B]] to <16 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP1]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC64IDV8_U7__ACC64_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC64IDV8_U7__ACC64_EXIT]]
// CHECK:       _ZL6insertDv16_u7__acc64iDv8_u7__acc64.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v16acc64 test_insert(v16acc64 a, int idx, v8acc64 b) {
  return insert(a, idx, b);
}

//! @name Set 512-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z17test_set_v16acc64iDv8_u7__acc64(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <8 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[B]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC64IDV8_U7__ACC64_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC64IDV8_U7__ACC64_EXIT]]
// CHECK:       _ZL12set_v16acc64iDv8_u7__acc64.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_set_v16acc64(int idx, v8acc64 b) { return set_v16acc64(idx, b); }

// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_concatDv8_u7__acc64S_(
// CHECK-SAME: <8 x i64> noundef [[A0:%.*]], <8 x i64> noundef [[A1:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <8 x i64> [[A0]], <8 x i64> [[A1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_concat(v8acc64 a0, v8acc64 a1) { return concat(a0, a1); }

// Tests for 128-bit are skipped due to a lack of support for 128-bit vectors in
// if statements

// Conversions
// v8accfloat
//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <4 x i64> @_Z23test_extract_v8accfloatDv16_u10__accfloati(
// CHECK-SAME: <8 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL18EXTRACT_V8ACCFLOATDV16_U10__ACCFLOATI_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL18EXTRACT_V8ACCFLOATDV16_U10__ACCFLOATI_EXIT]]
// CHECK:       _ZL18extract_v8accfloatDv16_u10__accfloati.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <4 x i64>
// CHECK-NEXT:    ret <4 x i64> [[TMP2]]
//
v8accfloat test_extract_v8accfloat(v16accfloat a, int idx) {
  return extract_v8accfloat(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z11test_insertDv16_u10__accfloatiDv8_u10__accfloat(
// CHECK-SAME: <8 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U10__ACCFLOATIDV8_U10__ACCFLOAT_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U10__ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       _ZL6insertDv16_u10__accfloatiDv8_u10__accfloat.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP3]]
//
v16accfloat test_insert(v16accfloat a, int idx, v8accfloat b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z20test_set_v16accfloatiDv8_u10__accfloat(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V16ACCFLOATIDV8_U10__ACCFLOAT_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15SET_V16ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       _ZL15set_v16accfloatiDv8_u10__accfloat.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP2]]
//
v16accfloat test_set_v16accfloat(int idx, v8accfloat b) {
  return set_v16accfloat(idx, b);
}

// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z11test_concatDv8_u10__accfloatS_(
// CHECK-SAME: <4 x i64> noundef [[A:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i64> [[A]], <4 x i64> [[B]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_concat(v8accfloat a, v8accfloat b) { return concat(a, b); }
// v8acc32
//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <4 x i64> @_Z20test_extract_v8acc32Dv16_u7__acc32i(
// CHECK-SAME: <8 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC32DV16_U7__ACC32I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC32DV16_U7__ACC32I_EXIT]]
// CHECK:       _ZL15extract_v8acc32Dv16_u7__acc32i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <4 x i64>
// CHECK-NEXT:    ret <4 x i64> [[TMP2]]
//
v8acc32 test_extract_v8acc32(v16acc32 a, int idx) {
  return extract_v8acc32(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z11test_insertDv16_u7__acc32iDv8_u7__acc32(
// CHECK-SAME: <8 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC32IDV8_U7__ACC32_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       _ZL6insertDv16_u7__acc32iDv8_u7__acc32.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP3]]
//
v16acc32 test_insert(v16acc32 a, int idx, v8acc32 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z17test_set_v16acc32iDv8_u7__acc32(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC32IDV8_U7__ACC32_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       _ZL12set_v16acc32iDv8_u7__acc32.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP2]]
//
v16acc32 test_set_v16acc32(int idx, v8acc32 b) { return set_v16acc32(idx, b); }

// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z11test_concatDv8_u7__acc32S_(
// CHECK-SAME: <4 x i64> noundef [[A:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i64> [[A]], <4 x i64> [[B]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_concat(v8acc32 a, v8acc32 b) { return concat(a, b); }
// v4acc64
//! @name Extract 256-bit portion from 512-bit register
// CHECK-LABEL: define dso_local noundef <4 x i64> @_Z20test_extract_v4acc64Dv8_u7__acc64i(
// CHECK-SAME: <8 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V4ACC64DV8_U7__ACC64I_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[TMP0]], <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V4ACC64DV8_U7__ACC64I_EXIT]]
// CHECK:       _ZL15extract_v4acc64Dv8_u7__acc64i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <4 x i64>
// CHECK-NEXT:    ret <4 x i64> [[TMP2]]
//
v4acc64 test_extract_v4acc64(v8acc64 a, int idx) {
  return extract_v4acc64(a, idx);
}

//! @name Insert 256-bit in 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z11test_insertDv8_u7__acc64iDv4_u7__acc64(
// CHECK-SAME: <8 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i64> [[A]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP2]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL6INSERTDV8_U7__ACC64IDV4_U7__ACC64_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> [[TMP0]], <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV8_U7__ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       _ZL6insertDv8_u7__acc64iDv4_u7__acc64.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE2_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP3]]
//
v8acc64 test_insert(v8acc64 a, int idx, v4acc64 b) { return insert(a, idx, b); }

//! @name Set 256-bit portion of 512-bit register
// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z16test_set_v8acc64iDv4_u7__acc64(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[IDX]], 1
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp eq i32 [[TMP1]], 0
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[IF_THEN_I_I:%.*]], label [[IF_ELSE_I_I:%.*]]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL11SET_V8ACC64IDV4_U7__ACC64_EXIT:%.*]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL11SET_V8ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       _ZL11set_v8acc64iDv4_u7__acc64.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <16 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE1_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i32> [[RETVAL_0_I_I]] to <8 x i64>
// CHECK-NEXT:    ret <8 x i64> [[TMP2]]
//
v8acc64 test_set_v8acc64(int idx, v4acc64 b) { return set_v8acc64(idx, b); }

// CHECK-LABEL: define dso_local noundef <8 x i64> @_Z11test_concatDv4_u7__acc64S_(
// CHECK-SAME: <4 x i64> noundef [[A:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i64> [[A]], <4 x i64> [[B]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_concat(v4acc64 a, v4acc64 b) { return concat(a, b); }
// v8accfloat
//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <4 x i64> @_Z23test_extract_v8accfloatDv32_u10__accfloati(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL18EXTRACT_V8ACCFLOATDV32_U10__ACCFLOATI_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL18EXTRACT_V8ACCFLOATDV32_U10__ACCFLOATI_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL18EXTRACT_V8ACCFLOATDV32_U10__ACCFLOATI_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL18EXTRACT_V8ACCFLOATDV32_U10__ACCFLOATI_EXIT]]
// CHECK:       _ZL18extract_v8accfloatDv32_u10__accfloati.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <4 x i64>
// CHECK-NEXT:    ret <4 x i64> [[TMP1]]
//
v8accfloat test_extract_v8accfloat(v32accfloat a, int idx) {
  return extract_v8accfloat(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_insertDv32_u10__accfloatiDv8_u10__accfloat(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U10__ACCFLOATIDV8_U10__ACCFLOAT_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U10__ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U10__ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U10__ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       _ZL6insertDv32_u10__accfloatiDv8_u10__accfloat.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v32accfloat test_insert(v32accfloat a, int idx, v8accfloat b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z20test_set_v32accfloatiDv8_u10__accfloat(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15SET_V32ACCFLOATIDV8_U10__ACCFLOAT_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15SET_V32ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V32ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15SET_V32ACCFLOATIDV8_U10__ACCFLOAT_EXIT]]
// CHECK:       _ZL15set_v32accfloatiDv8_u10__accfloat.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32accfloat test_set_v32accfloat(int idx, v8accfloat b) {
  return set_v32accfloat(idx, b);
}

// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_concatDv8_u10__accfloatS_S_S_(
// CHECK-SAME: <4 x i64> noundef [[A:%.*]], <4 x i64> noundef [[B:%.*]], <4 x i64> noundef [[C:%.*]], <4 x i64> noundef [[D:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i64> [[A]], <4 x i64> [[B]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <4 x i64> [[C]], <4 x i64> [[D]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <8 x i64> [[TMP0]], <8 x i64> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v32accfloat test_concat(v8accfloat a, v8accfloat b, v8accfloat c,
                        v8accfloat d) {
  return concat(a, b, c, d);
}
// v8acc32
//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <4 x i64> @_Z20test_extract_v8acc32Dv32_u7__acc32i(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC32DV32_U7__ACC32I_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC32DV32_U7__ACC32I_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC32DV32_U7__ACC32I_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V8ACC32DV32_U7__ACC32I_EXIT]]
// CHECK:       _ZL15extract_v8acc32Dv32_u7__acc32i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <4 x i64>
// CHECK-NEXT:    ret <4 x i64> [[TMP1]]
//
v8acc32 test_extract_v8acc32(v32acc32 a, int idx) {
  return extract_v8acc32(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_insertDv32_u7__acc32iDv8_u7__acc32(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U7__ACC32IDV8_U7__ACC32_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U7__ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U7__ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV32_U7__ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       _ZL6insertDv32_u7__acc32iDv8_u7__acc32.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v32acc32 test_insert(v32acc32 a, int idx, v8acc32 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z17test_set_v32acc32iDv8_u7__acc32(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32ACC32IDV8_U7__ACC32_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V32ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V32ACC32IDV8_U7__ACC32_EXIT]]
// CHECK:       _ZL12set_v32acc32iDv8_u7__acc32.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_set_v32acc32(int idx, v8acc32 b) { return set_v32acc32(idx, b); }

// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_concatDv8_u7__acc32S_S_S_(
// CHECK-SAME: <4 x i64> noundef [[A:%.*]], <4 x i64> noundef [[B:%.*]], <4 x i64> noundef [[C:%.*]], <4 x i64> noundef [[D:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i64> [[A]], <4 x i64> [[B]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <4 x i64> [[C]], <4 x i64> [[D]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <8 x i64> [[TMP0]], <8 x i64> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v32acc32 test_concat(v8acc32 a, v8acc32 b, v8acc32 c, v8acc32 d) {
  return concat(a, b, c, d);
}
// v4acc64
//! @name Extract 256-bit portion from 1024-bit register
// CHECK-LABEL: define dso_local noundef <4 x i64> @_Z20test_extract_v4acc64Dv16_u7__acc64i(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN3_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN8_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V4ACC64DV16_U7__ACC64I_EXIT:%.*]]
// CHECK:       if.then3.i.i:
// CHECK-NEXT:    [[SHUFFLE4_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V4ACC64DV16_U7__ACC64I_EXIT]]
// CHECK:       if.then8.i.i:
// CHECK-NEXT:    [[SHUFFLE9_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V4ACC64DV16_U7__ACC64I_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE10_I_I:%.*]] = shufflevector <32 x i32> [[TMP0]], <32 x i32> poison, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL15EXTRACT_V4ACC64DV16_U7__ACC64I_EXIT]]
// CHECK:       _ZL15extract_v4acc64Dv16_u7__acc64i.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <8 x i32> [ [[SHUFFLE_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE4_I_I]], [[IF_THEN3_I_I]] ], [ [[SHUFFLE9_I_I]], [[IF_THEN8_I_I]] ], [ [[SHUFFLE10_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[RETVAL_0_I_I]] to <4 x i64>
// CHECK-NEXT:    ret <4 x i64> [[TMP1]]
//
v4acc64 test_extract_v4acc64(v16acc64 a, int idx) {
  return extract_v4acc64(a, idx);
}

//! @name Insert 256-bit in 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_insertDv16_u7__acc64iDv4_u7__acc64(
// CHECK-SAME: <16 x i64> noundef [[A:%.*]], i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i64> [[A]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP1]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN5_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE2_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC64IDV4_U7__ACC64_EXIT:%.*]]
// CHECK:       if.then5.i.i:
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <32 x i32> [[SHUFFLE1_I_I]], <32 x i32> [[TMP0]], <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    br label [[_ZL6INSERTDV16_U7__ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       _ZL6insertDv16_u7__acc64iDv4_u7__acc64.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE2_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN5_I_I]] ], [ [[SHUFFLE11_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_insert(v16acc64 a, int idx, v4acc64 b) {
  return insert(a, idx, b);
}

//! @name Set 256-bit portion of 1024-bit register
// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z17test_set_v16acc64iDv4_u7__acc64(
// CHECK-SAME: i32 noundef [[IDX:%.*]], <4 x i64> noundef [[B:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i64> [[B]] to <8 x i32>
// CHECK-NEXT:    [[REM_I_I:%.*]] = srem i32 [[IDX]], 4
// CHECK-NEXT:    switch i32 [[REM_I_I]], label [[IF_ELSE_I_I:%.*]] [
// CHECK-NEXT:      i32 0, label [[IF_THEN_I_I:%.*]]
// CHECK-NEXT:      i32 1, label [[IF_THEN4_I_I:%.*]]
// CHECK-NEXT:      i32 2, label [[IF_THEN10_I_I:%.*]]
// CHECK-NEXT:    ]
// CHECK:       if.then.i.i:
// CHECK-NEXT:    [[SHUFFLE_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE1_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC64IDV4_U7__ACC64_EXIT:%.*]]
// CHECK:       if.then4.i.i:
// CHECK-NEXT:    [[SHUFFLE5_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE6_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE5_I_I]], <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       if.then10.i.i:
// CHECK-NEXT:    [[SHUFFLE11_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    [[SHUFFLE12_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE11_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       if.else.i.i:
// CHECK-NEXT:    [[SHUFFLE13_I_I:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[SHUFFLE14_I_I:%.*]] = shufflevector <16 x i32> [[SHUFFLE13_I_I]], <16 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    br label [[_ZL12SET_V16ACC64IDV4_U7__ACC64_EXIT]]
// CHECK:       _ZL12set_v16acc64iDv4_u7__acc64.exit:
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = phi <32 x i32> [ [[SHUFFLE1_I_I]], [[IF_THEN_I_I]] ], [ [[SHUFFLE6_I_I]], [[IF_THEN4_I_I]] ], [ [[SHUFFLE12_I_I]], [[IF_THEN10_I_I]] ], [ [[SHUFFLE14_I_I]], [[IF_ELSE_I_I]] ]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i32> [[RETVAL_0_I_I]] to <16 x i64>
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_set_v16acc64(int idx, v4acc64 b) { return set_v16acc64(idx, b); }

// CHECK-LABEL: define dso_local noundef <16 x i64> @_Z11test_concatDv4_u7__acc64S_S_S_(
// CHECK-SAME: <4 x i64> noundef [[A:%.*]], <4 x i64> noundef [[B:%.*]], <4 x i64> noundef [[C:%.*]], <4 x i64> noundef [[D:%.*]]) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i64> [[A]], <4 x i64> [[B]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <4 x i64> [[C]], <4 x i64> [[D]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
// CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <8 x i64> [[TMP0]], <8 x i64> [[TMP1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_concat(v4acc64 a, v4acc64 b, v4acc64 c, v4acc64 d) {
  return concat(a, b, c, d);
}
