// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --return-type --skip-function-body
//===- aie-abi-vector.cpp ---------------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang --target=aie -S -emit-llvm %s -o - | FileCheck %s

// Test can be updated with:

#include <stdint.h>

extern "C" {

/****** 64-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<2 x i32> @ret_v2int32
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v2int32 ret_v2int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v2int32
// CHECK-SAME: (<2 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v2int32(v2int32) {}

struct S2xv2int32 {
  v2int32 a[2];
};
// CHECK-LABEL: define {{[^@]*}}%struct.S2xv2int32 @ret_S2xv2int32
// CHECK-SAME: () #[[ATTR1:[0-9]+]] {
S2xv2int32 ret_S2xv2int32(void) { return {}; }

// Structs larger than 128 bits are returned indirectly
struct S3xv2int32 {
  v2int32 a[3];
};
// CHECK-LABEL: define {{[^@]*}}void @ret_S3xv2int32
// CHECK-SAME: (ptr noalias sret([[STRUCT_S3XV2INT32:%.*]]) align 8 [[AGG_RESULT:%.*]]) #[[ATTR1:[0-9]+]] {
S3xv2int32 ret_S3xv2int32(void) { return {}; }

/****** 128-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<2 x i64> @ret_v2cint32
// CHECK-SAME: () #[[ATTR3:[0-9]+]] {
v2cint32 ret_v2cint32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v2cint32
// CHECK-SAME: (<2 x i64> noundef [[TMP0:%.*]]) #[[ATTR3:[0-9]+]] {
void pass_v2cint32(v2cint32) {}

// CHECK-LABEL: define {{[^@]*}}<4 x i32> @ret_v4int32
// CHECK-SAME: () #[[ATTR3:[0-9]+]] {
v4int32 ret_v4int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v4int32
// CHECK-SAME: (<4 x i32> noundef [[TMP0:%.*]]) #[[ATTR3:[0-9]+]] {
void pass_v4int32(v4int32) {}

// CHECK-LABEL: define {{[^@]*}}<4 x float> @ret_v4float
// CHECK-SAME: () #[[ATTR3:[0-9]+]] {
v4float ret_v4float(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v4float
// CHECK-SAME: (<4 x float> noundef [[TMP0:%.*]]) #[[ATTR3:[0-9]+]] {
void pass_v4float(v4float) {}

// CHECK-LABEL: define {{[^@]*}}<8 x i16> @ret_v8int16
// CHECK-SAME: () #[[ATTR3:[0-9]+]] {
v8int16 ret_v8int16(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8int16
// CHECK-SAME: (<8 x i16> noundef [[TMP0:%.*]]) #[[ATTR3:[0-9]+]] {
void pass_v8int16(v8int16) {}

/****** 256-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<8 x i32> @ret_v4int64
// CHECK-SAME: () #[[ATTR4:[0-9]+]] {
v4int64 ret_v4int64(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v4int64
// CHECK-SAME: (<8 x i32> noundef [[TMP0:%.*]]) #[[ATTR4:[0-9]+]] {
void pass_v4int64(v4int64) {}

// CHECK-LABEL: define {{[^@]*}}<8 x float> @ret_v8float
// CHECK-SAME: () #[[ATTR4:[0-9]+]] {
v8float ret_v8float(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8float
// CHECK-SAME: (<8 x float> noundef [[TMP0:%.*]]) #[[ATTR4:[0-9]+]] {
void pass_v8float(v8float) {}

// CHECK-LABEL: define {{[^@]*}}<8 x i32> @ret_v8int32
// CHECK-SAME: () #[[ATTR4:[0-9]+]] {
v8int32 ret_v8int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8int32
// CHECK-SAME: (<8 x i32> noundef [[TMP0:%.*]]) #[[ATTR4:[0-9]+]] {
void pass_v8int32(v8int32) {}

// CHECK-LABEL: define {{[^@]*}}<16 x i16> @ret_v16int16
// CHECK-SAME: () #[[ATTR4:[0-9]+]] {
v16int16 ret_v16int16(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16int16
// CHECK-SAME: (<16 x i16> noundef [[TMP0:%.*]]) #[[ATTR4:[0-9]+]] {
void pass_v16int16(v16int16) {}

// CHECK-LABEL: define {{[^@]*}}<16 x i16> @ret_v32int8
// CHECK-SAME: () #[[ATTR4:[0-9]+]] {
v16int16 ret_v32int8(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32int8
// CHECK-SAME: (<16 x i16> noundef [[TMP0:%.*]]) #[[ATTR4:[0-9]+]] {
void pass_v32int8(v16int16) {}

/****** accumulator vector ******/

// v8acc48 ret_v8acc48(void) { return {}; }
// void pass_v8acc48(v8acc48) {}

// v4acc80 ret_v4acc80(void) { return {}; }
// void pass_v4acc80(v4acc80) {}
}
