// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --return-type --skip-function-body
//===- aie-abi-multi-args.cpp -----------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang_cc1 -triple aie -emit-llvm %s -o - | FileCheck %s
// RUN: %clang_cc1 -triple aie2 -emit-llvm %s -o - | FileCheck %s

// Verify ABI for cases when the registers for passing arguments are exhausted.

#include <stdint.h>

extern "C" {

// CHECK-LABEL: define {{[^@]*}}void @pass_5I
// CHECK-SAME: (i32 noundef [[TMP0:%.*]], i32 noundef [[TMP1:%.*]], i32 noundef [[TMP2:%.*]], i32 noundef [[TMP3:%.*]], i32 noundef [[TMP4:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_5I(int, int, int, int, int) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_3LI
// CHECK-SAME: (i64 noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_3LI(int64_t, int64_t, int64_t) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_5C
// CHECK-SAME: (i8 noundef signext [[TMP0:%.*]], i8 noundef signext [[TMP1:%.*]], i8 noundef signext [[TMP2:%.*]], i8 noundef signext [[TMP3:%.*]], i8 noundef signext [[TMP4:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_5C(char, char, char, char, char) {}


// CHECK-LABEL: define {{[^@]*}}void @pass_5P
// CHECK-SAME: (ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]], ptr [[TMP4:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_5P(char*, char*, char*, char*, char*) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_2C_3P
// CHECK-SAME: (i8 noundef signext [[TMP0:%.*]], i8 noundef signext [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]], ptr [[TMP4:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_2C_3P(char, char, char*, char*, char*) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_signed_unsigned
// CHECK-SAME: (i8 noundef signext [[TMP0:%.*]], i8 noundef zeroext [[TMP1:%.*]], i8 noundef signext [[TMP2:%.*]], i8 noundef zeroext [[TMP3:%.*]], i8 noundef signext [[TMP4:%.*]], i8 noundef zeroext [[TMP5:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_signed_unsigned(char, unsigned char, char, unsigned char, char, unsigned char) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_2xC_14xC
// CHECK-SAME: (ptr [[TMP0:%.*]], ptr [[TMP1:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_2xC_14xC(char[2], char[14]) {}

// These two structs could be passed as two i32, but instead use three.
struct S1SI {
  short x;
};
struct S1I_1SI {
  int x;
  short y;
};
// CHECK-LABEL: define {{[^@]*}}void @pass_S1SI_and_S1I_1SI
// CHECK-SAME: ([[STRUCT_S1SI:%.*]] [[DOTCOERCE:%.*]], [[STRUCT_S1I_1SI:%.*]] [[DOTCOERCE1:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_S1SI_and_S1I_1SI(struct S1SI, struct S1I_1SI) {}
// CHECK-LABEL: define {{[^@]*}}void @pass__S1I_1SI_and_S1SI
// CHECK-SAME: ([[STRUCT_S1I_1SI:%.*]] [[DOTCOERCE:%.*]], [[STRUCT_S1SI:%.*]] [[DOTCOERCE1:%.*]]) #[[ATTR0:[0-9]+]] {
void pass__S1I_1SI_and_S1SI(struct S1I_1SI, struct S1SI) {}

struct S4xI {
  int arr[4];
};
// CHECK-LABEL: define {{[^@]*}}void @pass_2S4xI
// CHECK-SAME: ([[STRUCT_S4XI:%.*]] [[DOTCOERCE:%.*]], [[STRUCT_S4XI]] [[DOTCOERCE1:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_2S4xI(struct S4xI, struct S4xI) {}

// S2I crosses the register-stack boundary, and is pass entirely on the stack.
// Args aren't re-ordered, so the last int argument is not passed in a register.
struct S2I {
  int x;
  int y;
};
// CHECK-LABEL: define {{[^@]*}}void @pass_3I_S2I_I
// CHECK-SAME: (i32 noundef [[TMP0:%.*]], i32 noundef [[TMP1:%.*]], i32 noundef [[TMP2:%.*]], [[STRUCT_S2I:%.*]] [[DOTCOERCE:%.*]], i32 noundef [[TMP3:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_3I_S2I_I(int, int, int, struct S2I, int) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_3I_LI_I
// CHECK-SAME: (i32 noundef [[TMP0:%.*]], i32 noundef [[TMP1:%.*]], i32 noundef [[TMP2:%.*]], i64 noundef [[TMP3:%.*]], i32 noundef [[TMP4:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_3I_LI_I(int, int, int, int64_t, int) {}
}
