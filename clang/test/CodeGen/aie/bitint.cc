// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- bitint.cc ------------------------------------------------*- C++ -*-===//
//
//  Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
//  See https://llvm.org/LICENSE.txt for license information.
//  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// Modifications (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
//RUN: %clang --target=aie -S -emit-llvm %s -o - | FileCheck %s
//RUN: %clang --target=aie2 -S -emit-llvm %s -o - | FileCheck %s
//
// CHECK-LABEL: @_Z12bitint2_testDU2_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i2, align 1
// CHECK-NEXT:    store i2 [[VAL:%.*]], ptr [[VAL_ADDR]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = load i2, ptr [[VAL_ADDR]], align 1
// CHECK-NEXT:    ret i2 [[TMP0]]
//
uint2_t bitint2_test(uint2_t val) {
  return val;
}

// CHECK-LABEL: @_Z12bitint4_testDU4_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i4, align 1
// CHECK-NEXT:    store i4 [[VAL:%.*]], ptr [[VAL_ADDR]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = load i4, ptr [[VAL_ADDR]], align 1
// CHECK-NEXT:    ret i4 [[TMP0]]
//
uint4_t bitint4_test(uint4_t val) {
  return val;
}
// CHECK-LABEL: @_Z12bitint6_testDU6_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i6, align 1
// CHECK-NEXT:    store i6 [[VAL:%.*]], ptr [[VAL_ADDR]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = load i6, ptr [[VAL_ADDR]], align 1
// CHECK-NEXT:    ret i6 [[TMP0]]
//
uint6_t bitint6_test(uint6_t val) {
  return val;
}
