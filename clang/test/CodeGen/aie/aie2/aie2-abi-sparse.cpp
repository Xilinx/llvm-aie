// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --return-type --skip-function-body
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

// RUN: %clang --target=aie2 -S -emit-llvm %s -o - | FileCheck %s

#include <stdint.h>

extern "C" {

// CHECK: %struct.v128int8_sparse = type <{ <64 x i8>, i128 }>
// CHECK: %struct.v128uint8_sparse = type <{ <64 x i8>, i128 }>
// CHECK: %struct.v256int4_sparse = type <{ <64 x i8>, i128 }>
// CHECK: %struct.v256uint4_sparse = type <{ <64 x i8>, i128 }>
// CHECK: %struct.v64int16_sparse = type <{ <32 x i16>, i128 }>
// CHECK: %struct.v64uint16_sparse = type <{ <32 x i16>, i128 }>
// CHECK: %struct.v64bfloat16_sparse = type <{ <32 x bfloat>, i128 }>

// CHECK-LABEL: define {{[^@]*}}i128 @ret_sparsity_t
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
sparsity_t ret_sparsity_t(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_sparsity_t
// CHECK-SAME: (i128 noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_sparsity_t(sparsity_t) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v128int8_sparse @ret_v128int8_sparse
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v128int8_sparse ret_v128int8_sparse(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v128int8_sparse
// CHECK-SAME: ([[STRUCT_V128INT8_SPARSE:%.*]] alignstack(32) [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128int8_sparse(v128int8_sparse) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v128uint8_sparse @ret_v128uint8_sparse
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v128uint8_sparse ret_v128uint8_sparse(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v128uint8_sparse
// CHECK-SAME: ([[STRUCT_V128UINT8_SPARSE:%.*]] alignstack(32) [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128uint8_sparse(v128uint8_sparse) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v256int4_sparse @ret_v256int4_sparse
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v256int4_sparse ret_v256int4_sparse(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v256int4_sparse
// CHECK-SAME: ([[STRUCT_V256INT4_SPARSE:%.*]] alignstack(32) [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v256int4_sparse(v256int4_sparse) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v256uint4_sparse @ret_v256uint4_sparse
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v256uint4_sparse ret_v256uint4_sparse(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v256uint4_sparse
// CHECK-SAME: ([[STRUCT_V256UINT4_SPARSE:%.*]] alignstack(32) [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v256uint4_sparse(v256uint4_sparse) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v64int16_sparse @ret_v64int16_sparse
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64int16_sparse ret_v64int16_sparse(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v64int16_sparse
// CHECK-SAME: ([[STRUCT_V64INT16_SPARSE:%.*]] alignstack(32) [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64int16_sparse(v64int16_sparse) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v64uint16_sparse @ret_v64uint16_sparse
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64uint16_sparse ret_v64uint16_sparse(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v64uint16_sparse
// CHECK-SAME: ([[STRUCT_V64UINT16_SPARSE:%.*]] alignstack(32) [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64uint16_sparse(v64uint16_sparse) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v64bfloat16_sparse @ret_v64bfloat16_sparse
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64bfloat16_sparse ret_v64bfloat16_sparse(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v64bfloat16_sparse
// CHECK-SAME: ([[STRUCT_V64BFLOAT16_SPARSE:%.*]] alignstack(32) [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64bfloat16_sparse(v64bfloat16_sparse) {}
}
