// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aie2-store-load-TM.cpp -----------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -nostdlibinc -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z12test_read_tmj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = xor i32 [[REGADDR:%.*]], 524288
// CHECK-NEXT:    [[CONV_I:%.*]] = trunc i32 [[TMP0]] to i20
// CHECK-NEXT:    [[TMP1:%.*]] = inttoptr i20 [[CONV_I]] to ptr addrspace(15)
// CHECK-NEXT:    [[TMP2:%.*]] = addrspacecast ptr addrspace(15) [[TMP1]] to ptr
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.read.tm(ptr [[TMP2]])
// CHECK-NEXT:    ret i32 [[TMP3]]
//
uint32 test_read_tm(uint32 regAddr) {
   return read_tm(regAddr);
}

// CHECK-LABEL: @_Z13test_write_tmjj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = xor i32 [[REGADDR:%.*]], 524288
// CHECK-NEXT:    [[CONV_I:%.*]] = trunc i32 [[TMP0]] to i20
// CHECK-NEXT:    [[TMP1:%.*]] = inttoptr i20 [[CONV_I]] to ptr addrspace(15)
// CHECK-NEXT:    [[TMP2:%.*]] = addrspacecast ptr addrspace(15) [[TMP1]] to ptr
// CHECK-NEXT:    tail call void @llvm.aie2.write.tm(i32 [[REGVAL:%.*]], ptr [[TMP2]])
// CHECK-NEXT:    ret void
//
void test_write_tm(uint32 regVal, uint32 regAddr) {
   return write_tm(regVal, regAddr);
}

// CHECK-LABEL: @_Z12test_read_tmjj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ADD_I:%.*]] = add i32 [[TMADDRSPACESTART:%.*]], [[REGADDR:%.*]]
// CHECK-NEXT:    [[CONV_I:%.*]] = trunc i32 [[ADD_I]] to i20
// CHECK-NEXT:    [[TMP0:%.*]] = inttoptr i20 [[CONV_I]] to ptr addrspace(15)
// CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(15) [[TMP0]] to ptr
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.read.tm(ptr [[TMP1]])
// CHECK-NEXT:    ret i32 [[TMP2]]
//
uint32 test_read_tm(uint32 regAddr, uint32 TMAddrSpaceStart) {
   return read_tm(regAddr, TMAddrSpaceStart);
}

// CHECK-LABEL: @_Z13test_write_tmjjj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ADD_I:%.*]] = add i32 [[TMADDRSPACESTART:%.*]], [[REGADDR:%.*]]
// CHECK-NEXT:    [[CONV_I:%.*]] = trunc i32 [[ADD_I]] to i20
// CHECK-NEXT:    [[TMP0:%.*]] = inttoptr i20 [[CONV_I]] to ptr addrspace(15)
// CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(15) [[TMP0]] to ptr
// CHECK-NEXT:    tail call void @llvm.aie2.write.tm(i32 [[REGVAL:%.*]], ptr [[TMP1]])
// CHECK-NEXT:    ret void
//
void test_write_tm(uint32 regVal, uint32 regAddr, uint32 TMAddrSpaceStart) {
   return write_tm(regVal, regAddr, TMAddrSpaceStart);
}
