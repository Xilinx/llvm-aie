// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aiev2-srs-intrinsics.cpp ---------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z19test_to_v16bfloat16Dv16_u10__accfloat(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64> [[ACC:%.*]])
// CHECK-NEXT:    ret <16 x bfloat> [[TMP0]]
//
v16bfloat16 test_to_v16bfloat16(v16accfloat acc){
    return to_v16bfloat16(acc);
}

// CHECK-LABEL: @_Z14test_ssrs_gen0Dv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32int8 test_ssrs_gen0(v32acc32 acc, int shft, int sign) {
   return ssrs(acc,shft,sign);
}

// CHECK-LABEL: @_Z14test_ssrs_gen1Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_ssrs_gen1(v16acc64 acc, int shft, int sign) {
   return ssrs(acc,shft,sign);
}

// CHECK-LABEL: @_Z15test_ulsrs_gen0Dv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32uint16 test_ulsrs_gen0(v32acc32 acc, int shft, int sign) {
   return ulsrs(acc,shft,sign);
}

// CHECK-LABEL: @_Z14test_lsrs_gen0Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_lsrs_gen0(v16acc64 acc, int shft, int sign) {
   return lsrs(acc,shft,sign);
}

// CHECK-LABEL: @_Z14test_lsrs_gen1Dv8_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8int32 test_lsrs_gen1(v8acc64 acc, int shft, int sign) {
   return lsrs(acc,shft,sign);
}

// CHECK-LABEL: @_Z14test_lsrs_gen3Dv16_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_lsrs_gen3(v16acc32 acc, int shft, int sign) {
   return lsrs(acc,shft,sign);
}

// CHECK-LABEL: @_Z17test_ssrs_signed0Dv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32int8 test_ssrs_signed0(v32acc32 acc, int shft) {
   return ssrs(acc,shft,1);
}

// CHECK-LABEL: @_Z17test_ssrs_signed1Dv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_ssrs_signed1(v16acc64 acc, int shft) {
   return ssrs(acc,shft,1);
}

// CHECK-LABEL: @_Z18test_ulsrs_signed0Dv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32uint16 test_ulsrs_signed0(v32acc32 acc, int shft) {
   return ulsrs(acc,shft,1);
}

// CHECK-LABEL: @_Z17test_lsrs_signed0Dv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_lsrs_signed0(v16acc64 acc, int shft) {
   return lsrs(acc,shft,1);
}

// CHECK-LABEL: @_Z17test_lsrs_signed1Dv8_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8int32 test_lsrs_signed1(v8acc64 acc, int shft) {
   return lsrs(acc,shft,1);
}


// CHECK-LABEL: @_Z17test_lsrs_signed3Dv16_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_lsrs_signed3(v16acc32 acc, int shft) {
   return lsrs(acc,shft,1);
}
