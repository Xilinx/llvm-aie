// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aiev2-srs-intrinsics.cpp ---------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z19test_to_v16bfloat16Dv16_u10__accfloat(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64> [[ACC:%.*]])
// CHECK-NEXT:    ret <16 x bfloat> [[TMP0]]
//
v16bfloat16 test_to_v16bfloat16(v16accfloat acc) {
  return to_v16bfloat16(acc);
}

// CHECK-LABEL: @_Z9test_ssrsDv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32int8 test_ssrs(v32acc32 acc, int shft, int sign) {
  return ssrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z14test_ssrs_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32int8 test_ssrs_conf(v32acc32 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ssrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ussrsDv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32uint8 test_ussrs(v32acc32 acc, int shft, int sign) {
  return ussrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z15test_ussrs_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32uint8 test_ussrs_conf(v32acc32 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ussrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32int16 test_lsrs(v32acc32 acc, int shft, int sign) {
  return lsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32int16 test_lsrs_conf(v32acc32 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32uint16 test_ulsrs(v32acc32 acc, int shft, int sign) {
  return ulsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32uint16 test_ulsrs_conf(v32acc32 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv16_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_lsrs(v16acc32 acc, int shft, int sign) {
  return lsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv16_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_lsrs_conf(v16acc32 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv16_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_ulsrs(v16acc32 acc, int shft, int sign) {
  return ulsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv16_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_ulsrs_conf(v16acc32 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z9test_ssrsDv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_ssrs(v16acc64 acc, int shft, int sign) {
  return ssrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z14test_ssrs_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_ssrs_conf(v16acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ssrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ussrsDv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_ussrs(v16acc64 acc, int shft, int sign) {
  return ussrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z15test_ussrs_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_ussrs_conf(v16acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ussrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_lsrs(v16acc64 acc, int shft, int sign) {
  return lsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16int32 test_lsrs_conf(v16acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16uint32 test_ulsrs(v16acc64 acc, int shft, int sign) {
  return ulsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16uint32 test_ulsrs_conf(v16acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv8_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8int32 test_lsrs(v8acc64 acc, int shft, int sign) {
  return lsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv8_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8int32 test_lsrs_conf(v8acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv8_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8uint32 test_ulsrs(v8acc64 acc, int shft, int sign) {
  return ulsrs(acc, shft, sign);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv8_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8uint32 test_ulsrs_conf(v8acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z9test_ssrsDv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32int8 test_ssrs(v32acc32 acc, int shft) {
  return ssrs(acc, shft);
}

// CHECK-LABEL: @_Z14test_ssrs_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32int8 test_ssrs_conf(v32acc32 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ssrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ussrsDv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32uint8 test_ussrs(v32acc32 acc, int shft) {
  return ussrs(acc, shft);
}

// CHECK-LABEL: @_Z15test_ussrs_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32uint8 test_ussrs_conf(v32acc32 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ussrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32int16 test_lsrs(v32acc32 acc, int shft) {
  return lsrs(acc, shft);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32int16 test_lsrs_conf(v32acc32 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32uint16 test_ulsrs(v32acc32 acc, int shft) {
  return ulsrs(acc, shft);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32uint16 test_ulsrs_conf(v32acc32 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv16_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_lsrs(v16acc32 acc, int shft) {
  return lsrs(acc, shft);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv16_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_lsrs_conf(v16acc32 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv16_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_ulsrs(v16acc32 acc, int shft) {
  return ulsrs(acc, shft);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv16_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_ulsrs_conf(v16acc32 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z9test_ssrsDv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_ssrs(v16acc64 acc, int shft) {
  return ssrs(acc, shft);
}

// CHECK-LABEL: @_Z14test_ssrs_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_ssrs_conf(v16acc64 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ssrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ussrsDv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_ussrs(v16acc64 acc, int shft) {
  return ussrs(acc, shft);
}

// CHECK-LABEL: @_Z15test_ussrs_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_ussrs_conf(v16acc64 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ussrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_lsrs(v16acc64 acc, int shft) {
  return lsrs(acc, shft);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16int32 test_lsrs_conf(v16acc64 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16uint32 test_ulsrs(v16acc64 acc, int shft) {
  return ulsrs(acc, shft);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16uint32 test_ulsrs_conf(v16acc64 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z9test_lsrsDv8_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8int32 test_lsrs(v8acc64 acc, int shft) {
  return lsrs(acc, shft);
}

// CHECK-LABEL: @_Z14test_lsrs_confDv8_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8int32 test_lsrs_conf(v8acc64 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return lsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z10test_ulsrsDv8_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8uint32 test_ulsrs(v8acc64 acc, int shft) {
  return ulsrs(acc, shft);
}

// CHECK-LABEL: @_Z15test_ulsrs_confDv8_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8uint32 test_ulsrs_conf(v8acc64 acc, int shft, crsat_t sat, crrnd_t rnd) {
  return ulsrs_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z19test_srs_to_v32int8Dv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32int8 test_srs_to_v32int8(v32acc32 acc, int shft, int sign) {
  return srs_to_v32int8(acc, shft, sign);
}

// CHECK-LABEL: @_Z24test_srs_to_v32int8_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32int8 test_srs_to_v32int8_conf(v32acc32 acc, int shft, int sign, crsat_t sat,
                    crrnd_t rnd) {
  return srs_to_v32int8_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v32uint8Dv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32uint8 test_srs_to_v32uint8(v32acc32 acc, int shft, int sign) {
  return srs_to_v32uint8(acc, shft, sign);
}

// CHECK-LABEL: @_Z25test_srs_to_v32uint8_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32uint8 test_srs_to_v32uint8_conf(v32acc32 acc, int shft, int sign, crsat_t sat,
                     crrnd_t rnd) {
  return srs_to_v32uint8_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v32int16Dv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32int16 test_srs_to_v32int16(v32acc32 acc, int shft, int sign) {
  return srs_to_v32int16(acc, shft, sign);
}

// CHECK-LABEL: @_Z25test_srs_to_v32int16_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32int16 test_srs_to_v32int16_conf(v32acc32 acc, int shft, int sign, crsat_t sat,
                     crrnd_t rnd) {
  return srs_to_v32int16_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v32uint16Dv32_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32uint16 test_srs_to_v32uint16(v32acc32 acc, int shft, int sign) {
  return srs_to_v32uint16(acc, shft, sign);
}

// CHECK-LABEL: @_Z26test_srs_to_v32uint16_confDv32_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32uint16 test_srs_to_v32uint16_conf(v32acc32 acc, int shft, int sign, crsat_t sat,
                      crrnd_t rnd) {
  return srs_to_v32uint16_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v16int16Dv16_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_srs_to_v16int16(v16acc32 acc, int shft, int sign) {
  return srs_to_v16int16(acc, shft, sign);
}

// CHECK-LABEL: @_Z25test_srs_to_v16int16_confDv16_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_srs_to_v16int16_conf(v16acc32 acc, int shft, int sign, crsat_t sat,
                     crrnd_t rnd) {
  return srs_to_v16int16_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v16uint16Dv16_u7__acc32ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_srs_to_v16uint16(v16acc32 acc, int shft, int sign) {
  return srs_to_v16uint16(acc, shft, sign);
}

// CHECK-LABEL: @_Z26test_srs_to_v16uint16_confDv16_u7__acc32iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_srs_to_v16uint16_conf(v16acc32 acc, int shft, int sign, crsat_t sat,
                      crrnd_t rnd) {
  return srs_to_v16uint16_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v16int16Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_srs_to_v16int16(v16acc64 acc, int shft, int sign) {
  return srs_to_v16int16(acc, shft, sign);
}

// CHECK-LABEL: @_Z25test_srs_to_v16int16_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_srs_to_v16int16_conf(v16acc64 acc, int shft, int sign, crsat_t sat,
                     crrnd_t rnd) {
  return srs_to_v16int16_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v16uint16Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_srs_to_v16uint16(v16acc64 acc, int shft, int sign) {
  return srs_to_v16uint16(acc, shft, sign);
}

// CHECK-LABEL: @_Z26test_srs_to_v16uint16_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_srs_to_v16uint16_conf(v16acc64 acc, int shft, int sign, crsat_t sat,
                      crrnd_t rnd) {
  return srs_to_v16uint16_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z17test_srs_to_int32Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_srs_to_int32(v16acc64 acc, int shft, int sign) {
  return srs_to_int32(acc, shft, sign);
}

// CHECK-LABEL: @_Z22test_srs_to_int32_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16int32 test_srs_to_int32_conf(v16acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return srs_to_int32_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z18test_srs_to_uint32Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16uint32 test_srs_to_uint32(v16acc64 acc, int shft, int sign) {
  return srs_to_uint32(acc, shft, sign);
}

// CHECK-LABEL: @_Z23test_srs_to_uint32_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16uint32 test_srs_to_uint32_conf(v16acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return srs_to_uint32_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z19test_srs_to_v8int32Dv8_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8int32 test_srs_to_v8int32(v8acc64 acc, int shft, int sign) {
  return srs_to_v8int32(acc, shft, sign);
}

// CHECK-LABEL: @_Z24test_srs_to_v8int32_confDv8_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8int32 test_srs_to_v8int32_conf(v8acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return srs_to_v8int32_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v8uint32Dv8_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8uint32 test_srs_to_v8uint32(v8acc64 acc, int shft, int sign) {
  return srs_to_v8uint32(acc, shft, sign);
}

// CHECK-LABEL: @_Z25test_srs_to_v8uint32_confDv8_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8uint32 test_srs_to_v8uint32_conf(v8acc64 acc, int shft, int sign, crsat_t sat, crrnd_t rnd) {
  return srs_to_v8uint32_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v16int32Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_srs_to_v16int32(v16acc64 acc, int shft, int sign) {
  return srs_to_v16int32(acc, shft, sign);
}

// CHECK-LABEL: @_Z25test_srs_to_v16int32_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16int32 test_srs_to_v16int32_conf(v16acc64 acc, int shft, int sign, crsat_t sat,
                     crrnd_t rnd) {
  return srs_to_v16int32_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v16uint32Dv16_u7__acc64ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16uint32 test_srs_to_v16uint32(v16acc64 acc, int shft, int sign) {
  return srs_to_v16uint32(acc, shft, sign);
}

// CHECK-LABEL: @_Z26test_srs_to_v16uint32_confDv16_u7__acc64iijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16uint32 test_srs_to_v16uint32_conf(v16acc64 acc, int shft, int sign, crsat_t sat,
                      crrnd_t rnd) {
  return srs_to_v16uint32_conf(acc, shft, sign, sat, rnd);
}

// CHECK-LABEL: @_Z19test_srs_to_v32int8Dv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32int8 test_srs_to_v32int8(v32acc32 acc, int shft) {
  return srs_to_v32int8(acc, shft);
}

// CHECK-LABEL: @_Z24test_srs_to_v32int8_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32int8 test_srs_to_v32int8_conf(v32acc32 acc, int shft, crsat_t sat,
                                   crrnd_t rnd) {
  return srs_to_v32int8_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v32uint8Dv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <32 x i8> [[TMP0]]
//
v32uint8 test_srs_to_v32uint8(v32acc32 acc, int shft) {
  return srs_to_v32uint8(acc, shft);
}

// CHECK-LABEL: @_Z25test_srs_to_v32uint8_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i8> [[TMP2]]
//
v32uint8 test_srs_to_v32uint8_conf(v32acc32 acc, int shft, crsat_t sat,
                                     crrnd_t rnd) {
  return srs_to_v32uint8_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v32int16Dv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32int16 test_srs_to_v32int16(v32acc32 acc, int shft) {
  return srs_to_v32int16(acc, shft);
}

// CHECK-LABEL: @_Z25test_srs_to_v32int16_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32int16 test_srs_to_v32int16_conf(v32acc32 acc, int shft, crsat_t sat,
                                     crrnd_t rnd) {
  return srs_to_v32int16_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v32uint16Dv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <32 x i16> [[TMP0]]
//
v32uint16 test_srs_to_v32uint16(v32acc32 acc, int shft) {
  return srs_to_v32uint16(acc, shft);
}

// CHECK-LABEL: @_Z26test_srs_to_v32uint16_confDv32_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <32 x i16> [[TMP2]]
//
v32uint16 test_srs_to_v32uint16_conf(v32acc32 acc, int shft, crsat_t sat,
                                       crrnd_t rnd) {
  return srs_to_v32uint16_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v16int16Dv16_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_srs_to_v16int16(v16acc32 acc, int shft) {
  return srs_to_v16int16(acc, shft);
}

// CHECK-LABEL: @_Z25test_srs_to_v16int16_confDv16_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_srs_to_v16int16_conf(v16acc32 acc, int shft, crsat_t sat,
                                     crrnd_t rnd) {
  return srs_to_v16int16_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v16uint16Dv16_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_srs_to_v16uint16(v16acc32 acc, int shft) {
  return srs_to_v16uint16(acc, shft);
}

// CHECK-LABEL: @_Z26test_srs_to_v16uint16_confDv16_u7__acc32ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_srs_to_v16uint16_conf(v16acc32 acc, int shft, crsat_t sat,
                                       crrnd_t rnd) {
  return srs_to_v16uint16_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v16int16Dv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16int16 test_srs_to_v16int16(v16acc64 acc, int shft) {
  return srs_to_v16int16(acc, shft);
}

// CHECK-LABEL: @_Z25test_srs_to_v16int16_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16int16 test_srs_to_v16int16_conf(v16acc64 acc, int shft, crsat_t sat,
                                     crrnd_t rnd) {
  return srs_to_v16int16_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v16uint16Dv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i16> [[TMP0]]
//
v16uint16 test_srs_to_v16uint16(v16acc64 acc, int shft) {
  return srs_to_v16uint16(acc, shft);
}

// CHECK-LABEL: @_Z26test_srs_to_v16uint16_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i16> [[TMP2]]
//
v16uint16 test_srs_to_v16uint16_conf(v16acc64 acc, int shft, crsat_t sat,
                                       crrnd_t rnd) {
  return srs_to_v16uint16_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v16int32Dv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_srs_to_v16int32(v16acc64 acc, int shft) {
  return srs_to_v16int32(acc, shft);
}

// CHECK-LABEL: @_Z25test_srs_to_v16int32_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16int32 test_srs_to_v16int32_conf(v16acc64 acc, int shft, crsat_t sat,
                                     crrnd_t rnd) {
  return srs_to_v16int32_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z21test_srs_to_v16uint32Dv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16uint32 test_srs_to_v16uint32(v16acc64 acc, int shft) {
  return srs_to_v16uint32(acc, shft);
}

// CHECK-LABEL: @_Z26test_srs_to_v16uint32_confDv16_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <16 x i32> [[TMP2]]
//
v16uint32 test_srs_to_v16uint32_conf(v16acc64 acc, int shft, crsat_t sat,
                                       crrnd_t rnd) {
  return srs_to_v16uint32_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z19test_srs_to_v8int32Dv8_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8int32 test_srs_to_v8int32(v8acc64 acc, int shft) {
  return srs_to_v8int32(acc, shft);
}

// CHECK-LABEL: @_Z24test_srs_to_v8int32_confDv8_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8int32 test_srs_to_v8int32_conf(v8acc64 acc, int shft, crsat_t sat,
                                   crrnd_t rnd) {
  return srs_to_v8int32_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z20test_srs_to_v8uint32Dv8_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <8 x i32> [[TMP0]]
//
v8uint32 test_srs_to_v8uint32(v8acc64 acc, int shft) {
  return srs_to_v8uint32(acc, shft);
}

// CHECK-LABEL: @_Z25test_srs_to_v8uint32_confDv8_u7__acc64ijj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[SAT:%.*]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[RND:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> [[ACC:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[TMP0]])
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[TMP1]])
// CHECK-NEXT:    ret <8 x i32> [[TMP2]]
//
v8uint32 test_srs_to_v8uint32_conf(v8acc64 acc, int shft, crsat_t sat,
                                     crrnd_t rnd) {
  return srs_to_v8uint32_conf(acc, shft, sat, rnd);
}

// CHECK-LABEL: @_Z19test_to_v32bfloat16Dv32_u10__accfloat(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[ACC:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64> [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[ACC]], i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64> [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef <32 x bfloat> @llvm.aie2.concat.bf512.bf256(<16 x bfloat> [[TMP1]], <16 x bfloat> [[TMP3]])
// CHECK-NEXT:    ret <32 x bfloat> [[TMP4]]
//
v32bfloat16 test_to_v32bfloat16(v32accfloat acc) {
  return to_v32bfloat16(acc);
}
