// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- bfloat16.cpp ---------------------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang --target=aie2 -nostdlibinc -S -emit-llvm %s -O2 -o - | FileCheck %s
// CHECK-LABEL: @_Z13test_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat [[ARG:%.*]]
//
bfloat16 test_bfloat16(bfloat16 arg) {
  return arg;
}
// CHECK-LABEL: @_Z14test0_bfloat16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = sitofp i32 [[ARG0:%.*]] to bfloat
// CHECK-NEXT:    ret bfloat [[CONV]]
//
bfloat16 test0_bfloat16(int arg0) {
  return (bfloat16)arg0;
}
// CHECK-LABEL: @_Z14test1_bfloat16f(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptrunc float [[ARG0:%.*]] to bfloat
// CHECK-NEXT:    ret bfloat [[CONV]]
//
bfloat16 test1_bfloat16(float arg0) {
  return (bfloat16)arg0;
}
// CHECK-LABEL: @_Z14test2_bfloat16j(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = uitofp i32 [[ARG0:%.*]] to bfloat
// CHECK-NEXT:    ret bfloat [[CONV]]
//
bfloat16 test2_bfloat16(unsigned arg0) {
  return (bfloat16)arg0;
}
// CHECK-LABEL: @_Z14test3_bfloat16s(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = sitofp i16 [[ARG0:%.*]] to bfloat
// CHECK-NEXT:    ret bfloat [[CONV]]
//
bfloat16 test3_bfloat16(short arg0) {
  return (bfloat16)arg0;
}
// CHECK-LABEL: @_Z14test4_bfloat16c(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = sitofp i8 [[ARG0:%.*]] to bfloat
// CHECK-NEXT:    ret bfloat [[CONV]]
//
bfloat16 test4_bfloat16(char arg0) {
  return (bfloat16)arg0;
}
// CHECK-LABEL: @_Z14test5_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptosi bfloat [[ARG0:%.*]] to i32
// CHECK-NEXT:    ret i32 [[CONV]]
//
int test5_bfloat16(bfloat16 arg0) {
  return (int)arg0;
}
// CHECK-LABEL: @_Z14test6_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptoui bfloat [[ARG0:%.*]] to i32
// CHECK-NEXT:    ret i32 [[CONV]]
//
unsigned test6_bfloat16(bfloat16 arg0) {
  return (unsigned)arg0;
}
// CHECK-LABEL: @_Z14test7_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptosi bfloat [[ARG0:%.*]] to i16
// CHECK-NEXT:    ret i16 [[CONV]]
//
short test7_bfloat16(bfloat16 arg0) {
  return (short)arg0;
}
// CHECK-LABEL: @_Z14test8_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptoui bfloat [[ARG0:%.*]] to i16
// CHECK-NEXT:    ret i16 [[CONV]]
//
unsigned short test8_bfloat16(bfloat16 arg0) {
  return (unsigned short)arg0;
}
// CHECK-LABEL: @_Z14test9_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptosi bfloat [[ARG0:%.*]] to i8
// CHECK-NEXT:    ret i8 [[CONV]]
//
char test9_bfloat16(bfloat16 arg0) {
  return (char)arg0;
}
// CHECK-LABEL: @_Z15test10_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptosi bfloat [[ARG0:%.*]] to i8
// CHECK-NEXT:    ret i8 [[CONV]]
//
signed char test10_bfloat16(bfloat16 arg0) {
  return (signed char)arg0;
}
// CHECK-LABEL: @_Z15test11_bfloat16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fptoui bfloat [[ARG0:%.*]] to i8
// CHECK-NEXT:    ret i8 [[CONV]]
//
unsigned char test11_bfloat16(bfloat16 arg0) {
  return (unsigned char)arg0;
}
// CHECK-LABEL: @_Z15bfloat16_assignv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR3F80
//
bfloat16 bfloat16_assign() {
  const bfloat16 bfloat16_one    = 1.0;
  return bfloat16_one;
}

// CHECK-LABEL: @_Z13operator_plusu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UNPROMOTION:%.*]] = fadd bfloat [[A:%.*]], [[B:%.*]]
// CHECK-NEXT:    ret bfloat [[UNPROMOTION]]
//
bfloat16 operator_plus(bfloat16 a, bfloat16 b) {
  return a + b;
}

// CHECK-LABEL: @_Z14operator_minusu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UNPROMOTION:%.*]] = fsub bfloat [[A:%.*]], [[B:%.*]]
// CHECK-NEXT:    ret bfloat [[UNPROMOTION]]
//
bfloat16 operator_minus(bfloat16 a, bfloat16 b) {
  return a - b;
}

// CHECK-LABEL: @_Z12operator_mulu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UNPROMOTION:%.*]] = fmul bfloat [[A:%.*]], [[B:%.*]]
// CHECK-NEXT:    ret bfloat [[UNPROMOTION]]
//
bfloat16 operator_mul(bfloat16 a, bfloat16 b) {
  return a * b;
}

// CHECK-LABEL: @_Z12operator_negu6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UNPROMOTION:%.*]] = fneg bfloat [[A:%.*]]
// CHECK-NEXT:    ret bfloat [[UNPROMOTION]]
//
bfloat16 operator_neg(bfloat16 a) {
  return -a;
}

// CHECK-LABEL: @_Z13bfloat16_div0u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UNPROMOTION:%.*]] = fdiv bfloat 0xR0000, [[ARG:%.*]]
// CHECK-NEXT:    ret bfloat [[UNPROMOTION]]
//
bfloat16 bfloat16_div0(bfloat16 arg) {
  const bfloat16 bfloat16_zero    = 0.0;
  return bfloat16_zero/arg;
}
// CHECK-LABEL: @_Z13bfloat16_div1u6__bf16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = sitofp i32 [[I:%.*]] to bfloat
// CHECK-NEXT:    [[UNPROMOTION:%.*]] = fdiv bfloat [[ARG:%.*]], [[CONV]]
// CHECK-NEXT:    ret bfloat [[UNPROMOTION]]
//
bfloat16 bfloat16_div1(bfloat16 arg, int i) {
  return arg/i;
}
// CHECK-LABEL: @_Z13bfloat16_div2u6__bf16f(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fpext bfloat [[ARG:%.*]] to float
// CHECK-NEXT:    [[DIV:%.*]] = fdiv float [[CONV]], [[F:%.*]]
// CHECK-NEXT:    [[CONV1:%.*]] = fptrunc float [[DIV]] to bfloat
// CHECK-NEXT:    ret bfloat [[CONV1]]
//
bfloat16 bfloat16_div2(bfloat16 arg, float f) {
  return arg/f;
}
// CHECK-LABEL: @_Z14bfloat16_floatu6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CONV:%.*]] = fpext bfloat [[ARG:%.*]] to float
// CHECK-NEXT:    ret float [[CONV]]
//
float bfloat16_float(bfloat16 arg) {
  float f = arg;
  return f;
}
// CHECK-LABEL: @_Z12bfloat_cmp_gu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CMP:%.*]] = fcmp ogt bfloat [[ARG0:%.*]], [[ARG1:%.*]]
// CHECK-NEXT:    ret i1 [[CMP]]
//
bool bfloat_cmp_g(bfloat16 arg0, bfloat16 arg1) {
  return (arg0 > arg1);
}
// CHECK-LABEL: @_Z13bfloat_cmp_leu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CMP:%.*]] = fcmp ole bfloat [[ARG0:%.*]], [[ARG1:%.*]]
// CHECK-NEXT:    ret i1 [[CMP]]
//
bool bfloat_cmp_le(bfloat16 arg0, bfloat16 arg1) {
  return (arg0 <= arg1);
}
// CHECK-LABEL: @_Z13bfloat_cmp_neu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CMP:%.*]] = fcmp une bfloat [[ARG0:%.*]], [[ARG1:%.*]]
// CHECK-NEXT:    ret i1 [[CMP]]
//
bool bfloat_cmp_ne(bfloat16 arg0, bfloat16 arg1) {
  return (arg0 != arg1);
}
// CHECK-LABEL: @_Z13bfloat_cmp_geu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CMP:%.*]] = fcmp oge bfloat [[ARG0:%.*]], [[ARG1:%.*]]
// CHECK-NEXT:    ret i1 [[CMP]]
//
bool bfloat_cmp_ge(bfloat16 arg0, bfloat16 arg1) {
  return (arg0 >= arg1);
}
// CHECK-LABEL: @_Z15bfloat16_cmp_ltu6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CMP:%.*]] = fcmp olt bfloat [[ARG0:%.*]], [[ARG1:%.*]]
// CHECK-NEXT:    ret i1 [[CMP]]
//
bool bfloat16_cmp_lt(bfloat16 arg0, bfloat16 arg1) {
  return (arg0 < arg1);
}
// CHECK-LABEL: @_Z13bfloat_cmp_equ6__bf16u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CMP:%.*]] = fcmp oeq bfloat [[ARG0:%.*]], [[ARG1:%.*]]
// CHECK-NEXT:    ret i1 [[CMP]]
//
bool bfloat_cmp_eq(bfloat16 arg0, bfloat16 arg1) {
  return (arg0 == arg1);
}
// CHECK-LABEL: @_Z15pass_v2bfloat16Dv2_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret void
//
void pass_v2bfloat16(v2bfloat16) {}
// CHECK-LABEL: @_Z15pass_v4bfloat16Dv4_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret void
//
void pass_v4bfloat16(v4bfloat16) {}
// CHECK-LABEL: @_Z15pass_v8bfloat16Dv8_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret void
//
void pass_v8bfloat16(v8bfloat16) {}
// CHECK-LABEL: @_Z16pass_v16bfloat16Dv16_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret void
//
void pass_v16bfloat16(v16bfloat16) {}
// CHECK-LABEL: @_Z16pass_v32bfloat16Dv32_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret void
//
void pass_v32bfloat16(v32bfloat16) {}
// CHECK-LABEL: @_Z16pass_v64bfloat16Dv64_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret void
//
void pass_v64bfloat16(v64bfloat16) {}
// CHECK-LABEL: @_Z14ret_v2bfloat16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret <2 x bfloat> zeroinitializer
//
v2bfloat16 ret_v2bfloat16(void) { return {}; }
// CHECK-LABEL: @_Z14ret_v4bfloat16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret <4 x bfloat> zeroinitializer
//
v4bfloat16 ret_v4bfloat16(void) { return {}; }
// CHECK-LABEL: @_Z14ret_v8bfloat16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret <8 x bfloat> zeroinitializer
//
v8bfloat16 ret_v8bfloat16(void) { return {}; }
// CHECK-LABEL: @_Z15ret_v16bfloat16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret <16 x bfloat> zeroinitializer
//
v16bfloat16 ret_v16bfloat16(void) { return {}; }
// CHECK-LABEL: @_Z15ret_v32bfloat16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret <32 x bfloat> zeroinitializer
//
v32bfloat16 ret_v32bfloat16(void) { return {}; }
// CHECK-LABEL: @_Z15ret_v64bfloat16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret <64 x bfloat> zeroinitializer
//
v64bfloat16 ret_v64bfloat16(void) { return {}; }
