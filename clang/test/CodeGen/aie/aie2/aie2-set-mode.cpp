// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aie2-set-mode.cpp ----------------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z16test_set_satmodej(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 [[VAL:%.*]])
// CHECK-NEXT:    ret void
//
void test_set_satmode (unsigned int val) {
  return set_satmode(val);
}

// CHECK-LABEL: @_Z12test_set_satv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 1)
// CHECK-NEXT:    ret void
//
void test_set_sat () {
  return set_sat();
}

// CHECK-LABEL: @_Z15test_set_symsatv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 3)
// CHECK-NEXT:    ret void
//
void test_set_symsat () {
  return set_symsat();
}

// CHECK-LABEL: @_Z12test_clr_satv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 0)
// CHECK-NEXT:    ret void
//
void test_clr_sat () {
  return clr_sat();
}

// CHECK-LABEL: @_Z12test_set_rndj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 6, i32 [[VAL:%.*]])
// CHECK-NEXT:    ret void
//
void test_set_rnd (unsigned int val) {
  return set_rnd(val);
}

// CHECK-LABEL: @_Z22test_set_fpmulmac_maskj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 3, i32 [[VAL:%.*]])
// CHECK-NEXT:    ret void
//
void test_set_fpmulmac_mask (unsigned int val) {
  return set_fpmulmac_mask(val);
}

// CHECK-LABEL: @_Z20test_set_fp2int_maskj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 2, i32 [[VAL:%.*]])
// CHECK-NEXT:    ret void
//
void test_set_fp2int_mask (unsigned int val) {
  return set_fp2int_mask(val);
}

// CHECK-LABEL: @_Z19test_set_fp2bf_maskj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.set.ctrl.reg(i32 1, i32 [[VAL:%.*]])
// CHECK-NEXT:    ret void
//
void test_set_fp2bf_mask (unsigned int val) {
  return set_fp2bf_mask(val);
}

// CHECK-LABEL: @_Z16test_get_satmodev(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    ret i32 [[TMP0]]
//
unsigned int test_get_satmode() { return get_satmode(); }

// CHECK-LABEL: @_Z12test_get_satv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 9)
// CHECK-NEXT:    ret i32 [[TMP0]]
//
unsigned int test_get_sat() { return get_sat(); }

// CHECK-LABEL: @_Z12test_get_rndv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 6)
// CHECK-NEXT:    ret i32 [[TMP0]]
//
unsigned int test_get_rnd() { return get_rnd(); }

// CHECK-LABEL: @_Z22test_get_fpmulmac_maskv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 3)
// CHECK-NEXT:    ret i32 [[TMP0]]
//
unsigned int test_get_fpmulmac_mask() {
  return get_fpmulmac_mask();
}

// CHECK-LABEL: @_Z20test_get_fp2int_maskv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 2)
// CHECK-NEXT:    ret i32 [[TMP0]]
//
unsigned int test_get_fp2int_mask() {
  return get_fp2int_mask();
}

// CHECK-LABEL: @_Z19test_get_fp2bf_maskv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.get.ctrl.reg(i32 1)
// CHECK-NEXT:    ret i32 [[TMP0]]
//
unsigned int test_get_fp2bf_mask() {
  return get_fp2bf_mask();
}
