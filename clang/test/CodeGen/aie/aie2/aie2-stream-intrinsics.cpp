// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aie2-stream-intrinsics.cpp -------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z21test_get_scd_v16acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_get_scd_v16acc32(int en) { return get_scd_v16acc32(en); }

// CHECK-LABEL: @_Z20test_get_scd_v8acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_get_scd_v8acc64(int en) { return get_scd_v8acc64(en); }

// CHECK-LABEL: @_Z24test_get_scd_v16accfloati(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_get_scd_v16accfloat(int en) { return get_scd_v16accfloat(en); }

// CHECK-LABEL: @_Z21test_get_scd_v128int4i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v128int4 test_get_scd_v128int4(int en) { return get_scd_v128int4(en); }

// CHECK-LABEL: @_Z22test_get_scd_v128uint4i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v128uint4 test_get_scd_v128uint4(int en) { return get_scd_v128uint4(en); }

// CHECK-LABEL: @_Z20test_get_scd_v64int8i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v64int8 test_get_scd_v64int8(int en) { return get_scd_v64int8(en); }

// CHECK-LABEL: @_Z21test_get_scd_v64uint8i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v64uint8 test_get_scd_v64uint8(int en) { return get_scd_v64uint8(en); }

// CHECK-LABEL: @_Z21test_get_scd_v32int16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP1]]
//
v32int16 test_get_scd_v32int16(int en) { return get_scd_v32int16(en); }

// CHECK-LABEL: @_Z22test_get_scd_v32uint16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP1]]
//
v32uint16 test_get_scd_v32uint16(int en) { return get_scd_v32uint16(en); }

// CHECK-LABEL: @_Z21test_get_scd_v16int32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_get_scd_v16int32(int en) { return get_scd_v16int32(en); }

// CHECK-LABEL: @_Z22test_get_scd_v16uint32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16uint32 test_get_scd_v16uint32(int en) { return get_scd_v16uint32(en); }

// CHECK-LABEL: @_Z24test_get_scd_v32bfloat16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <32 x bfloat>
// CHECK-NEXT:    ret <32 x bfloat> [[TMP1]]
//
v32bfloat16 test_get_scd_v32bfloat16(int en) { return get_scd_v32bfloat16(en); }

// CHECK-LABEL: @_Z21test_get_scd_v16acc32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_get_scd_v16acc32() { return get_scd_v16acc32(); }

// CHECK-LABEL: @_Z20test_get_scd_v8acc64v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_get_scd_v8acc64() { return get_scd_v8acc64(); }

// CHECK-LABEL: @_Z24test_get_scd_v16accfloatv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_get_scd_v16accfloat() { return get_scd_v16accfloat(); }

// CHECK-LABEL: @_Z21test_get_scd_v128int4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v128int4 test_get_scd_v128int4() { return get_scd_v128int4(); }

// CHECK-LABEL: @_Z22test_get_scd_v128uint4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v128uint4 test_get_scd_v128uint4() { return get_scd_v128uint4(); }

// CHECK-LABEL: @_Z20test_get_scd_v64int8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v64int8 test_get_scd_v64int8() { return get_scd_v64int8(); }

// CHECK-LABEL: @_Z21test_get_scd_v64uint8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP1]]
//
v64uint8 test_get_scd_v64uint8() { return get_scd_v64uint8(); }

// CHECK-LABEL: @_Z21test_get_scd_v32int16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP1]]
//
v32int16 test_get_scd_v32int16() { return get_scd_v32int16(); }

// CHECK-LABEL: @_Z22test_get_scd_v32uint16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP1]]
//
v32uint16 test_get_scd_v32uint16() { return get_scd_v32uint16(); }

// CHECK-LABEL: @_Z21test_get_scd_v16int32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16int32 test_get_scd_v16int32() { return get_scd_v16int32(); }

// CHECK-LABEL: @_Z22test_get_scd_v16uint32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    ret <16 x i32> [[TMP0]]
//
v16uint32 test_get_scd_v16uint32() { return get_scd_v16uint32(); }

// CHECK-LABEL: @_Z24test_get_scd_v32bfloat16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i32> [[TMP0]] to <32 x bfloat>
// CHECK-NEXT:    ret <32 x bfloat> [[TMP1]]
//
v32bfloat16 test_get_scd_v32bfloat16() { return get_scd_v32bfloat16(); }

// CHECK-LABEL: @_Z21test_get_scd_v32acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> [[TMP1]], <8 x i64> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v32acc32 test_get_scd_v32acc32(int en) { return get_scd_v32acc32(en); }

// CHECK-LABEL: @_Z21test_get_scd_v16acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> [[TMP1]], <8 x i64> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v16acc64 test_get_scd_v16acc64(int en) { return get_scd_v16acc64(en); }

// CHECK-LABEL: @_Z24test_get_scd_v32accfloati(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> [[TMP1]], <8 x i64> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v32accfloat test_get_scd_v32accfloat(int en){ return get_scd_v32accfloat(en); }

// CHECK-LABEL: @_Z21test_get_scd_v32int32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <32 x i32> [[TMP3]]
//
v32int32 test_get_scd_v32int32(int en) { return get_scd_v32int32(en); }

// CHECK-LABEL: @_Z21test_get_scd_v256int4i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v256int4 test_get_scd_v256int4(int en) { return get_scd_v256int4(en); }

// CHECK-LABEL: @_Z22test_get_scd_v256uint4i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v256uint4 test_get_scd_v256uint4(int en) { return get_scd_v256uint4(en); }

// CHECK-LABEL: @_Z21test_get_scd_v128int8i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v128int8 test_get_scd_v128int8(int en) { return get_scd_v128int8(en); }

// CHECK-LABEL: @_Z22test_get_scd_v128uint8i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v128uint8 test_get_scd_v128uint8(int en) { return get_scd_v128uint8(en); }

// CHECK-LABEL: @_Z21test_get_scd_v64int16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP4]]
//
v64int16 test_get_scd_v64int16(int en) { return get_scd_v64int16(en); }

// CHECK-LABEL: @_Z22test_get_scd_v64uint16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP4]]
//
v64uint16 test_get_scd_v64uint16(int en) { return get_scd_v64uint16(en); }

// CHECK-LABEL: @_Z22test_get_scd_v32uint32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 [[EN]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <32 x i32> [[TMP3]]
//
v32uint32 test_get_scd_v32uint32(int en) { return get_scd_v32uint32(en); }

// CHECK-LABEL: @_Z21test_get_scd_v32acc32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> [[TMP1]], <8 x i64> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v32acc32 test_get_scd_v32acc32() { return get_scd_v32acc32(); }

// CHECK-LABEL: @_Z21test_get_scd_v16acc64v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> [[TMP1]], <8 x i64> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP3]]
//
v16acc64 test_get_scd_v16acc64() { return get_scd_v16acc64(); }

// CHECK-LABEL: @_Z21test_get_scd_v256int4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v256int4 test_get_scd_v256int4() { return get_scd_v256int4(); }

// CHECK-LABEL: @_Z22test_get_scd_v256uint4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v256uint4 test_get_scd_v256uint4() { return get_scd_v256uint4(); }

// CHECK-LABEL: @_Z21test_get_scd_v128int8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v128int8 test_get_scd_v128int8() { return get_scd_v128int8(); }

// CHECK-LABEL: @_Z22test_get_scd_v128uint8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP4]]
//
v128uint8 test_get_scd_v128uint8() { return get_scd_v128uint8(); }

// CHECK-LABEL: @_Z21test_get_scd_v64int16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP4]]
//
v64int16 test_get_scd_v64int16() { return get_scd_v64int16(); }

// CHECK-LABEL: @_Z22test_get_scd_v64uint16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast <32 x i32> [[TMP3]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP4]]
//
v64uint16 test_get_scd_v64uint16() { return get_scd_v64uint16(); }

// CHECK-LABEL: @_Z21test_get_scd_v32int32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <32 x i32> [[TMP3]]
//
v32int32 test_get_scd_v32int32() { return get_scd_v32int32(); }

// CHECK-LABEL: @_Z22test_get_scd_v32uint32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP1]], <16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret <32 x i32> [[TMP3]]
//
v32uint32 test_get_scd_v32uint32() { return get_scd_v32uint32(); }

// CHECK-LABEL: @_Z24test_get_scd_v32acc32_loi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.lo(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_get_scd_v32acc32_lo(int en) { return get_scd_v32acc32_lo(en); }

// CHECK-LABEL: @_Z24test_get_scd_v32acc32_hii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.hi(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_get_scd_v32acc32_hi(int en) { return get_scd_v32acc32_hi(en); }

// CHECK-LABEL: @_Z24test_get_scd_v16acc64_loi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.lo(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_get_scd_v16acc64_lo(int en) { return get_scd_v16acc64_lo(en); }

// CHECK-LABEL: @_Z24test_get_scd_v16acc64_hii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.hi(i32 [[EN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_get_scd_v16acc64_hi(int en) { return get_scd_v16acc64_hi(en); }

// CHECK-LABEL: @_Z24test_get_scd_v32acc32_lov(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.lo(i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_get_scd_v32acc32_lo() { return get_scd_v32acc32_lo(); }

// CHECK-LABEL: @_Z24test_get_scd_v32acc32_hiv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.hi(i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_get_scd_v32acc32_hi() { return get_scd_v32acc32_hi(); }

// CHECK-LABEL: @_Z24test_get_scd_v16acc64_lov(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.lo(i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_get_scd_v16acc64_lo() { return get_scd_v16acc64_lo(); }

// CHECK-LABEL: @_Z24test_get_scd_v16acc64_hiv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.scd.expand.hi(i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_get_scd_v16acc64_hi() { return get_scd_v16acc64_hi(); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[A:%.*]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16acc32 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv8_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[A:%.*]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v8acc64 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_u10__accfloati(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[A:%.*]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16accfloat a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_DB8_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128int4 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_DU8_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128uint4 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_ai(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64int8 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_hi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64uint8 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32int16 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32uint16 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[A:%.*]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16int32 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_ji(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[A:%.*]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16uint32 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_u6__bf16i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x bfloat> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32bfloat16 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[A:%.*]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16acc32 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv8_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[A:%.*]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v8acc64 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_u10__accfloat(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[A:%.*]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16accfloat a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_DB8_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128int4 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_DU8_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128uint4 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_a(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64int8 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_h(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64uint8 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_s(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32int16 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_t(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32uint16 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[A:%.*]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16int32 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_j(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[A:%.*]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16uint32 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x bfloat> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32bfloat16 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_u7__acc32i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP1]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32acc32 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_u7__acc64i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP1]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16acc64 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32int32 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_DB8_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v256int4 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_DU8_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v256uint4 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_ai(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128int8 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_hi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128uint8 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64int16 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64uint16 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_ji(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 [[EN:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 [[EN]])
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32uint32 a, int en) { put_mcd(a, en); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP1]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32acc32 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i64> @llvm.aie2.ext.512.1024.acc(<16 x i64> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> [[TMP1]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v16acc64 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_DB8_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v256int4 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_DU8_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v256uint4 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_a(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128int8 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv128_h(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v128uint8 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_s(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64int16 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv64_t(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP2]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v64uint16 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32int32 a) { put_mcd(a); }

// CHECK-LABEL: @_Z12test_put_mcdDv32_j(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A]], i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.mcd.write.vec(<16 x i32> [[TMP1]], i32 1)
// CHECK-NEXT:    ret void
//
void test_put_mcd(v32uint32 a) { put_mcd(a); }

// CHECK-LABEL: @_Z11test_put_msii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[VAL:%.*]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(int val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[VAL:%.*]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(int val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbiiRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[VAL:%.*]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP0]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2:![0-9]+]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(int val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbiRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[VAL:%.*]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP0]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(int val, bool &success) { put_ms_nb(val, success); }

// CHECK-LABEL: @_Z11test_put_msji(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[VAL:%.*]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(unsigned int val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msj(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[VAL:%.*]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(unsigned int val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbjiRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[VAL:%.*]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP0]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(unsigned int val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbjRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[VAL:%.*]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP0]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(unsigned int val, bool &success) {
  put_ms_nb(val, success);
}

// CHECK-LABEL: @_Z11test_put_msDv4_DB8_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v8int4 val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv4_DB8_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(v8int4 val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_DB8_iRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v8int4 val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_DB8_Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v8int4 val, bool &success) { put_ms_nb(val, success); }

// CHECK-LABEL: @_Z11test_put_msDv4_DU8_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v8uint4 val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv4_DU8_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(v8uint4 val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_DU8_iRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v8uint4 val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_DU8_Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v8uint4 val, bool &success) { put_ms_nb(val, success); }

// CHECK-LABEL: @_Z11test_put_msDv4_ai(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v4int8 val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv4_a(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(v4int8 val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_aiRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v4int8 val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_aRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v4int8 val, bool &success) { put_ms_nb(val, success); }

// CHECK-LABEL: @_Z11test_put_msDv4_hi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v4uint8 val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv4_h(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(v4uint8 val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_hiRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v4uint8 val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbDv4_hRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i8> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v4uint8 val, bool &success) { put_ms_nb(val, success); }

// CHECK-LABEL: @_Z11test_put_msDv2_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v2int16 val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv2_s(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(v2int16 val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbDv2_siRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v2int16 val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbDv2_sRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v2int16 val, bool &success) { put_ms_nb(val, success); }

// CHECK-LABEL: @_Z11test_put_msDv2_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v2uint16 val, int tlast) { put_ms(val, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv2_t(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    ret void
//
void test_put_ms(v2uint16 val) { put_ms(val); }

// CHECK-LABEL: @_Z14test_put_ms_nbDv2_tiRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v2uint16 val, int tlast, bool &success) {
  put_ms_nb(val, tlast, success);
}

// CHECK-LABEL: @_Z14test_put_ms_nbDv2_tRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i16> [[VAL:%.*]] to i32
// CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @llvm.aie2.put.ms.nb(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i32 [[TMP1]], 0
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = zext i1 [[TOBOOL_I]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void test_put_ms_nb(v2uint16 val, bool &success) { put_ms_nb(val, success); }

// CHECK-LABEL: @_Z11test_put_msDv4_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[A:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v4int32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_DB8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i8> [[A:%.*]] to <4 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32int4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_DU8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i8> [[A:%.*]] to <4 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32uint4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_aii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i8> [[A:%.*]] to <4 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v16int8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_hii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i8> [[A:%.*]] to <4 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v16uint8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv8_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i16> [[A:%.*]] to <4 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v8int16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv8_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <8 x i16> [[A:%.*]] to <4 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v8uint16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv4_jii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> [[A:%.*]])
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v4uint32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv8_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v8int32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_DB8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A:%.*]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v64int4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_DU8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A:%.*]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v64uint4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_aii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A:%.*]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32int8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_hii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i8> [[A:%.*]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32uint8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[A:%.*]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v16int16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <16 x i16> [[A:%.*]] to <8 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v16uint16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv8_jii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v8uint32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A:%.*]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v16int32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv64_DB8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v128int4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv64_DU8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v128uint4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv64_aii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v64int8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv64_hii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v64uint8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32int16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32uint16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv16_jii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A:%.*]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[A]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v16uint32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A]], i32 1)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP18]], i32 0)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32int32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv128_DB8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP17]], i32 0)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 0)
// CHECK-NEXT:    [[TMP34:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP34]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v256int4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv128_DU8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP17]], i32 0)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 0)
// CHECK-NEXT:    [[TMP34:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP34]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v256uint4 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv128_aii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP17]], i32 0)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 0)
// CHECK-NEXT:    [[TMP34:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP34]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v128int8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv128_hii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <128 x i8> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP17]], i32 0)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 0)
// CHECK-NEXT:    [[TMP34:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP34]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v128uint8 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv64_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP17]], i32 0)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 0)
// CHECK-NEXT:    [[TMP34:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP34]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v64int16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv64_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i16> [[A:%.*]] to <32 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP1]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP17]], i32 0)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 0)
// CHECK-NEXT:    [[TMP34:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP18]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP34]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v64uint16 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_put_msDv32_jii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP3]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP4]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP5]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP6]], i32 0)
// CHECK-NEXT:    [[TMP7:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP7]], i32 0)
// CHECK-NEXT:    [[TMP8:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP8]], i32 0)
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP9]], i32 0)
// CHECK-NEXT:    [[TMP10:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP10]], i32 0)
// CHECK-NEXT:    [[TMP11:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP11]], i32 0)
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP12]], i32 0)
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP13]], i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP14]], i32 0)
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP15]], i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP0]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP16]], i32 0)
// CHECK-NEXT:    [[TMP17:%.*]] = tail call <16 x i32> @llvm.aie2.ext.I512.I1024(<32 x i32> [[A]], i32 1)
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 0, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP18]], i32 0)
// CHECK-NEXT:    [[TMP19:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 1, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP19]], i32 0)
// CHECK-NEXT:    [[TMP20:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 2, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP20]], i32 0)
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 3, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP21]], i32 0)
// CHECK-NEXT:    [[TMP22:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 4, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP22]], i32 0)
// CHECK-NEXT:    [[TMP23:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 5, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP23]], i32 0)
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 6, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 7, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP25]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 8, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP26]], i32 0)
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 9, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP27]], i32 0)
// CHECK-NEXT:    [[TMP28:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 10, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP28]], i32 0)
// CHECK-NEXT:    [[TMP29:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 11, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP29]], i32 0)
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 12, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP30]], i32 0)
// CHECK-NEXT:    [[TMP31:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 13, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP31]], i32 0)
// CHECK-NEXT:    [[TMP32:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 14, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP32]], i32 0)
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> [[TMP17]], i32 15, i32 1)
// CHECK-NEXT:    tail call void @llvm.aie2.put.ms(i32 [[TMP33]], i32 [[TLAST:%.*]])
// CHECK-NEXT:    ret void
//
void test_put_ms(v32uint32 a, int en, int tlast) { put_ms(a, en, tlast); }

// CHECK-LABEL: @_Z11test_get_ssv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    ret i32 [[TMP1]]
//
int test_get_ss() { return get_ss(); }

// CHECK-LABEL: @_Z11test_get_ssRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP3]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
int test_get_ss(bool &tlast) { return get_ss(tlast); }

// CHECK-LABEL: @_Z14test_get_ss_nbRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP4:%.*]] = lshr i8 [[TMP3]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
int test_get_ss_nb(bool &success) { return get_ss_nb(success); }

// CHECK-LABEL: @_Z14test_get_ss_nbRbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP3]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP4:%.*]] = lshr i8 [[TMP3]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
int test_get_ss_nb(bool &success, bool &tlast) {
  return get_ss_nb(success, tlast);
}

// CHECK-LABEL: @_Z15test_get_ss_intv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    ret i32 [[TMP1]]
//
int test_get_ss_int() { return get_ss_int(); }

// CHECK-LABEL: @_Z15test_get_ss_intRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP3]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
int test_get_ss_int(bool &tlast) { return get_ss_int(tlast); }

// CHECK-LABEL: @_Z18test_get_ss_nb_intRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP4:%.*]] = lshr i8 [[TMP3]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
int test_get_ss_nb_int(bool &success) { return get_ss_nb_int(success); }

// CHECK-LABEL: @_Z18test_get_ss_nb_intRbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP3]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP4:%.*]] = lshr i8 [[TMP3]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
int test_get_ss_nb_int(bool &success, bool &tlast) {
  return get_ss_nb_int(success, tlast);
}

// CHECK-LABEL: @_Z16test_get_ss_uintv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    ret i32 [[TMP1]]
//
unsigned int test_get_ss_uint() { return get_ss_uint(); }

// CHECK-LABEL: @_Z16test_get_ss_uintRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP3]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
unsigned int test_get_ss_uint(bool &tlast) { return get_ss_uint(tlast); }

// CHECK-LABEL: @_Z19test_get_ss_nb_uintRb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP4:%.*]] = lshr i8 [[TMP3]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
unsigned int test_get_ss_nb_uint(bool &success) {
  return get_ss_nb_uint(success);
}

// CHECK-LABEL: @_Z19test_get_ss_nb_uintRbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP3]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP4:%.*]] = lshr i8 [[TMP3]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret i32 [[TMP2]]
//
unsigned int test_get_ss_nb_uint(bool &success, bool &tlast) {
  return get_ss_nb_uint(success, tlast);
}

// CHECK-LABEL: @_Z18test_get_ss_v8int4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to <4 x i8>
// CHECK-NEXT:    ret <4 x i8> [[TMP2]]
//
v8int4 test_get_ss_v8int4() { return get_ss_v8int4(); }

// CHECK-LABEL: @_Z18test_get_ss_v8int4Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v8int4 test_get_ss_v8int4(bool &tlast) { return get_ss_v8int4(tlast); }

// CHECK-LABEL: @_Z21test_get_ss_nb_v8int4Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v8int4 test_get_ss_nb_v8int4(bool &success) {
  return get_ss_nb_v8int4(success);
}

// CHECK-LABEL: @_Z21test_get_ss_nb_v8int4RbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v8int4 test_get_ss_nb_v8int4(bool &success, bool &tlast) {
  return get_ss_nb_v8int4(success, tlast);
}

// CHECK-LABEL: @_Z19test_get_ss_v8uint4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to <4 x i8>
// CHECK-NEXT:    ret <4 x i8> [[TMP2]]
//
v8uint4 test_get_ss_v8uint4() { return get_ss_v8uint4(); }

// CHECK-LABEL: @_Z19test_get_ss_v8uint4Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v8uint4 test_get_ss_v8uint4(bool &tlast) { return get_ss_v8uint4(tlast); }

// CHECK-LABEL: @_Z22test_get_ss_nb_v8uint4Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v8uint4 test_get_ss_nb_v8uint4(bool &success) {
  return get_ss_nb_v8uint4(success);
}

// CHECK-LABEL: @_Z22test_get_ss_nb_v8uint4RbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v8uint4 test_get_ss_nb_v8uint4(bool &success, bool &tlast) {
  return get_ss_nb_v8uint4(success, tlast);
}

// CHECK-LABEL: @_Z18test_get_ss_v4int8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to <4 x i8>
// CHECK-NEXT:    ret <4 x i8> [[TMP2]]
//
v4int8 test_get_ss_v4int8() { return get_ss_v4int8(); }

// CHECK-LABEL: @_Z18test_get_ss_v4int8Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v4int8 test_get_ss_v4int8(bool &tlast) { return get_ss_v4int8(tlast); }

// CHECK-LABEL: @_Z21test_get_ss_nb_v4int8Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v4int8 test_get_ss_nb_v4int8(bool &success) {
  return get_ss_nb_v4int8(success);
}

// CHECK-LABEL: @_Z21test_get_ss_nb_v4int8RbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v4int8 test_get_ss_nb_v4int8(bool &success, bool &tlast) {
  return get_ss_nb_v4int8(success, tlast);
}

// CHECK-LABEL: @_Z19test_get_ss_v4uint8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to <4 x i8>
// CHECK-NEXT:    ret <4 x i8> [[TMP2]]
//
v4uint8 test_get_ss_v4uint8() { return get_ss_v4uint8(); }

// CHECK-LABEL: @_Z19test_get_ss_v4uint8Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v4uint8 test_get_ss_v4uint8(bool &tlast) { return get_ss_v4uint8(tlast); }

// CHECK-LABEL: @_Z22test_get_ss_nb_v4uint8Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v4uint8 test_get_ss_nb_v4uint8(bool &success) {
  return get_ss_nb_v4uint8(success);
}

// CHECK-LABEL: @_Z22test_get_ss_nb_v4uint8RbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <4 x i8>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <4 x i8> [[TMP3]]
//
v4uint8 test_get_ss_nb_v4uint8(bool &success, bool &tlast) {
  return get_ss_nb_v4uint8(success, tlast);
}

// CHECK-LABEL: @_Z19test_get_ss_v2int16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to <2 x i16>
// CHECK-NEXT:    ret <2 x i16> [[TMP2]]
//
v2int16 test_get_ss_v2int16() { return get_ss_v2int16(); }

// CHECK-LABEL: @_Z19test_get_ss_v2int16Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <2 x i16>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <2 x i16> [[TMP3]]
//
v2int16 test_get_ss_v2int16(bool &tlast) { return get_ss_v2int16(tlast); }

// CHECK-LABEL: @_Z22test_get_ss_nb_v2int16Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <2 x i16>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <2 x i16> [[TMP3]]
//
v2int16 test_get_ss_nb_v2int16(bool &success) {
  return get_ss_nb_v2int16(success);
}

// CHECK-LABEL: @_Z22test_get_ss_nb_v2int16RbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <2 x i16>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <2 x i16> [[TMP3]]
//
v2int16 test_get_ss_nb_v2int16(bool &success, bool &tlast) {
  return get_ss_nb_v2int16(success, tlast);
}

// CHECK-LABEL: @_Z20test_get_ss_v2uint16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to <2 x i16>
// CHECK-NEXT:    ret <2 x i16> [[TMP2]]
//
v2uint16 test_get_ss_v2uint16() { return get_ss_v2uint16(); }

// CHECK-LABEL: @_Z20test_get_ss_v2uint16Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <2 x i16>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <2 x i16> [[TMP3]]
//
v2uint16 test_get_ss_v2uint16(bool &tlast) { return get_ss_v2uint16(tlast); }

// CHECK-LABEL: @_Z23test_get_ss_nb_v2uint16Rb(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <2 x i16>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <2 x i16> [[TMP3]]
//
v2uint16 test_get_ss_nb_v2uint16(bool &success) {
  return get_ss_nb_v2uint16(success);
}

// CHECK-LABEL: @_Z23test_get_ss_nb_v2uint16RbS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss.nb()
// CHECK-NEXT:    [[TMP1:%.*]] = extractvalue { i32, i32 } [[TMP0]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP0]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32 [[TMP2]] to <2 x i16>
// CHECK-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP1]] to i8
// CHECK-NEXT:    [[FROMBOOL_I:%.*]] = and i8 [[TMP4]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL_I]], ptr [[TLAST:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP5:%.*]] = lshr i8 [[TMP4]], 1
// CHECK-NEXT:    [[FROMBOOL3_I:%.*]] = and i8 [[TMP5]], 1
// CHECK-NEXT:    store i8 [[FROMBOOL3_I]], ptr [[SUCCESS:%.*]], align 1, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret <2 x i16> [[TMP3]]
//
v2uint16 test_get_ss_nb_v2uint16(bool &success, bool &tlast) {
  return get_ss_nb_v2uint16(success, tlast);
}

// CHECK-LABEL: @_Z19test_get_ss_v4int32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP0]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP13]])
// CHECK-NEXT:    ret <4 x i32> [[TMP14]]
//
v4int32 test_get_ss_v4int32() { return get_ss_v4int32(); }

// CHECK-LABEL: @_Z19test_get_ss_v32int4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP0]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP13]])
// CHECK-NEXT:    [[TMP15:%.*]] = bitcast <4 x i32> [[TMP14]] to <16 x i8>
// CHECK-NEXT:    ret <16 x i8> [[TMP15]]
//
v32int4 test_get_ss_v32int4() { return get_ss_v32int4(); }

// CHECK-LABEL: @_Z20test_get_ss_v32uint4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP0]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP13]])
// CHECK-NEXT:    [[TMP15:%.*]] = bitcast <4 x i32> [[TMP14]] to <16 x i8>
// CHECK-NEXT:    ret <16 x i8> [[TMP15]]
//
v32uint4 test_get_ss_v32uint4() { return get_ss_v32uint4(); }

// CHECK-LABEL: @_Z19test_get_ss_v16int8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef <64 x i8> @llvm.aie2.v64int8()
// CHECK-NEXT:    [[TMP14:%.*]] = bitcast <64 x i8> [[TMP13]] to <16 x i32>
// CHECK-NEXT:    [[TMP15:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP14]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP15]])
// CHECK-NEXT:    [[TMP17:%.*]] = bitcast <4 x i32> [[TMP16]] to <16 x i8>
// CHECK-NEXT:    ret <16 x i8> [[TMP17]]
//
v16int8 test_get_ss_v16int8() { return get_ss_v16int8(); }

// CHECK-LABEL: @_Z20test_get_ss_v16uint8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef <64 x i8> @llvm.aie2.v64int8()
// CHECK-NEXT:    [[TMP14:%.*]] = bitcast <64 x i8> [[TMP13]] to <16 x i32>
// CHECK-NEXT:    [[TMP15:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP14]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP15]])
// CHECK-NEXT:    [[TMP17:%.*]] = bitcast <4 x i32> [[TMP16]] to <16 x i8>
// CHECK-NEXT:    ret <16 x i8> [[TMP17]]
//
v16uint8 test_get_ss_v16uint8() { return get_ss_v16uint8(); }

// CHECK-LABEL: @_Z19test_get_ss_v8int16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef <32 x i16> @llvm.aie2.v32int16()
// CHECK-NEXT:    [[TMP14:%.*]] = bitcast <32 x i16> [[TMP13]] to <16 x i32>
// CHECK-NEXT:    [[TMP15:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP14]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP15]])
// CHECK-NEXT:    [[TMP17:%.*]] = bitcast <4 x i32> [[TMP16]] to <8 x i16>
// CHECK-NEXT:    ret <8 x i16> [[TMP17]]
//
v8int16 test_get_ss_v8int16() { return get_ss_v8int16(); }

// CHECK-LABEL: @_Z20test_get_ss_v8uint16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call noundef <32 x i16> @llvm.aie2.v32int16()
// CHECK-NEXT:    [[TMP14:%.*]] = bitcast <32 x i16> [[TMP13]] to <16 x i32>
// CHECK-NEXT:    [[TMP15:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP14]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP16:%.*]] = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP15]])
// CHECK-NEXT:    [[TMP17:%.*]] = bitcast <4 x i32> [[TMP16]] to <8 x i16>
// CHECK-NEXT:    ret <8 x i16> [[TMP17]]
//
v8uint16 test_get_ss_v8uint16() { return get_ss_v8uint16(); }

// CHECK-LABEL: @_Z20test_get_ss_v4uint32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> [[TMP12]], <16 x i32> [[TMP0]], i32 0, i32 0)
// CHECK-NEXT:    [[TMP14:%.*]] = tail call noundef <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> [[TMP13]])
// CHECK-NEXT:    ret <4 x i32> [[TMP14]]
//
v4uint32 test_get_ss_v4uint32() { return get_ss_v4uint32(); }

// CHECK-LABEL: @_Z19test_get_ss_v8int32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    ret <8 x i32> [[TMP25]]
//
v8int32 test_get_ss_v8int32() { return get_ss_v8int32(); }

// CHECK-LABEL: @_Z19test_get_ss_v64int4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast <8 x i32> [[TMP25]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP26]]
//
v64int4 test_get_ss_v64int4() { return get_ss_v64int4(); }

// CHECK-LABEL: @_Z20test_get_ss_v64uint4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast <8 x i32> [[TMP25]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP26]]
//
v64uint4 test_get_ss_v64uint4() { return get_ss_v64uint4(); }

// CHECK-LABEL: @_Z19test_get_ss_v32int8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast <8 x i32> [[TMP25]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP26]]
//
v32int8 test_get_ss_v32int8() { return get_ss_v32int8(); }

// CHECK-LABEL: @_Z20test_get_ss_v32uint8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast <8 x i32> [[TMP25]] to <32 x i8>
// CHECK-NEXT:    ret <32 x i8> [[TMP26]]
//
v32uint8 test_get_ss_v32uint8() { return get_ss_v32uint8(); }

// CHECK-LABEL: @_Z20test_get_ss_v16int16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast <8 x i32> [[TMP25]] to <16 x i16>
// CHECK-NEXT:    ret <16 x i16> [[TMP26]]
//
v16int16 test_get_ss_v16int16() { return get_ss_v16int16(); }

// CHECK-LABEL: @_Z21test_get_ss_v16uint16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast <8 x i32> [[TMP25]] to <16 x i16>
// CHECK-NEXT:    ret <16 x i16> [[TMP26]]
//
v16uint16 test_get_ss_v16uint16() { return get_ss_v16uint16(); }

// CHECK-LABEL: @_Z20test_get_ss_v8uint32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call noundef <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP24]], i32 0)
// CHECK-NEXT:    ret <8 x i32> [[TMP25]]
//
v8uint32 test_get_ss_v8uint32() { return get_ss_v8uint32(); }

// CHECK-LABEL: @_Z20test_get_ss_v16int32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    ret <16 x i32> [[TMP48]]
//
v16int32 test_get_ss_v16int32() { return get_ss_v16int32(); }

// CHECK-LABEL: @_Z20test_get_ss_v128int4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast <16 x i32> [[TMP48]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP49]]
//
v128int4 test_get_ss_v128int4() { return get_ss_v128int4(); }

// CHECK-LABEL: @_Z21test_get_ss_v128uint4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast <16 x i32> [[TMP48]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP49]]
//
v128uint4 test_get_ss_v128uint4() { return get_ss_v128uint4(); }

// CHECK-LABEL: @_Z19test_get_ss_v64int8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast <16 x i32> [[TMP48]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP49]]
//
v64int8 test_get_ss_v64int8() { return get_ss_v64int8(); }

// CHECK-LABEL: @_Z20test_get_ss_v64uint8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast <16 x i32> [[TMP48]] to <64 x i8>
// CHECK-NEXT:    ret <64 x i8> [[TMP49]]
//
v64uint8 test_get_ss_v64uint8() { return get_ss_v64uint8(); }

// CHECK-LABEL: @_Z20test_get_ss_v32int16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast <16 x i32> [[TMP48]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP49]]
//
v32int16 test_get_ss_v32int16() { return get_ss_v32int16(); }

// CHECK-LABEL: @_Z21test_get_ss_v32uint16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast <16 x i32> [[TMP48]] to <32 x i16>
// CHECK-NEXT:    ret <32 x i16> [[TMP49]]
//
v32uint16 test_get_ss_v32uint16() { return get_ss_v32uint16(); }

// CHECK-LABEL: @_Z21test_get_ss_v16uint32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    ret <16 x i32> [[TMP48]]
//
v16uint32 test_get_ss_v16uint32() { return get_ss_v16uint32(); }

// CHECK-LABEL: @_Z20test_get_ss_v32int32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    ret <32 x i32> [[TMP98]]
//
v32int32 test_get_ss_v32int32() { return get_ss_v32int32(); }

// CHECK-LABEL: @_Z20test_get_ss_v256int4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast <32 x i32> [[TMP98]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP99]]
//
v256int4 test_get_ss_v256int4() { return get_ss_v256int4(); }

// CHECK-LABEL: @_Z21test_get_ss_v256uint4v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast <32 x i32> [[TMP98]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP99]]
//
v256uint4 test_get_ss_v256uint4() { return get_ss_v256uint4(); }

// CHECK-LABEL: @_Z20test_get_ss_v128int8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast <32 x i32> [[TMP98]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP99]]
//
v128int8 test_get_ss_v128int8() { return get_ss_v128int8(); }

// CHECK-LABEL: @_Z21test_get_ss_v128uint8v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast <32 x i32> [[TMP98]] to <128 x i8>
// CHECK-NEXT:    ret <128 x i8> [[TMP99]]
//
v128uint8 test_get_ss_v128uint8() { return get_ss_v128uint8(); }

// CHECK-LABEL: @_Z20test_get_ss_v64int16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast <32 x i32> [[TMP98]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP99]]
//
v64int16 test_get_ss_v64int16() { return get_ss_v64int16(); }

// CHECK-LABEL: @_Z21test_get_ss_v64uint16v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast <32 x i32> [[TMP98]] to <64 x i16>
// CHECK-NEXT:    ret <64 x i16> [[TMP99]]
//
v64uint16 test_get_ss_v64uint16() { return get_ss_v64uint16(); }

// CHECK-LABEL: @_Z21test_get_ss_v32uint32v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i32> @llvm.aie2.v16int32()
// CHECK-NEXT:    [[TMP1:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32 } [[TMP1]], 0
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP2]])
// CHECK-NEXT:    [[TMP4:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i32 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP3]], i32 1, i32 [[TMP5]])
// CHECK-NEXT:    [[TMP7:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { i32, i32 } [[TMP7]], 0
// CHECK-NEXT:    [[TMP9:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP6]], i32 2, i32 [[TMP8]])
// CHECK-NEXT:    [[TMP10:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i32 } [[TMP10]], 0
// CHECK-NEXT:    [[TMP12:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP9]], i32 3, i32 [[TMP11]])
// CHECK-NEXT:    [[TMP13:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i32 } [[TMP13]], 0
// CHECK-NEXT:    [[TMP15:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP12]], i32 4, i32 [[TMP14]])
// CHECK-NEXT:    [[TMP16:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32 } [[TMP16]], 0
// CHECK-NEXT:    [[TMP18:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP15]], i32 5, i32 [[TMP17]])
// CHECK-NEXT:    [[TMP19:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i32 } [[TMP19]], 0
// CHECK-NEXT:    [[TMP21:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP18]], i32 6, i32 [[TMP20]])
// CHECK-NEXT:    [[TMP22:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i32 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP21]], i32 7, i32 [[TMP23]])
// CHECK-NEXT:    [[TMP25:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32 } [[TMP25]], 0
// CHECK-NEXT:    [[TMP27:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP24]], i32 8, i32 [[TMP26]])
// CHECK-NEXT:    [[TMP28:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i32 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP27]], i32 9, i32 [[TMP29]])
// CHECK-NEXT:    [[TMP31:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i32 } [[TMP31]], 0
// CHECK-NEXT:    [[TMP33:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP30]], i32 10, i32 [[TMP32]])
// CHECK-NEXT:    [[TMP34:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i32 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP33]], i32 11, i32 [[TMP35]])
// CHECK-NEXT:    [[TMP37:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i32 } [[TMP37]], 0
// CHECK-NEXT:    [[TMP39:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP36]], i32 12, i32 [[TMP38]])
// CHECK-NEXT:    [[TMP40:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i32 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP39]], i32 13, i32 [[TMP41]])
// CHECK-NEXT:    [[TMP43:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, i32 } [[TMP43]], 0
// CHECK-NEXT:    [[TMP45:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP42]], i32 14, i32 [[TMP44]])
// CHECK-NEXT:    [[TMP46:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i32 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP45]], i32 15, i32 [[TMP47]])
// CHECK-NEXT:    [[TMP49:%.*]] = tail call noundef <32 x i32> @llvm.aie2.set.I1024.I512(<16 x i32> [[TMP48]], i32 0)
// CHECK-NEXT:    [[TMP50:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i32 } [[TMP50]], 0
// CHECK-NEXT:    [[TMP52:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP0]], i32 0, i32 [[TMP51]])
// CHECK-NEXT:    [[TMP53:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i32 } [[TMP53]], 0
// CHECK-NEXT:    [[TMP55:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP52]], i32 1, i32 [[TMP54]])
// CHECK-NEXT:    [[TMP56:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i32 } [[TMP56]], 0
// CHECK-NEXT:    [[TMP58:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP55]], i32 2, i32 [[TMP57]])
// CHECK-NEXT:    [[TMP59:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { i32, i32 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP58]], i32 3, i32 [[TMP60]])
// CHECK-NEXT:    [[TMP62:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i32 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP61]], i32 4, i32 [[TMP63]])
// CHECK-NEXT:    [[TMP65:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP66:%.*]] = extractvalue { i32, i32 } [[TMP65]], 0
// CHECK-NEXT:    [[TMP67:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP64]], i32 5, i32 [[TMP66]])
// CHECK-NEXT:    [[TMP68:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i32, i32 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP67]], i32 6, i32 [[TMP69]])
// CHECK-NEXT:    [[TMP71:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP72:%.*]] = extractvalue { i32, i32 } [[TMP71]], 0
// CHECK-NEXT:    [[TMP73:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP70]], i32 7, i32 [[TMP72]])
// CHECK-NEXT:    [[TMP74:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i32, i32 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP73]], i32 8, i32 [[TMP75]])
// CHECK-NEXT:    [[TMP77:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { i32, i32 } [[TMP77]], 0
// CHECK-NEXT:    [[TMP79:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP76]], i32 9, i32 [[TMP78]])
// CHECK-NEXT:    [[TMP80:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i32 } [[TMP80]], 0
// CHECK-NEXT:    [[TMP82:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP79]], i32 10, i32 [[TMP81]])
// CHECK-NEXT:    [[TMP83:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP84:%.*]] = extractvalue { i32, i32 } [[TMP83]], 0
// CHECK-NEXT:    [[TMP85:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP82]], i32 11, i32 [[TMP84]])
// CHECK-NEXT:    [[TMP86:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i32 } [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP85]], i32 12, i32 [[TMP87]])
// CHECK-NEXT:    [[TMP89:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP90:%.*]] = extractvalue { i32, i32 } [[TMP89]], 0
// CHECK-NEXT:    [[TMP91:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP88]], i32 13, i32 [[TMP90]])
// CHECK-NEXT:    [[TMP92:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i32 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP91]], i32 14, i32 [[TMP93]])
// CHECK-NEXT:    [[TMP95:%.*]] = tail call { i32, i32 } @llvm.aie2.get.ss()
// CHECK-NEXT:    [[TMP96:%.*]] = extractvalue { i32, i32 } [[TMP95]], 0
// CHECK-NEXT:    [[TMP97:%.*]] = tail call noundef <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> [[TMP94]], i32 15, i32 [[TMP96]])
// CHECK-NEXT:    [[TMP98:%.*]] = tail call noundef <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> [[TMP49]], <16 x i32> [[TMP97]], i32 1)
// CHECK-NEXT:    ret <32 x i32> [[TMP98]]
//
v32uint32 test_get_ss_v32uint32() { return get_ss_v32uint32(); }
