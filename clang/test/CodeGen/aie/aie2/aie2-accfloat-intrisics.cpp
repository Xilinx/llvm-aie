// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aie2-accfloat-intrisics.cpp ------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -nostdlibinc -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z13test_add_confDv16_u10__accfloatS_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHL4_I_I:%.*]] = shl i32 [[SUB_ACC1:%.*]], 12
// CHECK-NEXT:    [[SHL6_I_I:%.*]] = shl i32 [[SUB_ACC2:%.*]], 13
// CHECK-NEXT:    [[OR7_I_I:%.*]] = or i32 [[SHL4_I_I]], [[ZERO_ACC1:%.*]]
// CHECK-NEXT:    [[OR11_I_I:%.*]] = or i32 [[OR7_I_I]], [[SHL6_I_I]]
// CHECK-NEXT:    [[OR19_I_I:%.*]] = or i32 [[OR11_I_I]], 28
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.add.accfloat(<8 x i64> [[ACC1:%.*]], <8 x i64> [[ACC2:%.*]], i32 [[OR19_I_I]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_add_conf(v16accfloat acc1, v16accfloat acc2, int zero_acc1, int sub_acc1, int sub_acc2) {
  return add_conf(acc1, acc2, zero_acc1, sub_acc1, sub_acc2);
}
// CHECK-LABEL: @_Z13test_sub_confDv16_u10__accfloatS_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SHL4_I_I:%.*]] = shl i32 [[SUB_ACC1:%.*]], 12
// CHECK-NEXT:    [[SHL6_I_I:%.*]] = shl i32 [[SUB_ACC2:%.*]], 13
// CHECK-NEXT:    [[OR7_I_I:%.*]] = or i32 [[SHL4_I_I]], [[ZERO_ACC1:%.*]]
// CHECK-NEXT:    [[OR11_I_I:%.*]] = or i32 [[OR7_I_I]], [[SHL6_I_I]]
// CHECK-NEXT:    [[OR19_I_I:%.*]] = or i32 [[OR11_I_I]], 28
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.sub.accfloat(<8 x i64> [[ACC1:%.*]], <8 x i64> [[ACC2:%.*]], i32 [[OR19_I_I]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_sub_conf(v16accfloat acc1, v16accfloat acc2, int zero_acc1, int sub_acc1, int sub_acc2) {
  return sub_conf(acc1, acc2, zero_acc1, sub_acc1, sub_acc2);
}
// CHECK-LABEL: @_Z8test_addDv16_u10__accfloatS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.add.accfloat(<8 x i64> [[ACC1:%.*]], <8 x i64> [[ACC2:%.*]], i32 28)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_add(v16accfloat acc1, v16accfloat acc2) {
  return add(acc1, acc2);
}
// CHECK-LABEL: @_Z8test_subDv16_u10__accfloatS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.sub.accfloat(<8 x i64> [[ACC1:%.*]], <8 x i64> [[ACC2:%.*]], i32 28)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_sub(v16accfloat acc1, v16accfloat acc2) {
  return sub(acc1, acc2);
}
// CHECK-LABEL: @_Z34test_broadcast_zero_to_v16accfloatv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.clr16f.conf()
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_broadcast_zero_to_v16accfloat() {
  return broadcast_zero_to_v16accfloat();
}
