// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 4
//===- bfloat16_cst.cpp -----------------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang --target=aie2 -nostdlibinc -S -emit-llvm %s -O2 -o - | FileCheck %s

// CHECK: @_ZL5inits{{.*}}0xR0000{{.*}}0xR3F80{{.*}}0xRBF80{{.*}}0xR3FDA{{.*}}0xRBFDA{{.*}}0xR4124{{.*}}0xRC124{{.*}}

const bfloat16 inits[] = {
  0.0,
  1.0,
  -1.0,
  1.7,
  -1.7,
  10.25,
  -10.25,
};

// CHECK-LABEL: define dso_local noundef bfloat @_Z2lui(
// CHECK-SAME: i32 noundef [[I:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = trunc i32 [[I]] to i20
// CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [7 x bfloat], ptr @_ZL5inits, i20 0, i20 [[TMP0]]
// CHECK-NEXT:    [[TMP1:%.*]] = load bfloat, ptr [[ARRAYIDX]], align 2, !tbaa [[TBAA2:![0-9]+]]
// CHECK-NEXT:    ret bfloat [[TMP1]]
//
bfloat16 lu(int i) {
  return inits[i];
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z4zerov(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR0000
//
bfloat16 zero() {
  return 0.0;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z3onev(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR3F80
//
bfloat16 one() {
  return 1.0;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z4monev(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xRBF80
//
bfloat16 mone() {
  return -1.0;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z3twov(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR4000
//
bfloat16 two() {
  return 2.0;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z11oddStickyUpv(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR4000
//
bfloat16 oddStickyUp() {
  // This is the smallest odd sticky part, 3FFF8001. It should
  // round up to 2.0
  return 1.99609386920928955078125;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z8oddTieUpv(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR4000
//
bfloat16 oddTieUp() {
  // This is the odd tie case, 3FFF8000. It should round up to 2.0
  return 1.99609375;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z7oddDownv(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR3FFF
//
bfloat16 oddDown() {
  // This is just below the odd tie case, 3FFF7FFF it should round down
  return 1.99609363079071044921875;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z4evenv(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR3FFE
//
bfloat16 even() {
  return 1.984375;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z12evenStickyUpv(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR3FFF
//
bfloat16 evenStickyUp() {
  // This is the smallest even sticky value 0x3FFE8001. It should
  // round up to 1.9921875
  return 1.98828136920928955078125;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z11evenTieDownv(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR3FFE
//
bfloat16 evenTieDown() {
  // This is the even tie case 0x3FFE8000. It should
  // round down to 1.984375
  return 1.98828125;
}

// CHECK-LABEL: define dso_local noundef bfloat @_Z8evenDownv(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret bfloat 0xR3FFE
//
bfloat16 evenDown() {
  // This is just below the even tie case, 3FFE7FFF. It should
  // round down to 1.984375
  return 1.98828113079071044921875;
}
//.
// CHECK: [[TBAA2]] = !{[[META3:![0-9]+]], [[META3]], i64 0}
// CHECK: [[META3]] = !{!"__bf16", [[META4:![0-9]+]], i64 0}
// CHECK: [[META4]] = !{!"omnipotent char", [[META5:![0-9]+]], i64 0}
// CHECK: [[META5]] = !{!"Simple C++ TBAA"}
//.
