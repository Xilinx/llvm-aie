// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --return-type --skip-function-body
//===- aie2-abi-compressed.cpp ----------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang --target=aie2 -nostdlibinc -S -emit-llvm %s -o - | FileCheck %s

#include <stdint.h>

extern "C" {

// CHECK-LABEL: define {{[^@]*}}%struct.v64int4_compress @ret_v64int4_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64int4_compress ret_v64int4_compress(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v64int4_compress
// CHECK-SAME: ([[STRUCT_V64INT4_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64int4_compress(v64int4_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v32int8_compress @ret_v32int8_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32int8_compress ret_v32int8_compress(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v32int8_compress
// CHECK-SAME: ([[STRUCT_V32INT8_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32int8_compress(v32int8_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v16int16_compress @ret_v16int16_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16int16_compress ret_v16int16_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16int16_compress
// CHECK-SAME: ([[STRUCT_V16INT16_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16int16_compress(v16int16_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v64uint4_compress @ret_v64uint4_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64uint4_compress ret_v64uint4_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v64uint4_compress
// CHECK-SAME: ([[STRUCT_V64UINT4_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64uint4_compress(v64uint4_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v32uint8_compress @ret_v32uint8_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32uint8_compress ret_v32uint8_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32uint8_compress
// CHECK-SAME: ([[STRUCT_V32UINT8_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32uint8_compress(v32uint8_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v16uint16_compress @ret_v16uint16_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16uint16_compress ret_v16uint16_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16uint16_compress
// CHECK-SAME: ([[STRUCT_V16UINT16_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16uint16_compress(v16uint16_compress) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v8int32_compress @ret_v8int32_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v8int32_compress ret_v8int32_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8int32_compress
// CHECK-SAME: ([[STRUCT_V8INT32_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v8int32_compress(v8int32_compress) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v8uint32_compress @ret_v8uint32_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v8uint32_compress ret_v8uint32_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8uint32_compress
// CHECK-SAME: ([[STRUCT_V8UINT32_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v8uint32_compress(v8uint32_compress) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v128int4_compress @ret_v128int4_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v128int4_compress ret_v128int4_compress(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v128int4_compress
// CHECK-SAME: ([[STRUCT_V128INT4_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128int4_compress(v128int4_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v64int8_compress @ret_v64int8_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64int8_compress ret_v64int8_compress(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v64int8_compress
// CHECK-SAME: ([[STRUCT_V64INT8_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64int8_compress(v64int8_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v32int16_compress @ret_v32int16_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32int16_compress ret_v32int16_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32int16_compress
// CHECK-SAME: ([[STRUCT_V32INT16_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32int16_compress(v32int16_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v128uint4_compress @ret_v128uint4_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v128uint4_compress ret_v128uint4_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v128uint4_compress
// CHECK-SAME: ([[STRUCT_V128UINT4_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128uint4_compress(v128uint4_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v64uint8_compress @ret_v64uint8_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64uint8_compress ret_v64uint8_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v64uint8_compress
// CHECK-SAME: ([[STRUCT_V64UINT8_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64uint8_compress(v64uint8_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v32uint16_compress @ret_v32uint16_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32uint16_compress ret_v32uint16_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32uint16_compress
// CHECK-SAME: ([[STRUCT_V32UINT16_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32uint16_compress(v32uint16_compress) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v16int32_compress @ret_v16int32_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16int32_compress ret_v16int32_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16int32_compress
// CHECK-SAME: ([[STRUCT_V16INT32_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16int32_compress(v16int32_compress) {}

// CHECK-LABEL: define {{[^@]*}}%struct.v16uint32_compress @ret_v16uint32_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16uint32_compress ret_v16uint32_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16uint32_compress
// CHECK-SAME: ([[STRUCT_V16UINT32_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16uint32_compress(v16uint32_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v16bfloat16_compress @ret_v16bfloat16_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16bfloat16_compress ret_v16bfloat16_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16bfloat16_compress
// CHECK-SAME: ([[STRUCT_V16BFLOAT16_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16bfloat16_compress(v16bfloat16_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v32bfloat16_compress @ret_v32bfloat16_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32bfloat16_compress ret_v32bfloat16_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32bfloat16_compress
// CHECK-SAME: ([[STRUCT_V32BFLOAT16_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32bfloat16_compress(v32bfloat16_compress) {}

}
