// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --return-type --skip-function-body
//===- aie2-abi-sparse-compress.cpp -----------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang --target=aie2 -nostdlibinc -S -emit-llvm %s -o - | FileCheck %s

#include <stdint.h>

extern "C" {


// CHECK-LABEL: define {{[^@]*}}%struct.v256int4_sparse_compress @ret_v256int4_sparse_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v256int4_sparse_compress ret_v256int4_sparse_compress(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v256int4_sparse_compress
// CHECK-SAME: ([[STRUCT_V256INT4_SPARSE_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v256int4_sparse_compress(v256int4_sparse_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v128int8_sparse_compress @ret_v128int8_sparse_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v128int8_sparse_compress ret_v128int8_sparse_compress(void) { return {}; }

// CHECK-LABEL: define {{[^@]*}}void @pass_v128int8_sparse_compress
// CHECK-SAME: ([[STRUCT_V128INT8_SPARSE_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128int8_sparse_compress(v128int8_sparse_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v64int16_sparse_compress @ret_v64int16_sparse_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64int16_sparse_compress ret_v64int16_sparse_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v64int16_sparse_compress
// CHECK-SAME: ([[STRUCT_V64INT16_SPARSE_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64int16_sparse_compress(v64int16_sparse_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v256uint4_sparse_compress @ret_v256uint4_sparse_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v256uint4_sparse_compress ret_v256uint4_sparse_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v256uint4_sparse_compress
// CHECK-SAME: ([[STRUCT_V256UINT4_SPARSE_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v256uint4_sparse_compress(v256uint4_sparse_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v128uint8_sparse_compress @ret_v128uint8_sparse_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v128uint8_sparse_compress ret_v128uint8_sparse_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v128uint8_sparse_compress
// CHECK-SAME: ([[STRUCT_V128UINT8_SPARSE_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128uint8_sparse_compress(v128uint8_sparse_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v64uint16_sparse_compress @ret_v64uint16_sparse_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64uint16_sparse_compress ret_v64uint16_sparse_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v64uint16_sparse_compress
// CHECK-SAME: ([[STRUCT_V64UINT16_SPARSE_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64uint16_sparse_compress(v64uint16_sparse_compress) {}


// CHECK-LABEL: define {{[^@]*}}%struct.v64bfloat16_sparse_compress @ret_v64bfloat16_sparse_compress
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64bfloat16_sparse_compress ret_v64bfloat16_sparse_compress(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v64bfloat16_sparse_compress
// CHECK-SAME: ([[STRUCT_V64BFLOAT16_SPARSE_COMPRESS:%.*]] [[DOTCOERCE:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64bfloat16_sparse_compress(v64bfloat16_sparse_compress) {}
}
