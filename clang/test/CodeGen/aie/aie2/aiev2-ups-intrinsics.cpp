// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aiev2-ups-intrinsics.cpp ---------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z9test_lupsDv8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_lups(v8int32 a, int shft) {
   return lups(a,shft,__SIGN_SIGNED);
}

// CHECK-LABEL: @_Z9test_lupsDv8_ji(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_lups(v8uint32 a, int shft) {
   return lups(a,shft,__SIGN_UNSIGNED);
}

// CHECK-LABEL: @_Z9test_lupsDv8_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_lups(v8int32 a, int shft, int sign) {
   return lups(a,shft,sign);
}

// CHECK-LABEL: @_Z9test_supsDv16_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_sups(v16int16 a, int shft) {
   return sups(a,shft,__SIGN_SIGNED);
}

// CHECK-LABEL: @_Z9test_supsDv16_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_sups(v16uint16 a, int shft) {
   return sups(a,shft,__SIGN_UNSIGNED);
}

// CHECK-LABEL: @_Z9test_supsDv32_ai(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I256.ups(<32 x i8> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_sups(v32int8 a, int shft) {
   return sups(a,shft,__SIGN_SIGNED);
}

// CHECK-LABEL: @_Z9test_supsDv32_hi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I256.ups(<32 x i8> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_sups(v32uint8 a, int shft) {
   return sups(a,shft,__SIGN_UNSIGNED);
}

// CHECK-LABEL: @_Z9test_supsDv32_aii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I256.ups(<32 x i8> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_sups(v32int8 a, int shft, int sign) {
   return sups(a,shft,sign);
}

// CHECK-LABEL: @_Z9test_supsDv32_hii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I256.ups(<32 x i8> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_sups(v32uint8 a, int shft, int sign) {
   return sups(a,shft,sign);
}

// CHECK-LABEL: @_Z9test_lupsDv16_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_lups(v16int16 a, int shft) {
   return lups(a,shft,__SIGN_SIGNED);
}

// CHECK-LABEL: @_Z9test_lupsDv16_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_lups(v16uint16 a, int shft) {
   return lups(a,shft,__SIGN_UNSIGNED);
}

// CHECK-LABEL: @_Z9test_lupsDv16_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_lups(v16int16 a, int shft, int sign) {
   return lups(a,shft,sign);
}

// CHECK-LABEL: @_Z9test_lupsDv16_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_lups(v16uint16 a, int shft, int sign) {
   return lups(a,shft,sign);
}


// CHECK-LABEL: @_Z9test_lupsDv16_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP0]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc64(<8 x i64> [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP3]], i32 [[SHFT]], i32 1)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc64(<16 x i64> [[TMP2]], <8 x i64> [[TMP4]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP5]]
//
v16acc64 test_lups(v16int32 a, int shft){
 return lups(a,shft,__SIGN_SIGNED);
}

// CHECK-LABEL: @_Z9test_lupsDv16_ji(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP0]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc64(<8 x i64> [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP3]], i32 [[SHFT]], i32 0)
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc64(<16 x i64> [[TMP2]], <8 x i64> [[TMP4]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP5]]
//
v16acc64 test_lups(v16uint32 a, int shft) {
 return lups(a,shft,__SIGN_UNSIGNED);
}

// CHECK-LABEL: @_Z9test_lupsDv16_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP0]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc64(<8 x i64> [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP3]], i32 [[SHFT]], i32 [[SIGN]])
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc64(<16 x i64> [[TMP2]], <8 x i64> [[TMP4]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP5]]
//
v16acc64 test_lups(v16int32 a, int shft, int sign) {
   return lups(a,shft,sign);
}

// CHECK-LABEL: @_Z9test_lupsDv16_jii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A:%.*]], i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP0]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc64(<8 x i64> [[TMP1]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[A]], i32 1)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[TMP3]], i32 [[SHFT]], i32 [[SIGN]])
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc64(<16 x i64> [[TMP2]], <8 x i64> [[TMP4]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP5]]
//
v16acc64 test_lups(v16uint32 a, int shft, int sign) {
   return lups(a,shft,sign);
}

// CHECK-LABEL: @_Z9test_supsDv32_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[RETVAL_0_I10_I:%.*]] = bitcast <8 x i32> [[TMP1]] to <16 x i16>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I10_I]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = bitcast <8 x i32> [[TMP4]] to <16 x i16>
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I_I]], i32 [[SHFT]], i32 1)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc32(<16 x i64> [[TMP3]], <8 x i64> [[TMP5]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP6]]
//
v32acc32 test_sups(v32int16 a, int shft) {
 return sups(a,shft,__SIGN_SIGNED);
}

// CHECK-LABEL: @_Z9test_supsDv32_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[RETVAL_0_I10_I:%.*]] = bitcast <8 x i32> [[TMP1]] to <16 x i16>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I10_I]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = bitcast <8 x i32> [[TMP4]] to <16 x i16>
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I_I]], i32 [[SHFT]], i32 0)
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc32(<16 x i64> [[TMP3]], <8 x i64> [[TMP5]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP6]]
//
v32acc32 test_sups(v32uint16 a, int shft) {
 return sups(a,shft,__SIGN_UNSIGNED);
}

// CHECK-LABEL: @_Z9test_supsDv32_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[RETVAL_0_I10_I:%.*]] = bitcast <8 x i32> [[TMP1]] to <16 x i16>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I10_I]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = bitcast <8 x i32> [[TMP4]] to <16 x i16>
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I_I]], i32 [[SHFT]], i32 [[SIGN]])
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc32(<16 x i64> [[TMP3]], <8 x i64> [[TMP5]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP6]]
//
v32acc32 test_sups(v32int16 a, int shft, int sign) {
   return sups(a,shft,sign);
}

// CHECK-LABEL: @_Z9test_supsDv32_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 0)
// CHECK-NEXT:    [[RETVAL_0_I10_I:%.*]] = bitcast <8 x i32> [[TMP1]] to <16 x i16>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I10_I]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    [[TMP3:%.*]] = tail call noundef <16 x i64> @llvm.aie2.set.1024.512.acc32(<8 x i64> [[TMP2]], i32 0)
// CHECK-NEXT:    [[TMP4:%.*]] = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> [[TMP0]], i32 1)
// CHECK-NEXT:    [[RETVAL_0_I_I:%.*]] = bitcast <8 x i32> [[TMP4]] to <16 x i16>
// CHECK-NEXT:    [[TMP5:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[RETVAL_0_I_I]], i32 [[SHFT]], i32 [[SIGN]])
// CHECK-NEXT:    [[TMP6:%.*]] = tail call noundef <16 x i64> @llvm.aie2.upd.1024.512.acc32(<16 x i64> [[TMP3]], <8 x i64> [[TMP5]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP6]]
//
v32acc32 test_sups(v32uint16 a, int shft, int sign) {
   return sups(a,shft,sign);
}


// CHECK-LABEL: @_Z19test_ups_to_v8acc64Dv8_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_ups_to_v8acc64(v8int32 a, int shft, int sign) {
   return ups_to_v8acc64(a,shft,sign);
}
// CHECK-LABEL: @_Z19test_ups_to_v8acc64Dv8_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_ups_to_v8acc64(v8int32 a, int shft) {
   return ups_to_v8acc64(a,shft);
}
// CHECK-LABEL: @_Z19test_ups_to_v8acc64Dv8_jii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_ups_to_v8acc64(v8uint32 a, int shft, int sign) {
   return ups_to_v8acc64(a,shft,sign);
}
// CHECK-LABEL: @_Z19test_ups_to_v8acc64Dv8_ji(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v8acc64 test_ups_to_v8acc64(v8uint32 a, int shft) {
   return ups_to_v8acc64(a,shft);
}
// CHECK-LABEL: @_Z20test_ups_to_v16acc32Dv16_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_ups_to_v16acc32(v16int16 a, int shft, int sign) {
   return ups_to_v16acc32(a,shft,sign);
}
// CHECK-LABEL: @_Z20test_ups_to_v16acc32Dv16_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_ups_to_v16acc32(v16int16 a, int shft) {
   return ups_to_v16acc32(a,shft);
}
// CHECK-LABEL: @_Z20test_ups_to_v16acc32Dv16_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_ups_to_v16acc32(v16uint16 a, int shft, int sign) {
   return ups_to_v16acc32(a,shft,sign);
}
// CHECK-LABEL: @_Z20test_ups_to_v16acc32Dv16_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16acc32 test_ups_to_v16acc32(v16uint16 a, int shft) {
   return ups_to_v16acc32(a,shft);
}


// CHECK-LABEL: @_Z20test_ups_to_v16acc64Dv16_iii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I512.ups(<16 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_ups_to_v16acc64(v16int32 a, int shft, int sign) {
   return ups_to_v16acc64(a,shft,sign);
}
// CHECK-LABEL: @_Z20test_ups_to_v16acc64Dv16_ii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I512.ups(<16 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_ups_to_v16acc64(v16int32 a, int shft) {
    return ups_to_v16acc64(a,shft);
}
// CHECK-LABEL: @_Z20test_ups_to_v16acc64Dv16_ji(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I512.ups(<16 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_ups_to_v16acc64(v16uint32 a, int shft) {
    return ups_to_v16acc64(a,shft);
}
// CHECK-LABEL: @_Z20test_ups_to_v16acc64Dv16_jii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I512.ups(<16 x i32> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_ups_to_v16acc64(v16uint32 a, int shft, int sign){
   return  ups_to_v16acc64(a,shft,sign);
}
// CHECK-LABEL: @_Z20test_ups_to_v32acc32Dv32_sii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_ups_to_v32acc32(v32int16 a, int shft, int sign) {
   return ups_to_v32acc32(a,shft,sign);
}
// CHECK-LABEL: @_Z20test_ups_to_v32acc32Dv32_si(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 1)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_ups_to_v32acc32(v32int16 a, int shft) {
   return ups_to_v32acc32(a,shft);
}

// CHECK-LABEL: @_Z23test_ups_to_v16accfloatDv16_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.v16bf16.to.v16accfloat(<16 x bfloat> [[A:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_ups_to_v16accfloat(v16bfloat16 a) {
   return ups_to_v16accfloat(a);
}

// CHECK-LABEL: @_Z8test_upsDv16_u6__bf16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.v16bf16.to.v16accfloat(<16 x bfloat> [[A:%.*]])
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_ups(v16bfloat16 a) {
   return ups(a);
}

// CHECK-LABEL: @_Z20test_ups_to_v32acc32Dv32_tii(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 [[SIGN:%.*]])
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_ups_to_v32acc32(v32uint16 a, int shft, int sign) {
   return ups_to_v32acc32(a,shft,sign);
}

// CHECK-LABEL: @_Z20test_ups_to_v32acc32Dv32_ti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> [[A:%.*]], i32 [[SHFT:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_ups_to_v32acc32(v32uint16 a, int shft) {
   return ups_to_v32acc32(a,shft);
}
