// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aie2-sparse-intrinsics.cpp -------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z18test_mul_4x32_32x8Dv128_h16v256uint4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mul_4x32_32x8(v128uint8 a, v256uint4_sparse b) {
    return mul_4x32_32x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x32_32x8Dv128_h16v256uint4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmul_4x32_32x8(v128uint8 a, v256uint4_sparse b) {
    return negmul_4x32_32x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mac_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1) {
    return mac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.msc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_msc_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1) {
    return msc_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmac_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1) {
    return negmac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmsc_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1) {
    return negmsc_4x32_32x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmac_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmsc_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submac_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_4x32_32x8Dv128_h16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 32)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submsc_4x32_32x8(v128uint8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x32_32x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_4x32_32x8Dv128_h15v256int4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mul_4x32_32x8(v128uint8 a, v256int4_sparse b) {
    return mul_4x32_32x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x32_32x8Dv128_h15v256int4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmul_4x32_32x8(v128uint8 a, v256int4_sparse b) {
    return negmul_4x32_32x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mac_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1) {
    return mac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.msc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_msc_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1) {
    return msc_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmac_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1) {
    return negmac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmsc_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1) {
    return negmsc_4x32_32x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmac_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmsc_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submac_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x32_32x8(a,b,acc1,acc2);
}
//

// CHECK-LABEL: @_Z21test_submsc_4x32_32x8Dv128_h15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 288)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submsc_4x32_32x8(v128uint8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z18test_mul_4x32_32x8Dv128_a15v256int4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mul_4x32_32x8(v128int8 a, v256int4_sparse b) {
    return mul_4x32_32x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x32_32x8Dv128_a15v256int4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmul_4x32_32x8(v128int8 a, v256int4_sparse b) {
    return negmul_4x32_32x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mac_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1) {
    return mac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.msc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_msc_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1) {
    return msc_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmac_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1) {
    return negmac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmsc_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1) {
    return negmsc_4x32_32x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmac_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmsc_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submac_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_4x32_32x8Dv128_a15v256int4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256INT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 800)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submsc_4x32_32x8(v128int8 a, v256int4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x32_32x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_4x32_32x8Dv128_a16v256uint4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mul_4x32_32x8(v128int8 a, v256uint4_sparse b) {
    return mul_4x32_32x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x32_32x8Dv128_a16v256uint4_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmul.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmul_4x32_32x8(v128int8 a, v256uint4_sparse b) {
    return negmul_4x32_32x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.mac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_mac_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1) {
    return mac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.msc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_msc_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1) {
    return msc_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmac_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1) {
    return negmac_4x32_32x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.acc32.negmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_negmsc_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1) {
    return negmsc_4x32_32x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmac_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_addmsc_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submac.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submac_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x32_32x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_4x32_32x8Dv128_a16v256uint4_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V256UINT4_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]] to <16 x i32>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.acc32.submsc.conf(<128 x i8> [[A:%.*]], <16 x i32> [[TMP0]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 544)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v32acc32 test_submsc_4x32_32x8(v128int8 a, v256uint4_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x32_32x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_4x16_16x8Dv64_a16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mul_4x16_16x8(v64int8 a, v128uint8_sparse b) {
    return mul_4x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x16_16x8Dv64_a16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmul_4x16_16x8(v64int8 a, v128uint8_sparse b) {
    return negmul_4x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mac_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1) {
    return mac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.msc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_msc_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1) {
    return msc_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmac_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1) {
    return negmac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmsc_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1) {
    return negmsc_4x16_16x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmac_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmsc_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submac_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_4x16_16x8Dv64_a16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 680)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submsc_4x16_16x8(v64int8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x16_16x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_4x16_16x8Dv64_a15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mul_4x16_16x8(v64int8 a, v128int8_sparse b) {
    return mul_4x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x16_16x8Dv64_a15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmul_4x16_16x8(v64int8 a, v128int8_sparse b) {
    return negmul_4x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mac_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1) {
    return mac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.msc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_msc_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1) {
    return msc_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmac_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1) {
    return negmac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmsc_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1) {
    return negmsc_4x16_16x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmac_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmsc_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submac_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_4x16_16x8Dv64_a15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 936)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submsc_4x16_16x8(v64int8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x16_16x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_4x16_16x8Dv64_h16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mul_4x16_16x8(v64uint8 a, v128uint8_sparse b) {
    return mul_4x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x16_16x8Dv64_h16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmul_4x16_16x8(v64uint8 a, v128uint8_sparse b) {
    return negmul_4x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mac_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1) {
    return mac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.msc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_msc_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1) {
    return msc_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmac_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1) {
    return negmac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmsc_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1) {
    return negmsc_4x16_16x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmac_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmsc_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submac_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_4x16_16x8Dv64_h16v128uint8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 168)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submsc_4x16_16x8(v64uint8 a, v128uint8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x16_16x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_4x16_16x8Dv64_h15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mul_4x16_16x8(v64uint8 a, v128int8_sparse b) {
    return mul_4x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x16_16x8Dv64_h15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmul.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmul_4x16_16x8(v64uint8 a, v128int8_sparse b) {
    return negmul_4x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.mac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_mac_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1) {
    return mac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.msc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_msc_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1) {
    return msc_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmac_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1) {
    return negmac_4x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc32.negmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_negmsc_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1) {
    return negmsc_4x16_16x8(a,b,acc1);
}

//
// CHECK-LABEL: @_Z21test_addmac_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmac_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.addmsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_addmsc_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return addmsc_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submac.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submac_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submac_4x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_4x16_16x8Dv64_h15v128int8_sparseDv32_u7__acc32S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc32.submsc.conf(<64 x i8> [[A:%.*]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 424)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_submsc_4x16_16x8(v64uint8 a, v128int8_sparse b, v32acc32 acc1, v32acc32 acc2) {
    return submsc_4x16_16x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_2x16_16x8Dv32_s15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mul_2x16_16x8(v32int16 a, v128int8_sparse b) {
    return mul_2x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_2x16_16x8Dv32_s15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmul_2x16_16x8(v32int16 a, v128int8_sparse b) {
    return negmul_2x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mac_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1) {
    return mac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_msc_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1) {
    return msc_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmac_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1) {
    return negmac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmsc_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1) {
    return negmsc_2x16_16x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmac_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmsc_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submac_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_2x16_16x8Dv32_s15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 850)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submsc_2x16_16x8(v32int16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x16_16x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_2x16_16x8Dv32_s16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mul_2x16_16x8(v32int16 a, v128uint8_sparse b) {
    return mul_2x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_2x16_16x8Dv32_s16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmul_2x16_16x8(v32int16 a, v128uint8_sparse b) {
    return negmul_2x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mac_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1) {
    return mac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_msc_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1) {
    return msc_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmac_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1) {
    return negmac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmsc_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1) {
    return negmsc_2x16_16x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmac_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmsc_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submac_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_2x16_16x8Dv32_s16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 594)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submsc_2x16_16x8(v32int16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x16_16x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_2x16_16x8Dv32_t15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mul_2x16_16x8(v32uint16 a, v128int8_sparse b) {
    return mul_2x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_2x16_16x8Dv32_t15v128int8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmul_2x16_16x8(v32uint16 a, v128int8_sparse b) {
    return negmul_2x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mac_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1) {
    return mac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_msc_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1) {
    return msc_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmac_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1) {
    return negmac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmsc_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1) {
    return negmsc_2x16_16x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmac_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmsc_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submac_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_2x16_16x8Dv32_t15v128int8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128INT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 338)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submsc_2x16_16x8(v32uint16 a, v128int8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x16_16x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_2x16_16x8Dv32_t16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mul_2x16_16x8(v32uint16 a, v128uint8_sparse b) {
    return mul_2x16_16x8(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_2x16_16x8Dv32_t16v128uint8_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmul_2x16_16x8(v32uint16 a, v128uint8_sparse b) {
    return negmul_2x16_16x8(a,b);
}

// CHECK-LABEL: @_Z18test_mac_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_mac_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1) {
    return mac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_msc_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1) {
    return msc_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmac_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmac_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1) {
    return negmac_2x16_16x8(a,b,acc1);
}
// CHECK-LABEL: @_Z21test_negmsc_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_negmsc_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1) {
    return negmsc_2x16_16x8(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmac_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_addmsc_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submac_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submac_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x16_16x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_submsc_2x16_16x8Dv32_t16v128uint8_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V128UINT8_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 82)
// CHECK-NEXT:    ret <16 x i64> [[TMP1]]
//
v16acc64 test_submsc_2x16_16x8(v32uint16 a, v128uint8_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x16_16x8(a,b,acc1,acc2);
}



// CHECK-LABEL: @_Z16test_mul_2x8_8x8Dv32_s15v64int16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mul_2x8_8x8(v32int16 a, v64int16_sparse b) {
    return mul_2x8_8x8(a,b);
}
// CHECK-LABEL: @_Z19test_negmul_2x8_8x8Dv32_s15v64int16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmul_2x8_8x8(v32int16 a, v64int16_sparse b) {
    return negmul_2x8_8x8(a,b);
}

// CHECK-LABEL: @_Z16test_mac_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mac_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1) {
    return mac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z16test_msc_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_msc_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1) {
    return msc_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmac_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmac_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1) {
    return negmac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmsc_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmsc_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1) {
    return negmsc_2x8_8x8(a,b,acc1);
}

// CHECK-LABEL: @_Z19test_addmac_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmac_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_addmsc_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmsc_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submac_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submac_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submsc_2x8_8x8Dv32_s15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 954)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submsc_2x8_8x8(v32int16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x8_8x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z16test_mul_2x8_8x8Dv32_s16v64uint16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mul_2x8_8x8(v32int16 a, v64uint16_sparse b) {
    return mul_2x8_8x8(a,b);
}
// CHECK-LABEL: @_Z19test_negmul_2x8_8x8Dv32_s16v64uint16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmul_2x8_8x8(v32int16 a, v64uint16_sparse b) {
    return negmul_2x8_8x8(a,b);
}

// CHECK-LABEL: @_Z16test_mac_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mac_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1) {
    return mac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z16test_msc_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_msc_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1) {
    return msc_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmac_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmac_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1) {
    return negmac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmsc_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmsc_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1) {
    return negmsc_2x8_8x8(a,b,acc1);
}

// CHECK-LABEL: @_Z19test_addmac_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmac_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_addmsc_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmsc_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submac_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submac_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submsc_2x8_8x8Dv32_s16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 698)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submsc_2x8_8x8(v32int16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x8_8x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z16test_mul_2x8_8x8Dv32_t15v64int16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mul_2x8_8x8(v32uint16 a, v64int16_sparse b) {
    return mul_2x8_8x8(a,b);
}
// CHECK-LABEL: @_Z19test_negmul_2x8_8x8Dv32_t15v64int16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmul_2x8_8x8(v32uint16 a, v64int16_sparse b) {
    return negmul_2x8_8x8(a,b);
}

// CHECK-LABEL: @_Z16test_mac_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mac_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1) {
    return mac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z16test_msc_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_msc_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1) {
    return msc_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmac_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmac_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1) {
    return negmac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmsc_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmsc_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1) {
    return negmsc_2x8_8x8(a,b,acc1);
}

// CHECK-LABEL: @_Z19test_addmac_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmac_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_addmsc_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmsc_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submac_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submac_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submsc_2x8_8x8Dv32_t15v64int16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64INT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 442)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submsc_2x8_8x8(v32uint16 a, v64int16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x8_8x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z16test_mul_2x8_8x8Dv32_t16v64uint16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mul_2x8_8x8(v32uint16 a, v64uint16_sparse b) {
    return mul_2x8_8x8(a,b);
}
// CHECK-LABEL: @_Z19test_negmul_2x8_8x8Dv32_t16v64uint16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmul.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmul_2x8_8x8(v32uint16 a, v64uint16_sparse b) {
    return negmul_2x8_8x8(a,b);
}

// CHECK-LABEL: @_Z16test_mac_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.mac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_mac_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1) {
    return mac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z16test_msc_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.msc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_msc_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1) {
    return msc_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmac_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmac_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1) {
    return negmac_2x8_8x8(a,b,acc1);
}
// CHECK-LABEL: @_Z19test_negmsc_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.acc64.negmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_negmsc_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1) {
    return negmsc_2x8_8x8(a,b,acc1);
}

// CHECK-LABEL: @_Z19test_addmac_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmac_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_addmsc_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_addmsc_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return addmsc_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submac_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submac_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submac_2x8_8x8(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z19test_submsc_2x8_8x8Dv32_t16v64uint16_sparseDv16_u7__acc64S1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64UINT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast <32 x i16> [[A:%.*]] to <64 x i8>
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast <32 x i16> [[B_COERCE_FCA_0_EXTRACT_I]] to <64 x i8>
// CHECK-NEXT:    [[TMP2:%.*]] = tail call noundef <16 x i64> @llvm.aie2.I512.I1024.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> [[TMP0]], <64 x i8> [[TMP1]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <16 x i64> [[ACC1:%.*]], <16 x i64> [[ACC2:%.*]], i32 186)
// CHECK-NEXT:    ret <16 x i64> [[TMP2]]
//
v16acc64 test_submsc_2x8_8x8(v32uint16 a, v64uint16_sparse b, v16acc64 acc1, v16acc64 acc2) {
    return submsc_2x8_8x8(a,b,acc1,acc2);
}

// CHECK-LABEL: @_Z18test_mul_4x16_16x4Dv64_u6__bf1618v64bfloat16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.I1024.I1024.ACC1024.accfloat.bf.mul.conf(<64 x bfloat> [[A:%.*]], <32 x bfloat> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 92)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_mul_4x16_16x4(v64bfloat16 a, v64bfloat16_sparse b) {
    return mul_4x16_16x4(a,b);
}
// CHECK-LABEL: @_Z21test_negmul_4x16_16x4Dv64_u6__bf1618v64bfloat16_sparse(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.I1024.I1024.ACC1024.accfloat.bf.negmul.conf(<64 x bfloat> [[A:%.*]], <32 x bfloat> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], i32 92)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_negmul_4x16_16x4(v64bfloat16 a, v64bfloat16_sparse b) {
    return negmul_4x16_16x4(a,b);
}

// CHECK-LABEL: @_Z18test_mac_4x16_16x4Dv64_u6__bf1618v64bfloat16_sparseDv16_u10__accfloat(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.I1024.I1024.ACC1024.accfloat.bf.mac.conf(<64 x bfloat> [[A:%.*]], <32 x bfloat> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <8 x i64> [[ACC1:%.*]], i32 92)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_mac_4x16_16x4(v64bfloat16 a, v64bfloat16_sparse b, v16accfloat acc1) {
    return mac_4x16_16x4(a,b,acc1);
}
// CHECK-LABEL: @_Z18test_msc_4x16_16x4Dv64_u6__bf1618v64bfloat16_sparseDv16_u10__accfloat(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.I1024.I1024.ACC1024.accfloat.bf.msc.conf(<64 x bfloat> [[A:%.*]], <32 x bfloat> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <8 x i64> [[ACC1:%.*]], i32 92)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_msc_4x16_16x4(v64bfloat16 a, v64bfloat16_sparse b, v16accfloat acc1) {
    return msc_4x16_16x4(a,b,acc1);
}

// CHECK-LABEL: @_Z21test_addmac_4x16_16x4Dv64_u6__bf1618v64bfloat16_sparseDv16_u10__accfloatS1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.accfloat.bf.addmac.conf(<64 x bfloat> [[A:%.*]], <32 x bfloat> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <8 x i64> [[ACC1:%.*]], <8 x i64> [[ACC2:%.*]], i32 92)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_addmac_4x16_16x4(v64bfloat16 a, v64bfloat16_sparse b, v16accfloat acc1, v16accfloat acc2) {
    return addmac_4x16_16x4(a,b,acc1,acc2);
}
// CHECK-LABEL: @_Z21test_addmsc_4x16_16x4Dv64_u6__bf1618v64bfloat16_sparseDv16_u10__accfloatS1_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[B_COERCE_FCA_0_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE:%.*]] [[B_COERCE:%.*]], 0
// CHECK-NEXT:    [[B_COERCE_FCA_1_EXTRACT_I:%.*]] = extractvalue [[STRUCT_V64BFLOAT16_SPARSE]] [[B_COERCE]], 1
// CHECK-NEXT:    [[TMP0:%.*]] = tail call noundef <8 x i64> @llvm.aie2.I1024.I1024.ACC1024.ACC1024.accfloat.bf.addmsc.conf(<64 x bfloat> [[A:%.*]], <32 x bfloat> [[B_COERCE_FCA_0_EXTRACT_I]], i128 [[B_COERCE_FCA_1_EXTRACT_I]], <8 x i64> [[ACC1:%.*]], <8 x i64> [[ACC2:%.*]], i32 92)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_addmsc_4x16_16x4(v64bfloat16 a, v64bfloat16_sparse b, v16accfloat acc1, v16accfloat acc2) {
    return addmsc_4x16_16x4(a,b,acc1,acc2);
}
