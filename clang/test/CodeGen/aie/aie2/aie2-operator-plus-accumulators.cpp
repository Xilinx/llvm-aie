// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aie2-operator-plus-accumulators.cpp ----------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O1 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s

// CHECK-LABEL: @_Z24test_operator_plus_acc32Dv32_u7__acc32S_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i64> @llvm.aie2.add.acc(<16 x i64> [[A:%.*]], <16 x i64> [[B:%.*]], i32 0)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v32acc32 test_operator_plus_acc32(v32acc32 a, v32acc32 b) {
  return a + b;
}

// CHECK-LABEL: @_Z24test_operator_plus_acc64Dv16_u7__acc64S_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <16 x i64> @llvm.aie2.add.acc(<16 x i64> [[A:%.*]], <16 x i64> [[B:%.*]], i32 2)
// CHECK-NEXT:    ret <16 x i64> [[TMP0]]
//
v16acc64 test_operator_plus_acc64(v16acc64 a, v16acc64 b) {
  return a + b;
}


// CHECK-LABEL: @_Z27test_operator_plus_accfloatDv16_u10__accfloatS_(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call <8 x i64> @llvm.aie2.add.accfloat(<8 x i64> [[A:%.*]], <8 x i64> [[B:%.*]], i32 28)
// CHECK-NEXT:    ret <8 x i64> [[TMP0]]
//
v16accfloat test_operator_plus_accfloat(v16accfloat a, v16accfloat b) {
  return a + b;
}
