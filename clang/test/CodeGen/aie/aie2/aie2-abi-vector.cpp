// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --return-type --skip-function-body
//===- aie2-abi-vector.cpp --------------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang --target=aie2 -nostdlibinc -S -emit-llvm %s -o - | FileCheck %s

#include <stdint.h>

extern "C" {

// CHECK-LABEL: define {{[^@]*}}void @pass_v2int4
// CHECK-SAME: (i8 noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v2int4(v2int4) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_v4int4
// CHECK-SAME: (<2 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v4int4(v4int4) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_v8int4
// CHECK-SAME: (<4 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v8int4(v8int4) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_v32int4
// CHECK-SAME: (<16 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32int4(v32int4) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_v64int4
// CHECK-SAME: (<32 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64int4(v64int4) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_v128int4
// CHECK-SAME: (<64 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128int4(v128int4) {}

// CHECK-LABEL: define {{[^@]*}}void @pass_v256int4
// CHECK-SAME: (<128 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v256int4(v256int4) {}

/****** 64-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<2 x i32> @ret_mask64
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
mask64 ret_mask64(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_mask64
// CHECK-SAME: (<2 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_mask64(mask64) {}

// CHECK-LABEL: define {{[^@]*}}<2 x i32> @ret_v2int32
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v2int32 ret_v2int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v2int32
// CHECK-SAME: (<2 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v2int32(v2int32) {}

// CHECK-LABEL: define {{[^@]*}}<4 x i16> @ret_v4int16
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v4int16 ret_v4int16(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v4int16
// CHECK-SAME: (<8 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v4int16(v8int8) {}

// CHECK-LABEL: define {{[^@]*}}<8 x i8> @ret_v8int8
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v8int8 ret_v8int8(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8int8
// CHECK-SAME: (<8 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v8int8(v8int8) {}

// CHECK-LABEL: define {{[^@]*}}<8 x i8> @ret_v16int4
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16int4 ret_v16int4(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16int4
// CHECK-SAME: (<4 x i16> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16int4(v4int16) {}

/****** 512-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<16 x float> @ret_v16float
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16float ret_v16float(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16float
// CHECK-SAME: (<16 x float> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16float(v16float) {}

// CHECK-LABEL: define {{[^@]*}}<16 x i32> @ret_v16int32
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16int32 ret_v16int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16int32
// CHECK-SAME: (<16 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16int32(v16int32) {}

// CHECK-LABEL: define {{[^@]*}}<32 x i16> @ret_v32int16
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32int16 ret_v32int16(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32int16
// CHECK-SAME: (<32 x i16> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32int16(v32int16) {}

// CHECK-LABEL: define {{[^@]*}}<64 x i8> @ret_v64int8
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64int8 ret_v64int8(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v64int8
// CHECK-SAME: (<64 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64int8(v64int8) {}

/****** 1024-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<32 x float> @ret_v32float
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32float ret_v32float(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32float
// CHECK-SAME: (<32 x float> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32float(v32float) {}

// CHECK-LABEL: define {{[^@]*}}<32 x i32> @ret_v32int32
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v32int32 ret_v32int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32int32
// CHECK-SAME: (<32 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32int32(v32int32) {}

// CHECK-LABEL: define {{[^@]*}}<64 x i16> @ret_v64int16
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v64int16 ret_v64int16(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v64int16
// CHECK-SAME: (<64 x i16> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v64int16(v64int16) {}

// CHECK-LABEL: define {{[^@]*}}<128 x i8> @ret_v128int8
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v128int8 ret_v128int8(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v128int8
// CHECK-SAME: (<128 x i8> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v128int8(v128int8) {}

/****** 128-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<2 x i64> @ret_v2cint32
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v2cint32 ret_v2cint32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v2cint32
// CHECK-SAME: (<2 x i64> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v2cint32(v2cint32) {}

// CHECK-LABEL: define {{[^@]*}}<4 x i32> @ret_v4int32
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v4int32 ret_v4int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v4int32
// CHECK-SAME: (<4 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v4int32(v4int32) {}

// CHECK-LABEL: define {{[^@]*}}<4 x float> @ret_v4float
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v4float ret_v4float(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v4float
// CHECK-SAME: (<4 x float> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v4float(v4float) {}

// CHECK-LABEL: define {{[^@]*}}<8 x i16> @ret_v8int16
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v8int16 ret_v8int16(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8int16
// CHECK-SAME: (<8 x i16> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v8int16(v8int16) {}

/****** 256-bits vector ******/

// CHECK-LABEL: define {{[^@]*}}<8 x i32> @ret_v4int64
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v4int64 ret_v4int64(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v4int64
// CHECK-SAME: (<8 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v4int64(v4int64) {}

// CHECK-LABEL: define {{[^@]*}}<8 x float> @ret_v8float
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v8float ret_v8float(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8float
// CHECK-SAME: (<8 x float> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v8float(v8float) {}

// CHECK-LABEL: define {{[^@]*}}<8 x i32> @ret_v8int32
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v8int32 ret_v8int32(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v8int32
// CHECK-SAME: (<8 x i32> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v8int32(v8int32) {}

// CHECK-LABEL: define {{[^@]*}}<16 x i16> @ret_v16int16
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16int16 ret_v16int16(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v16int16
// CHECK-SAME: (<16 x i16> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v16int16(v16int16) {}

// CHECK-LABEL: define {{[^@]*}}<16 x i16> @ret_v32int8
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
v16int16 ret_v32int8(void) { return {}; }
// CHECK-LABEL: define {{[^@]*}}void @pass_v32int8
// CHECK-SAME: (<16 x i16> noundef [[TMP0:%.*]]) #[[ATTR0:[0-9]+]] {
void pass_v32int8(v16int16) {}

}
