// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
//===- aie2-vector-align.cpp ------------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
// RUN: %clang -O2 %s --target=aie2 -S -emit-llvm -o - | FileCheck %s


void take_vector(v16uint16 &a);
void take_vector(v32uint16 &a);
void take_vector(v64uint16 &a);
void take_vector(v8acc32 &a);
void take_vector(v16acc32 &a);
void take_vector(v32acc32 &a);
void take_vector(v4acc64 &a);
void take_vector(v8acc64 &a);
void take_vector(v16acc64 &a);

// CHECK-LABEL: @_Z17test_vector_alignRDv16_t(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv16_t(ptr nonnull align 32 dereferenceable(32) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v16uint16 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv32_t(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv32_t(ptr nonnull align 32 dereferenceable(64) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v32uint16 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv64_t(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv64_t(ptr nonnull align 32 dereferenceable(128) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v64uint16 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv8_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv8_u7__acc32(ptr nonnull align 32 dereferenceable(32) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v8acc32 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv16_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv16_u7__acc32(ptr nonnull align 32 dereferenceable(64) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v16acc32 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv32_u7__acc32(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv32_u7__acc32(ptr nonnull align 32 dereferenceable(128) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v32acc32 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv4_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv4_u7__acc64(ptr nonnull align 32 dereferenceable(32) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v4acc64 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv8_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv8_u7__acc64(ptr nonnull align 32 dereferenceable(64) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v8acc64 &a) {
  take_vector(a);
}

// CHECK-LABEL: @_Z17test_vector_alignRDv16_u7__acc64(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @_Z11take_vectorRDv16_u7__acc64(ptr nonnull align 32 dereferenceable(128) [[A:%.*]])
// CHECK-NEXT:    ret void
//
void test_vector_align(v16acc64 &a) {
  take_vector(a);
}
