//===--AIE2ISelDAGToDAG.cpp -A dag to dag inst selector for AIEngine V2 ---===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the AIEngine V2 target.
//
//===----------------------------------------------------------------------===//
#include "AIE2Subtarget.h"
#include "AIEISelDAGToDAG.h"
#include "MCTargetDesc/AIE2MCTargetDesc.h"
using namespace llvm;
// AIEngine V2-specific code to select AIEngine V2 machine instructions for
// SelectionDAG operations.
class AIE2DAGToDAGISel : public AIEDAGToDAGISel {
public:
  explicit AIE2DAGToDAGISel(TargetMachine &TM) : AIEDAGToDAGISel(TM) {}

  StringRef getPassName() const override {
    return "AIE2 DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;

  // Complex Pattern Selectors.  Each one corresponds to a
  // ComplexPattern<> in AIEInstrInfo.td
  bool SelectFrameIndex(SDValue &N, SDValue &R);

// Include the pieces autogenerated from the target description.
#include "AIE2GenDAGISel.inc"
};

void AIE2DAGToDAGISel::Select(SDNode *Node) {
  // If we have a custom node, we have already selected.
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  // Instruction Selection not handled by the auto-generated tablegen selection
  // should be handled here.
  unsigned Opcode = Node->getOpcode();
  SDLoc DL(Node);
  // EVT VT = Node->getValueType(0);
// TODO Add code here
  switch (Opcode) {
  case ISD::Constant: {
    break;
  }
  }
  // Select the default instruction.
  SelectCode(Node);
}

// Match a frame index that can be used in an addressing mode.
bool AIE2DAGToDAGISel::SelectFrameIndex(SDValue &N, SDValue &R) {
  if (N.getOpcode() != ISD::FrameIndex)
    return false;
  int FI = cast<FrameIndexSDNode>(N)->getIndex();
  LLVM_DEBUG(dbgs() << "SelectFrameIndex: " << FI << "\n");
  R = CurDAG->getTargetFrameIndex(FI, MVT::i32);
  return true;
}

// This pass converts a legalized DAG into a AIE-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createAIE2ISelDag(TargetMachine &TM) {
  return new AIE2DAGToDAGISel(TM);
}
