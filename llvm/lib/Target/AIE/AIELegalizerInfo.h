//===- AIELegalizerInfo -----------------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
/// \file
/// This file declares the targeting of the Machinelegalizer class for AIE.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_AIE_AIEMACHINELEGALIZER_H
#define LLVM_LIB_TARGET_AIE_AIEMACHINELEGALIZER_H

#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"

namespace llvm {

class AIEBaseSubtarget;

/// This class provides legalization strategies.
class AIELegalizerInfo : public LegalizerInfo {
public:
  AIELegalizerInfo(const AIEBaseSubtarget &ST);
  bool legalizeCustom(LegalizerHelper &Helper, MachineInstr &MI) const override;

private:
  bool legalizeG_VASTART(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeG_VAARG(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeMemCalls(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeG_BRJT(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeG_FCONSTANT(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeG_JUMP_TABLE(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeG_DYN_STACKALLOC(LegalizerHelper &Helper,
                                MachineInstr &MI) const;
  bool legalizeG_EXTRACT_VECTOR_ELT(LegalizerHelper &Helper,
                                    MachineInstr &MI) const;
  bool legalizeG_INSERT_VECTOR_ELT(LegalizerHelper &Helper,
                                   MachineInstr &MI) const;
  bool legalizeG_FCMP(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeG_FPTRUNC(LegalizerHelper &Helper, MachineInstr &MI) const;
  bool legalizeG_FPEXT(LegalizerHelper &Helper, MachineInstr &MI) const;
};
} // end namespace llvm
#endif
