//===- AIE2RegisterBankInfo.h -----------------------------------*- C++ -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
/// \file
/// This file declares the targeting of the RegisterBankInfo class
//  for AIEngine V2.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_AIE2_AIE2REGISTERBANKINFO_H
#define LLVM_LIB_TARGET_AIE2_AIE2REGISTERBANKINFO_H

#include "AIEBaseRegisterBankInfo.h"

#define GET_REGBANK_DECLARATIONS
#include "AIE2GenRegisterBank.inc"

namespace llvm {

class TargetRegisterInfo;

class AIE2GenRegisterBankInfo : public AIEBaseRegisterBankInfo {
protected:
  static RegisterBankInfo::PartialMapping PartMappings[];
  static RegisterBankInfo::ValueMapping ValMappings[];

  enum ValueMappingIdx {
    InvalidIdx = 0,
    First3OpsIdx = 1,
    FirstVecOpsIdx = 16,
    FirstAccOpsIdx = 25,
    LastOpsIdx = 27,
    DistanceBetweenRegBanks = 3,
    DistanceBetweenAccRegBanks = 1,
  };

  /// Get the pointer to the ValueMapping representing the RegisterBank
  /// at \p RBIdx with a size of \p Size.
  ///
  /// The returned mapping works for instructions with the same kind of
  /// operands for up to 3 operands.
  ///
  /// \pre \p RBIdx != PartialMappingIdx::None
  const RegisterBankInfo::ValueMapping *
  getValueMapping(PartialMappingIdx RBIdx, unsigned Size) const override;

#define GET_TARGET_REGBANK_CLASS
#include "AIE2GenRegisterBank.inc"
};

/// This class provides the information for the target register banks.
class AIE2RegisterBankInfo final : public AIE2GenRegisterBankInfo {

  void setAIEGenericInstrMapping(
      const MachineInstr &MI, SmallVector<unsigned, 4> &OpSize,
      SmallVector<PartialMappingIdx, 4> &OpRegBankIdx) const override;

public:
  AIE2RegisterBankInfo(const TargetRegisterInfo &TRI);

  const InstructionMapping &
  getInstrMapping(const MachineInstr &MI) const override;

  const RegisterBank &getRegBankFromRegClass(const TargetRegisterClass &RC,
                                             LLT) const override;
};
} // end namespace llvm
#endif
