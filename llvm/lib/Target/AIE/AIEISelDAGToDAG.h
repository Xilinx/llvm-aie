//===-- AIEISelDAGToDAG.h - A dag to dag inst selector for AIE ------===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the AIE target.
//
//===----------------------------------------------------------------------===//
#ifndef LLVM_LIB_TARGET_AIE_AIEISELDAGTODAG_H
#define LLVM_LIB_TARGET_AIE_AIEISELDAGTODAG_H
#include "AIE.h"
#include "AIETargetMachine.h"
#include "MCTargetDesc/AIEMCTargetDesc.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "aie-isel"
#define PASS_NAME "AIE Instruction Selection"

// AIE-specific code to select AIE machine instructions for
// SelectionDAG operations.
class AIEDAGToDAGISel : public SelectionDAGISel {
  static char ID;

public:
  explicit AIEDAGToDAGISel(TargetMachine &TM) : SelectionDAGISel(ID, TM) {}

  StringRef getPassName() const override {
    return "AIE DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;

  // Complex Pattern Selectors.  Each one corresponds to a
  // ComplexPattern<> in AIEInstrInfo.td
  bool SelectFrameIndex(SDValue &N, SDValue &R);

// Include the pieces autogenerated from the target description.
#include "AIEGenDAGISel.inc"
};
#endif // LLVM_LIB_TARGET_AIE_AIEISELDAGTODAG_H
