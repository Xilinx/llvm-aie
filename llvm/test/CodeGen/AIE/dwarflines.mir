#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --aie-avoid-boundary-opc=0 --mtriple=aie2 --start-after=postmisched --filetype=obj -o %t %s
# RUN: llvm-dwarfdump --verbose --debug-line %t | FileCheck --check-prefix=STANDARD %s

#STANDARD:             Address            Line   Column File   ISA Discriminator OpIndex Flags
#STANDARD:             0x0000000000000000      2      0      1   0             0 0  is_stmt
#STANDARD:             0x0000000000000002      9     15      1   0             0 0  is_stmt prologue_end
#STANDARD:             0x000000000000000c     14     15      1   0             0 0  is_stmt
#STANDARD: : 0d address += 0,  line += -5
#STANDARD:             0x0000000000000030      9     15      1   0             0 0  is_stmt
#STANDARD:             0x0000000000000042      9     15      1   0             0 0  is_stmt end_sequence

# RUN: llc --aie-avoid-boundary-opc=1 --mtriple=aie2 --start-after=postmisched  --filetype=obj -o %t %s
# RUN: llvm-dwarfdump --verbose --debug-line %t | FileCheck --check-prefix=NO-0xd %s

#NO-0xd:               0x0000000000000000      2      0      1   0             0 0  is_stmt
#NO-0xd:               0x0000000000000002      9     15      1   0             0 0  is_stmt prologue_end
#NO-0xd:               0x000000000000000c     14     15      1   0             0 0  is_stmt
#NO-0xd-NOT : 0d address += 0,  line += -5
#NO-0xd:               0x0000000000000030      9     15      1   0             0 0  is_stmt
#NO-0xd:               0x0000000000000042      9     15      1   0             0 0  is_stmt end_sequence


--- |
  define dso_local i32 @f(i32 noundef %a0, i32 noundef %a1, ptr nocapture readonly %p) local_unnamed_addr !dbg !6 {
  entry:
    %0 = load i32, ptr %p, align 4, !dbg !9
    %a03 = add i32 %a1, 1, !dbg !14
    %add = mul i32 %a03, %a0, !dbg !14
    ret i32 1
  }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4}

  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 17.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "lines.c", directory: ".")
  !2 = !{i32 7, !"Dwarf Version", i32 4}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !6 = distinct !DISubprogram(name: "f", scope: !1, file: !1, line: 1, type: !7, scopeLine: 2, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !8)
  !7 = !DISubroutineType(types: !8)
  !8 = !{}
  !9 = !DILocation(line: 9, column: 15, scope: !6)
  !14 = !DILocation(line: 14, column: 15, scope: !6)

...
---
name:            f
alignment:       16
body:             |
  bb.0.entry (align 16):
    liveins: $p0, $r1, $r2
    NOP
    $r1 = OR $r1, $r2, debug-location !9
    $r13 = MOVXM_lng_cg 42, debug-location !9
    $r14 = MOVXM_lng_cg 42, debug-location !14
    $r15 = MOVXM_lng_cg 42, debug-location !14
    $r16 = MOVXM_lng_cg 42, debug-location !14
    $r17 = MOVXM_lng_cg 42, debug-location !14
    $r18 = MOVXM_lng_cg 42, debug-location !14
    $r19 = MOVXM_lng_cg 42, debug-location !14
    $r0 = LDA_dms_lda_idx_imm $p0, 0, debug-location !9
    RET implicit $lr, debug-location !9
    NOP
    NOP
    NOP
    NOP
    NOP
...
