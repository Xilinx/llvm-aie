; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 < %s | FileCheck %s

target triple = "aie"

  %struct.A = type { <8 x float>, i32 }


define <8 x float> @testmul1(<32 x float> inreg %a, <8 x float> inreg %b) local_unnamed_addr {
; CHECK-LABEL: testmul1:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov.u20 r12, #0
; CHECK-NEXT:    mov.u20 cl0, #274960
; CHECK-NEXT:    mov cl1, r12
; CHECK-NEXT:    movt.s12 cl0, #1893
; CHECK-NEXT:    movt.s12 cl1, #9
; CHECK-NEXT:    mov cl2, r12
; CHECK-NEXT:    nop
; CHECK-NEXT:    vfpmul wr2, r0, ya, r12, cl0, wc0, #0, cl2, #0, cl1
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %r = tail call <8 x float> @llvm.aie.vfpmul(<32 x float> %a, i32 0, i32 1985229328, <8 x float> %b, i32 0, i32 0, i32 0, i32 9437184)
  ret <8 x float> %r
}

define <8 x float> @testmac1(<32 x float> inreg %a, <8 x float> inreg %b) local_unnamed_addr {
; CHECK-LABEL: testmac1:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov.u20 r12, #0
; CHECK-NEXT:    mov.u20 cl0, #274960
; CHECK-NEXT:    mov cl1, r12
; CHECK-NEXT:    movt.s12 cl0, #1893
; CHECK-NEXT:    movt.s12 cl1, #9
; CHECK-NEXT:    mov cl2, r12
; CHECK-NEXT:    vmov wd0, wc0
; CHECK-NEXT:    vfpmac wr2, r0, wd0, ya, r12, cl0, wc0, #0, cl2, #0, cl1
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %r = tail call <8 x float> @llvm.aie.vfpmac(<8 x float> %b, <32 x float> %a, i32 0, i32 1985229328, <8 x float> %b, i32 0, i32 0, i32 0, i32 9437184)
  ret <8 x float> %r
}

define <8 x float> @testmul2(<8 x float> inreg %a, <8 x float> inreg %b) local_unnamed_addr {
; CHECK-LABEL: testmul2:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vmov wc0, wr1
; CHECK-NEXT:    vfpmul wr2, r0, ya, r15, cl1, wc0, #0, cl1, #0, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %r = fmul <8 x float> %a, %b
  ret <8 x float> %r
}

define <8 x float> @testadd2(<8 x float> inreg %a, <8 x float> inreg %b) local_unnamed_addr {
; CHECK-LABEL: testadd2:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #11
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #8
; CHECK-NEXT:    vmov wr2, wr0
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #0, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %r = fadd <8 x float> %a, %b
  ret <8 x float> %r
}

define <8 x float> @testmac2(<8 x float> inreg %a, <8 x float> inreg %b, <8 x float> inreg %c) local_unnamed_addr {
; CHECK-LABEL: testmac2:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vmov wc0, wr1
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #0, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %r = fmul <8 x float> %a, %b
  %s = fadd <8 x float> %c, %r
  ret <8 x float> %s
}

define <8 x float> @testmsc2(<8 x float> inreg %a, <8 x float> inreg %b, <8 x float> inreg %c) local_unnamed_addr {
; CHECK-LABEL: testmsc2:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vmov wc0, wr1
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %r = fmul <8 x float> %a, %b
  %s = fsub <8 x float> %c, %r
  ret <8 x float> %s
}

define <8 x float> @testmsc3(<8 x float> inreg %a, <8 x float> inreg %b, <8 x float> inreg %c) local_unnamed_addr {
; CHECK-LABEL: testmsc3:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl1, #0
; CHECK-NEXT:    mov cl2, cl1
; CHECK-NEXT:    mov.u20 cl0, #274960
; CHECK-NEXT:    movt.s12 cl0, #1893
; CHECK-NEXT:    movt.s12 cl2, #9
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vmov wc0, wr1
; CHECK-NEXT:    vmov wd0, wr2
; CHECK-NEXT:    vfpmul wr2, r0, ya, r15, cl0, wc0, #0, cl0, #0, cl2
; CHECK-NEXT:    movt.s12 cl1, #11
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vfpmac wr2, r0, wr2, yd, r15, cl0, wc0, #0, cl0, #1, cl1
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %r = fmul <8 x float> %a, %b
  %s = fsub <8 x float> %r, %c
  ret <8 x float> %s
}

declare <8 x float> @llvm.aie.vfpmul(<32 x float>, i32, i32, <8 x float>, i32, i32, i32, i32)
declare <8 x float> @llvm.aie.vfpmac(<8 x float>, <32 x float>, i32, i32, <8 x float>, i32, i32, i32, i32)
