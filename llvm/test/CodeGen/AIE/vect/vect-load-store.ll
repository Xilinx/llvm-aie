; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc --issue-limit=1 -mtriple=aie < %s \
; RUN:   | FileCheck %s


define i32 @test128() nounwind {
; CHECK-LABEL: test128:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    padda [sp], #32
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda vl0, [sp, #-16]
; CHECK-NEXT:    st.spil lr, [sp, #-32] // 4-byte Folded Spill
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    jal test128b
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    ldb lr, [sp, #-32] // 4-byte Folded Reload
; CHECK-NEXT:    mov.u20 r0, #0
; CHECK-NEXT:    vst vl0, [sp, #-16]
; CHECK-NEXT:    padda [sp], #-32
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = alloca <4 x i32>, align 16
  %2 = load <4 x i32>, <4 x i32>* %1, align 16
  %3 = call <4 x i32> @test128b(<4 x i32> %2)
  store <4 x i32> %3, <4 x i32>* %1, align 16
  ret i32 0
}

declare <4 x i32> @test128b(<4 x i32>)

define i32 @test256() nounwind {
; CHECK-LABEL: test256:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    padda [sp], #64
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wr0, [sp, #-32]
; CHECK-NEXT:    st.spil lr, [sp, #-64] // 4-byte Folded Spill
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    jal test256b
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    ldb lr, [sp, #-64] // 4-byte Folded Reload
; CHECK-NEXT:    mov.u20 r0, #0
; CHECK-NEXT:    vst wr0, [sp, #-32]
; CHECK-NEXT:    padda [sp], #-64
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = alloca <8 x i32>, align 32
  %2 = load <8 x i32>, <8 x i32>* %1, align 32
  %3 = call <8 x i32> @test256b(<8 x i32> %2)
  store <8 x i32> %3, <8 x i32>* %1, align 32
  ret i32 0
}

declare <8 x i32> @test256b(<8 x i32>)
