; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie --issue-limit=1 < %s | FileCheck %s

@buf2 = external global [64 x float]
@buf1 = external global [64 x float]
@buf0 = external global [64 x float]

declare <8 x float> @llvm.aie.vfpmul(<32 x float>, i32, i32, <8 x float>, i32, i32, i32, i32)
declare <8 x float> @llvm.aie.vfpmac(<8 x float>, <32 x float>, i32, i32, <8 x float>, i32, i32, i32, i32)

define void @_main() local_unnamed_addr {
; CHECK-LABEL: _main:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 p0, #buf1
; CHECK-NEXT:    vlda wc0, [p0]
; CHECK-NEXT:    mov.u20 r12, #0
; CHECK-NEXT:    mov r13, r12
; CHECK-NEXT:    mov.u20 p0, #buf0
; CHECK-NEXT:    movt.s12 r13, #1024
; CHECK-NEXT:    vlda wd0, [p0]
; CHECK-NEXT:    vshl0.32 wr0, r13
; CHECK-NEXT:    mov r13, r12
; CHECK-NEXT:    mov.u20 cl0, #274960
; CHECK-NEXT:    mov cl1, r12
; CHECK-NEXT:    movt.s12 r13, #1016
; CHECK-NEXT:    vshl0.32 wr0, r13
; CHECK-NEXT:    movt.s12 cl0, #1893
; CHECK-NEXT:    // kill: def $wr1 killed $ya killed $ya def $ya
; CHECK-NEXT:    movt.s12 cl1, #9
; CHECK-NEXT:    mov cl2, r12
; CHECK-NEXT:    mov.u20 p0, #buf2
; CHECK-NEXT:    vfpmac wr2, r0, wd0, ya, r12, cl0, wc0, #0, cl2, #0, cl1
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vst wr2, [p0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %vec0 = insertelement <32 x float> undef, float 1.0, i32 0
  %vec1 = insertelement <32 x float> %vec0, float 2.0, i32 1
  %vec2 = insertelement <32 x float> %vec1, float 3.0, i32 2
  %vec3 = insertelement <32 x float> %vec2, float 4.0, i32 3
  %vec4 = insertelement <32 x float> %vec3, float 5.0, i32 4
  %vec5 = insertelement <32 x float> %vec4, float 6.0, i32 5
  %vec6 = insertelement <32 x float> %vec5, float 7.0, i32 6
  %vec7 = insertelement <32 x float> %vec6, float 8.0, i32 7
  %vec8 = insertelement <32 x float> %vec7, float 9.0, i32 8
  %vec9 = insertelement <32 x float> %vec8, float 10.0, i32 9
  %vec10 = insertelement <32 x float> %vec9, float 11.0, i32 10
  %vec11 = insertelement <32 x float> %vec10, float 12.0, i32 11
  %vec12 = insertelement <32 x float> %vec11, float 13.0, i32 12
  %vec13 = insertelement <32 x float> %vec12, float 14.0, i32 13
  %vec14 = insertelement <32 x float> %vec13, float 15.0, i32 14
  %vec15 = insertelement <32 x float> %vec14, float 16.0, i32 15
  %a2 = load <8 x float>, <8 x float>* bitcast ([64 x float]* @buf0 to <8 x float>*), align 32
  %a3 = load <8 x float>, <8 x float>* bitcast ([64 x float]* @buf1 to <8 x float>*), align 32
  %a4 = tail call <8 x float> @llvm.aie.vfpmac(<8 x float> %a2, <32 x float> %vec1, i32 0, i32 1985229328, <8 x float> %a3, i32 0, i32 0, i32 0, i32 9437184)
  store <8 x float> %a4, <8 x float>* bitcast ([64 x float]* @buf2 to <8 x float>*), align 32
  ret void
}
