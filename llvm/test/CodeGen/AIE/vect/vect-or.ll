; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc --issue-limit=1 -verify-machineinstrs -mtriple=aie < %s \
; RUN:   | FileCheck %s

define <8 x i32> @or8xi32(<8 x i32> %A, <8 x i32> %B) {
; CHECK-LABEL: or8xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vext.32_w r12, wr1[#6]
; CHECK-NEXT:    vext.32_w r13, wr0[#6]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_w r13, wr1[#7]
; CHECK-NEXT:    vext.32_w r14, wr0[#7]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vshl0.32 wr2, r13
; CHECK-NEXT:    vshl0.32 wr2, r12
; CHECK-NEXT:    vext.32_w r12, wr1[#5]
; CHECK-NEXT:    vext.32_w r13, wr0[#5]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vshl0.32 wr2, r12
; CHECK-NEXT:    vext.32_w r12, wr1[#4]
; CHECK-NEXT:    vext.32_w r13, wr0[#4]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vshl0.32 wr2, r12
; CHECK-NEXT:    vext.32_w r12, wr1[#3]
; CHECK-NEXT:    vext.32_w r13, wr0[#3]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vshl0.32 wr2, r12
; CHECK-NEXT:    vext.32_w r12, wr1[#2]
; CHECK-NEXT:    vext.32_w r13, wr0[#2]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vshl0.32 wr2, r12
; CHECK-NEXT:    vext.32_w r12, wr1[#0]
; CHECK-NEXT:    vext.32_w r13, wr0[#0]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_w r13, wr1[#1]
; CHECK-NEXT:    vext.32_w r14, wr0[#1]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vshl0.32 wr2, r13
; CHECK-NEXT:    vshl0.32 wr2, r12
; CHECK-NEXT:    vmov wr0, wr2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = or <8 x i32> %A, %B
	ret <8 x i32> %tmp1
}

define <16 x i32> @or16xi32(<16 x i32> %A, <16 x i32> %B) {
; CHECK-LABEL: or16xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vext.32_x r12, xb[#14]
; CHECK-NEXT:    vext.32_x r13, xa[#14]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_x r13, xb[#15]
; CHECK-NEXT:    vext.32_x r14, xa[#15]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vmov xc, xa
; CHECK-NEXT:    vshl0.32 wr1, r13
; CHECK-NEXT:    vshl0.32 wr1, r12
; CHECK-NEXT:    vext.32_x r12, xb[#6]
; CHECK-NEXT:    vext.32_x r13, xc[#6]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_x r13, xb[#7]
; CHECK-NEXT:    vext.32_x r14, xc[#7]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vext.32_x r14, xb[#13]
; CHECK-NEXT:    vext.32_x r5, xc[#13]
; CHECK-NEXT:    or r14, r5, r14
; CHECK-NEXT:    vshl0.32 wr1, r14
; CHECK-NEXT:    vshl0.32 wr0, r13
; CHECK-NEXT:    vshl0.32 wr0, r12
; CHECK-NEXT:    vext.32_x r12, xb[#12]
; CHECK-NEXT:    vext.32_x r13, xc[#12]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_x r13, xb[#5]
; CHECK-NEXT:    vext.32_x r14, xc[#5]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vshl0.32 wr0, r13
; CHECK-NEXT:    vshl0.32 wr1, r12
; CHECK-NEXT:    vext.32_x r12, xb[#4]
; CHECK-NEXT:    vext.32_x r13, xc[#4]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_x r13, xb[#11]
; CHECK-NEXT:    vext.32_x r14, xc[#11]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vshl0.32 wr1, r13
; CHECK-NEXT:    vshl0.32 wr0, r12
; CHECK-NEXT:    vext.32_x r12, xb[#10]
; CHECK-NEXT:    vext.32_x r13, xc[#10]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_x r13, xb[#3]
; CHECK-NEXT:    vext.32_x r14, xc[#3]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vshl0.32 wr0, r13
; CHECK-NEXT:    vshl0.32 wr1, r12
; CHECK-NEXT:    vext.32_x r12, xb[#0]
; CHECK-NEXT:    vext.32_x r13, xc[#0]
; CHECK-NEXT:    or r12, r13, r12
; CHECK-NEXT:    vext.32_x r13, xb[#2]
; CHECK-NEXT:    vext.32_x r14, xc[#2]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vext.32_x r14, xb[#8]
; CHECK-NEXT:    vext.32_x r5, xc[#8]
; CHECK-NEXT:    or r14, r5, r14
; CHECK-NEXT:    vext.32_x r5, xb[#9]
; CHECK-NEXT:    vext.32_x r6, xc[#9]
; CHECK-NEXT:    or r5, r6, r5
; CHECK-NEXT:    vshl0.32 wr1, r5
; CHECK-NEXT:    vshl0.32 wr1, r14
; CHECK-NEXT:    vshl0.32 wr0, r13
; CHECK-NEXT:    vext.32_x r13, xb[#1]
; CHECK-NEXT:    vext.32_x r14, xc[#1]
; CHECK-NEXT:    or r13, r14, r13
; CHECK-NEXT:    vshl0.32 wr0, r13
; CHECK-NEXT:    vshl0.32 wr0, r12
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = or <16 x i32> %A, %B
	ret <16 x i32> %tmp1
}
