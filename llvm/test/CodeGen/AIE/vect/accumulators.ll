; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc < %s -verify-machineinstrs -mtriple=aie | FileCheck %s
define  <8 x i48> @undef_v8acc48v() {
; CHECK-LABEL: undef_v8acc48v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = call <8 x i48> @llvm.aie.v8i48undef()
  ret <8 x i48> %0
}
declare <8 x i48> @llvm.aie.v8i48undef()

define  <16 x i48> @undef_v8acc80v() {
; CHECK-LABEL: undef_v8acc80v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = call <16 x i48> @llvm.aie.v16i48undef()
  ret <16 x i48> %0
}
declare <16 x i48> @llvm.aie.v16i48undef()

define  <8 x i48> @test_v8i48() {
; CHECK-LABEL: test_v8i48:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    padda [sp], #64
; CHECK-NEXT:    nop
; CHECK-NEXT:    vst.spil.48 aml0.lo, [sp, #-64]
; CHECK-NEXT:    vst.spil.48 aml0.hi, [sp, #-32]
; CHECK-NEXT:    vlda.spil.48 aml0.lo, [sp, #-64]
; CHECK-NEXT:    vlda.spil.48 aml0.hi, [sp, #-32]
; CHECK-NEXT:    padda [sp], #-64
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %x = alloca <8 x i48>, align 64
  %0 = call <8 x i48> @llvm.aie.v8i48undef()
  store volatile <8 x i48> %0, <8 x i48>* %x, align 64
  %1 = load volatile <8 x i48>, <8 x i48>* %x, align 64
  ret <8 x i48> %1
}

define <16 x i48> @_Z12test_v8acc80v() {
; CHECK-LABEL: _Z12test_v8acc80v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    padda [sp], #128
; CHECK-NEXT:    nop
; CHECK-NEXT:    vst.spil.48 aml0.lo, [sp, #-128]
; CHECK-NEXT:    vst.spil.48 aml0.hi, [sp, #-96]
; CHECK-NEXT:    vst.spil.48 amh0.lo, [sp, #-64]
; CHECK-NEXT:    vst.spil.48 amh0.hi, [sp, #-32]
; CHECK-NEXT:    vlda.spil.48 aml0.lo, [sp, #-128]
; CHECK-NEXT:    vlda.spil.48 aml0.hi, [sp, #-96]
; CHECK-NEXT:    vlda.spil.48 amh0.lo, [sp, #-64]
; CHECK-NEXT:    vlda.spil.48 amh0.hi, [sp, #-32]
; CHECK-NEXT:    padda [sp], #-128
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %x0 = alloca <16 x i48>, align 128
  %x0.0.x0.0.x0.0..sroa_cast = bitcast <16 x i48>* %x0 to i8*
  %0 = tail call <16 x i48> @llvm.aie.v16i48undef()
  store volatile <16 x i48> %0, <16 x i48>* %x0, align 128
  %x0.0.x0.0.x0.0. = load volatile <16 x i48>, <16 x i48>* %x0, align 128
  ret <16 x i48> %x0.0.x0.0.x0.0.
}

define void @test_v8i48_v8i80() {
; CHECK-LABEL: test_v8i48_v8i80:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    padda [sp], #256
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda.spil.48 aml0.lo, [sp, #-256]
; CHECK-NEXT:    vlda.spil.48 aml0.hi, [sp, #-224]
; CHECK-NEXT:    vlda.spil.48 amh0.lo, [sp, #-192]
; CHECK-NEXT:    vlda.spil.48 amh0.hi, [sp, #-160]
; CHECK-NEXT:    vlda.spil.48 aml1.lo, [sp, #-128]
; CHECK-NEXT:    vlda.spil.48 aml1.hi, [sp, #-96]
; CHECK-NEXT:    padda [sp], #-256
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    j _Z3fooDv8_u7__acc80Dv8_u7__acc48
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %x0 = alloca <16 x i48>, align 128
  %x1 = alloca <8 x i48>, align 64
  %x0.0.x0.0.x0.0..sroa_cast = bitcast <16 x i48>* %x0 to i8*
  %x1.0.x1.0.x1.0..sroa_cast = bitcast <8 x i48>* %x1 to i8*
  %x0.0.x0.0.x0.0. = load volatile <16 x i48>, <16 x i48>* %x0, align 128
  %x1.0.x1.0.x1.0. = load volatile <8 x i48>, <8 x i48>* %x1, align 64
  tail call void @_Z3fooDv8_u7__acc80Dv8_u7__acc48(<16 x i48> %x0.0.x0.0.x0.0., <8 x i48> %x1.0.x1.0.x1.0.)
  ret void
}
declare dso_local void @_Z3fooDv8_u7__acc80Dv8_u7__acc48(<16 x i48>, <8 x i48>)
