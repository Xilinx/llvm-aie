; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc --issue-limit=1 -verify-machineinstrs -mtriple=aie < %s \
; RUN:   | FileCheck %s

define <8 x i1> @sge8xi32(<8 x i32> %A, <8 x i32> %B) {
; CHECK-LABEL: sge8xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #17
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #16
; CHECK-NEXT:    vmov wr2, wr1
; CHECK-NEXT:    // kill: def $wr0 killed $wr0 def $xa
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ze.8 r0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp sge <8 x i32> %A, %B
	ret <8 x i1> %tmp1
}

define <16 x i1> @sge16xi32(<16 x i32> %A, <16 x i32> %B) {
; CHECK-LABEL: sge16xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #17
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #16
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp sge <16 x i32> %A, %B
	ret <16 x i1> %tmp1
}

define <8 x i1> @sgt8xi32(<8 x i32> %A, <8 x i32> %B) {
; CHECK-LABEL: sgt8xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #16
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    vmov wr2, wr1
; CHECK-NEXT:    // kill: def $wr0 killed $wr0 def $xa
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ze.8 r0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp sgt <8 x i32> %A, %B
	ret <8 x i1> %tmp1
}

define <16 x i1> @sgt16xi32(<16 x i32> %A, <16 x i32> %B) {
; CHECK-LABEL: sgt16xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #16
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp sgt <16 x i32> %A, %B
	ret <16 x i1> %tmp1
}


define <8 x i1> @sle8xi32(<8 x i32> %A, <8 x i32> %B) {
; CHECK-LABEL: sle8xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #17
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #16
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    vmov wr2, wr1
; CHECK-NEXT:    // kill: def $wr0 killed $wr0 def $xa
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ze.8 r0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp sle <8 x i32> %A, %B
	ret <8 x i1> %tmp1
}

define <16 x i1> @sle16xi32(<16 x i32> %A, <16 x i32> %B) {
; CHECK-LABEL: sle16xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #17
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #16
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp sle <16 x i32> %A, %B
	ret <16 x i1> %tmp1
}

define <8 x i1> @slt8xi32(<8 x i32> %A, <8 x i32> %B) {
; CHECK-LABEL: slt8xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #16
; CHECK-NEXT:    vmov wr2, wr1
; CHECK-NEXT:    // kill: def $wr0 killed $wr0 def $xa
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ze.8 r0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp slt <8 x i32> %A, %B
	ret <8 x i1> %tmp1
}

define <16 x i1> @slt16xi32(<16 x i32> %A, <16 x i32> %B) {
; CHECK-LABEL: slt16xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #16
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp slt <16 x i32> %A, %B
	ret <16 x i1> %tmp1
}

define <8 x i1> @eq8xi32(<8 x i32> %A, <8 x i32> %B) {
; CHECK-LABEL: eq8xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    // kill: def $wr1 killed $wr1 killed $xa def $xa
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    // kill: def $wr0 killed $wr0 killed $xa def $xa
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    mov.u20 cl0, #114688
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov ch2, cl1
; CHECK-NEXT:    movt.s12 cl0, #17
; CHECK-NEXT:    mov cl2, ch1
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    mov.u20 r12, #1046520
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c2, r5, c1, c0
; CHECK-NEXT:    movt.s12 r12, #-1
; CHECK-NEXT:    lshl r12, r0, r12
; CHECK-NEXT:    and r12, r0, r12
; CHECK-NEXT:    ze.8 r0, r12
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp eq <8 x i32> %A, %B
	ret <8 x i1> %tmp1
}

define <16 x i1> @eq16xi32(<16 x i32> %A, <16 x i32> %B) {
; CHECK-LABEL: eq16xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #17
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #16
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #16
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r1, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    and r0, r1, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp eq <16 x i32> %A, %B
	ret <16 x i1> %tmp1
}

define <8 x i1> @ne8xi32(<8 x i32> %A, <8 x i32> %B) {
; CHECK-LABEL: ne8xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    // kill: def $wr1 killed $wr1 killed $xa def $xa
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    // kill: def $wr0 killed $wr0 killed $xa def $xa
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    mov.u20 cl0, #114688
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov ch2, cl1
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    mov cl2, ch1
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    mov.u20 r12, #1046520
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c2, r5, c1, c0
; CHECK-NEXT:    movt.s12 r12, #-1
; CHECK-NEXT:    lshl r12, r0, r12
; CHECK-NEXT:    or r12, r0, r12
; CHECK-NEXT:    ze.8 r0, r12
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp ne <8 x i32> %A, %B
	ret <8 x i1> %tmp1
}

define <16 x i1> @ne16xi32(<16 x i32> %A, <16 x i32> %B) {
; CHECK-LABEL: ne16xi32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 ch0, #65536
; CHECK-NEXT:    mov.u20 ch1, #834200
; CHECK-NEXT:    movt.s12 ch0, #0
; CHECK-NEXT:    movt.s12 ch1, #-19
; CHECK-NEXT:    mov.u20 cl0, #638976
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #16
; CHECK-NEXT:    mov.u20 r5, #0
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r0, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    mov.u20 r5, #16
; CHECK-NEXT:    nop
; CHECK-NEXT:    vcmp xc, r1, ya.s32, r15, c1, r5, c1, c0
; CHECK-NEXT:    nop
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
	%tmp1 = icmp ne <16 x i32> %A, %B
	ret <16 x i1> %tmp1
}
