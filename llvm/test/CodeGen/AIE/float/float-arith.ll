; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define float @fadd_s(float %a, float %b) nounwind {
; CHECK-LABEL: fadd_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #11
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #0, cl0
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #0, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vext.32 r0, vl2[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fadd float %a, %b
  %2 = fadd float %1, %b
  ret float %2
}

define float @fsub_s(float %a, float %b) nounwind {
; CHECK-LABEL: fsub_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #11
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vext.32 r0, vl2[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fsub float %a, %b
  ret float %1
}

define float @fmul_s(float %a, float %b) nounwind {
; CHECK-LABEL: fmul_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #9
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr0, r6
; CHECK-NEXT:    vshl0.32 wc0, r7
; CHECK-NEXT:    vfpmul wr2, r0, ya, r15, cl1, wc0, #0, cl1, #0, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vext.32 r0, vl2[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fmul float %a, %b
  ret float %1
}

define float @fdiv_s(float %a, float %b) nounwind {
; CHECK-LABEL: fdiv_s:
; CHECK:    jal __divsf3
  %1 = fdiv float %a, %b
  ret float %1
}

define float @frem_s(float %a, float %b) nounwind {
; CHECK-LABEL: frem_s:
; CHECK:    jal fmodf
  %1 = frem float %a, %b
  ret float %1
}

declare float @llvm.sqrt.f32(float)

define float @fsqrt_s(float %a) nounwind {
; CHECK-LABEL: fsqrt_s:
; CHECK:    sqrt
  %1 = call float @llvm.sqrt.f32(float %a)
  ret float %1
}

declare float @llvm.copysign.f32(float, float)

define float @fsgnj_s(float %a, float %b) nounwind {
; CHECK-LABEL: fsgnj_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov r0, r6
; CHECK-NEXT:    mov r1, r7[#31]
; CHECK-NEXT:    mov r0[#31], r1[0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = call float @llvm.copysign.f32(float %a, float %b)
  ret float %1
}

define float @fneg_s(float %a) nounwind {
; CHECK-LABEL: fneg_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #0
; CHECK-NEXT:    movt.s12 r12, #-2048
; CHECK-NEXT:    xor r0, r6, r12
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fneg float %a
  ret float %1
}


declare float @llvm.fabs.f32(float)

define float @fabs_s(float %a) nounwind {
; CHECK-LABEL: fabs_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #1048575
; CHECK-NEXT:    movt.s12 r12, #2047
; CHECK-NEXT:    and r0, r6, r12
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = call float @llvm.fabs.f32(float %a)
  ret float %1
}

declare float @llvm.minnum.f32(float, float)

define float @fmin_s(float %a, float %b) nounwind {
; CHECK-LABEL: fmin_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #7
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vext.32 r0, vl2[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = call float @llvm.minnum.f32(float %a, float %b)
  ret float %1
}

declare float @llvm.maxnum.f32(float, float)

define float @fmax_s(float %a, float %b) nounwind {
; CHECK-LABEL: fmax_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #3
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vext.32 r0, vl2[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = call float @llvm.maxnum.f32(float %a, float %b)
  ret float %1
}


declare float @llvm.fma.f32(float, float, float)

define float @fmadd_s(float %a, float %b, float %c) nounwind {
; CHECK-LABEL: fmadd_s:
; CHECK:    jal fmaf
  %1 = call float @llvm.fma.f32(float %a, float %b, float %c)
  ret float %1
}
