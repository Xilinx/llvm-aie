; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define i32 @feq_s(float %a, float %b) nounwind {
; CHECK-LABEL: feq_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #7
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r7
; CHECK-NEXT:    vshl0.32 wr0, r6
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vfpmac wr2, r1, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    and r12, r1, r0
; CHECK-NEXT:    mov r0, r12[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fcmp oeq float %a, %b
  %2 = zext i1 %1 to i32
  ret i32 %2
}

define i32 @flt_s(float %a, float %b) nounwind {
; CHECK-LABEL: flt_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #3
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mov r0, r0[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fcmp olt float %a, %b
  %2 = zext i1 %1 to i32
  ret i32 %2
}

define i32 @fle_s(float %a, float %b) nounwind {
; CHECK-LABEL: fle_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #7
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r7
; CHECK-NEXT:    vshl0.32 wr0, r6
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mov r0, r0[#0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fcmp ole float %a, %b
  %2 = zext i1 %1 to i32
  ret i32 %2
}

define i32 @ford_s(float %a, float %b) nounwind {
; CHECK-LABEL: ford_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #7
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vshl0.32 wr0, r6
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vshl0.32 wr2, r7
; CHECK-NEXT:    vfpmac wr2, r1, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    and r12, r1, r1
; CHECK-NEXT:    mov r1, r12[#0]
; CHECK-NEXT:    and r12, r0, r0
; CHECK-NEXT:    mov r0, r12[#0]
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fcmp ord float %a, %b
  %2 = zext i1 %1 to i32
  ret i32 %2
}

define i32 @funo_s(float %a, float %b) nounwind {
; CHECK-LABEL: funo_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #3
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r6
; CHECK-NEXT:    vshl0.32 wr0, r6
; CHECK-NEXT:    vfpmac wr2, r0, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr0, r7
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vshl0.32 wr2, r7
; CHECK-NEXT:    vfpmac wr2, r1, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    or r12, r1, r1
; CHECK-NEXT:    mov r1, r12[#0]
; CHECK-NEXT:    or r12, r0, r0
; CHECK-NEXT:    mov r0, r12[#0]
; CHECK-NEXT:    or r0, r0, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %1 = fcmp uno float %a, %b
  %2 = zext i1 %1 to i32
  ret i32 %2
}
