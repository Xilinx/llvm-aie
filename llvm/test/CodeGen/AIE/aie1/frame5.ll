; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --stop-after=prologepilog < %s \
; RUN:   | FileCheck -check-prefix=FPELIM %s
; RUN: llc -mtriple=aie --stop-after=prologepilog -frame-pointer=all < %s \
; RUN:   | FileCheck -check-prefix=WITHFP %s


; This test checks what happens when we have a large stack frame.
; Because of the encoding ranges of certain operations, we emit
; slightly different code sequences than what happens with small
; stack frames.
%struct.key_t = type { i32, [1024 x i8] }

define i32 @test() nounwind {
;
  ; FPELIM-LABEL: name: test
  ; FPELIM: bb.0 (%ir-block.0):
  ; FPELIM-NEXT:   liveins: $r10
  ; FPELIM-NEXT: {{  $}}
  ; FPELIM-NEXT:   $m0 = frame-setup MOV_S12 1056
  ; FPELIM-NEXT:   frame-setup PADDA_sp killed $m0, implicit-def $sp, implicit $sp
  ; FPELIM-NEXT:   ST_SPIL_PTR killed $lr, -1052, implicit $sp :: (store (s32) into %stack.1)
  ; FPELIM-NEXT:   ST_SPIL_GPR killed $r10, -1056, implicit $sp :: (store (s32) into %stack.2)
  ; FPELIM-NEXT:   renamable $cs0 = MOV_S12 16
  ; FPELIM-NEXT:   $r10 = MV_SPECIAL2R $sp
  ; FPELIM-NEXT:   $p0 = MOV killed $r10
  ; FPELIM-NEXT:   $m0 = MOV_S12 -1048
  ; FPELIM-NEXT:   $p0 = PADDA_nrm $p0, killed $m0
  ; FPELIM-NEXT:   renamable $r10 = MOV_U20 0
  ; FPELIM-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 16)
  ; FPELIM-NEXT:   renamable $cs0 = MOV_S12 12
  ; FPELIM-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 12)
  ; FPELIM-NEXT:   renamable $cs0 = MOV_S12 8
  ; FPELIM-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 8)
  ; FPELIM-NEXT:   renamable $cs0 = MOV_S12 4
  ; FPELIM-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 4)
  ; FPELIM-NEXT:   ST_SPIL_GPR renamable $r10, -1048, implicit $sp :: (store (s32) into %ir.1)
  ; FPELIM-NEXT:   renamable $p0 = PADDA_nrm_imm killed renamable $p0, 4
  ; FPELIM-NEXT:   JAL @test1, csr_aie1, implicit-def dead $lr, implicit $p0, implicit-def $sp
  ; FPELIM-NEXT:   $r0 = COPY killed renamable $r10
  ; FPELIM-NEXT:   $r10 = LDA_SPIL_GPR -1056, implicit $sp :: (load (s32) from %stack.2)
  ; FPELIM-NEXT:   $lr = LR_LOAD -1052, implicit-def $r15, implicit $sp :: (load (s32) from %stack.1)
  ; FPELIM-NEXT:   $m0 = frame-destroy MOV_S12 -1056
  ; FPELIM-NEXT:   frame-destroy PADDA_sp killed $m0, implicit-def $sp, implicit $sp
  ; FPELIM-NEXT:   PseudoRET implicit $lr, implicit $r0
  ; WITHFP-LABEL: name: test
  ; WITHFP: bb.0 (%ir-block.0):
  ; WITHFP-NEXT:   liveins: $r10
  ; WITHFP-NEXT: {{  $}}
  ; WITHFP-NEXT:   $m0 = frame-setup MOV_S12 1056
  ; WITHFP-NEXT:   frame-setup PADDA_sp killed $m0, implicit-def $sp, implicit $sp
  ; WITHFP-NEXT:   ST_SPIL_PTR killed $lr, -1052, implicit $sp :: (store (s32) into %stack.1)
  ; WITHFP-NEXT:   ST_SPIL_GPR killed $r10, -1056, implicit $sp :: (store (s32) into %stack.2)
  ; WITHFP-NEXT:   $r10 = frame-setup MV_SPECIAL2R $sp
  ; WITHFP-NEXT:   $p7 = frame-setup MOV killed $r10
  ; WITHFP-NEXT:   $m0 = frame-setup MOV_S12 -1056
  ; WITHFP-NEXT:   $p7 = frame-setup PADDA_nrm $p7, killed $m0
  ; WITHFP-NEXT:   renamable $cs0 = MOV_S12 16
  ; WITHFP-NEXT:   $p0 = MOV $p7
  ; WITHFP-NEXT:   $m0 = MOV_S12 -1048
  ; WITHFP-NEXT:   $p0 = PADDA_nrm $p0, killed $m0
  ; WITHFP-NEXT:   renamable $r10 = MOV_U20 0
  ; WITHFP-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 16)
  ; WITHFP-NEXT:   renamable $cs0 = MOV_S12 12
  ; WITHFP-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 12)
  ; WITHFP-NEXT:   renamable $cs0 = MOV_S12 8
  ; WITHFP-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 8)
  ; WITHFP-NEXT:   renamable $cs0 = MOV_S12 4
  ; WITHFP-NEXT:   ST_idx_GPR renamable $r10, renamable $p0, killed renamable $cs0 :: (store (s32) into %ir.1 + 4)
  ; WITHFP-NEXT:   ST_SPIL_GPR renamable $r10, -1048, implicit $sp :: (store (s32) into %ir.1)
  ; WITHFP-NEXT:   renamable $p0 = PADDA_nrm_imm killed renamable $p0, 4
  ; WITHFP-NEXT:   JAL @test1, csr_aie1, implicit-def dead $lr, implicit $p0, implicit-def $sp
  ; WITHFP-NEXT:   $r0 = COPY killed renamable $r10
  ; WITHFP-NEXT:   $r10 = LDA_SPIL_GPR -1056, implicit $sp :: (load (s32) from %stack.2)
  ; WITHFP-NEXT:   $lr = LR_LOAD -1052, implicit-def $r15, implicit $sp :: (load (s32) from %stack.1)
  ; WITHFP-NEXT:   $m0 = frame-destroy MOV_S12 -1056
  ; WITHFP-NEXT:   frame-destroy PADDA_sp killed $m0, implicit-def $sp, implicit $sp
  ; WITHFP-NEXT:   PseudoRET implicit $lr, implicit $r0
  %key = alloca %struct.key_t, align 4
  %1 = bitcast %struct.key_t* %key to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 20, i1 false)
  %2 = getelementptr inbounds %struct.key_t, %struct.key_t* %key, i64 0, i32 1, i64 0
  call void @test1(i8* %2) #3
  ret i32 0
}

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i1)

declare void @test1(i8*)
