; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 < %s \
; RUN:   | FileCheck %s

target triple = "aie"

define i32 @test(i32 inreg %a) local_unnamed_addr {
; CHECK-LABEL: test:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov.s12 r0, #1
; CHECK-DAG:    mov md0[#8], r0[0]
; CHECK-DAG:    mov.s12 r1, #0
; CHECK-DAG:    mov0 r12, SS.md0[8]
; CHECK-NEXT:    mov md0[#10], r1[0]
; CHECK-NEXT:    movs MS.md0[10], r12, #0
; CHECK-NEXT:    mov md0[#8], r1[0]
; CHECK-NEXT:    mov0 r12, SS.md0[8]
; CHECK-NEXT:    mov md0[#10], r0[0]
; CHECK-NEXT:    mov.u20 r0, #1
; CHECK-NEXT:    movs MS.md0[10], r12, #0
; CHECK:         ret lr
entry:
	%0 = tail call i32 @llvm.aie.get.ss(i32 0)
   %1 = tail call i32 @llvm.aie.get.ss(i32 1)
   tail call void @llvm.aie.put.ms(i32 0, i32 %1)
   tail call void @llvm.aie.put.ms(i32 1, i32 %0)
   ret i32 1
}

define void @test2(i32 inreg %a) local_unnamed_addr {
; CHECK-LABEL: test2:
; CHECK:       // %bb.0: // %entry
; CHECK-DAG:    mov.s12 r0, #0
; CHECK-DAG:    mov md0[#10], r0[0]
; CHECK-DAG:    mov.u20 r12, #31
; CHECK-DAG:    mov.u20 p0, #0
; CHECK-DAG:    mov.s12 r0, #1
; CHECK-DAG:    PKTHD MS.md0[10], r12, #3, #0
; CHECK-DAG:    mov md0[#10], r0[0]
; CHECK-DAG:    mov m0, p0
; CHECK-NEXT:    CPKTHD MS.md0[10], m0, #3, #0, r12, #0
; CHECK:         ret lr
entry:
  %0 = tail call i32 @llvm.aie.packet.header(i32 31, i32 3) #5
  tail call void @llvm.aie.put.ms(i32 0, i32 %0) #5
;  tail call void @llvm.aie.put.ms(i32 1, i32 %0) #5
  %1 = tail call i32 @llvm.aie.ctrl.packet.header(i20 0, i32 3, i32 0, i32 31) #5
  tail call void @llvm.aie.put.ms(i32 1, i32 %1) #5

  ret void
}

declare i32 @llvm.aie.get.ss(i32)
declare void @llvm.aie.put.ms(i32, i32)
declare i32 @llvm.aie.packet.header(i32, i32)
declare i32 @llvm.aie.ctrl.packet.header(i20, i32, i32, i32)
