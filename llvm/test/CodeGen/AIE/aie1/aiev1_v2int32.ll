; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc < %s --issue-limit=1 -verify-machineinstrs -mtriple=aie | FileCheck %s
define dso_local void @_Z12pass_v2int32Dv2_i(<2 x i32> noundef %a) local_unnamed_addr #0 {
; CHECK-LABEL: _Z12pass_v2int32Dv2_i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  ret void
}

define dso_local noundef <2 x i32> @_Z14return_v2int32v() local_unnamed_addr #1 {
; CHECK-LABEL: _Z14return_v2int32v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov.u20 r0, #10
; CHECK-NEXT:    mov.u20 r1, #21
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  ret <2 x i32> <i32 10, i32 21>
}

define dso_local noundef <2 x i32> @_Z19pass_return_v2int32Dv2_i(<2 x i32> noundef %a) local_unnamed_addr #0 {
; CHECK-LABEL: _Z19pass_return_v2int32Dv2_i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov cl1, r6
; CHECK-NEXT:    mov ch1, r7
; CHECK-NEXT:    mov r12, cl1
; CHECK-NEXT:    add r0, r12, #10
; CHECK-NEXT:    mov r12, ch1
; CHECK-NEXT:    add r1, r12, #21
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %vecext = extractelement <2 x i32> %a, i64 0
  %add = add nsw i32 %vecext, 10
  %vecins = insertelement <2 x i32> poison, i32 %add, i64 0
  %vecext1 = extractelement <2 x i32> %a, i64 1
  %add2 = add nsw i32 %vecext1, 21
  %vecins3 = insertelement <2 x i32> %vecins, i32 %add2, i64 1
  ret <2 x i32> %vecins3
}
