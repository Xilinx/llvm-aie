; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 < %s \
; RUN:   | FileCheck %s

%struct.window_internal = type { i8*, i8*, i8*, i32, i32 }

@_ZL11sync_buffer = internal global [8 x i32] [i32 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4

define dso_local i32 @main() local_unnamed_addr {
; CHECK-LABEL: main:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov.u20 p0, #(_ZL11sync_buffer+4)
; CHECK-NEXT:    lda r13, [p0]
; CHECK-NEXT:    mov.u20 r14, #1
; CHECK-NEXT:    mov.u20 r12, #0
; CHECK-NEXT:    sub r14, r12, r14
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ashl r13, r13, r14
; CHECK-NEXT:    eq r14, r13, r12
; CHECK-NEXT:    bnez r14, .LBB0_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_1: // %while.body
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    lt r14, r12, r13
; CHECK-NEXT:    sub r13, r13, r14
; CHECK-NEXT:    ne r14, r13, r12
; CHECK-NEXT:    bnez r14, .LBB0_1
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_2: // %while.end
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    mov.u20 r0, #0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %t4 = load volatile i32, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @_ZL11sync_buffer, i32 0, i32 1), align 4
  %shr = ashr i32 %t4, 1
  %tobool7 = icmp eq i32 %shr, 0
  br i1 %tobool7, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %proc_1_0_bounds.08 = phi i32 [ %spec.select, %while.body ], [ %shr, %entry ]
  %cmp = icmp sgt i32 %proc_1_0_bounds.08, 0
  %t5 = zext i1 %cmp to i32
  %spec.select = sub i32 %proc_1_0_bounds.08, %t5
  %tobool = icmp eq i32 %spec.select, 0
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %entry
  ret i32 0
}
