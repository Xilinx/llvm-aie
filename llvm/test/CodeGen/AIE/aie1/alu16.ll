; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

; These tests are identical to those in alu32.ll but operate on i16. They check
; that legalisation of these non-native types doesn't introduce unnecessary
; inefficiencies.

define signext i16 @addi(i16 signext %a) nounwind {
; CHECK-LABEL: addi:
; CHECK:       // %bb.0:
; CHECK-NEXT:    add r12, r6, #1
; CHECK-NEXT:    se.16 r0, r12
; CHECK:         ret lr
  %1 = add i16 %a, 1
  ret i16 %1
}

define signext i16 @slti(i16 signext %a) nounwind {
; CHECK-LABEL: slti:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #2
; CHECK-NEXT:    lt r0, r6, r12
; CHECK:         ret lr
  %1 = icmp slt i16 %a, 2
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define signext i16 @sltiu(i16 signext %a) nounwind {
; CHECK-LABEL: sltiu:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #3
; CHECK-NEXT:    ltu r0, r6, r12
; CHECK:         ret lr
  %1 = icmp ult i16 %a, 3
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define signext i16 @xori(i16 signext %a) nounwind {
; CHECK-LABEL: xori:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #4
; CHECK-NEXT:    xor r0, r6, r12
; CHECK:         ret lr
  %1 = xor i16 %a, 4
  ret i16 %1
}

define signext i16 @ori(i16 signext %a) nounwind {
; CHECK-LABEL: ori:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #5
; CHECK-NEXT:    or r0, r6, r12
; CHECK:         ret lr
  %1 = or i16 %a, 5
  ret i16 %1
}

define signext i16 @andi(i16 signext %a) nounwind {
; CHECK-LABEL: andi:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #6
; CHECK-NEXT:    and r0, r6, r12
; CHECK:         ret lr
  %1 = and i16 %a, 6
  ret i16 %1
}

define signext i16 @slli(i16 signext %a) nounwind {
; CHECK-LABEL: slli:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #7
; CHECK-NEXT:    lshl r12, r6, r12
; CHECK-NEXT:    se.16 r0, r12
; CHECK:         ret lr
  %1 = shl i16 %a, 7
  ret i16 %1
}

define signext i16 @srli(i16 signext %a) nounwind {
; CHECK-LABEL: srli:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #6
; CHECK-NEXT:    mov.u20 r13, #0
; CHECK-NEXT:    sub r12, r13, r12
; CHECK-NEXT:    mov.u20 r13, #65472
; CHECK-NEXT:    and r13, r6, r13
; CHECK-NEXT:    lshl r0, r13, r12
; CHECK-NEXT:    ret lr
  %1 = lshr i16 %a, 6
  ret i16 %1
}

define signext i16 @srai(i16 signext %a) nounwind {
; CHECK-LABEL: srai:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #9
; CHECK-NEXT:    mov.u20 r13, #0
; CHECK-NEXT:    sub r12, r13, r12
; CHECK-NEXT:    ashl r0, r6, r12
; CHECK-NEXT:    ret lr
  %1 = ashr i16 %a, 9
  ret i16 %1
}


define signext i16 @add(i16 signext %a, i16 signext %b) nounwind {
; CHECK-LABEL: add:
; CHECK:       // %bb.0:
; CHECK-NEXT:    add r12, r6, r7
; CHECK-NEXT:    se.16 r0, r12
; CHECK:         ret lr
  %1 = add i16 %a, %b
  ret i16 %1
}

define signext i16 @sub(i16 signext %a, i16 signext %b) nounwind {
; CHECK-LABEL: sub:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub r12, r6, r7
; CHECK-NEXT:    se.16 r0, r12
; CHECK:         ret lr
  %1 = sub i16 %a, %b
  ret i16 %1
}

define signext i16 @sll(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: sll:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ze.16 r12, r7
; CHECK-NEXT:    lshl r12, r6, r12
; CHECK-NEXT:    se.16 r0, r12
; CHECK:         ret lr
  %1 = shl i16 %a, %b
  ret i16 %1
}

define signext i16 @slt(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: slt:
; CHECK:       // %bb.0:
; CHECK-NEXT:    lt r0, r6, r7
; CHECK:         ret lr
  %1 = icmp slt i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define signext i16 @sltu(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: sltu:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ltu r0, r6, r7
; CHECK:         ret lr
  %1 = icmp ult i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define signext i16 @xor(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: xor:
; CHECK:       // %bb.0:
; CHECK-NEXT:    xor r0, r6, r7
; CHECK:         ret lr
  %1 = xor i16 %a, %b
  ret i16 %1
}

define signext i16 @srl(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: srl:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ze.16 r12, r7
; CHECK-NEXT:    mov.u20 r13, #0
; CHECK-NEXT:    sub r12, r13, r12
; CHECK-NEXT:    ze.16 r13, r6
; CHECK-NEXT:    lshl r12, r13, r12
; CHECK-NEXT:    se.16 r0, r12
; CHECK:         ret lr
  %1 = lshr i16 %a, %b
  ret i16 %1
}

define signext i16 @sra(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: sra:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ze.16 r12, r7
; CHECK-NEXT:    mov.u20 r13, #0
; CHECK-NEXT:    sub r12, r13, r12
; CHECK-NEXT:    ashl r0, r6, r12
; CHECK:         ret lr
  %1 = ashr i16 %a, %b
  ret i16 %1
}

define signext i16 @or(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: or:
; CHECK:       // %bb.0:
; CHECK-NEXT:    or r0, r6, r7
; CHECK:         ret lr
  %1 = or i16 %a, %b
  ret i16 %1
}

define signext i16 @and(i16 signext %a, i16 signext %b) nounwind {
;
; CHECK-LABEL: and:
; CHECK:       // %bb.0:
; CHECK-NEXT:    and r0, r6, r7
; CHECK:         ret lr
  %1 = and i16 %a, %b
  ret i16 %1
}
