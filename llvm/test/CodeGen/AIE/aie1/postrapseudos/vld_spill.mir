# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -verify-machineinstrs --march=aie -run-pass=postrapseudos %s -o - | FileCheck %s

---
name:            test_384
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 64 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_384
    ; CHECK: $aml1 = VLDA_SPIL_AM_LO_I48 -64, implicit $sp :: (load (s512) from %stack.0)
    ; CHECK-NEXT: $aml1 = VLDA_SPIL_AM_HI_I48 -32, implicit $sp :: (load (s512) from %stack.0)
    $aml1 = I384_LOAD -64, implicit $sp :: (load (s512) from %stack.0)
...

---
name:            test_512
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 64 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_512
    ; CHECK: $wr0 = WVLDA_SPIL -64, implicit $sp :: (load (s256) from %stack.0, align 64)
    ; CHECK-NEXT: $wr1 = WVLDA_SPIL -32, implicit $sp :: (load (s256) from %stack.0 + 32, basealign 64)
    $xa = I512_LOAD -64, implicit $sp :: (load (s512) from %stack.0)
...

---
name:            test_768
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 128, alignment: 128 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_768
    ; CHECK: $aml1 = VLDA_SPIL_AM_LO_I48 -128, implicit $sp :: (load (s512) from %stack.0, align 128)
    ; CHECK-NEXT: $aml1 = VLDA_SPIL_AM_HI_I48 -96, implicit $sp :: (load (s512) from %stack.0, align 128)
    ; CHECK-NEXT: $amh1 = VLDA_SPIL_AM_LO_I48 -64, implicit $sp :: (load (s512) from %stack.0 + 64, basealign 128)
    ; CHECK-NEXT: $amh1 = VLDA_SPIL_AM_HI_I48 -32, implicit $sp :: (load (s512) from %stack.0 + 64, basealign 128)
    $bm1 = I768_LOAD -128, implicit $sp :: (load (s1024) from %stack.0)
...

---
name:            test_1024
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 128, alignment: 128 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_1024
    ; CHECK: $wr0 = WVLDA_SPIL -128, implicit $sp :: (load (s256) from %stack.0, align 128)
    ; CHECK-NEXT: $wr1 = WVLDA_SPIL -96, implicit $sp :: (load (s256) from %stack.0 + 32, basealign 128)
    ; CHECK-NEXT: $wr2 = WVLDA_SPIL -64, implicit $sp :: (load (s256) from %stack.0 + 64, align 64, basealign 128)
    ; CHECK-NEXT: $wr3 = WVLDA_SPIL -32, implicit $sp :: (load (s256) from %stack.0 + 96, basealign 128)
    $ya = I1024_LOAD -128, implicit $sp :: (load (s1024) from %stack.0)
...
