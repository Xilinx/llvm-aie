# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There is only one (ptr) register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.

---
  name:            test
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p1,$p2,$p3,$p4,$p5,$p6,$p7

    ; CHECK-LABEL: name: test
    ; CHECK: liveins: $p1, $p2, $p3, $p4, $p5, $p6, $p7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r12 = MOV_U20 32
    ; CHECK-NEXT: renamable $p0 = COPY killed renamable $r12
    ; CHECK-NEXT: ST_SPIL_PTR killed renamable $p0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $p0 = COPY $p1
    ; CHECK-NEXT: renamable $r12 = LDA_ind_GPR $p0, implicit $p1, implicit $p2, implicit $p3, implicit $p4, implicit $p5, implicit $p6, implicit $p7
    ; CHECK-NEXT: renamable $p0 = LDA_SPIL_PTR %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $p0, implicit killed renamable $r12
      %10:gpr = MOV_U20 32
      %0:ptr = COPY %10 ; -> only $p0 is available

      ; spill $p0 before it is re-defined and used
      $p0 = COPY $p1
      %20:gpr = LDA_ind_GPR $p0, implicit $p1,implicit $p2,implicit $p3,implicit $p4,implicit $p5,implicit $p6,implicit $p7

      ; reload %0 / $p0 before PseudoRET
      PseudoRET implicit $lr, implicit %0, implicit %20
...
