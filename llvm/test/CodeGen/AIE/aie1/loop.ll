; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie < %s | FileCheck %s

; ModuleID = 'test.bc'
; CHECK-LABEL:_main:                                  // @_main
; Check for Early loop exit
; CHECK:        bnez    {{r[0-9]+}}, .LBB0_4
; CHECK:.LBB0_1:                                // %for.body.preheader
; CHECK:        .p2align        4
; CHECK:.LBB0_2:                                // %for.body
; Main loop body
; CHECK:        beqz    {{r[0-9]+}}, .LBB0_2
; If the loop doesnt execute
; CHECK:        .p2align        4
; CHECK:.LBB0_4:
; CHECK:        ret lr
; CHECK:.Lfunc_end0:

source_filename = "test.cc"
target datalayout = "e-m:e-p:32:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32"
target triple = "aie"

@x = dso_local local_unnamed_addr global i32* null, align 4
@a = external dso_local local_unnamed_addr global i32, align 4
@b = external dso_local global [16 x i32], align 4

; Function Attrs: nofree norecurse nounwind mustprogress
define dso_local i32 @_main() local_unnamed_addr #0 {
entry:
  %0 = load i32, i32* @a, align 4, !tbaa !2
  %cmp6 = icmp sgt i32 %0, 0
  br i1 %cmp6, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %sum.0.lcssa = phi i32 [ 0, %entry ], [ %add, %for.body ]
  ret i32 %sum.0.lcssa

for.body:                                         ; preds = %entry, %for.body
  %i.08 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %sum.07 = phi i32 [ %add, %for.body ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @b, i32 0, i32 %i.08
  %1 = load volatile i32, i32* %arrayidx, align 4, !tbaa !2
  %add = add nsw i32 %1, %sum.07
  %inc = add nuw nsw i32 %i.08, 1
  %exitcond.not = icmp eq i32 %inc, %0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !6
}

attributes #0 = { nofree norecurse nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 13.0.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
