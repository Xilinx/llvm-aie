; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 < %s | FileCheck %s

; Just check GlobalISel does not crash
; RUN: llvm-extract --delete --func=br_float %s | llc -mtriple=aie -global-isel

define i32 @br_i32(i32  %a, i32  %b, i32 %v, i32* nocapture writeonly %c) {
; CHECK-LABEL: br_i32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov r0, r8
; CHECK-NEXT:    geu r13, r7, r6
; CHECK-NEXT:    bnez r13, .LBB0_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  .LBB0_1: // %if.then
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    mov r12, p0
; CHECK-NEXT:    st r0, [p0]
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_2: // %if.end
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %cmp = icmp ugt i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %v, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %v
}

define i32 @br_i16(i16  %a, i16  %b, i32 %v, i32* nocapture writeonly %c) {
; CHECK-LABEL: br_i16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ze.16 r13, r6
; CHECK-NEXT:    ze.16 r14, r7
; CHECK-NEXT:    mov r0, r8
; CHECK-NEXT:    geu r13, r14, r13
; CHECK-NEXT:    bnez r13, .LBB1_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  .LBB1_1: // %if.then
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    mov r12, p0
; CHECK-NEXT:    st r0, [p0]
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB1_2: // %if.end
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %cmp = icmp ugt i16 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %v, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %v
}

define i32 @br_i8(i8  %a, i8  %b, i32 %v, i32* nocapture writeonly %c) {
; CHECK-LABEL: br_i8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ze.8 r13, r6
; CHECK-NEXT:    ze.8 r14, r7
; CHECK-NEXT:    mov r0, r8
; CHECK-NEXT:    geu r13, r14, r13
; CHECK-NEXT:    bnez r13, .LBB2_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  .LBB2_1: // %if.then
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    mov r12, p0
; CHECK-NEXT:    st r0, [p0]
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB2_2: // %if.end
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %cmp = icmp ugt i8 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %v, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %v
}

define i32 @br_float(float  %a, float  %b, i32 %v, i32* nocapture writeonly %c) {
; CHECK-LABEL: br_float:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov.u20 cl0, #0
; CHECK-NEXT:    mov.u20 cl1, #274960
; CHECK-NEXT:    movt.s12 cl0, #7
; CHECK-NEXT:    movt.s12 cl1, #1893
; CHECK-NEXT:    mov.u20 r15, #0
; CHECK-NEXT:    vshl0.32 wr2, r7
; CHECK-NEXT:    vshl0.32 wr0, r6
; CHECK-NEXT:    vfpmac wr2, r1, wr2, ya, r15, cl1, wc0, #0, cl1, #1, cl0
; CHECK-NEXT:    mov r0, r8
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mov r1, r1[#0]
; CHECK-NEXT:    bnez r1, .LBB3_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  .LBB3_1: // %if.then
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    mov r12, p0
; CHECK-NEXT:    st r0, [p0]
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB3_2: // %if.end
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %cmp = fcmp ogt float %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %v, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %v
}

define i32 @br_i20(i32  %a, i32  %b, i32 %v, i32* nocapture writeonly %c) {
; CHECK-LABEL: br_i20:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov r0, r8
; CHECK-NEXT:    ne r13, r6, r7
; CHECK-NEXT:    bnez r13, .LBB4_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  .LBB4_1: // %if.then
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    mov r12, p0
; CHECK-NEXT:    st r0, [p0]
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB4_2: // %if.end
; CHECK-NEXT:    // Label of block must be emitted
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %ta = trunc i32 %a to i20
  %tb = trunc i32 %b to i20
  %cmp = icmp eq i20 %ta, %tb
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %v, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %v
}
