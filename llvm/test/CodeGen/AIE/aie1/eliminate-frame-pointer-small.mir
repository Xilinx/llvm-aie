# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie -start-after=finalize-isel -stop-after=prologepilog -verify-machineinstrs -o - %s | FileCheck %s

--- |
  %struct.key_t = type { i32, [8 x i8] }

  define i32 @eliminate_frame_pointer() {
    %key = alloca %struct.key_t, align 4
    %1 = getelementptr inbounds %struct.key_t, %struct.key_t* %key, i64 0, i32 1, i64 0
    call void @test1(i8* %1)
    ret i32 0
  }

  declare void @test1(i8*)

...
---
name:            eliminate_frame_pointer
tracksRegLiveness: true
frameInfo:
  adjustsStack:    true
stack:
  - { id: 0, name: key, type: default, offset: 0, size: 12, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.0 (%ir-block.0):
    ; CHECK-LABEL: name: eliminate_frame_pointer
    ; CHECK: frame-setup PADDA_sp_imm 32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: ST_SPIL_PTR killed $lr, -32, implicit $sp :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $r12 = MV_SPECIAL2R $sp
    ; CHECK-NEXT: $p0 = MOV killed $r12
    ; CHECK-NEXT: $p0 = PADDA_nrm_imm $p0, -24
    ; CHECK-NEXT: renamable $p1 = COPY renamable $p0
    ; CHECK-NEXT: renamable $p1 = nuw PADDA_nrm_imm killed renamable $p1, 4
    ; CHECK-NEXT: JAL @test1, csr_aie1, implicit-def dead $lr, implicit $p0, implicit $p1, implicit-def $sp
    ; CHECK-NEXT: renamable $r0 = MOV_U20 0
    ; CHECK-NEXT: $lr = LR_LOAD -32, implicit-def $r15, implicit $sp :: (load (s32) from %stack.1)
    ; CHECK-NEXT: frame-destroy PADDA_sp_imm -32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %0:ptr = PADDA_pseudo %stack.0.key, 4
    %1:ptr = nuw PADDA_nrm_imm %0, 4
    $p0 = COPY %0
    $p1 = COPY %1
    JAL @test1, csr_aie1, implicit-def dead $lr, implicit $p0, implicit $p1, implicit-def $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %2:mrcm = MOV_U20 0
    $r0 = COPY %2
    PseudoRET implicit $lr, implicit $r0

...
