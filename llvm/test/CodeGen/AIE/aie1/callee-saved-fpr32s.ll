; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie  --issue-limit=1 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

@var = dso_local global [4 x float] zeroinitializer

; This function tests that AIERegisterInfo::getCalleeSavedRegs returns
; something appropriate.

define void @callee() nounwind {
; CHECK-LABEL: callee:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 p0, #var
; CHECK-NEXT:    lda r12, [p0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    st r12, [p0]
; CHECK-NEXT:    mov.u20 p0, #(var+4)
; CHECK-NEXT:    lda r12, [p0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    st r12, [p0]
; CHECK-NEXT:    mov.u20 p0, #(var+8)
; CHECK-NEXT:    lda r12, [p0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    st r12, [p0]
; CHECK-NEXT:    mov.u20 p0, #(var+12)
; CHECK-NEXT:    lda r12, [p0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    st r12, [p0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %val = load [4 x float], [4 x float]* @var
  store volatile [4 x float] %val, [4 x float]* @var
  ret void
}

; This function tests that AIERegisterInfo::getCallPreservedMask returns
; something appropriate.

define void @caller() nounwind {
; CHECK-LABEL: caller:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    padda [sp], #32
; CHECK-NEXT:    mov.u20 p1, #var
; CHECK-NEXT:    st.spil p6, [sp, #-28] // 4-byte Folded Spill
; CHECK-NEXT:    st.spil p7, [sp, #-32] // 4-byte Folded Spill
; CHECK-NEXT:    lda r12, [p1]
; CHECK-NEXT:    mov.u20 p0, #(var+4)
; CHECK-NEXT:    mov.u20 p6, #(var+8)
; CHECK-NEXT:    mov.u20 p7, #(var+12)
; CHECK-NEXT:    st.spil r4, [sp, #-16] // 4-byte Folded Spill
; CHECK-NEXT:    st.spil r10, [sp, #-20] // 4-byte Folded Spill
; CHECK-NEXT:    st.spil r11, [sp, #-24] // 4-byte Folded Spill
; CHECK-NEXT:    lda r11, [p0]
; CHECK-NEXT:    lda r4, [p6]
; CHECK-NEXT:    lda r10, [p7]
; CHECK-NEXT:    st.spil lr, [sp, #-12] // 4-byte Folded Spill
; CHECK-NEXT:    st.spil r12, [sp, #-8] // 4-byte Folded Spill
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    jal callee
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    mov.u20 p0, #(var+4)
; CHECK-NEXT:    st r10, [p7]
; CHECK-NEXT:    st r4, [p6]
; CHECK-NEXT:    st r11, [p0]
; CHECK-NEXT:    lda.spil r12, [sp, #-8] // 4-byte Folded Reload
; CHECK-NEXT:    mov.u20 p0, #var
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    st r12, [p0]
; CHECK-NEXT:    ldb lr, [sp, #-12] // 4-byte Folded Reload
; CHECK-NEXT:    lda.spil p7, [sp, #-32] // 4-byte Folded Reload
; CHECK-NEXT:    lda.spil p6, [sp, #-28] // 4-byte Folded Reload
; CHECK-NEXT:    lda.spil r11, [sp, #-24] // 4-byte Folded Reload
; CHECK-NEXT:    lda.spil r10, [sp, #-20] // 4-byte Folded Reload
; CHECK-NEXT:    lda.spil r4, [sp, #-16] // 4-byte Folded Reload
; CHECK-NEXT:    padda [sp], #-32
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %val = load [4 x float], [4 x float]* @var
  call void @callee()
  store volatile [4 x float] %val, [4 x float]* @var
  ret void
}
