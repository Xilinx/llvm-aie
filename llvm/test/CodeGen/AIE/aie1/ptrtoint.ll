; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie < %s | FileCheck %s

define i32 @f(i32* inreg %p) local_unnamed_addr {
; CHECK-LABEL: f:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov r0, p0
; CHECK-NEXT:    movt.s12 r0, #0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = ptrtoint i32* %p to i20
  %1 = zext i20 %0 to i32
  ret i32 %1
}

; SelectionDAG tries to fold trunc -> zext for us,
; even though we'd probably prefer it didn't.
define i32 @trunc(i32 %t) nounwind {
; CHECK-LABEL: trunc:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov.u20 r12, #1048575
; CHECK-NEXT:    and r0, r6, r12
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %t2 = trunc i32 %t to i20
  %t3 = zext i20 %t2 to i32
  ret i32 %t3
}

; In some cases, we need to explicitly handle these truncations,
; even though they are essentially a no-op.  Eventually, this
; should probably be a PADDA operation.
define i32 @trunc_add(i32 noundef %a1, i32 noundef %a2) {
; CHECK-LABEL: trunc_add:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    add r0, r6, r7
; CHECK-NEXT:    movt.s12 r0, #0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %t1 = trunc i32 %a1 to i20
  %t2 = trunc i32 %a2 to i20
  %a = add i20 %t1, %t2
  %r = zext i20 %a to i32
  ret i32 %r
}
