# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates


# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched \
# RUN:     --aie-interblock-scoreboard=false %s -o - | FileCheck %s

# Check that the LockDelays mutation can process bundled instructions.
# In particular, it verifies that memory instructions are kept sufficiently
# far away from LOCK instructions, even when they are bundled with other
# instructions, and even across basic blocks.

# Our loop scheduler is quite aggressive in minimizing the latency of inner
# loops. Here, the mem-semaphore latency must then be observed in the
# epilogue BB.

# Easiest case: neither the ST nor the ACQ are bundled
---
name:            non_bundled_mem_vs_acq
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: non_bundled_mem_vs_acq
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r1, %bb.0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   ST_dms_sts_idx_imm $r1, $p0, 0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   ACQ_mLockId_imm 0, killed $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  bb.0:
    liveins: $p0, $p1, $r1
    JNZ $r1, %bb.0
    ST_dms_sts_idx_imm $r1, $p0, 0
    DelayedSchedBarrier
  bb.1:
    liveins: $p0, $p1, $r1
    ACQ_mLockId_imm 0, $r1
...

# Now the mem operation (LDA) is bundled, in first position
---
name:            bundled_mem_vs_acq
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: bundled_mem_vs_acq
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r0, implicit $p0, implicit $r1 {
  ; CHECK-NEXT:     $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT:     JNZ $r1, %bb.0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT:   $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT:   $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT:   $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT:   BUNDLE implicit-def $r0, implicit-def $p0, implicit killed $p0 {
  ; CHECK-NEXT:     $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT:     $p0 = PADDB_ldb_ptr_inc_nrm_imm killed $p0, 4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   ACQ_mLockId_imm 0, killed $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  bb.0:
    liveins: $p0, $p1, $r1
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $p0 = PADD_imm_pseudo $p0, 4
    JNZ $r1, %bb.0
    DelayedSchedBarrier
  bb.1:
    liveins: $p0, $p1, $r1
    ACQ_mLockId_imm 0, $r1
...

# Now the mem operation (ST) is bundled, in second position
---
name:            bundled_mem_second_vs_acq
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: bundled_mem_second_vs_acq
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r1, %bb.0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   BUNDLE implicit-def $p0, implicit killed $p0, implicit $r1 {
  ; CHECK-NEXT:     $p0 = PADDB_ldb_ptr_inc_nrm_imm killed $p0, 4
  ; CHECK-NEXT:     ST_dms_sts_idx_imm $r1, internal $p0, 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   ACQ_mLockId_imm 0, killed $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  bb.0:
    liveins: $p0, $p1, $r1
    JNZ $r1, %bb.0
    ST_dms_sts_idx_imm $r1, $p0, 0
    $p0 = PADDB_ldb_ptr_inc_nrm_imm $p0, 4
    DelayedSchedBarrier
  bb.1:
    liveins: $p0, $p1, $r1
    ACQ_mLockId_imm 0, $r1
...

