# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates


# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched \
# RUN:     --aie-interblock-scoreboard=false %s -o - | FileCheck %s

# Check that MemoryEdges mutation can process bundled instructions
# without misclassifying non-memory operations as memory operations.
# In this test, PADDB_ldb_ptr_inc_nrm_imm cannot be considered a memory
# operation by being bundled with ST_dms_sts_idx_imm.
# In case of a misclassification, the compiler will crash.

# Note: Comments sometimes refer to cycles. The first cycle is cycle 0

---
name:            testMemoryEdgeMutationWithBundle
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $p0, $p1, $r1
    ; CHECK-LABEL: name: testMemoryEdgeMutationWithBundle
    ; CHECK: liveins: $p0, $p1, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r0 = LDA_dms_lda_idx_imm killed $p0, 0
    ; CHECK-NEXT: RET implicit $lr
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, killed $p1, 0
    ; CHECK-NEXT: $p0 = PADDB_ldb_ptr_inc_nrm_imm $p0, 4 {
    ; CHECK-NEXT:   $r1 = nsw ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    ; CHECK-NEXT: }
    ; CHECK-NEXT: DelayedSchedBarrier implicit killed $r0
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $r1 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
    $p0 = PADD_imm_pseudo $p0, 4 {
      ST_dms_sts_idx_imm $r0, $p1, 0
    }
    RET implicit $lr
    DelayedSchedBarrier implicit $r0
...
