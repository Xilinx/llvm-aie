; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; 128-bit vector types

declare <4 x i32> @callee_v4int32()
define void @call_v4int32() {
  ; CHECK-LABEL: name: call_v4int32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v4int32, csr_aie1, implicit-def $lr, implicit-def $vl0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $vl0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <4 x i32> @callee_v4int32()
  ret void
}

declare <8 x i16> @callee_v8int16()
define void @call_v8int16() {
  ; CHECK-LABEL: name: call_v8int16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v8int16, csr_aie1, implicit-def $lr, implicit-def $vl0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s16>) = COPY $vl0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <8 x i16> @callee_v8int16()
  ret void
}

declare <16 x i8> @callee_v16int8()
define void @call_v16int8() {
  ; CHECK-LABEL: name: call_v16int8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v16int8, csr_aie1, implicit-def $lr, implicit-def $vl0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s8>) = COPY $vl0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <16 x i8> @callee_v16int8()
  ret void
}

; 256-bit vector types

declare <4 x i64> @callee_v4int64()
define void @call_v4int64() {
  ; CHECK-LABEL: name: call_v4int64
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v4int64, csr_aie1, implicit-def $lr, implicit-def $wr0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<4 x s64>) = COPY $wr0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <4 x i64> @callee_v4int64()
  ret void
}

declare <8 x i32> @callee_v8int32()
define void @call_v8int32() {
  ; CHECK-LABEL: name: call_v8int32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v8int32, csr_aie1, implicit-def $lr, implicit-def $wr0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wr0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <8 x i32> @callee_v8int32()
  ret void
}

declare <16 x i16> @callee_v16int16()
define void @call_v16int16() {
  ; CHECK-LABEL: name: call_v16int16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v16int16, csr_aie1, implicit-def $lr, implicit-def $wr0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wr0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <16 x i16> @callee_v16int16()
  ret void
}

declare <32 x i8> @callee_v32int8()
define void @call_v32int8() {
  ; CHECK-LABEL: name: call_v32int8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v32int8, csr_aie1, implicit-def $lr, implicit-def $wr0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wr0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <32 x i8> @callee_v32int8()
  ret void
}

; 512-bit vector types

declare <8 x i64> @callee_v8int64()
define void @call_v8int64() {
  ; CHECK-LABEL: name: call_v8int64
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v8int64, csr_aie1, implicit-def $lr, implicit-def $xa
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s64>) = COPY $xa
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <8 x i64> @callee_v8int64()
  ret void
}

declare <16 x i32> @callee_v16int32()
define void @call_v16int32() {
  ; CHECK-LABEL: name: call_v16int32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v16int32, csr_aie1, implicit-def $lr, implicit-def $xa
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $xa
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <16 x i32> @callee_v16int32()
  ret void
}

declare <32 x i16> @callee_v32int16()
define void @call_v32int16() {
  ; CHECK-LABEL: name: call_v32int16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v32int16, csr_aie1, implicit-def $lr, implicit-def $xa
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $xa
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <32 x i16> @callee_v32int16()
  ret void
}

declare <64 x i8> @callee_v64int8()
define void @call_v64int8() {
  ; CHECK-LABEL: name: call_v64int8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v64int8, csr_aie1, implicit-def $lr, implicit-def $xa
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $xa
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <64 x i8> @callee_v64int8()
  ret void
}

; 1024-bit vector types

declare <32 x i32> @callee_v32int32()
define void @call_v32int32() {
  ; CHECK-LABEL: name: call_v32int32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v32int32, csr_aie1, implicit-def $lr, implicit-def $ya
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $ya
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <32 x i32> @callee_v32int32()
  ret void
}

declare <64 x i16> @callee_v64int16()
define void @call_v64int16() {
  ; CHECK-LABEL: name: call_v64int16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v64int16, csr_aie1, implicit-def $lr, implicit-def $ya
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $ya
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <64 x i16> @callee_v64int16()
  ret void
}

declare <128 x i8> @callee_v128int8()
define void @call_v128int8() {
  ; CHECK-LABEL: name: call_v128int8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   JAL @callee_v128int8, csr_aie1, implicit-def $lr, implicit-def $ya
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $ya
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call <128 x i8> @callee_v128int8()
  ret void
}
