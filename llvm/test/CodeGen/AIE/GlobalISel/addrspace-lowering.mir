# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie-addrspace-flattening %s -verify-machineinstrs -o - | FileCheck %s


# Simple case where a pointer is defined by G_CONSTANT
---
name:            p5_CONSTANT
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: p5_CONSTANT
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[C]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %1:_(p5) = G_CONSTANT i20 0
    %0:_(<32 x s8>) = G_LOAD %1:_(p5) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
...


# Simple case where a pointer is defined by G_IMPLICIT_DEF
---
name:            p5_IMPLICIT_DEF
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: p5_IMPLICIT_DEF
    ; CHECK: [[DEF:%[0-9]+]]:_(p0) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[DEF]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %1:_(p5) = G_IMPLICIT_DEF
    %0:_(<32 x s8>) = G_LOAD %1:_(p5) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
...

# Simple case where a pointer is defined by G_ADDRSPACE_CAST
---
name:            p5_G_ADDRSPACE_CAST
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: p5_G_ADDRSPACE_CAST
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY [[C]](p0)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[COPY]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %10:_(p0) = G_CONSTANT i20 0
    %1:_(p5) = G_ADDRSPACE_CAST %10:_(p0)
    %0:_(<32 x s8>) = G_LOAD %1:_(p5) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
...

# Case where a pointer is defined by chain of G_ADDRSPACE_CAST
---
name:            chain_G_ADDRSPACE_CAST
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: chain_G_ADDRSPACE_CAST
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY [[C]](p0)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY [[COPY]](p0)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[COPY1]](p0) :: (load (<32 x s8>) from `ptr addrspace(6) null`, addrspace 6)
    %10:_(p0) = G_CONSTANT i20 0
    %1:_(p5) = G_ADDRSPACE_CAST %10:_(p0)
    %2:_(p6) = G_ADDRSPACE_CAST %1:_(p5)
    %0:_(<32 x s8>) = G_LOAD %2:_(p6) :: (load (<32 x s8>) from `ptr addrspace(6) null`, addrspace 6)
...

# Simple case where a pointer is defined by COPY
---
name:            p5_COPY
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: p5_COPY
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY [[C]](p0)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[COPY]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %10:_(p5) = G_CONSTANT i20 0
    %1:_(p5) = COPY %10:_(p5)
    %0:_(<32 x s8>) = G_LOAD %1:_(p5) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
...

# Simple case where a pointer is defined by G_SELECT
---
name:            p7_SELECT
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: p7_SELECT
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(p0) = G_SELECT [[C]](s1), [[C1]], [[C1]]
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s16>) = G_LOAD [[SELECT]](p0) :: (load (<32 x s16>), addrspace 5)
    %0:_(s1) = G_CONSTANT i1 false
    %2:_(p7) = G_CONSTANT i20 0
    %1:_(p7) = G_SELECT %0:_(s1), %2:_, %2:_
    %3:_(<32 x s16>) = G_LOAD %1:_(p7) :: (load (<32 x s16>), addrspace 5)
...

# Simple case where a pointer is defined by G_PTR_ADD
---
name:            p5_PTR_ADD
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $p0
    ; CHECK-LABEL: name: p5_PTR_ADD
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[C]], [[C1]](s20)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s16>) = G_LOAD [[PTR_ADD]](p0) :: (load (<32 x s16>), addrspace 5)
    %0:_(p5) = G_CONSTANT i20 0
    %1:_(s20) = G_CONSTANT i20 64
    %2:_(p5) = G_PTR_ADD %0:_, %1:_(s20)
    %3:_(<32 x s16>) = G_LOAD %2:_(p5) :: (load (<32 x s16>), addrspace 5)
...

# Simple case where a pointer is defined by G_PHI
---
name:            p5_PHI
legalized:       false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: p5_PHI
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 10
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   G_BR %bb.1
  bb.1:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    liveins: $p1
    %5:_(p5) = G_CONSTANT i20 10
    %15:_(p5) = G_CONSTANT i20 0

  bb.2:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    %12:_(p5) = G_PHI %5:_(p5), %bb.1, %15:_(p5), %bb.2
    %0:_(<32 x s8>) = G_LOAD %12:_(p5) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    G_BR %bb.2
...

