# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-postlegalizer-custom-combiner %s -verify-machineinstrs -o - | FileCheck %s

# Test for combine_offset_load_store_share_ptradd

# Case 1: Can be combined.

---
name:            combine_offset_load_ptradd_reg_share
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: combine_offset_load_ptradd_reg_share
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = nuw G_PTR_ADD [[COPY1]], [[TRUNC]](s20)
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<16 x s16>) = G_AIE_OFFSET_LOAD [[PTR_ADD]](p0), [[C]](s20)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD1:%[0-9]+]]:_(<16 x s16>) = G_AIE_OFFSET_LOAD [[PTR_ADD]](p0), [[C1]](s20)
    ; CHECK-NEXT: $wl0 = COPY [[AIE_OFFSET_LOAD]](<16 x s16>)
    ; CHECK-NEXT: $wl1 = COPY [[AIE_OFFSET_LOAD1]](<16 x s16>)
    %0:_(s32) = COPY $r0
    %1:_(p0) = COPY $p0
    %7:_(s20) = G_TRUNC %0(s32)
    %293:_(s20) = G_CONSTANT i20 32
    %68:_(p0) = nuw G_PTR_ADD %1, %7(s20)
    %295:_(<16 x s16>) = G_AIE_OFFSET_LOAD %68(p0), %293(s20)
    %296:_(<16 x s16>) = G_AIE_OFFSET_LOAD %1(p0), %7(s20)
    $wl0 = COPY %295:_(<16 x s16>)
    $wl1 = COPY %296:_(<16 x s16>)
...

# Case 2: Can't be combined because G_PTR_ADD is dead and we don't ane to.
# bring it back to life.

---
name:            combine_offset_load_ptradd_reg_ptradd_dead
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: combine_offset_load_ptradd_reg_ptradd_dead
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<16 x s16>) = G_AIE_OFFSET_LOAD [[COPY1]](p0), [[TRUNC]](s20)
    ; CHECK-NEXT: $wl0 = COPY %5:_(<16 x s16>)
    %0:_(s32) = COPY $r0
    %1:_(p0) = COPY $p0
    %7:_(s20) = G_TRUNC %0(s32)
    %68:_(p0) = nuw G_PTR_ADD %1, %7(s20)
    %296:_(<16 x s16>) = G_AIE_OFFSET_LOAD %1(p0), %7(s20)
    $wl0 = COPY %295:_(<16 x s16>)
...

# Case 3: Can be combined (store).

---
name:            combine_offset_store_ptradd_reg_share
body:             |
  bb.0:
    liveins: $p0, $r0, $wl0
    ; CHECK-LABEL: name: combine_offset_store_ptradd_reg_share
    ; CHECK: liveins: $p0, $r0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = nuw G_PTR_ADD [[COPY1]], [[TRUNC]](s20)
    ; CHECK-NEXT: G_AIE_OFFSET_STORE [[COPY2]](<16 x s16>), [[PTR_ADD]](p0), [[C]](s20)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: G_AIE_OFFSET_STORE [[COPY2]](<16 x s16>), [[PTR_ADD]](p0), [[C1]](s20)
    %0:_(s32) = COPY $r0
    %1:_(p0) = COPY $p0
    %2:_(<16 x s16>) = COPY $wl0
    %7:_(s20) = G_TRUNC %0(s32)
    %293:_(s20) = G_CONSTANT i20 32
    %68:_(p0) = nuw G_PTR_ADD %1, %7(s20)
    G_AIE_OFFSET_STORE %2, %68, %293
    G_AIE_OFFSET_STORE %2, %1, %7
...

 # Case 4: Can't combine because offset register is different.

---
name:            combine_offset_load_ptradd_reg_share_diff_off
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: combine_offset_load_ptradd_reg_share_diff_off
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s20) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = nuw G_PTR_ADD [[COPY1]], [[TRUNC]](s20)
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<16 x s16>) = G_AIE_OFFSET_LOAD [[PTR_ADD]](p0), [[C]](s20)
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD1:%[0-9]+]]:_(<16 x s16>) = G_AIE_OFFSET_LOAD [[COPY1]](p0), [[TRUNC1]](s20)
    ; CHECK-NEXT: $wl0 = COPY [[AIE_OFFSET_LOAD]](<16 x s16>)
    ; CHECK-NEXT: $wl1 = COPY [[AIE_OFFSET_LOAD1]](<16 x s16>)
    %0:_(s32) = COPY $r0
    %1:_(p0) = COPY $p0
    %7:_(s20) = G_TRUNC %0(s32)
    %8:_(s20) = G_TRUNC %0(s32)
    %293:_(s20) = G_CONSTANT i20 32
    %68:_(p0) = nuw G_PTR_ADD %1, %7(s20)
    %295:_(<16 x s16>) = G_AIE_OFFSET_LOAD %68(p0), %293(s20)
    %296:_(<16 x s16>) = G_AIE_OFFSET_LOAD %1(p0), %8(s20)
    $wl0 = COPY %295:_(<16 x s16>)
    $wl1 = COPY %296:_(<16 x s16>)
...
