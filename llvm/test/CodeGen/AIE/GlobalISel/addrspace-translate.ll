; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -stop-after=aie-addrspace-flattening %s -o - 2>&1 | FileCheck %s


define dso_local noundef i32 @_Z6squarePU3AS5iS0_(ptr addrspace(5) nocapture readonly %num, ptr addrspace(5) nocapture writeonly %mem) local_unnamed_addr #0 {
  ; CHECK-LABEL: name: _Z6squarePU3AS5iS0_
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $p0, $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32) from %ir.num, addrspace 5)
  ; CHECK-NEXT:   [[MUL:%[0-9]+]]:_(s32) = nsw G_MUL [[LOAD]], [[LOAD]]
  ; CHECK-NEXT:   G_STORE [[MUL]](s32), [[COPY1]](p0) :: (store (s32) into %ir.mem, addrspace 5)
  ; CHECK-NEXT:   $r0 = COPY [[MUL]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
entry:
  %0 = load i32, ptr addrspace(5) %num, align 4
  %mul = mul nsw i32 %0, %0
  store i32 %mul, ptr addrspace(5) %mem, align 4
  ret i32 %mul
}

define dso_local noundef i32 @_Z6squarePU3AS6iS0_(ptr addrspace(6) nocapture readonly %num, ptr addrspace(6) nocapture writeonly %mem) local_unnamed_addr #0 {
  ; CHECK-LABEL: name: _Z6squarePU3AS6iS0_
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $p0, $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32) from %ir.num, addrspace 6)
  ; CHECK-NEXT:   [[MUL:%[0-9]+]]:_(s32) = nsw G_MUL [[LOAD]], [[LOAD]]
  ; CHECK-NEXT:   G_STORE [[MUL]](s32), [[COPY1]](p0) :: (store (s32) into %ir.mem, addrspace 6)
  ; CHECK-NEXT:   $r0 = COPY [[MUL]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
entry:
  %0 = load i32, ptr addrspace(6) %num, align 4
  %mul = mul nsw i32 %0, %0
  store i32 %mul, ptr addrspace(6) %mem, align 4
  ret i32 %mul
}

define dso_local noundef i32 @_Z6squarePU3AS6iPi(ptr addrspace(6) nocapture readonly %num, ptr nocapture writeonly %mem) local_unnamed_addr #0 {
  ; CHECK-LABEL: name: _Z6squarePU3AS6iPi
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $p0, $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32) from %ir.num, addrspace 6)
  ; CHECK-NEXT:   [[MUL:%[0-9]+]]:_(s32) = nsw G_MUL [[LOAD]], [[LOAD]]
  ; CHECK-NEXT:   G_STORE [[MUL]](s32), [[COPY1]](p0) :: (store (s32) into %ir.mem)
  ; CHECK-NEXT:   $r0 = COPY [[MUL]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
entry:
  %0 = load i32, ptr addrspace(6) %num, align 4
  %mul = mul nsw i32 %0, %0
  store i32 %mul, ptr %mem, align 4
  ret i32 %mul
}

