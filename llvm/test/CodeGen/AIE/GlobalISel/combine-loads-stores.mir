# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-postlegalizer-custom-combiner %s -verify-machineinstrs -o - | FileCheck %s

---
name:            load_to_preinc
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_to_preinc
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(s32) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[TRUNC]](s20) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[AIE_OFFSET_LOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s20) = G_TRUNC %1
    %3:_(p0) = G_PTR_ADD %0, %2
    %4:_(s32) = G_LOAD %3 :: (load (s32))
    $r0 = COPY %4
    $p0 = COPY %3
...

---
name:            load_to_preinc_with_copies
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_to_preinc_with_copies
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(s32) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[TRUNC]](s20) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[AIE_OFFSET_LOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s20) = G_TRUNC %1
    %3:_(p0) = G_PTR_ADD %0, %2
    %5:_(p0) = COPY %3
    %4:_(s32) = G_LOAD %5 :: (load (s32))
    $r0 = COPY %4
    $p0 = COPY %3
...

---
name:            load_to_preinc_dead_ptr_add
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_to_preinc_dead_ptr_add
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(s32) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[TRUNC]](s20) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[AIE_OFFSET_LOAD]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s20) = G_TRUNC %1
    %4:_(p0) = G_PTR_ADD %0, %2
    %3:_(s32) = G_LOAD %4 :: (load (s32))
    $r0 = COPY %3
...

---
name:            load_to_postinc
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_to_postinc
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[TRUNC]](s20) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s20) = G_TRUNC %1
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    %4:_(p0) = G_PTR_ADD %0, %2
    $r0 = COPY %3
    $p0 = COPY %4
...

---
name:            load_to_postinc_ptradd_before_load
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_to_postinc_ptradd_before_load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[TRUNC]](s20) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s20) = G_TRUNC %1
    %4:_(p0) = G_PTR_ADD %0, %2
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $r0 = COPY %3
    $p0 = COPY %4
...

---
name:            load_to_postinc_ptradd_before_usedinphi
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: load_to_postinc_ptradd_before_usedinphi
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[COPY]](p0), %bb.0, %2(p0), %bb.1
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
  ; CHECK-NEXT:   [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[PHI]], [[TRUNC]](s20) :: (load (s32))
  ; CHECK-NEXT:   $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
  ; CHECK-NEXT:   G_BR %bb.1
  bb.0:
    successors: %bb.1
    liveins: $p0
    %0:_(p0) = COPY $p0
    G_BR %bb.1
  bb.1:
    successors: %bb.1
    %1:_(p0) = G_PHI %0(p0), %bb.0, %4(p0), %bb.1
    %2:_(s32) = G_CONSTANT i32 32
    %3:_(s20) = G_TRUNC %2
    %4:_(p0) = G_PTR_ADD %1, %3
    %5:_(s32) = G_LOAD %1 :: (load (s32))
    $r0 = COPY %5
    G_BR %bb.1
...


# Our current combine code is not able to move the memory operation up. In this
# case we cannot just move the pointer add to the load and we therefore don't
# combine. This could be improved.
---
name:            load_not_to_postinc_ptradd_before_load
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_not_to_postinc_ptradd_before_load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s20) = G_TRUNC %1
    %4:_(p0) = G_PTR_ADD %0, %2
    $p0 = COPY %4
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $r0 = COPY %3
...

---
name:            load_to_postinc_move_offset
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_to_postinc_move_offset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[TRUNC]](s20) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
    %0:_(p0) = COPY $p0
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    %1:_(s32) = G_CONSTANT i32 12
    %2:_(s20) = G_TRUNC %1
    %4:_(p0) = G_PTR_ADD %0, %2
    $r0 = COPY %3
    $p0 = COPY %4
...

---
name:            load_not_to_postinc_cannot_move_offset
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_not_to_postinc_cannot_move_offset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    %0:_(p0) = COPY $p0
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $r0 = COPY %3
    %1:_(s32) = G_CONSTANT i32 12
    %2:_(s20) = G_TRUNC %1
    %4:_(p0) = G_PTR_ADD %0, %2
    $p0 = COPY %4
...

---
name:            load_to_postinc_arg_offset
body:             |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: load_to_postinc_arg_offset
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[LSHR]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[TRUNC]](s20) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
    %0:_(p0) = COPY $p0
    %5:_(s32) = COPY $r1
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    %1:_(s32) = G_CONSTANT i32 2
    %4:_(s32) = G_LSHR %5, %1
    %6:_(s20) = G_TRUNC %4
    %2:_(p0) = G_PTR_ADD %0, %6
    $r0 = COPY %3
    $p0 = COPY %2
...

---
name:            load_cannot_combine
body:             |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: load_cannot_combine
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[LOAD]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    %0:_(p0) = COPY $p0
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    %1:_(s20) = G_TRUNC %3
    %2:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %3
    $p0 = COPY %2
...

---
name:            store_to_preinc
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_to_preinc
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: G_AIE_OFFSET_STORE [[COPY1]](s32), [[COPY]](p0), [[TRUNC]](s20) :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r0
    %2:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %2
    %3:_(p0) = G_PTR_ADD %0, %4
    G_STORE %1, %3 :: (store (s32))
    $p0 = COPY %3
...

---
name:            store_to_postinc
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_to_postinc
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[COPY1]](s32), [[COPY]], [[TRUNC]](s20) :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_STORE]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r0
    %2:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %2
    G_STORE %1, %0 :: (store (s32))
    %3:_(p0) = G_PTR_ADD %0, %4
    $p0 = COPY %3
...

---
name:            store_to_postinc_ptr_add_before
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_to_postinc_ptr_add_before
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 24
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[COPY1]](s32), [[COPY]], [[C]](s20) :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_STORE]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r0
    %2:_(s20) = G_CONSTANT i20 24
    %3:_(p0) = G_PTR_ADD %0, %2
    G_STORE %1, %0 :: (store (s32))
    $p0 = COPY %3
...

# Our current combine code is not able to move the memory operation up. In this
# case we cannot just move the pointer add to the store and we therefore don't
# combine. This could be improved.
---
name:            store_not_to_postinc_ptr_add_before
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_not_to_postinc_ptr_add_before
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 24
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r0
    %2:_(s20) = G_CONSTANT i20 24
    %3:_(p0) = G_PTR_ADD %0, %2
    $p0 = COPY %3
    G_STORE %1, %0 :: (store (s32))
...

---
name:            store_not_to_postinc_def_use_dependency
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_not_to_postinc_def_use_dependency
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 24
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: G_STORE [[PTR_ADD]](p0), [[COPY]](p0) :: (store (s20), align 4)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s20) = G_CONSTANT i20 24
    %2:_(p0) = G_PTR_ADD %0, %1
    G_STORE %2, %0 :: (store (s20))
    $p0 = COPY %2
...

---
name:            store_to_postinc_move_offset
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_to_postinc_move_offset
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[COPY1]](s32), [[COPY]], [[TRUNC]](s20) :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_STORE]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r0
    G_STORE %1, %0 :: (store (s32))
    %2:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %2
    %3:_(p0) = G_PTR_ADD %0, %4
    $p0 = COPY %3
...

---
name:            store_not_to_postinc_cannot_move_offset
body:             |
  bb.0:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_not_to_postinc_cannot_move_offset
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32))
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY2]](p0) :: (store (s32))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r0
    G_STORE %1, %0 :: (store (s32))
    %10:_(p0) = COPY $p1
    G_STORE %1, %10 :: (store (s32))
    %2:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %2
    %3:_(p0) = G_PTR_ADD %0, %4
    $p0 = COPY %3
...

---
name:            zextload_to_postinc
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: zextload_to_postinc
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_ZEXTLOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_ZEXTLOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_ZEXTLOAD [[COPY]], [[TRUNC]](s20) :: (load (s8))
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_ZEXTLOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_ZEXTLOAD1]](p0)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %1
    %3:_(s32) = G_ZEXTLOAD %0 :: (load (s8))
    %2:_(p0) = G_PTR_ADD %0, %4
    $r0 = COPY %3
    $p0 = COPY %2
...

---
name:            different_bb_memop_dominating
body:             |
  ; CHECK-LABEL: name: different_bb_memop_dominating
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   $p0 = COPY [[PTR_ADD]](p0)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  bb.0:
    liveins: $p0
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %1
    %2:_(p0) = G_PTR_ADD %0, %4

  bb.1:
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $p0 = COPY %2
    $r0 = COPY %3
...

---
name:            same_bb_ptradd_uses_different_bb
body:             |
  ; CHECK-LABEL: name: same_bb_ptradd_uses_different_bb
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[TRUNC]](s20) :: (load (s32))
  ; CHECK-NEXT:   $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
  bb.0:
    liveins: $p0
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %1

  bb.1:
    %2:_(p0) = G_PTR_ADD %0, %4
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $r0 = COPY %3

  bb.2:
    $p0 = COPY %2
...

---
name:            different_bb_memop_dominating_offset_different_bb
body:             |
  ; CHECK-LABEL: name: different_bb_memop_dominating_offset_different_bb
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   $p0 = COPY [[PTR_ADD]](p0)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  bb.0:
    %1:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %1

  bb.1:
    liveins: $p0
    %0:_(p0) = COPY $p0
    %2:_(p0) = G_PTR_ADD %0, %4

  bb.2:
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $p0 = COPY %2
    $r0 = COPY %3
...

---
name:            different_bb_ptradd_dominating
body:             |
  ; CHECK-LABEL: name: different_bb_ptradd_dominating
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
  ; CHECK-NEXT:   $p0 = COPY [[PTR_ADD]](p0)
  bb.0:
    G_BR %bb.2

  bb.1:
    liveins: $p0
    %0:_(p0) = COPY $p0
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $r0 = COPY %3

  bb.2:
    %1:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %1
    %2:_(p0) = G_PTR_ADD %0, %4
    $p0 = COPY %2
...

---
name:            dominatin_ptradd_use
body:             |
  bb.0:
    ; CHECK-LABEL: name: dominatin_ptradd_use
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    %1:_(s32) = G_CONSTANT i32 24
    %4:_(s20) = G_TRUNC %1
    %0:_(p0) = COPY $p0
    %2:_(p0) = G_PTR_ADD %0, %4
    $p0 = COPY %2
    %3:_(s32) = G_LOAD %0 :: (load (s32))
    $r0 = COPY %3
...

---
name:            two_ptradds
body:             |
  bb.0:
    ; CHECK-LABEL: name: two_ptradds
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[TRUNC]](s20)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s20) = G_TRUNC [[C1]](s32)
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[TRUNC1]](s20) :: (load (s32))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
    ; CHECK-NEXT: $p1 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
    %2:_(p0) = COPY $p0
    %7:_(s32) = G_LOAD %2 :: (load (s32))
    %0:_(s32) = G_CONSTANT i32 24
    %1:_(s20) = G_TRUNC %0
    %3:_(p0) = G_PTR_ADD %2, %1
    %4:_(s32) = G_CONSTANT i32 24
    %5:_(s20) = G_TRUNC %4
    %6:_(p0) = G_PTR_ADD %2, %5
    $p0 = COPY %6
    $p1 = COPY %3
    $r0 = COPY %7
...

---
name:            post_inc_ignore_dead_ptr_add
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post_inc_ignore_dead_ptr_add
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s20) = G_CONSTANT i20 24
    %2:_(s32) = G_LOAD %0 :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %2
...

# Try moving ptr_add up for post-increment combines
---
name: move_ptr_add_up
body: |
  bb.0:
    ; CHECK-LABEL: name: move_ptr_add_up
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (s32))
    ; CHECK-NEXT: G_STORE [[AIE_POSTINC_LOAD]](s32), [[COPY1]](p0) :: (store (s32))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0, implicit [[AIE_POSTINC_LOAD1]](p0)
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %1:_(s20) = G_CONSTANT i20 64
      %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
      G_STORE %4, %6 :: (store (s32))
      %3:_(p0) = G_PTR_ADD %0, %1
      %10:_(p0) = COPY %0
      PseudoRET implicit $lr, implicit $wl0, implicit %3
...

# When moving PTR_ADDs up we have to be able to move the G_CONSTANT up too
---
name: move_g_constant
body: |
  bb.0:
    ; CHECK-LABEL: name: move_g_constant
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (s32))
    ; CHECK-NEXT: G_STORE [[AIE_POSTINC_LOAD]](s32), [[COPY1]](p0) :: (store (s32))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0, implicit [[AIE_POSTINC_LOAD1]](p0)
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
      G_STORE %4, %6 :: (store (s32))
      %1:_(s20) = G_CONSTANT i20 64
      %3:_(p0) = G_PTR_ADD %0, %1
      %10:_(p0) = COPY %0
      PseudoRET implicit $lr, implicit $wl0, implicit %3
...

# When moving PTR_ADDs up we have to be able to move the G_CONSTANT up too
# The G_CONSTANT that defines the pointer does not interfere with this combining
---
name: move_g_constant_ptr_g_constant
body: |
  bb.0:
    ; CHECK-LABEL: name: move_g_constant_ptr_g_constant
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 123
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C1]](s20) :: (load (s32))
    ; CHECK-NEXT: G_STORE [[AIE_POSTINC_LOAD]](s32), [[C]](p0) :: (store (s32))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0, implicit [[AIE_POSTINC_LOAD1]](p0)
      %0:_(p0) = COPY $p0
      %6:_(p0) = G_CONSTANT i20 123
      %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
      G_STORE %4, %6 :: (store (s32))
      %1:_(s20) = G_CONSTANT i20 64
      %3:_(p0) = G_PTR_ADD %0, %1
      %10:_(p0) = COPY %0
      PseudoRET implicit $lr, implicit $wl0, implicit %3
...

# Test G_CONSTANT move up with postinc_2d
---
name: postinc_2d_move_g_constant
body: |
  bb.0:
    ; CHECK-LABEL: name: postinc_2d_move_g_constant
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_POSTINC_2D_LOAD:%[0-9]+]]:_(<32 x s8>), [[AIE_POSTINC_2D_LOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_2D_LOAD2:%[0-9]+]]:_(s20) = G_AIE_POSTINC_2D_LOAD [[COPY]], [[C]], [[C1]], [[C2]], [[C3]] :: (load (<32 x s8>))
    ; CHECK-NEXT: $wl0 = COPY [[AIE_POSTINC_2D_LOAD]](<32 x s8>)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_2D_LOAD1]](p0)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %6:_(<32 x s8>) = G_LOAD %0(p0) :: (load (<32 x s8>))
      $wl0 = COPY %6(<32 x s8>)
      %2:_(s20) = G_CONSTANT i20 128
      %3:_(s20) = G_CONSTANT i20 0
      %4:_(s20) = G_CONSTANT i20 32
      %5:_(p0), %8:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %0:_(p0), %1:_(s20), %2:_(s20), %3:_(s20), %4:_(s20)
      $p0 = COPY %5
...

---
name: zextload_postinc_2d
body: |
  bb.0:
    ; CHECK-LABEL: name: zextload_postinc_2d
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_POSTINC_2D_ZEXTLOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_2D_ZEXTLOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_2D_ZEXTLOAD2:%[0-9]+]]:_(s20) = G_AIE_POSTINC_2D_ZEXTLOAD [[COPY]], [[C]], [[C1]], [[C2]], [[C3]] :: (load (s8))
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_2D_ZEXTLOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_2D_ZEXTLOAD1]](p0)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %6:_(s32) = G_ZEXTLOAD %0(p0) :: (load (s8))
      $r0 = COPY %6(s32)
      %2:_(s20) = G_CONSTANT i20 128
      %3:_(s20) = G_CONSTANT i20 0
      %4:_(s20) = G_CONSTANT i20 32
      %5:_(p0), %8:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %0:_(p0), %1:_(s20), %2:_(s20), %3:_(s20), %4:_(s20)
      $p0 = COPY %5
...

---
name: sextload_postinc_2d
body: |
  bb.0:
    ; CHECK-LABEL: name: sextload_postinc_2d
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_POSTINC_2D_SEXTLOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_2D_SEXTLOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_2D_SEXTLOAD2:%[0-9]+]]:_(s20) = G_AIE_POSTINC_2D_SEXTLOAD [[COPY]], [[C]], [[C1]], [[C2]], [[C3]] :: (load (s20), align 4)
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_2D_SEXTLOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_2D_SEXTLOAD1]](p0)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %6:_(s32) = G_SEXTLOAD %0(p0) :: (load (s20))
      $r0 = COPY %6(s32)
      %2:_(s20) = G_CONSTANT i20 128
      %3:_(s20) = G_CONSTANT i20 0
      %4:_(s20) = G_CONSTANT i20 32
      %5:_(p0), %8:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %0:_(p0), %1:_(s20), %2:_(s20), %3:_(s20), %4:_(s20)
      $p0 = COPY %5
...

---
name: sextload_postinc_3d
body: |
  bb.0:
    ; CHECK-LABEL: name: sextload_postinc_3d
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_POSTINC_3D_SEXTLOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_3D_SEXTLOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_3D_SEXTLOAD2:%[0-9]+]]:_(s20), [[AIE_POSTINC_3D_SEXTLOAD3:%[0-9]+]]:_ = G_AIE_POSTINC_3D_SEXTLOAD [[COPY]], [[C]], [[C1]], [[C2]], [[C3]], [[C4]], [[C5]], [[C6]] :: (load (s20), align 4)
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_3D_SEXTLOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_3D_SEXTLOAD1]](p0)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %9:_(s32) = G_SEXTLOAD %0(p0) :: (load (s20))
      $r0 = COPY %9(s32)
      %2:_(s20) = G_CONSTANT i20 128
      %3:_(s20) = G_CONSTANT i20 0
      %4:_(s20) = G_CONSTANT i20 32
      %5:_(s20) = G_CONSTANT i20 128
      %6:_(s20) = G_CONSTANT i20 0
      %7:_(s20) = G_CONSTANT i20 32
      %8:_(p0), %10:_(s20), %11:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %0:_(p0), %1:_(s20), %2:_(s20), %3:_(s20), %4:_(s20), %5:_(s20), %6:_(s20), %7:_(s20)
      $p0 = COPY %8
...

---
name: zextload_postinc_3d
body: |
  bb.0:
    ; CHECK-LABEL: name: zextload_postinc_3d
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_POSTINC_3D_ZEXTLOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_3D_ZEXTLOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_3D_ZEXTLOAD2:%[0-9]+]]:_(s20), [[AIE_POSTINC_3D_ZEXTLOAD3:%[0-9]+]]:_ = G_AIE_POSTINC_3D_ZEXTLOAD [[COPY]], [[C]], [[C1]], [[C2]], [[C3]], [[C4]], [[C5]], [[C6]] :: (load (s20), align 4)
    ; CHECK-NEXT: $r0 = COPY [[AIE_POSTINC_3D_ZEXTLOAD]](s32)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_3D_ZEXTLOAD1]](p0)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %9:_(s32) = G_ZEXTLOAD %0(p0) :: (load (s20))
      $r0 = COPY %9(s32)
      %2:_(s20) = G_CONSTANT i20 128
      %3:_(s20) = G_CONSTANT i20 0
      %4:_(s20) = G_CONSTANT i20 32
      %5:_(s20) = G_CONSTANT i20 128
      %6:_(s20) = G_CONSTANT i20 0
      %7:_(s20) = G_CONSTANT i20 32
      %8:_(p0), %10:_(s20), %11:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %0:_(p0), %1:_(s20), %2:_(s20), %3:_(s20), %4:_(s20), %5:_(s20), %6:_(s20), %7:_(s20)
      $p0 = COPY %8
...

# Test G_CONSTANT move up with postinc_3d
---
name: postinc_3d_move_g_constant
body: |
  bb.0:
    ; CHECK-LABEL: name: postinc_3d_move_g_constant
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s20) = G_CONSTANT i20 128
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s20) = G_CONSTANT i20 0
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_POSTINC_3D_LOAD:%[0-9]+]]:_(<32 x s8>), [[AIE_POSTINC_3D_LOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_3D_LOAD2:%[0-9]+]]:_(s20), [[AIE_POSTINC_3D_LOAD3:%[0-9]+]]:_ = G_AIE_POSTINC_3D_LOAD [[COPY]], [[C]], [[C1]], [[C2]], [[C3]], [[C4]], [[C5]], [[C6]] :: (load (<32 x s8>))
    ; CHECK-NEXT: $wl0 = COPY [[AIE_POSTINC_3D_LOAD]](<32 x s8>)
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_3D_LOAD1]](p0)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %9:_(<32 x s8>) = G_LOAD %0(p0) :: (load (<32 x s8>))
      $wl0 = COPY %9(<32 x s8>)
      %2:_(s20) = G_CONSTANT i20 128
      %3:_(s20) = G_CONSTANT i20 0
      %4:_(s20) = G_CONSTANT i20 32
      %5:_(s20) = G_CONSTANT i20 128
      %6:_(s20) = G_CONSTANT i20 0
      %7:_(s20) = G_CONSTANT i20 32
      %8:_(p0), %10:_(s20), %11:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %0:_(p0), %1:_(s20), %2:_(s20), %3:_(s20), %4:_(s20), %5:_(s20), %6:_(s20), %7:_(s20)
      $p0 = COPY %8
...

---
name: offset_combine_vectors
body: |
  bb.0:
    ; CHECK-LABEL: name: offset_combine_vectors
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<32 x s8>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (<32 x s8>))
    ; CHECK-NEXT: $wl0 = COPY [[AIE_OFFSET_LOAD]](<32 x s8>)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %3:_(p0) = G_PTR_ADD %0, %1
      %4:_(<32 x s8>) = G_LOAD %3(p0) :: (load (<32 x s8>))
      $wl0 = COPY %4(<32 x s8>)
...

---
name: preinc_combine_vectors_512_bits
body: |
  bb.0:
    ; CHECK-LABEL: name: preinc_combine_vectors_512_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<32 x s16>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (<32 x s16>))
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: G_AIE_OFFSET_STORE [[AIE_OFFSET_LOAD]](<32 x s16>), [[COPY1]](p0), [[C1]](s20) :: (store (<32 x s16>))
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %3:_(p0) = G_PTR_ADD %0, %1
      %4:_(<32 x s16>) = G_LOAD %3(p0) :: (load (<32 x s16>))
      %5:_(p0) = COPY $p0
      %6:_(s20) = G_CONSTANT i20 64
      %7:_(p0) = G_PTR_ADD %5, %6
      G_STORE %4:_(<32 x s16>), %7(p0) :: (store (<32 x s16>))
...

# The instructions for Vector loads and stores are not yet introduced for all
# types of addressing modes for 1024 bits, so we avoid combining them for now
---
name: no_preinc_combine_vectors_1024_bits
body: |
  bb.0:
    ; CHECK-LABEL: name: no_preinc_combine_vectors_1024_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s32>) = G_LOAD [[PTR_ADD]](p0) :: (load (<32 x s32>))
    ; CHECK-NEXT: $y2 = COPY [[LOAD]](<32 x s32>)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %3:_(p0) = G_PTR_ADD %0, %1
      %4:_(<32 x s32>) = G_LOAD %3(p0) :: (load (<32 x s32>))
      $y2 = COPY %4(<32 x s32>)
...

# If the original pointer is used after the ptr_add (in this case the implicit
# %0 in bb.1) then do not combine to a post increment because that would lead to
# an additional COPY to preserve the original pointer.
# Note: If the copy is inevitable (in this case it is) we might as well combine.
# Our current implementation does not consider this case
---
name: not_combine_postinc_later_use
body: |
  ; CHECK-LABEL: name: not_combine_postinc_later_use
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
  ; CHECK-NEXT:   [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s20)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[PTR_ADD]](p0), implicit [[PTR_ADD1]](p0), implicit [[COPY]](p0)
  bb.0:
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(s20) = G_CONSTANT i20 64
      %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
      %3:_(p0) = G_PTR_ADD %0, %1
      %5:_(p0) = G_PTR_ADD %0, %2
      $r0 = COPY %4(s32)

  bb.1:
      PseudoRET implicit $lr, implicit %3(p0), implicit %5, implicit %0
...

# In the following tests we are testing the behaviour of the combiner with uses
# in different basic blocks than the instruction to be combined
---
name: postinc_bb_0_use_bb_1
body: |
  ; CHECK-LABEL: name: postinc_bb_0_use_bb_1
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT:   PseudoJNZ $r1, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[PTR_ADD]](p0)
  bb.0:
    %0:_(p0) = COPY $p0
    %1:_(s20) = G_CONSTANT i20 64
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %4(s32)
    PseudoJNZ $r1, %bb.2

  bb.1:
    $p0 = COPY %0
    PseudoJ_jump_imm %bb.3

  bb.2:
    PseudoJ_jump_imm %bb.3

  bb.3:
    PseudoRET implicit $lr, implicit %3
...

---
name: postinc_bb_0_use_bb_3
body: |
  ; CHECK-LABEL: name: postinc_bb_0_use_bb_3
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT:   PseudoJNZ $r1, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[PTR_ADD]](p0)
  bb.0:
    %0:_(p0) = COPY $p0
    %1:_(s20) = G_CONSTANT i20 64
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %4(s32)
    PseudoJNZ $r1, %bb.2

  bb.1:
    PseudoJ_jump_imm %bb.3

  bb.2:
    PseudoJ_jump_imm %bb.3

  bb.3:
    $p0 = COPY %0
    PseudoRET implicit $lr, implicit %3
...

---
name: postinc_bb_1_use_bb_0
body: |
  ; CHECK-LABEL: name: postinc_bb_1_use_bb_0
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoJNZ $r1, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (s32))
  ; CHECK-NEXT:   $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[AIE_POSTINC_LOAD1]](p0)
  bb.0:
    %0:_(p0) = COPY $p0
    $p0 = COPY %0
    PseudoJNZ $r1, %bb.2

  bb.1:
    %1:_(s20) = G_CONSTANT i20 64
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %4(s32)
    PseudoJ_jump_imm %bb.3

  bb.2:
    PseudoJ_jump_imm %bb.3

  bb.3:
    PseudoRET implicit $lr, implicit %3
...

# In this case we would want to combine the postincrement.
# But the current heuristic is too conservative and since the use in bb.2 does
# not dominate the combined instruction in bb.1 it aborts the combining.
---
name: postinc_bb_1_use_bb_2
body: |
  ; CHECK-LABEL: name: postinc_bb_1_use_bb_2
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   PseudoJNZ $r1, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[PTR_ADD]](p0)
  bb.0:
    %0:_(p0) = COPY $p0
    PseudoJNZ $r1, %bb.2

  bb.1:
    %1:_(s20) = G_CONSTANT i20 64
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %4(s32)
    PseudoJ_jump_imm %bb.3

  bb.2:
    $p0 = COPY %0
    PseudoJ_jump_imm %bb.3

  bb.3:
    PseudoRET implicit $lr, implicit %3
...

---
name: postinc_bb_1_use_bb_3
body: |
  ; CHECK-LABEL: name: postinc_bb_1_use_bb_3
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   PseudoJNZ $r1, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[PTR_ADD]](p0)
  bb.0:
    %0:_(p0) = COPY $p0
    PseudoJNZ $r1, %bb.2

  bb.1:
    %1:_(s20) = G_CONSTANT i20 64
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %4(s32)
    PseudoJ_jump_imm %bb.3

  bb.2:
    PseudoJ_jump_imm %bb.3

  bb.3:
    $p0 = COPY %0
    PseudoRET implicit $lr, implicit %3
...

---
name: postinc_bb_3_use_bb_0
body: |
  ; CHECK-LABEL: name: postinc_bb_3_use_bb_0
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoJNZ $r1, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (s32))
  ; CHECK-NEXT:   $r0 = COPY [[AIE_POSTINC_LOAD]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[AIE_POSTINC_LOAD1]](p0)
  bb.0:
    %0:_(p0) = COPY $p0
    $p0 = COPY %0
    PseudoJNZ $r1, %bb.2

  bb.1:
    PseudoJ_jump_imm %bb.3

  bb.2:
    PseudoJ_jump_imm %bb.3

  bb.3:
    %1:_(s20) = G_CONSTANT i20 64
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %4(s32)
    PseudoRET implicit $lr, implicit %3
...

# In this case we would want to combine the postincrement.
# But the current heuristic is too conservative and since the use in bb.1 does
# not dominate the combined instruction in bb.3 it aborts the combining.
---
name: postinc_bb_3_use_bb_1
body: |
  ; CHECK-LABEL: name: postinc_bb_3_use_bb_1
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   PseudoJNZ $r1, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
  ; CHECK-NEXT:   $r0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[PTR_ADD]](p0)
  bb.0:
    %0:_(p0) = COPY $p0
    PseudoJNZ $r1, %bb.2

  bb.1:
    $p0 = COPY %0
    PseudoJ_jump_imm %bb.3

  bb.2:
    PseudoJ_jump_imm %bb.3

  bb.3:
    %1:_(s20) = G_CONSTANT i20 64
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(p0) = G_PTR_ADD %0, %1
    $r0 = COPY %4(s32)
    PseudoRET implicit $lr, implicit %3
...

---
name: vector_256_combine_postinc
body: |
  bb.0:
    ; CHECK-LABEL: name: vector_256_combine_postinc
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(<32 x s8>), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (<32 x s8>))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C]](s20)
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_POSTINC_LOAD]](<32 x s8>), [[COPY1]], [[C1]](s20) :: (store (<32 x s8>))
    ; CHECK-NEXT: $p1 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: $p2 = COPY [[AIE_POSTINC_STORE]](p0)
    ; CHECK-NEXT: $wl0 = COPY [[AIE_POSTINC_LOAD]](<32 x s8>)
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(s20) = G_CONSTANT i20 64
      %4:_(<32 x s8>) = G_LOAD %0(p0) :: (load (<32 x s8>))
      G_STORE %4, %6 :: (store (<32 x s8>))
      %3:_(p0) = G_PTR_ADD %0, %1
      $p0 = COPY %3
      %7:_(p0) = G_PTR_ADD %6, %1
      $p1 = COPY %7
      %5:_(p0) = G_PTR_ADD %6, %2
      $p2 = COPY %5
      $wl0 = COPY %4(<32 x s8>)
...

---
name: vector_256_combine_postinc_2d
body: |
  bb.0:
    ; CHECK-LABEL: name: vector_256_combine_postinc_2d
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_2D_LOAD:%[0-9]+]]:_(<32 x s8>), [[AIE_POSTINC_2D_LOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_2D_LOAD2:%[0-9]+]]:_(s20) = G_AIE_POSTINC_2D_LOAD [[COPY]], [[C]], [[C]], [[C]], [[C]] :: (load (<32 x s8>))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_2D_LOAD1]](p0)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(p0), [[INT1:%[0-9]+]]:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), [[COPY1]](p0), [[C]](s20), [[C]](s20), [[C]](s20), [[C]](s20)
    ; CHECK-NEXT: [[AIE_POSTINC_2D_STORE:%[0-9]+]]:_(p0), [[AIE_POSTINC_2D_STORE1:%[0-9]+]]:_(s20) = G_AIE_POSTINC_2D_STORE [[AIE_POSTINC_2D_LOAD]](<32 x s8>), [[COPY1]], [[C]], [[C]], [[C]], [[C]] :: (store (<32 x s8>))
    ; CHECK-NEXT: $p1 = COPY [[INT]](p0)
    ; CHECK-NEXT: $p2 = COPY [[AIE_POSTINC_2D_STORE]](p0)
    ; CHECK-NEXT: $wl0 = COPY [[AIE_POSTINC_2D_LOAD]](<32 x s8>)
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %1:_(s20) = G_CONSTANT i20 64
      %4:_(<32 x s8>) = G_LOAD %0(p0) :: (load (<32 x s8>))
      G_STORE %4, %6 :: (store (<32 x s8>))
      %3:_(p0), %8:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %0:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p0 = COPY %3
      %7:_(p0), %9:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %6:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p1 = COPY %7
      %5:_(p0), %10:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %6:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p2 = COPY %5
      $wl0 = COPY %4(<32 x s8>)
...

---
name: vector_256_combine_postinc_3d
body: |
  bb.0:
    ; CHECK-LABEL: name: vector_256_combine_postinc_3d
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_3D_LOAD:%[0-9]+]]:_(<32 x s8>), [[AIE_POSTINC_3D_LOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_3D_LOAD2:%[0-9]+]]:_(s20), [[AIE_POSTINC_3D_LOAD3:%[0-9]+]]:_ = G_AIE_POSTINC_3D_LOAD [[COPY]], [[C]], [[C]], [[C]], [[C]], [[C]], [[C]], [[C]] :: (load (<32 x s8>))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_3D_LOAD1]](p0)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(p0), [[INT1:%[0-9]+]]:_(s20), [[INT2:%[0-9]+]]:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), [[COPY1]](p0), [[C]](s20), [[C]](s20), [[C]](s20), [[C]](s20), [[C]](s20), [[C]](s20), [[C]](s20)
    ; CHECK-NEXT: [[AIE_POSTINC_3D_STORE:%[0-9]+]]:_(p0), [[AIE_POSTINC_3D_STORE1:%[0-9]+]]:_(s20), [[AIE_POSTINC_3D_STORE2:%[0-9]+]]:_ = G_AIE_POSTINC_3D_STORE [[AIE_POSTINC_3D_LOAD]](<32 x s8>), [[COPY1]], [[C]], [[C]], [[C]], [[C]], [[C]], [[C]], [[C]] :: (store (<32 x s8>))
    ; CHECK-NEXT: $p1 = COPY [[INT]](p0)
    ; CHECK-NEXT: $p2 = COPY [[AIE_POSTINC_3D_STORE]](p0)
    ; CHECK-NEXT: $wl0 = COPY [[AIE_POSTINC_3D_LOAD]](<32 x s8>)
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %1:_(s20) = G_CONSTANT i20 64
      %4:_(<32 x s8>) = G_LOAD %0(p0) :: (load (<32 x s8>))
      G_STORE %4, %6 :: (store (<32 x s8>))
      %3:_(p0), %8:_(s20), %9:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %0:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p0 = COPY %3
      %7:_(p0), %10:_(s20), %11:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %6:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p1 = COPY %7
      %5:_(p0), %12:_(s20), %13:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %6:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p2 = COPY %5
      $wl0 = COPY %4(<32 x s8>)
...

---
name: vector_256_combine_postinc_move_ptr_add
body: |
  ; CHECK-LABEL: name: vector_256_combine_postinc_move_ptr_add
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
  ; CHECK-NEXT:   [[AIE_POSTINC_LOAD:%[0-9]+]]:_(<32 x s8>), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (<32 x s8>))
  ; CHECK-NEXT:   G_STORE [[AIE_POSTINC_LOAD]](<32 x s8>), [[COPY1]](p0) :: (store (<32 x s8>))
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $wl0, implicit [[AIE_POSTINC_LOAD1]](p0), implicit [[AIE_POSTINC_LOAD]](<32 x s8>)
  bb.0:
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %1:_(s20) = G_CONSTANT i20 64
      %4:_(<32 x s8>) = G_LOAD %0(p0) :: (load (<32 x s8>))
      G_STORE %4, %6 :: (store (<32 x s8>))
      %3:_(p0) = G_PTR_ADD %0, %1

  bb.1:
      PseudoRET implicit $lr, implicit $wl0, implicit %3, implicit %4
...

---
name: vector_512_combine_postinc
body: |
  bb.0:
    ; CHECK-LABEL: name: vector_512_combine_postinc
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(<32 x s16>), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (<32 x s16>))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_LOAD1]](p0)
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C]](s20)
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_POSTINC_LOAD]](<32 x s16>), [[COPY1]], [[C1]](s20) :: (store (<32 x s16>))
    ; CHECK-NEXT: $p1 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: $p2 = COPY [[AIE_POSTINC_STORE]](p0)
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(s20) = G_CONSTANT i20 64
      %4:_(<32 x s16>) = G_LOAD %0(p0) :: (load (<32 x s16>))
      G_STORE %4, %6 :: (store (<32 x s16>))
      %3:_(p0) = G_PTR_ADD %0, %1
      $p0 = COPY %3
      %7:_(p0) = G_PTR_ADD %6, %1
      $p1 = COPY %7
      %5:_(p0) = G_PTR_ADD %6, %2
      $p2 = COPY %5
...

---
name: no_vector_1024_combine_postinc_yet
body: |
  bb.0:
    ; CHECK-LABEL: name: no_vector_1024_combine_postinc_yet
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s32>) = G_LOAD [[COPY]](p0) :: (load (<32 x s32>))
    ; CHECK-NEXT: G_STORE [[LOAD]](<32 x s32>), [[COPY1]](p0) :: (store (<32 x s32>))
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: $p0 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C]](s20)
    ; CHECK-NEXT: $p1 = COPY [[PTR_ADD1]](p0)
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C1]](s20)
    ; CHECK-NEXT: $p2 = COPY [[PTR_ADD2]](p0)
      %0:_(p0) = COPY $p0
      %6:_(p0) = COPY $p1
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(s20) = G_CONSTANT i20 64
      %4:_(<32 x s32>) = G_LOAD %0(p0) :: (load (<32 x s32>))
      G_STORE %4, %6 :: (store (<32 x s32>))
      %3:_(p0) = G_PTR_ADD %0, %1
      $p0 = COPY %3
      %7:_(p0) = G_PTR_ADD %6, %1
      $p1 = COPY %7
      %5:_(p0) = G_PTR_ADD %6, %2
      $p2 = COPY %5
...

---

name: offset_combine_128bit_load
body: |
  bb.0:
    ; CHECK-LABEL: name: offset_combine_128bit_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<4 x s32>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (<4 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[AIE_OFFSET_LOAD]](<4 x s32>)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(p0) = G_PTR_ADD %0, %1
      %3:_(<4 x s32>) = G_LOAD %2(p0) :: (load (<4 x s32>))
      PseudoRET implicit $lr, implicit %3
...

---
name: postinc_combine_128bit_load
body: |
  bb.0:
    ; CHECK-LABEL: name: postinc_combine_128bit_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(<4 x s32>), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C]](s20) :: (load (<4 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0, implicit [[AIE_POSTINC_LOAD]](<4 x s32>), implicit [[AIE_POSTINC_LOAD1]](p0)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(<4 x s32>) = G_LOAD %0(p0) :: (load (<4 x s32>))
      %3:_(p0) = G_PTR_ADD %0, %1
      PseudoRET implicit $lr, implicit $wl0, implicit %2, implicit %3
...

---
name: postinc_2d_combine_128bit_load
body: |
  bb.0:
    ; CHECK-LABEL: name: postinc_2d_combine_128bit_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_2D_LOAD:%[0-9]+]]:_(<16 x s8>), [[AIE_POSTINC_2D_LOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_2D_LOAD2:%[0-9]+]]:_(s20) = G_AIE_POSTINC_2D_LOAD [[COPY]], [[C]], [[C]], [[C]], [[C]] :: (load (<16 x s8>))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_2D_LOAD1]](p0)
    ; CHECK-NEXT: $q0 = COPY [[AIE_POSTINC_2D_LOAD]](<16 x s8>)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(<16 x s8>) = G_LOAD %0(p0) :: (load (<16 x s8>))
      %3:_(p0), %4:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %0:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p0 = COPY %3
      $q0 = COPY %2(<16 x s8>)
...

---
name: postinc_3d_combine_128bit_load
body: |
  bb.0:
    ; CHECK-LABEL: name: postinc_3d_combine_128bit_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 64
    ; CHECK-NEXT: [[AIE_POSTINC_3D_LOAD:%[0-9]+]]:_(<16 x s8>), [[AIE_POSTINC_3D_LOAD1:%[0-9]+]]:_(p0), [[AIE_POSTINC_3D_LOAD2:%[0-9]+]]:_(s20), [[AIE_POSTINC_3D_LOAD3:%[0-9]+]]:_ = G_AIE_POSTINC_3D_LOAD [[COPY]], [[C]], [[C]], [[C]], [[C]], [[C]], [[C]], [[C]] :: (load (<16 x s8>))
    ; CHECK-NEXT: $p0 = COPY [[AIE_POSTINC_3D_LOAD1]](p0)
    ; CHECK-NEXT: $q0 = COPY [[AIE_POSTINC_3D_LOAD]](<16 x s8>)
      %0:_(p0) = COPY $p0
      %1:_(s20) = G_CONSTANT i20 64
      %2:_(<16 x s8>) = G_LOAD %0(p0) :: (load (<16 x s8>))
      %3:_(p0), %4:_(s20), %5:_(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %0:_(p0), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20), %1:_(s20)
      $p0 = COPY %3
      $q0 = COPY %2(<16 x s8>)
...
