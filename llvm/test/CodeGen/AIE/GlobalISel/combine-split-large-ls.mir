# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-postlegalizer-custom-combiner %s -verify-machineinstrs -o - | FileCheck %s

# Test for combine_load_store_split

# Case 1: Can split.

---
name:            load_16xs32
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_16xs32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<8 x s32>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<8 x s32>) = G_LOAD [[COPY]](p0) :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[LOAD]](<8 x s32>), [[AIE_OFFSET_LOAD]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    %1:_(p0) = COPY $p0
    %295:_(<16 x s32>) = G_LOAD %1(p0) :: (load (<16 x s32>))
    $x0 = COPY %295:_(<16 x s32>)
...

# Case 2: Can split.

---
name:            load_32xs16
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_32xs16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<16 x s16>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (<16 x s16>) from unknown-address + 32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<16 x s16>) = G_LOAD [[COPY]](p0) :: (load (<16 x s16>), align 64)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<32 x s16>) = G_CONCAT_VECTORS [[LOAD]](<16 x s16>), [[AIE_OFFSET_LOAD]](<16 x s16>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<32 x s16>)
    %1:_(p0) = COPY $p0
    %295:_(<32 x s16>) = G_LOAD %1(p0) :: (load (<32 x s16>))
    $x0 = COPY %295:_(<32 x s16>)
...

# Case 3: Can split.

---
name:            load_64xs8
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_64xs8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(<32 x s8>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (<32 x s8>) from unknown-address + 32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[COPY]](p0) :: (load (<32 x s8>), align 64)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<64 x s8>) = G_CONCAT_VECTORS [[LOAD]](<32 x s8>), [[AIE_OFFSET_LOAD]](<32 x s8>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<64 x s8>)
    %1:_(p0) = COPY $p0
    %295:_(<64 x s8>) = G_LOAD %1(p0) :: (load (<64 x s8>))
    $x0 = COPY %295:_(<64 x s8>)
...

# Case 4: Can split.

---
name:            store_16xs32
body:             |
  bb.0:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: store_16xs32
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: G_AIE_OFFSET_STORE [[UV1]](<8 x s32>), [[COPY1]](p0), [[C]](s20) :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: G_STORE [[UV]](<8 x s32>), [[COPY1]](p0) :: (store (<8 x s32>), align 64)
    %0:_(<16 x s32>) = COPY $x0
    %1:_(p0) = COPY $p0
    G_STORE %0, %1(p0) :: (store (<16 x s32>))
...

# Case 5: Can't split (skip accumulators).

---
name:            load_acc16xs64
body:             |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_acc16xs64
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<16 x s64>) = G_LOAD [[COPY]](p0) :: (load (<16 x s64>))
    ; CHECK-NEXT: $cm0 = COPY [[LOAD]](<16 x s64>)
    %1:_(p0) = COPY $p0
    %295:_(<16 x s64>) = G_LOAD %1(p0) :: (load (<16 x s64>))
    $cm0 = COPY %295:_(<16 x s64>)
...

# Case 6: Can't split (will miss selection combine).

---
name:            load_16xs32_ups
body:             |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: load_16xs32_ups
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(<16 x s32>) = G_LOAD [[COPY]](p0) :: (load (<16 x s32>))
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), [[LOAD]](<16 x s32>), [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: $cm0 = COPY [[INT]](<16 x s64>)
    %1:_(p0) = COPY $p0
    %101:_(s32) = COPY $r1
    %102:_(s32) = G_CONSTANT i32 0
    %25:_(<16 x s32>) = G_LOAD %1 :: (load (<16 x s32>))
    %103:_(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), %25:_(<16 x s32>), %101:_(s32), %102:_(s32)
    $cm0 = COPY %103:_(<16 x s64>)
...

# Case 7: Can't split (will miss selection combine).

---
name:            store_16xs32_srs
body:             |
  bb.0:
    liveins: $p0, $cm0
    ; CHECK-LABEL: name: store_16xs32_srs
    ; CHECK: liveins: $p0, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s64>) = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(<32 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v32.acc32.srs), [[COPY]](<16 x s64>), [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: G_STORE [[INT]](<32 x s16>), [[COPY2]](p0) :: (store (<32 x s16>))
    %0:_(<16 x s64>) = COPY $cm0
    %1:_(s32) = COPY $r0
    %3:_(p0) = COPY $p0
    %7:_(s32) = G_CONSTANT i32 0
    %6:_(<32 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v32.acc32.srs), %0:_(<16 x s64>), %1:_(s32), %7:_(s32)
    G_STORE %6:_(<32 x s16>), %3:_(p0) :: (store (<32 x s16>))
...
