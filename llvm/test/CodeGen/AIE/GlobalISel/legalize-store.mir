# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: test_store_s32
body: |
  bb.0:
    liveins: $r6, $p0
    ; CHECK-LABEL: name: test_store_s32
    ; CHECK: liveins: $r6, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    G_STORE %1, %0 :: (store (s32))
...

---
name: test_store_s8
body: |
  bb.0:
    liveins: $r6, $p0
    ; CHECK-LABEL: name: test_store_s8
    ; CHECK: liveins: $r6, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s8))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s8) = G_TRUNC %1
    G_STORE %2, %0 :: (store (s8))
...

---
name: test_store_s16
body: |
  bb.0:
    liveins: $r6, $p0
    ; CHECK-LABEL: name: test_store_s16
    ; CHECK: liveins: $r6, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s16))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s16) = G_TRUNC %1
    G_STORE %2, %0 :: (store (s16))
...

---
name: test_store_s64
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_store_s64
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32), align 8)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[PTR_ADD]](p0) :: (store (s32) into unknown-address + 4)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s64))
...

---
name: test_store_s1
body: |
  bb.0:
    liveins: $r6, $p0
    ; CHECK-LABEL: name: test_store_s1
    ; CHECK: liveins: $r6, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[AND]], [[C]]
    ; CHECK-NEXT: G_STORE [[AND1]](s32), [[COPY]](p0) :: (store (s8))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s1) = G_TRUNC %1
    G_STORE %2, %0 :: (store (s1))
...

---
name: test_store_p0
body: |
  bb.0:
    liveins: $p0, $p1
    ; CHECK-LABEL: name: test_store_p0
    ; CHECK: liveins: $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: G_STORE [[COPY1]](p0), [[COPY]](p0) :: (store (p0), align 4)
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    G_STORE %1, %0 :: (store (p0))
...

---
name: test_truncstore_s64_to_s8
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_truncstore_s64_to_s8
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s8))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s8))
...

---
name: test_truncstore_s64_to_16
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_truncstore_s64_to_16
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s16))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s16))
...

---
name: test_truncstore_s64_to_32
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_truncstore_s64_to_32
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32))
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s32))
...

---
name: test_truncstore_s64_to_16_unaligned
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_truncstore_s64_to_16_unaligned
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[AND]], [[C]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s8))
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 1)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s16), align 1)
...

---
name: test_truncstore_s64_to_32_unaligned
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_truncstore_s64_to_32_unaligned
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY2]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s20)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C3]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[AND]], [[C2]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C4]](s20)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[COPY]](p0) :: (store (s8))
    ; CHECK-NEXT: G_STORE [[LSHR1]](s32), [[PTR_ADD1]](p0) :: (store (s8) into unknown-address + 1)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[LSHR]], [[C5]](s32)
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD]], [[C4]](s20)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 2)
    ; CHECK-NEXT: G_STORE [[LSHR2]](s32), [[PTR_ADD2]](p0) :: (store (s8) into unknown-address + 3)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s32), align 1)
...

---
name: test_store_s17
body: |
  bb.0:
    liveins: $r6, $p0
    ; CHECK-LABEL: name: test_store_s17
    ; CHECK: liveins: $r6, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 131071
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[AND]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY2]], [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[COPY]](p0) :: (store (s16), align 4)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 2, align 2)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s17) = G_TRUNC %1
    G_STORE %2, %0 :: (store (s17))
...

---
name: test_store_s17_unaligned
body: |
  bb.0:
    liveins: $r6, $p0
    ; CHECK-LABEL: name: test_store_s17_unaligned
    ; CHECK: liveins: $r6, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 131071
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[AND]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY2]], [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C4]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[AND1]], [[C3]](s32)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C5]](s20)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[COPY]](p0) :: (store (s8))
    ; CHECK-NEXT: G_STORE [[LSHR1]](s32), [[PTR_ADD1]](p0) :: (store (s8) into unknown-address + 1)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 2)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s17) = G_TRUNC %1
    G_STORE %2, %0 :: (store (s17), align 1)
...

---
name: test_store_s33
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_store_s33
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: G_STORE [[AND]](s32), [[COPY]](p0) :: (store (s32), align 8)
    ; CHECK-NEXT: G_STORE [[AND1]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 4, align 4)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    %4:_(s33) = G_TRUNC %3
    G_STORE %4, %0 :: (store (s33))
...

---
name: test_store_s33_unaligned
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_store_s33_unaligned
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY [[AND]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY3]], [[C3]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s20) = G_CONSTANT i20 2
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C4]](s20)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C6]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[AND2]], [[C5]](s32)
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C7]](s20)
    ; CHECK-NEXT: G_STORE [[COPY3]](s32), [[COPY]](p0) :: (store (s8))
    ; CHECK-NEXT: G_STORE [[LSHR1]](s32), [[PTR_ADD2]](p0) :: (store (s8) into unknown-address + 1)
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[LSHR]], [[C8]](s32)
    ; CHECK-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD1]], [[C7]](s20)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD1]](p0) :: (store (s8) into unknown-address + 2)
    ; CHECK-NEXT: G_STORE [[LSHR2]](s32), [[PTR_ADD3]](p0) :: (store (s8) into unknown-address + 3)
    ; CHECK-NEXT: G_STORE [[AND1]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 4)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    %4:_(s33) = G_TRUNC %3
    G_STORE %4, %0 :: (store (s33), align 1)
...

---
name: test_truncstore_s64_to_33
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_truncstore_s64_to_33
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: G_STORE [[AND]](s32), [[COPY]](p0) :: (store (s32), align 8)
    ; CHECK-NEXT: G_STORE [[AND1]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 4, align 4)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s33))
...

---
name: test_truncstore_s64_to_33_unaligned
body: |
  bb.0:
    liveins: $r6, $r7, $p0

    ; CHECK-LABEL: name: test_truncstore_s64_to_33_unaligned
    ; CHECK: liveins: $r6, $r7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY [[AND]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY3]], [[C3]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s20) = G_CONSTANT i20 2
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C4]](s20)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C6]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[AND2]], [[C5]](s32)
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C7]](s20)
    ; CHECK-NEXT: G_STORE [[COPY3]](s32), [[COPY]](p0) :: (store (s8))
    ; CHECK-NEXT: G_STORE [[LSHR1]](s32), [[PTR_ADD2]](p0) :: (store (s8) into unknown-address + 1)
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[LSHR]], [[C8]](s32)
    ; CHECK-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD1]], [[C7]](s20)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD1]](p0) :: (store (s8) into unknown-address + 2)
    ; CHECK-NEXT: G_STORE [[LSHR2]](s32), [[PTR_ADD3]](p0) :: (store (s8) into unknown-address + 3)
    ; CHECK-NEXT: G_STORE [[AND1]](s32), [[PTR_ADD]](p0) :: (store (s8) into unknown-address + 4)
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    G_STORE %3, %0 :: (store (s33), align 1)
...

---
name: test_store_s20
body: |
  bb.0:
    liveins: $m6, $p0
    ; CHECK-LABEL: name: test_store_s20
    ; CHECK: liveins: $m6, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s20) = COPY $m6
    ; CHECK-NEXT: G_STORE [[COPY1]](s20), [[COPY]](p0) :: (store (s20), align 4)
    %0:_(p0) = COPY $p0
    %1:_(s20) = COPY $m6
    G_STORE %1, %0 :: (store (s20))
...
