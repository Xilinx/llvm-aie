; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --print-fixed-stack
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; Due to the way serialization of fixed slots work, they appear in reverse
; allocation order in "fixedStack:"
; I.e. the last fixed object will appear first (id: 0) in fixedStack.

define void @use_I_va_2I(i32, ...) {
  ; CHECK-LABEL: name: use_I_va_2I
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: 0, size: 4, alignment: 32, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

; varArgsFrameIndex is -3 because the third i64 argument uses FI #-1 and #-2.
define void @use_3LI_va_SILI(i64, i64, i64, ...) {
  ; CHECK-LABEL: name: use_3LI_va_SILI
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -32, size: 4, alignment: 32, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK:   - { id: 1, type: default, offset: -4, size: 4, alignment: 4, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK:   - { id: 2, type: default, offset: -8, size: 4, alignment: 8, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.3):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[MV1:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY2]](s32), [[COPY3]](s32)
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.2
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32) from %fixed-stack.2, align 8)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s32) from %fixed-stack.1)
  ; CHECK-NEXT:   [[MV2:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[LOAD]](s32), [[LOAD1]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}
