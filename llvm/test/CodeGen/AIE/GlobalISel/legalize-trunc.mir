# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: test_trunc_s64_to_s32
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: test_trunc_s64_to_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: $r0 = COPY [[COPY]](s32)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s64) = G_MERGE_VALUES %0(s32), %1(s32)
    %3:_(s32) = G_TRUNC %2
    $r0 = COPY %3
...

---
name: test_trunc_s64_to_s16
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: test_trunc_s64_to_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s16)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s64) = G_MERGE_VALUES %0(s32), %1(s32)
    %3:_(s16) = G_TRUNC %2
    PseudoRET implicit $lr, implicit %3
...

---
name: test_trunc_s64_to_s1
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: test_trunc_s64_to_s1
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s64) = G_MERGE_VALUES %0(s32), %1(s32)
    %3:_(s1) = G_TRUNC %2
    PseudoRET implicit $lr, implicit %3
...

---
name: test_trunc_s32_to_s1
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_trunc_s32_to_s1
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %0:_(s32) = COPY $r6
    %1:_(s1) = G_TRUNC %0
    PseudoRET implicit $lr, implicit %1
...

---
name: test_trunc_s32_to_s16
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_trunc_s32_to_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s16)
    %0:_(s32) = COPY $r6
    %1:_(s16) = G_TRUNC %0
    PseudoRET implicit $lr, implicit %1
...


---
name: test_trunc_s32_to_s8
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_trunc_s32_to_s8
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s8)
    %0:_(s32) = COPY $r6
    %1:_(s8) = G_TRUNC %0
    PseudoRET implicit $lr, implicit %1
...

---
name: test_trunc_s16_to_s1
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_trunc_s16_to_s1
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %0:_(s32) = COPY $r6
    %1:_(s16) = G_TRUNC %0
    %2:_(s1) = G_TRUNC %1
    PseudoRET implicit $lr, implicit %2
...
