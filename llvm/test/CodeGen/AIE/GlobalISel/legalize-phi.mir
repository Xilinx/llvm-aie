# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: phi_s32
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s32
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY]]
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY]](s32), %bb.0, [[ADD]](s32), %bb.1
  ; CHECK-NEXT:   $r0 = COPY [[PHI]](s32)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7

    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    G_BRCOND %3, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %4:_(s32) = G_ADD %0, %0
    G_BR %bb.2

  bb.2:
    %5:_(s32) = G_PHI %0, %bb.0, %4, %bb.1
    $r0 = COPY %5
...

---
name: phi_s64
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s64
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY]]
  ; CHECK-NEXT:   [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[COPY]]
  ; CHECK-NEXT:   [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY1]], [[COPY1]]
  ; CHECK-NEXT:   [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[ADD1]], [[ICMP1]]
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY]](s32), %bb.0, [[ADD]](s32), %bb.1
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:_(s32) = G_PHI [[COPY1]](s32), %bb.0, [[ADD2]](s32), %bb.1
  ; CHECK-NEXT:   $r0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   $r1 = COPY [[PHI1]](s32)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7, $r8
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = COPY $r8
    %3:_(s64) = G_MERGE_VALUES %0(s32), %1(s32)
    %4:_(s32) = G_CONSTANT i32 0
    %5:_(s1) = G_ICMP intpred(eq), %2, %4
    G_BRCOND %5, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %6:_(s64) = G_ADD %3, %3
    G_BR %bb.2

  bb.2:
    %7:_(s64) = G_PHI %3, %bb.0, %6, %bb.1
    %8:_(s32), %9:_(s32) = G_UNMERGE_VALUES %7(s64)
    $r0 = COPY %8(s32)
    $r1 = COPY %9(s32)
...

---
name: phi_s1
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s1
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY1]](s32), %bb.0, [[DEF]](s32), %bb.1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[PHI]], [[C1]]
  ; CHECK-NEXT:   $r6 = COPY [[AND]](s32)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7

    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    %4:_(s1) = G_TRUNC %1
    G_BRCOND %3, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %5:_(s1) = G_IMPLICIT_DEF
    G_BR %bb.2

  bb.2:
    %6:_(s1) = G_PHI %4, %bb.0, %5, %bb.1
    %7:_(s32) = G_ZEXT %6
    $r6 = COPY %7
...

---
name: test_phi_s7
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: test_phi_s7
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY1]](s32), %bb.0, [[DEF]](s32), %bb.1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[PHI]], [[C1]]
  ; CHECK-NEXT:   $r6 = COPY [[AND]](s32)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7

    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    %4:_(s7) = G_TRUNC %1
    G_BRCOND %3, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %5:_(s7) = G_IMPLICIT_DEF
    G_BR %bb.2

  bb.2:
    %6:_(s7) = G_PHI %4, %bb.0, %5, %bb.1
    %7:_(s32) = G_ZEXT %6
    $r6 = COPY %7
...

---
name: phi_s8
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s8
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY1]](s32), %bb.0, [[DEF]](s32), %bb.1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[PHI]], [[C1]]
  ; CHECK-NEXT:   $r6 = COPY [[AND]](s32)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7

    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    %4:_(s8) = G_TRUNC %1
    G_BRCOND %3, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %5:_(s8) = G_IMPLICIT_DEF
    G_BR %bb.2

  bb.2:
    %6:_(s8) = G_PHI %4, %bb.0, %5, %bb.1
    %7:_(s32) = G_ZEXT %6
    $r6 = COPY %7
...

---
name: phi_s16
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s16
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY1]](s32), %bb.0, [[DEF]](s32), %bb.1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[PHI]], [[C1]]
  ; CHECK-NEXT:   $r6 = COPY [[AND]](s32)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7

    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    %4:_(s16) = G_TRUNC %1
    G_BRCOND %3, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %5:_(s16) = G_IMPLICIT_DEF
    G_BR %bb.2

  bb.2:
    %6:_(s16) = G_PHI %4, %bb.0, %5, %bb.1
    %7:_(s32) = G_ZEXT %6
    $r6 = COPY %7
...

---
name: phi_p0
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_p0
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s20)
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[COPY]](p0), %bb.0, [[PTR_ADD]](p0), %bb.1
  ; CHECK-NEXT:   $p0 = COPY [[PHI]](p0)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $p0, $r6
    %0:_(p0) = COPY $p0
    %1:_(s32) = COPY $r6
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    G_BRCOND %3, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %4:_(s32) = G_CONSTANT i32 8
    %5:_(p0) = G_PTR_ADD %0, %4
    G_BR %bb.2

  bb.2:
    %6:_(p0) = G_PHI %0, %bb.0, %5, %bb.1
    $p0 = COPY %6
...

---
name: phi_s20
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: phi_s20
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $m1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s20) = COPY $m1
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[COPY1]](s20)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ZEXT]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY]]
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s20) = G_TRUNC [[ADD]](s32)
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s20) = G_PHI [[TRUNC]](s20), %bb.0, [[TRUNC1]](s20), %bb.1
  ; CHECK-NEXT:   $m2 = COPY [[PHI]](s20)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $m1, $r0

    %6:_(s32) = COPY $r0
    %0:_(s20) = G_TRUNC %6
    %1:_(s20) = COPY $m1
    %2:_(s20) = G_CONSTANT i20 0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    G_BRCOND %3, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %4:_(s20) = G_ADD %0, %0
    G_BR %bb.2

  bb.2:
    %5:_(s20) = G_PHI %0, %bb.0, %4, %bb.1
    $m2 = COPY %5
...
