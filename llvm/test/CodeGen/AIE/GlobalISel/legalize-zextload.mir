# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: test_load_s32_s8
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s32_s8
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8), align 4)
    ; CHECK-NEXT: $r0 = COPY [[ZEXTLOAD]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_ZEXTLOAD %0 :: (load (s8), align 4)
    $r0 = COPY %1
...

---
name: test_load_s32_s16
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s32_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s16), align 4)
    ; CHECK-NEXT: $r0 = COPY [[ZEXTLOAD]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_ZEXTLOAD %0 :: (load (s16), align 4)
    $r0 = COPY %1
...

---
name: test_load_s64_s8
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s64_s8
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8), align 4)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $r0 = COPY [[ZEXTLOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[C]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s64) = G_ZEXTLOAD %0 :: (load (s8), align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1
    $r0 = COPY %2
    $r1 = COPY %3
...

---
name: test_load_s64_s16
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s64_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s16), align 4)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $r0 = COPY [[ZEXTLOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[C]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s64) = G_ZEXTLOAD %0 :: (load (s16), align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1
    $r0 = COPY %2
    $r1 = COPY %3
...

---
name: test_load_s64_s32
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s64_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[C]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s64) = G_ZEXTLOAD %0 :: (load (s32), align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1
    $r0 = COPY %2
    $r1 = COPY %3
...

---
name: test_load_s32_s16_unaligned
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s32_s16_unaligned
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[PTR_ADD]](p0) :: (load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[ZEXTLOAD1]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: $r0 = COPY [[OR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_ZEXTLOAD %0 :: (load (s16), align 1)
    $r0 = COPY %1
...

---
name: test_load_s33_s32
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s33_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[C]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s33) = G_ZEXTLOAD %0 :: (load (s32), align 4)
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32), %4:_(s32) = G_UNMERGE_VALUES %2
    $r0 = COPY %3
    $r1 = COPY %4
...

---
name: test_load_s33_s16
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s33_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s16), align 4)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $r0 = COPY [[ZEXTLOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[C]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s33) = G_ZEXTLOAD %0 :: (load (s16), align 4)
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32), %4:_(s32) = G_UNMERGE_VALUES %2
    $r0 = COPY %3
    $r1 = COPY %4
...
