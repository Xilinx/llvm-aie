# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s --check-prefix=AIE1
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s --check-prefix=AIE2

--- |
  target datalayout = "e-m:e-p:20:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32"

  define void @test_dbg_value() !dbg !5 {
    ; Keep the dbg metadata live by referencing it in the IR.
    call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !7, metadata !DIExpression()), !dbg !9
    ret void
  }

  declare void @llvm.dbg.value(metadata, i64, metadata, metadata)

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4}

  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "llvm", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
  !1 = !DIFile(filename: "test.ll", directory: "/tmp")
  !2 = !{}
  !3 = !{i32 2, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = distinct !DISubprogram(name: "test_dbg_value", scope: !1, file: !1, line: 1, type: !6, isLocal: false, isDefinition: true, scopeLine: 1, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)
  !6 = !DISubroutineType(types: !2)
  !7 = !DILocalVariable(name: "in", arg: 1, scope: !5, file: !1, line: 1, type: !8)
  !8 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !9 = !DILocation(line: 1, column: 1, scope: !5)
...


---
name: test_dbg_value
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; AIE1-LABEL: name: test_dbg_value
    ; AIE1: [[COPY:%[0-9]+]]:gpr = COPY $r0
    ; AIE1-NEXT: DBG_VALUE [[COPY]], $noreg, !7, !DIExpression(), debug-location !9
    ; AIE1-NEXT: DBG_VALUE $r0, $noreg, 0, !7, !DIExpression(), debug-location !9
    ; AIE1-NEXT: DBG_VALUE $noreg, 0, !7, !DIExpression(), debug-location !9
    ; AIE1-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    ; AIE2-LABEL: name: test_dbg_value
    ; AIE2: [[COPY:%[0-9]+]]:er = COPY $r0
    ; AIE2-NEXT: DBG_VALUE [[COPY]], $noreg, !7, !DIExpression(), debug-location !9
    ; AIE2-NEXT: DBG_VALUE $r0, $noreg, 0, !7, !DIExpression(), debug-location !9
    ; AIE2-NEXT: DBG_VALUE $noreg, 0, !7, !DIExpression(), debug-location !9
    ; AIE2-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:gprregbank(s32) = COPY $r0
    DBG_VALUE %0:gprregbank(s32), $noreg, !7, !DIExpression(), debug-location !9; test.ll:1:1 line no:1
    DBG_VALUE $r0, $noreg, 0, !7, !DIExpression(), debug-location !9; test.ll:1:1
    DBG_VALUE $noreg, 0, !7, !DIExpression(), debug-location !9; test.ll:1:1 line no:1 indirect
    PseudoRET implicit $lr, implicit %0
...
