# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie-duplicate-PHI-elimination %s -verify-machineinstrs -o - | FileCheck %s

---
name:            duplicate_PHI_1_duplicate_elimination
legalized:       false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: duplicate_PHI_1_duplicate_elimination
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 10
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(p0) = G_CONSTANT i20 20
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   G_BR %bb.1
  bb.1:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    liveins: $p1
    %5:_(p0) = G_CONSTANT i20 10
    %15:_(p0) = G_CONSTANT i20 0
    %16:_(p0) = G_CONSTANT i20 20

  bb.2:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    %12:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %14:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %0:_(<32 x s8>) = G_LOAD %12:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %1:_(<32 x s8>) = G_LOAD %14:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    G_BR %bb.2
...

---
name:            duplicate_PHI_2_duplicate_elimination
legalized:       false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: duplicate_PHI_2_duplicate_elimination
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 10
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   G_BR %bb.1
  bb.1:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    liveins: $p1
    %5:_(p0) = G_CONSTANT i20 10
    %15:_(p0) = G_CONSTANT i20 0

  bb.2:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    %12:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %14:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %34:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %0:_(<32 x s8>) = G_LOAD %12:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %1:_(<32 x s8>) = G_LOAD %14:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %2:_(<32 x s8>) = G_LOAD %34:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    G_BR %bb.2
...

---
name:            duplicate_PHI_2_duplicate_elimination_2_unique
legalized:       false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: duplicate_PHI_2_duplicate_elimination_2_unique
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 10
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(p0) = G_CONSTANT i20 1000
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C2]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI3:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI2]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD3:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   G_BR %bb.1
  bb.1:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    liveins: $p1
    %5:_(p0) = G_CONSTANT i20 10
    %15:_(p0) = G_CONSTANT i20 0
    %16:_(p0) = G_CONSTANT i20 1000

  bb.2:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    %12:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %14:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %34:_(p0) = G_PHI %5:_(p0), %bb.1, %16:_(p0), %bb.2
    %44:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %0:_(<32 x s8>) = G_LOAD %12:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %1:_(<32 x s8>) = G_LOAD %14:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %2:_(<32 x s8>) = G_LOAD %34:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %3:_(<32 x s8>) = G_LOAD %44:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    G_BR %bb.2
...

---
name:            duplicate_PHI_2_duplicate_elimination_multiple_use
legalized:       false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: duplicate_PHI_2_duplicate_elimination_multiple_use
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 10
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:_(p0) = G_PHI [[C]](p0), %bb.0, [[C1]](p0), %bb.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD3:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   [[LOAD4:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[PHI]](p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
  ; CHECK-NEXT:   G_BR %bb.1
  bb.1:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    liveins: $p1
    %5:_(p0) = G_CONSTANT i20 10
    %15:_(p0) = G_CONSTANT i20 0

  bb.2:
    successors: %bb.2(0x80000000); %bb.2(100.00%)
    %12:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %14:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %34:_(p0) = G_PHI %5:_(p0), %bb.1, %15:_(p0), %bb.2
    %0:_(<32 x s8>) = G_LOAD %12:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %1:_(<32 x s8>) = G_LOAD %14:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %2:_(<32 x s8>) = G_LOAD %34:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %3:_(<32 x s8>) = G_LOAD %14:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    %4:_(<32 x s8>) = G_LOAD %34:_(p0) :: (load (<32 x s8>) from `ptr addrspace(5) null`, addrspace 5)
    G_BR %bb.2
...
