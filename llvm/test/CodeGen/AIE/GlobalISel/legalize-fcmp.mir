# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name:            test_cmp_true
body:             |
  bb.1.entry:
    liveins: $r1

    ; CHECK-LABEL: name: test_cmp_true
    ; CHECK: liveins: $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(true), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_cmp_false
body:             |
  bb.1.entry:
    liveins: $r1

    ; CHECK-LABEL: name: test_cmp_false
    ; CHECK: liveins: $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(false), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_oeq
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_oeq
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__eqsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(oeq), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_oge
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_oge
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__gesf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(oge), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_ogt
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_ogt
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__gtsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(ogt), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_ole
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_ole
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__lesf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(ole), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_olt
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_olt
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__ltsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(olt), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_ord
body:             |
  bb.1.entry:
    liveins: $r1

    ; CHECK-LABEL: name: test_ord
    ; CHECK: liveins: $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__unordsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(ord), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_uge
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_uge
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__ltsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(uge), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_ugt
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_ugt
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__lesf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(ugt), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_ule
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_ule
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__gtsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(ule), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_ult
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_ult
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__gesf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(ult), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_une
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_une
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__nesf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(une), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_uno
body:             |
  bb.1.entry:
    liveins: $r1, $r2

    ; CHECK-LABEL: name: test_uno
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoJL &__unordsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %0:_(s1) = G_FCMP floatpred(uno), %1(s32), %2
    PseudoRET implicit $lr, implicit %0

...
---
name:            test_one
body:             |
  bb.1.entry:
    liveins: $r1

    ; CHECK-LABEL: name: test_one
    ; CHECK: liveins: $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 2139095040
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &__gtsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &__ltsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[ICMP1]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = G_FCONSTANT float 0x7FF0000000000000
    %3:_(s1) = G_FCMP floatpred(one), %1(s32), %2
    PseudoRET implicit $lr, implicit %3

...
---
name:            test_ueq
body:             |
  bb.1.entry:
    liveins: $r1

    ; CHECK-LABEL: name: test_ueq
    ; CHECK: liveins: $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 2139095040
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &__eqsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $r2 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &__unordsf2, {{csr_aie.?}}, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[ICMP1]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %1:_(s32) = COPY $r1
    %2:_(s32) = G_FCONSTANT float 0x7FF0000000000000
    %3:_(s1) = G_FCMP floatpred(ueq), %1(s32), %2
    PseudoRET implicit $lr, implicit %3

...
