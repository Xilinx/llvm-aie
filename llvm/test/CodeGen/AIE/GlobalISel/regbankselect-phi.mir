# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=regbankselect -regbankselect-fast %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie -run-pass=regbankselect -regbankselect-greedy %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=regbankselect -regbankselect-fast %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=regbankselect -regbankselect-greedy %s -verify-machineinstrs -o - | FileCheck %s

---
name: phi_s32
legalized: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s32
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gprregbank(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gprregbank(s32) = COPY $r7
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gprregbank(s32) = COPY $r8
  ; CHECK-NEXT:   [[C:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:gprregbank(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:gprregbank(s32) = G_AND [[ICMP]], [[C1]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:gprregbank(s32) = COPY [[COPY1]](s32)
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gprregbank(s32) = G_PHI [[COPY]](s32), %bb.0, [[COPY3]](s32), %bb.1
  ; CHECK-NEXT:   $r0 = COPY [[PHI]](s32)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7, $r8

    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = COPY $r8
    %3:_(s32) = G_CONSTANT i32 0
    %4:_(s32) = G_ICMP intpred(eq), %2, %3
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(s32) = G_AND %4, %5
    G_BRCOND %4, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %7:_(s32) = COPY %1
    G_BR %bb.2

  bb.2:
    %8:_(s32) = G_PHI %0, %bb.0, %7, %bb.1
    $r0 = COPY %8
...

---
name: phi_s32_loop
legalized: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s32_loop
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gprregbank(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gprregbank(s32) = COPY $r7
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gprregbank(s32) = COPY $r8
  ; CHECK-NEXT:   [[C:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gprregbank(s32) = G_PHI [[COPY]](s32), %bb.0, %5(s32), %bb.1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:gprregbank(s32) = COPY [[COPY2]](s32)
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:gprregbank(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:gprregbank(s32) = G_AND [[ICMP]], [[C1]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $r0 = COPY [[PHI]](s32)
  bb.0:
    successors: %bb.1
    liveins: $r6, $r7, $r8
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = COPY $r8
    %3:_(s32) = G_CONSTANT i32 0
    G_BR %bb.1

  bb.1:
    successors: %bb.1, %bb.2

    %4:_(s32) = G_PHI %0, %bb.0, %5, %bb.1
    %5:_(s32) = COPY %2
    %6:_(s32) = G_ICMP intpred(eq), %1, %3
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(s32) = G_AND %6, %7
    G_BRCOND %8, %bb.1
    G_BR %bb.2

  bb.2:
    $r0 = COPY %4
...

---
name: phi_s32_cycle
legalized: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s32_cycle
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gprregbank(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gprregbank(s32) = COPY $r7
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gprregbank(s32) = COPY $r8
  ; CHECK-NEXT:   [[C:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:gprregbank(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:gprregbank(s32) = G_AND [[ICMP]], [[C1]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gprregbank(s32) = G_PHI [[COPY]](s32), %bb.0, %8(s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:gprregbank(s32) = G_PHI [[COPY]](s32), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.1
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7, $r8
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = COPY $r8
    %3:_(s32) = G_CONSTANT i32 0
    %4:_(s32) = G_ICMP intpred(eq), %2, %3
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(s32) = G_AND %4, %5
    G_BRCOND %6, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2
    %7:_(s32) = G_PHI %0, %bb.0, %8, %bb.2
    G_BR %bb.2

  bb.2:
    successors: %bb.1
    %8:_(s32) = G_PHI %0, %bb.0, %7, %bb.1
    G_BR %bb.1
...

---
name: phi_p0
legalized: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_p0
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ptrregbank(p0) = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gprregbank(s32) = COPY $r6
  ; CHECK-NEXT:   [[C:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:gprregbank(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:gprregbank(s32) = G_AND [[ICMP]], [[C1]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:ptrregbank(p0) = COPY [[COPY1]](p0)
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:ptrregbank(p0) = G_PHI [[COPY]](p0), %bb.0, [[COPY3]](p0), %bb.1
  ; CHECK-NEXT:   $p0 = COPY [[PHI]](p0)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $r6

    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s32) = COPY $r6
    %3:_(s32) = G_CONSTANT i32 0
    %4:_(s32) = G_ICMP intpred(eq), %2, %3
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(s32) = G_AND %4, %5
    G_BRCOND %4, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %7:_(p0) = COPY %1
    G_BR %bb.2

  bb.2:
    %8:_(p0) = G_PHI %0, %bb.0, %7, %bb.1
    $p0 = COPY %8
...

---
name: phi_s20
legalized: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s20
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $m1, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gprregbank(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:modregbank(s20) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:modregbank(s20) = COPY $m1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gprregbank(s32) = COPY $r8
  ; CHECK-NEXT:   [[C:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:gprregbank(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:gprregbank(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:gprregbank(s32) = G_AND [[ICMP]], [[C1]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:modregbank(s20) = COPY [[COPY1]](s20)
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:modregbank(s20) = G_PHI [[TRUNC]](s20), %bb.0, [[COPY3]](s20), %bb.1
  ; CHECK-NEXT:   $m1 = COPY [[PHI]](s20)
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r0, $m1, $r8

    %9:_(s32) = COPY $r0
    %0:_(s20) = G_TRUNC %9
    %1:_(s20) = COPY $m1
    %2:_(s32) = COPY $r8
    %3:_(s32) = G_CONSTANT i32 0
    %4:_(s32) = G_ICMP intpred(eq), %2, %3
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(s32) = G_AND %4, %5
    G_BRCOND %4, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %7:_(s20) = COPY %1
    G_BR %bb.2

  bb.2:
    %8:_(s20) = G_PHI %0, %bb.0, %7, %bb.1
    $m1 = COPY %8
...
