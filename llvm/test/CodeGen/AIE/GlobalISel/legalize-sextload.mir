# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: test_load_s32_s8
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s32_s8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8), align 4)
    ; CHECK-NEXT: $r0 = COPY [[SEXTLOAD]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_SEXTLOAD %0 :: (load (s8), align 4)
    $r0 = COPY %1
...

---
name: test_load_s32_s16
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s32_s16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s16), align 4)
    ; CHECK-NEXT: $r0 = COPY [[SEXTLOAD]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_SEXTLOAD %0 :: (load (s16), align 4)
    $r0 = COPY %1
...

---
name: test_load_s64_s8
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s64_s8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8), align 4)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SEXTLOAD]], [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[SEXTLOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s64) = G_SEXTLOAD %0 :: (load (s8), align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1
    $r0 = COPY %2
    $r1 = COPY %3
...

---
name: test_load_s64_s16
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s64_s16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s16), align 4)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SEXTLOAD]], [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[SEXTLOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s64) = G_SEXTLOAD %0 :: (load (s16), align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1
    $r0 = COPY %2
    $r1 = COPY %3
...

---
name: test_load_s64_s32
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s64_s32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[LOAD]], [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s64) = G_SEXTLOAD %0 :: (load (s32), align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1
    $r0 = COPY %2
    $r1 = COPY %3
...

---
name: test_load_s64_s33
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s64_s33
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s20)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s8) from unknown-address + 4, align 4)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[C]], [[LOAD]]
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[LOAD1]], [[C]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[OR]], [[C2]](s32)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[OR1]], [[C2]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[OR]], [[C3]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[SHL1]], [[LSHR]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[SHL]], [[C2]](s32)
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[OR2]], [[C3]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[LSHR1]], [[SHL2]]
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[OR2]], [[C2]](s32)
    ; CHECK-NEXT: $r0 = COPY [[OR3]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s64) = G_SEXTLOAD %0 :: (load (s33), align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1
    $r0 = COPY %2
    $r1 = COPY %3
...

---
name: test_load_s32_s16_unaligned
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s32_s16_unaligned
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[PTR_ADD]](p0) :: (load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[SEXTLOAD]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: $r0 = COPY [[OR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s32) = G_SEXTLOAD %0 :: (load (s16), align 1)
    $r0 = COPY %1
...

---
name: test_load_s33_s32
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s33_s32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[LOAD]], [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s33) = G_SEXTLOAD %0 :: (load (s32), align 4)
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32), %4:_(s32) = G_UNMERGE_VALUES %2
    $r0 = COPY %3
    $r1 = COPY %4
...

---
name: test_load_s33_s16
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s33_s16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s16), align 4)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SEXTLOAD]], [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[SEXTLOAD]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s33) = G_SEXTLOAD %0 :: (load (s16), align 4)
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32), %4:_(s32) = G_UNMERGE_VALUES %2
    $r0 = COPY %3
    $r1 = COPY %4
...

---
name: test_load_s33_s17
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s33_s17
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s16), align 4)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s8) from unknown-address + 2, align 2)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[LOAD]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[OR]], [[C2]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C2]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C3]](s32)
    ; CHECK-NEXT: $r0 = COPY [[ASHR]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR1]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s33) = G_SEXTLOAD %0 :: (load (s17), align 4)
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32), %4:_(s32) = G_UNMERGE_VALUES %2
    $r0 = COPY %3
    $r1 = COPY %4
...

---
name: test_load_s33_s17_unaligned
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: test_load_s33_s17_unaligned
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[PTR_ADD]](p0) :: (load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[ZEXTLOAD1]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 2
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s20)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD1]](p0) :: (load (s8) from unknown-address + 2)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[LOAD]], [[C3]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[SHL1]], [[OR]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[OR1]], [[C4]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL2]], [[C4]](s32)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL2]], [[C5]](s32)
    ; CHECK-NEXT: $r0 = COPY [[ASHR]](s32)
    ; CHECK-NEXT: $r1 = COPY [[ASHR1]](s32)
    %0:_(p0) = COPY $p0
    %1:_(s33) = G_SEXTLOAD %0 :: (load (s17), align 1)
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32), %4:_(s32) = G_UNMERGE_VALUES %2
    $r0 = COPY %3
    $r1 = COPY %4
...
