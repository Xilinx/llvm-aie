# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-postlegalizer-generic-combiner -run-pass=aie-cluster-base-address -run-pass=aie2-postlegalizer-custom-combiner %s -verify-machineinstrs -o - | FileCheck %s

---
name:            loads_stores_with_multiple_base_ptrs_single_bb_postinc_combine
body:             |
  bb.1.entry:
    liveins: $p0, $p1
    ; CHECK-LABEL: name: loads_stores_with_multiple_base_ptrs_single_bb_postinc_combine
    ; CHECK: liveins: $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 12
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C1]](s20) :: (load (s32))
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_POSTINC_LOAD]](s32), [[COPY1]], [[C2]](s20) :: (store (s32))
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(s32) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (s32))
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
    ; CHECK-NEXT: [[AIE_POSTINC_STORE1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_OFFSET_LOAD]](s32), [[AIE_POSTINC_STORE]], [[C3]](s20) :: (store (s32))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[AIE_POSTINC_LOAD1]](p0) :: (load (s32))
    ; CHECK-NEXT: G_STORE [[LOAD]](s32), [[AIE_POSTINC_STORE1]](p0) :: (store (s32))
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s20) = G_CONSTANT i20 4
    %3:_(p0) = G_PTR_ADD %0:_, %2:_(s20)
    %4:_(s32) = G_LOAD %0:_(p0) :: (load (s32), align 4)
    G_STORE %4:_(s32), %1:_(p0) :: (store (s32), align 4)
    %5:_(s20) = G_CONSTANT i20 8
    %6:_(p0) = G_PTR_ADD %1:_, %5:_(s20)
    %7:_(s20) = G_CONSTANT i20 12
    %8:_(p0) = G_PTR_ADD %0:_, %7:_(s20)
    %9:_(s32) = G_LOAD %3:_(p0) :: (load (s32), align 4)
    G_STORE %9:_(s32), %6:_(p0) :: (store (s32), align 4)
    %10:_(s20) = G_CONSTANT i20 16
    %11:_(p0) = G_PTR_ADD %1:_, %10:_(s20)
    %12:_(s20) = G_CONSTANT i20 32
    %13:_(p0) = G_PTR_ADD %0:_, %12:_(s20)
    %14:_(s32) = G_LOAD %8:_(p0) :: (load (s32), align 4)
    G_STORE %14:_(s32), %11:_(p0) :: (store (s32), align 4)
...

---
name:            multiple_ptradds_between_loads_or_stores_single_bb_postinc_combine
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: multiple_ptradds_between_loads_or_stores_single_bb_postinc_combine
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 12
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C1]](s20) :: (load (s32))
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_POSTINC_LOAD]](s32), [[COPY1]], [[C2]](s20) :: (store (s32))
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(s32) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (s32))
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
    ; CHECK-NEXT: [[AIE_POSTINC_STORE1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_OFFSET_LOAD]](s32), [[AIE_POSTINC_STORE]], [[C3]](s20) :: (store (s32))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[AIE_POSTINC_LOAD1]](p0) :: (load (s32))
    ; CHECK-NEXT: G_STORE [[LOAD]](s32), [[AIE_POSTINC_STORE1]](p0) :: (store (s32))
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s20) = G_CONSTANT i20 4
    %3:_(p0) = G_PTR_ADD %0:_, %2:_(s20)
    %4:_(s32) = G_LOAD %0:_(p0) :: (load (s32), align 4)
    G_STORE %4:_(s32), %1:_(p0) :: (store (s32), align 4)
    %5:_(s20) = G_CONSTANT i20 8
    %6:_(p0) = G_PTR_ADD %1:_, %5:_(s20)
    %7:_(s20) = G_CONSTANT i20 12
    %8:_(p0) = G_PTR_ADD %0:_, %7:_(s20)
    %9:_(s32) = G_LOAD %3:_(p0) :: (load (s32), align 4)
    G_STORE %9:_(s32), %6:_(p0) :: (store (s32), align 4)
    %10:_(s20) = G_CONSTANT i20 16
    %11:_(p0) = G_PTR_ADD %1:_, %10:_(s20)
    %12:_(s20) = G_CONSTANT i20 24
    ; This ptradd will not change.
    %13:_(p0) = G_PTR_ADD %1:_, %12:_(s20)
    %14:_(s20) = G_CONSTANT i20 32
    %15:_(p0) = G_PTR_ADD %0:_, %14:_(s20)
    %16:_(s32) = G_LOAD %8:_(p0) :: (load (s32), align 4)
    G_STORE %16:_(s32), %11:_(p0) :: (store (s32), align 4)
...

# Test to show that inspite of having pre-increment combine opportunities,
# we prefer post-increment combines to support base addr chaining.

# Had we preferred pre-inc combines, we would have the mir something like this -
#
# [[COPY:%[0-9]+]]:_(p0) = COPY $p0
# [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
# [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
# [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 12
# [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]](p0), [[C1]] :: (load (s32))
# [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
# [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 16
# [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_POSTINC_LOAD]], [[COPY1]](p0), [[C3]](s20) :: (store (s32))
# [[AIE_OFFSET_LOAD:%[0-9]+]]:_(s32) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (s32))
# G_AIE_OFFSET_STORE [[AIE_OFFSET_LOAD]](s32), [[COPY1]](p0), [[C2]](s20) :: (store (s32))
# [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[AIE_POSTINC_LOAD1]](p0) :: (load (s32))
# G_STORE [[LOAD]](s32), [[AIE_POSTINC_STORE]](p0) :: (store (s32))
#
---
name:            prefer_postinc_combines
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: prefer_postinc_combines
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 12
    ; CHECK-NEXT: [[AIE_POSTINC_LOAD:%[0-9]+]]:_(s32), [[AIE_POSTINC_LOAD1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_LOAD [[COPY]], [[C1]](s20) :: (load (s32))
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
    ; CHECK-NEXT: [[AIE_POSTINC_STORE:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_POSTINC_LOAD]](s32), [[COPY1]], [[C2]](s20) :: (store (s32))
    ; CHECK-NEXT: [[AIE_OFFSET_LOAD:%[0-9]+]]:_(s32) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (s32))
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 8
    ; CHECK-NEXT: [[AIE_POSTINC_STORE1:%[0-9]+]]:_(p0) = G_AIE_POSTINC_STORE [[AIE_OFFSET_LOAD]](s32), [[AIE_POSTINC_STORE]], [[C3]](s20) :: (store (s32))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[AIE_POSTINC_LOAD1]](p0) :: (load (s32))
    ; CHECK-NEXT: G_STORE [[LOAD]](s32), [[AIE_POSTINC_STORE1]](p0) :: (store (s32))
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s20) = G_CONSTANT i20 4
    %3:_(p0) = G_PTR_ADD %0:_, %2:_(s20)
    %4:_(s32) = G_LOAD %0:_(p0) :: (load (s32), align 4)
    G_STORE %4:_(s32), %1:_(p0) :: (store (s32), align 4)
    %5:_(s20) = G_CONSTANT i20 8
    %6:_(p0) = G_PTR_ADD %1:_, %5:_(s20)
    %7:_(s20) = G_CONSTANT i20 12
    %8:_(p0) = G_PTR_ADD %0:_, %7:_(s20)
    %9:_(s32) = G_LOAD %3:_(p0) :: (load (s32), align 4)
    G_STORE %9:_(s32), %6:_(p0) :: (store (s32), align 4)
    %10:_(s20) = G_CONSTANT i20 16
    %11:_(p0) = G_PTR_ADD %1:_, %10:_(s20)
    %14:_(s20) = G_CONSTANT i20 32
    %15:_(p0) = G_PTR_ADD %0:_, %14:_(s20)
    %16:_(s32) = G_LOAD %8:_(p0) :: (load (s32), align 4)
    G_STORE %16:_(s32), %11:_(p0) :: (store (s32), align 4)
...
