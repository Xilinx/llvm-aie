; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -stop-before=instruction-select %s -o - 2>&1 | FileCheck %s

; Test if addrspace is correctly propagated after transformations, like memory op.
; split.

define dso_local noundef<16 x i32> @addrspace_propagation(ptr addrspace(6) nocapture readonly %ptr) local_unnamed_addr #0 {
  ; CHECK-LABEL: name: addrspace_propagation
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:modregbank(s20) = G_CONSTANT i20 128
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:modregbank(s20) = G_CONSTANT i20 160
  ; CHECK-NEXT:   [[AIE_OFFSET_LOAD:%[0-9]+]]:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C1]](s20) :: (load (<8 x s32>) from %ir.arrayidx.1 + 32, addrspace 6)
  ; CHECK-NEXT:   [[AIE_OFFSET_LOAD1:%[0-9]+]]:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD [[COPY]](p0), [[C]](s20) :: (load (<8 x s32>) from %ir.arrayidx.1, addrspace 6)
  ; CHECK-NEXT:   [[CONCAT_VECTORS:%[0-9]+]]:vregbank(<16 x s32>) = G_CONCAT_VECTORS [[AIE_OFFSET_LOAD1]](<8 x s32>), [[AIE_OFFSET_LOAD]](<8 x s32>)
  ; CHECK-NEXT:   $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $x0
entry:
  %arrayidx.1 = getelementptr inbounds [16 x <16 x i32>], ptr addrspace(6) %ptr, i32 0, i32 2
  %0 = load <16 x i32>, ptr addrspace(6) %arrayidx.1, align 32
  ret <16 x i32> %0
}
