# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: umax_s32
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: umax_s32
    ; CHECK: liveins: $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[SELECT]](s32)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = G_UMAX %0, %1
    $r0 = COPY %2(s32)
...

---
name: umax_8
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: umax_8
    ; CHECK: liveins: $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[SELECT]](s32)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s8) = G_TRUNC %0(s32)
    %3:_(s8) = G_TRUNC %1(s32)
    %4:_(s8) = G_UMAX %2, %3
    %5:_(s32) = G_ANYEXT %4(s8)
    $r0 = COPY %5(s32)
...

---
name: umax_16
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: umax_16
    ; CHECK: liveins: $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[SELECT]](s32)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s16) = G_TRUNC %0(s32)
    %3:_(s16) = G_TRUNC %1(s32)
    %4:_(s16) = G_UMAX %2, %3
    %5:_(s32) = G_ANYEXT %4(s16)
    $r0 = COPY %5(s32)
...

---
name: umax_17
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: umax_17
    ; CHECK: liveins: $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 131071
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP]](s32), [[AND]], [[AND1]]
    ; CHECK-NEXT: $r0 = COPY [[SELECT]](s32)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s17) = G_TRUNC %0(s32)
    %3:_(s17) = G_TRUNC %1(s32)
    %4:_(s17) = G_UMAX %2, %3
    %5:_(s32) = G_ANYEXT %4(s17)
    $r0 = COPY %5(s32)
...

---
name: umax_64
body: |
  bb.0:
    liveins: $r6, $r7, $r8, $r9
    ; CHECK-LABEL: name: umax_64
    ; CHECK: liveins: $r6, $r7, $r8, $r9
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[SELECT]](s32), [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[SELECT]](s32), [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $r0 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $r1 = COPY [[SELECT2]](s32)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = COPY $r8
    %3:_(s32) = COPY $r9
    %4:_(s64) = G_MERGE_VALUES %0(s32), %1(s32)
    %5:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %6:_(s64) = G_UMAX %4, %5
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $r0 = COPY %7(s32)
    $r1 = COPY %8(s32)
...

---
name: umax_48
body: |
  bb.0:
    liveins: $r6, $r7, $r8, $r9
    ; CHECK-LABEL: name: umax_48
    ; CHECK: liveins: $r6, $r7, $r8, $r9
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND1]](s32), [[AND3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND1]](s32), [[AND3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[SELECT]](s32), [[AND]], [[AND2]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[SELECT]](s32), [[AND1]], [[AND3]]
    ; CHECK-NEXT: $r0 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $r1 = COPY [[SELECT2]](s32)
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s32) = COPY $r8
    %3:_(s32) = COPY $r9
    %4:_(s64) = G_MERGE_VALUES %0(s32), %1(s32)
    %5:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %6:_(s48) = G_TRUNC %4(s64)
    %7:_(s48) = G_TRUNC %5(s64)
    %8:_(s48) = G_UMAX %6, %7
    %9:_(s64) = G_ANYEXT %8(s48)
    %10:_(s32), %11:_(s32) = G_UNMERGE_VALUES %9(s64)
    $r0 = COPY %10(s32)
    $r1 = COPY %11(s32)
...
