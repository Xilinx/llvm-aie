# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: test_icmp_s32
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_icmp_s32
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[C]](s32), [[COPY]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = COPY $r6
    %2:_(s1) = G_ICMP intpred(ne), %0, %1
    %3:_(s32) = G_ZEXT %2
    $r0 = COPY %3
...

---
name: test_icmp_s64
body: |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: test_icmp_s64
    ; CHECK: liveins: $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[COPY1]], [[C]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[OR]](s32), [[C]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    %0:_(s64) = G_CONSTANT i64 0
    %1:_(s32) = COPY $r6
    %2:_(s32) = COPY $r7
    %3:_(s64) = G_MERGE_VALUES %1, %2
    %4:_(s1) = G_ICMP intpred(ne), %3, %0
    %5:_(s32) = G_ZEXT %4
    $r0 = COPY %5
...

---
name: test_icmp_s16
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_icmp_s16
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[C]](s32), [[AND]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    %0:_(s16) = G_CONSTANT i16 0
    %1:_(s32) = COPY $r6
    %2:_(s16) = G_TRUNC %1
    %3:_(s1) = G_ICMP intpred(ne), %0, %2
    %4:_(s32) = G_ZEXT %3
    $r0 = COPY %4
...

---
name: test_icmp_s8
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_icmp_s8
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[C]](s32), [[AND]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    %0:_(s8) = G_CONSTANT i8 0
    %1:_(s32) = COPY $r6
    %2:_(s8) = G_TRUNC %1
    %3:_(s1) = G_ICMP intpred(ne), %0, %2
    %4:_(s32) = G_ZEXT %3
    $r0 = COPY %4
...

---
name: test_icmp_s24
body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: test_icmp_s24
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16777215
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[C]](s32), [[AND]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    %0:_(s24) = G_CONSTANT i24 0
    %1:_(s32) = COPY $r6
    %2:_(s24) = G_TRUNC %1
    %3:_(s1) = G_ICMP intpred(ne), %0, %2
    %4:_(s32) = G_ZEXT %3
    $r0 = COPY %4
...

---
name: test_icmp_p0
body: |
  bb.0:
    liveins: $p0, $p1
    ; CHECK-LABEL: name: test_icmp_p0
    ; CHECK: liveins: $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY]](p0), [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s1) = G_ICMP intpred(ne), %0, %1
    %3:_(s32) = G_ZEXT %2
    $r0 = COPY %3
...
