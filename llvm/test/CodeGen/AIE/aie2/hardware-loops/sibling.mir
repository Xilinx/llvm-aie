# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -O2 -mtriple=aie2 -run-pass=aie-hardware-loops %s -o - | FileCheck %s

---
name:            sibling
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: sibling
  ; CHECK: bb.0 (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r2 = MOVA_lda_cg 0
  ; CHECK-NEXT:   renamable $r4 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))
  ; CHECK-NEXT:   $r5 = MOV_mv_scl $r2
  ; CHECK-NEXT:   renamable $r3 = MOVA_lda_cg 2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1 (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2, $r4, $r5, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r6 = LSHL renamable $r5, renamable $r3
  ; CHECK-NEXT:   $m0 = MOV_mv_scl killed $r6
  ; CHECK-NEXT:   $p2 = MOV_mv_scl $p1
  ; CHECK-NEXT:   renamable $p2 = PADDA_lda_ptr_inc_idx killed renamable $p2, killed renamable $m0
  ; CHECK-NEXT:   renamable $r6 = LDA_dms_lda_idx_imm killed renamable $p2, 0 :: (load (s32))
  ; CHECK-NEXT:   renamable $r4 = nsw ADD killed renamable $r4, killed renamable $r6, implicit-def $srcarry
  ; CHECK-NEXT:   ST_dms_sts_idx_imm renamable $r4, renamable $p0, 0 :: (store (s32))
  ; CHECK-NEXT:   renamable $r5 = nuw nsw ADD_add_r_ri killed renamable $r5, 1, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $p2 = MOVXM_lng_cg %bb.1
  ; CHECK-NEXT:   $r0 = PseudoJNZD $r0, $p2, implicit-def $srcarry
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2 (align 16):
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r0 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3 (align 16):
  ; CHECK-NEXT:   successors: %bb.3(0x7c000000), %bb.4(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r4 = LSHL renamable $r2, renamable $r3
  ; CHECK-NEXT:   $m0 = MOV_mv_scl killed $r4
  ; CHECK-NEXT:   $p2 = MOV_mv_scl $p1
  ; CHECK-NEXT:   renamable $p2 = PADDA_lda_ptr_inc_idx killed renamable $p2, killed renamable $m0
  ; CHECK-NEXT:   renamable $r4 = LDA_dms_lda_idx_imm killed renamable $p2, 0 :: (load (s32))
  ; CHECK-NEXT:   renamable $r0 = nsw ADD killed renamable $r0, killed renamable $r4, implicit-def $srcarry
  ; CHECK-NEXT:   ST_dms_sts_idx_imm renamable $r0, renamable $p0, 0 :: (store (s32))
  ; CHECK-NEXT:   renamable $r2 = nuw nsw ADD_add_r_ri killed renamable $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $p2 = MOVXM_lng_cg %bb.3
  ; CHECK-NEXT:   $r1 = PseudoJNZD $r1, $p2, implicit-def $srcarry
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4 (align 16):
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0 (align 16):
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0, $r1

    renamable $r2 = MOVA_lda_cg 0
    renamable $r4 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))
    $r5 = MOV_mv_scl $r2
    renamable $r3 = MOVA_lda_cg 2

  bb.1 (align 16):
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r0, $r1, $r2, $r4, $r5, $r3

    renamable $r6 = LSHL renamable $r5, renamable $r3
    $m0 = MOV_mv_scl killed $r6
    $p2 = MOV_mv_scl $p1
    renamable $p2 = PADDA_lda_ptr_inc_idx killed renamable $p2, killed renamable $m0
    renamable $r6 = LDA_dms_lda_idx_imm killed renamable $p2, 0 :: (load (s32))
    renamable $r4 = nsw ADD killed renamable $r4, killed renamable $r6, implicit-def $srcarry
    ST_dms_sts_idx_imm renamable $r4, renamable $p0, 0 :: (store (s32))
    renamable $r5 = nuw nsw ADD_add_r_ri killed renamable $r5, 1, implicit-def $srcarry
    renamable $p2 = MOVXM_lng_cg %bb.1
    renamable $r0 = LoopDec killed renamable $r0, implicit-def $srcarry
    LoopJNZ renamable $r0, killed renamable $p2
    PseudoJ_jump_imm %bb.2

  bb.2 (align 16):
    successors: %bb.3(0x80000000)
    liveins: $p0, $p1, $r1, $r2, $r3

    renamable $r0 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))

  bb.3 (align 16):
    successors: %bb.3(0x7c000000), %bb.4(0x04000000)
    liveins: $p0, $p1, $r0, $r1, $r2, $r3

    renamable $r4 = LSHL renamable $r2, renamable $r3
    $m0 = MOV_mv_scl killed $r4
    $p2 = MOV_mv_scl $p1
    renamable $p2 = PADDA_lda_ptr_inc_idx killed renamable $p2, killed renamable $m0
    renamable $r4 = LDA_dms_lda_idx_imm killed renamable $p2, 0 :: (load (s32))
    renamable $r0 = nsw ADD killed renamable $r0, killed renamable $r4, implicit-def $srcarry
    ST_dms_sts_idx_imm renamable $r0, renamable $p0, 0 :: (store (s32))
    renamable $r2 = nuw nsw ADD_add_r_ri killed renamable $r2, 1, implicit-def $srcarry
    renamable $p2 = MOVXM_lng_cg %bb.3
    renamable $r1 = LoopDec killed renamable $r1, implicit-def $srcarry
    LoopJNZ renamable $r1, killed renamable $p2
    PseudoJ_jump_imm %bb.4

  bb.4 (align 16):
    PseudoRET implicit $lr
...
