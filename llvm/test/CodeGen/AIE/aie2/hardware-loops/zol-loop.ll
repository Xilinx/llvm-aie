; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

; RUN: llc -O2 -mtriple=aie2 --enable-aie-hardware-loops --enable-aie-zero-overhead-loops \
; RUN:    --aie-force-hl-gen=true %s -o - | FileCheck %s

define void @simple_loop(i32 noundef %n, ptr nocapture readonly %in, ptr nocapture writeonly %out) {
; CHECK-LABEL: simple_loop:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #0; nopb ; nopxm
; CHECK-NEXT:    ge r2, r1, r0
; CHECK-NEXT:    jnz r2, #.LBB0_3
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %for.body.preheader
; CHECK-NEXT:    add.nc lc, r0, #0
; CHECK-NEXT:    movxm ls, #.LBB0_2
; CHECK-NEXT:    movxm le, #.L_LEnd0
; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopb ; mova r0, #2; nops ; movx r2, #1; nopm ; nopv
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_2: // %for.body
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lda r3, [p0, #0]; nopb ; nopx
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    lshl r4, r1, r0
; CHECK-NEXT:    add r1, r1, #1
; CHECK-NEXT:    add r3, r2, r3; mov dj0, r4
; CHECK-NEXT:  .L_LEnd0:
; CHECK-NEXT:    nopb ; nopa ; st r3, [p1, dj0]; add r2, r2, #-1; nopm ; nopv
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_3: // %for.cond.cleanup
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void

for.body:                                         ; preds = %entry, %for.body
  %i.05 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %0 = load i32, ptr %in, align 4
  %add = sub nsw i32 1, %i.05
  %sub = add i32 %add, %0
  %1 = trunc i32 %i.05 to i20
  %arrayidx = getelementptr inbounds i32, ptr %out, i20 %1
  store i32 %sub, ptr %arrayidx, align 4
  %inc = add nuw nsw i32 %i.05, 1
  %exitcond.not = icmp eq i32 %inc, %n
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
