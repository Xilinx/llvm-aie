# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 -O2 %s --run-pass=block-placement \
# RUN:   -verify-machineinstrs -o - | FileCheck %s

# This stresses block placement to a point where a ZOL doesn't fall-through
# to its exit point. This gives rise to insertBranch of a PseudoLoopEnd with
# a non-null FBB, which should generate an unconditional branch

---
name:            main
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: main
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   $r2 = AND $r1, $r0
  ; CHECK-NEXT:   PseudoJZ $r2, %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   $r3 = AND $r1, $r2
  ; CHECK-NEXT:   $r4 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x40000000), %bb.9(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJZ $r3, %bb.9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.13(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r5 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJNZ $r5, %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.13
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.9:
  ; CHECK-NEXT:   successors: %bb.11(0x40000000), %bb.10(0x40000000)
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r5 = XOR $r1, $r2
  ; CHECK-NEXT:   $r5 = AND $r5, $r2
  ; CHECK-NEXT:   PseudoJNZ $r5, %bb.10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.11:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.13(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r4 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   $r5 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   PseudoJNZ $r5, %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.13
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.10:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.13(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r4 = OR $r4, $r0
  ; CHECK-NEXT:   $r5 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJNZ $r5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.13:
  ; CHECK-NEXT:   $r0 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   successors: %bb.5(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = MOV_RLC_imm10_pseudo 2
  ; CHECK-NEXT:   $r3 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   $r4 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8:
  ; CHECK-NEXT:   successors: %bb.5(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r3 = XOR $r3, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   successors: %bb.6(0x40000000), %bb.8(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r5 = XOR $r1, $r4
  ; CHECK-NEXT:   $r5 = AND $r5, $r4
  ; CHECK-NEXT:   PseudoJNZ $r5, %bb.8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6:
  ; CHECK-NEXT:   successors: %bb.7(0x80000000)
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7:
  ; CHECK-NEXT:   successors: %bb.7(0x40000000), %bb.8(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.7
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.8
  bb.0.entry:
    successors: %bb.1, %bb.4
    liveins: $r1

    $r0 = MOV_RLC_imm10_pseudo 1
    $r2 = AND $r1, $r0
    PseudoJZ $r2, %bb.4
  bb.1:
    successors: %bb.2
    liveins: $r0, $r1

    $r2 = MOV_RLC_imm10_pseudo 1
    $r3 = AND $r1, $r2
    $r4 = MOV_RLC_imm10_pseudo 0

  bb.2:
    successors: %bb.3, %bb.9
    liveins: $r0, $r1, $r2, $r3, $r4

    PseudoJZ $r3, %bb.9

  bb.3:
    successors: %bb.12
    liveins: $r0, $r1, $r2, $r3, $r4

    $r5 = MOV_RLC_imm10_pseudo 0
    PseudoJ_jump_imm %bb.12

  bb.4:
    successors: %bb.5
    liveins: $r0, $r1

    $r2 = MOV_RLC_imm10_pseudo 2
    $r3 = MOV_RLC_imm10_pseudo 0
    $r4 = MOV_RLC_imm10_pseudo 1

  bb.5:
    successors: %bb.6, %bb.8
    liveins: $r0, $r1, $r2, $r3, $r4

    $r5 = XOR $r1, $r4
    $r5 = AND $r5, $r4
    PseudoJNZ $r5, %bb.8

  bb.6:
    successors: %bb.7
    liveins: $r2

    LoopStart $r2

  bb.7:
    successors: %bb.7, %bb.8
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.7

  bb.8:
    successors: %bb.5
    liveins: $r0, $r3

    $r3 = XOR $r3, $r0
    PseudoJ_jump_imm %bb.5

  bb.9:
    successors: %bb.11, %bb.10
    liveins: $r1, $r2

    $r5 = XOR $r1, $r2
    $r5 = AND $r5, $r2
    PseudoJZ $r5, %bb.11

  bb.10:
    successors: %bb.12
    liveins: $r0, $r4

    $r4 = OR $r4, $r0
    $r5 = MOV_RLC_imm10_pseudo 0
    PseudoJ_jump_imm %bb.12

  bb.11:
    successors: %bb.12
    $r4 = MOV_RLC_imm10_pseudo 0
    $r5 = MOV_RLC_imm10_pseudo 1

  bb.12:
    successors: %bb.2, %bb.13
    liveins: $r5
    PseudoJNZ $r5, %bb.2

  bb.13:
    $r0 = MOV_RLC_imm10_pseudo 0
    PseudoRET implicit $lr, implicit $r0
...

