# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
#RUN: llc  -mtriple=aie2  -start-after=postmisched -stop-before=aie-machine-alignment \
# RUN: -verify-machineinstrs %s -o - | FileCheck %s
--- |


  define void @simple(ptr nocapture %out, ptr nocapture readonly %in, i32 noundef %size) {
  for.body.lr.ph:
    %out.promoted = load i32, ptr %out, align 4
    call void @llvm.set.loop.iterations.i32(i32 %size)
    br label %for.body

  for.cond.cleanup:                                 ; preds = %for.body
    ret void

  for.body:                                         ; preds = %for.body, %for.body.lr.ph
    %add7 = phi i32 [ %out.promoted, %for.body.lr.ph ], [ %add, %for.body ]
    %i.06 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
    %0 = trunc i32 %i.06 to i20
    %arrayidx = getelementptr inbounds i32, ptr %in, i20 %0
    %1 = load i32, ptr %arrayidx, align 4
    %add = add nsw i32 %add7, %1
    store i32 %add, ptr %out, align 4
    %inc = add nuw nsw i32 %i.06, 1
    %2 = call i1 @llvm.loop.decrement.i32(i32 1)
    br i1 %2, label %for.body, label %for.cond.cleanup
  }

  declare void @llvm.set.loop.iterations.i32(i32)

  declare i1 @llvm.loop.decrement.i32(i32)

...
---
name:            simple
body:             |
  ; CHECK-LABEL: name: simple
  ; CHECK: bb.0.for.body.lr.ph (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit $p0 {
  ; CHECK-NEXT:     renamable $r1 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.out)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r2 {
  ; CHECK-NEXT:     renamable $r2 = MOVX_alu_cg 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r3 {
  ; CHECK-NEXT:     renamable $r3 = MOV_mv_cg 2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $lc, implicit $r0 {
  ; CHECK-NEXT:     $lc = MOV_mv_scl $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $ls {
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $le {
  ; CHECK-NEXT:     $le = MOVXM_lng_cg <mcsymbol .L_1120>
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r0 {
  ; CHECK-NEXT:     LoopStart killed renamable $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.for.body (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r4, implicit $r2, implicit $r3 {
  ; CHECK-NEXT:     renamable $r4 = LSHL renamable $r2, renamable $r3
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $dj0, implicit killed $r4 {
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl killed $r4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r4, implicit $p1, implicit killed $dj0 {
  ; CHECK-NEXT:     renamable $r4 = LDA_dms_lda_idx renamable $p1, killed renamable $dj0 :: (load (s32) from %ir.arrayidx)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def $srcarry, implicit killed $r1, implicit killed $r4 {
  ; CHECK-NEXT:     renamable $r1 = nsw ADD killed renamable $r1, killed renamable $r4, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r2, implicit-def $srcarry, implicit killed $r2 {
  ; CHECK-NEXT:     renamable $r2 = nuw nsw ADD_add_r_ri killed renamable $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit $r1, implicit $p0 {
  ; CHECK-NEXT:     ST_dms_sts_idx_imm renamable $r1, renamable $p0, 0 :: (store (s32) into %ir.out)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     PseudoLoopEnd %bb.1, <mcsymbol .L_1120>
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.for.cond.cleanup:
  ; CHECK-NEXT:   BUNDLE implicit $lr {
  ; CHECK-NEXT:     RET implicit $lr
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0.for.body.lr.ph (align 16):
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0

      renamable $r1 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.out)
      renamable $r2 = MOVX_alu_cg 0
      renamable $r3 = MOV_mv_cg 2
      $lc = MOV_mv_scl $r0
      $ls = MOVXM_lng_cg %bb.1
      $le = MOVXM_lng_cg <mcsymbol .L_1120>
      LoopStart killed renamable $r0
      PseudoJ_jump_imm %bb.1
  bb.1.for.body (align 16):
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r0, $r1, $r2, $r3

      renamable $r4 = LSHL renamable $r2, renamable $r3
      $dj0 = MOV_mv_scl killed $r4
      renamable $r4 = LDA_dms_lda_idx renamable $p1, killed renamable $dj0 :: (load (s32) from %ir.arrayidx)
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      renamable $r1 = nsw ADD killed renamable $r1, killed renamable $r4, implicit-def $srcarry
      renamable $r2 = nuw nsw ADD_add_r_ri killed renamable $r2, 1, implicit-def $srcarry
      ST_dms_sts_idx_imm renamable $r1, renamable $p0, 0 :: (store (s32) into %ir.out)

  PseudoLoopEnd %bb.1, <mcsymbol .L_1120>

  bb.2.for.cond.cleanup:
      RET implicit $lr
      NOP
      NOP
      NOP
      NOP
      NOP
    DelayedSchedBarrier

...
