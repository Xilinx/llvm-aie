# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=aie-hardware-loops \
# RUN:   --enable-aie-hardware-loops --enable-aie-zero-overhead-loops %s -verify-machineinstrs -o - | \
# RUN:   FileCheck %s
---
name:            nested_simple_loop
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: nested_simple_loop
  ; CHECK: bb.0 (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r2 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))
  ; CHECK-NEXT:   renamable $r3 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r0 = ADD_NC_GPR killed renamable $r0, -1
  ; CHECK-NEXT:   renamable $r4 = MOV_RLC_imm10_pseudo 2
  ; CHECK-NEXT:   renamable $p2 = MOVXM_lng_cg %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1 (align 16):
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r5 = LSHL renamable $r3, renamable $r4
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl killed $r5
  ; CHECK-NEXT:   renamable $p3 = LDA_dms_lda_idx renamable $p1, killed renamable $dj0 :: (load (p0), align 4)
  ; CHECK-NEXT:   $lc = MOV_mv_scl $r1
  ; CHECK-NEXT:   $ls = MOVXM_lng_cg %bb.2
  ; CHECK-NEXT:   $le = MOVXM_lng_cg <mcsymbol .L_1120>
  ; CHECK-NEXT:   renamable $r5 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2 (align 16):
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.3(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4, $r5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r6 = LSHL renamable $r5, renamable $r4
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl killed $r6
  ; CHECK-NEXT:   renamable $r6 = LDA_dms_lda_idx renamable $p3, killed renamable $dj0 :: (load (s32))
  ; CHECK-NEXT:   renamable $r2 = nsw ADD killed renamable $r2, killed renamable $r6, implicit-def $srcarry
  ; CHECK-NEXT:   ST_dms_sts_idx_imm renamable $r2, renamable $p0, 0 :: (store (s32))
  ; CHECK-NEXT:   renamable $r5 = nuw nsw ADD_add_r_ri killed renamable $r5, 1, implicit-def $srcarry
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.4(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r3 = nuw nsw ADD_add_r_ri killed renamable $r3, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r0 = PseudoJNZD $r0, $p2, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4 (align 16):
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0 (align 16):
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0, $r1

    renamable $r2 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))
    renamable $r3 = MOV_RLC_imm10_pseudo 0
    renamable $r0 = ADD_NC_GPR killed renamable $r0, -1
    renamable $r4 = MOV_RLC_imm10_pseudo 2
    renamable $p2 = MOVXM_lng_cg %bb.1

  bb.1 (align 16):
    successors: %bb.2(0x80000000)
    liveins: $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4

    renamable $r5 = LSHL renamable $r3, renamable $r4
    $dj0 = MOV_mv_scl killed $r5
    renamable $p3 = LDA_dms_lda_idx renamable $p1, killed renamable $dj0 :: (load (p0), align 4)
    LoopStart renamable $r1
    renamable $r5 = MOV_RLC_imm10_pseudo 0

  bb.2 (align 16):
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $p0, $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4, $r5

    renamable $r6 = LSHL renamable $r5, renamable $r4
    $dj0 = MOV_mv_scl killed $r6
    renamable $r6 = LDA_dms_lda_idx renamable $p3, killed renamable $dj0 :: (load (s32))
    renamable $r2 = nsw ADD killed renamable $r2, killed renamable $r6, implicit-def $srcarry
    ST_dms_sts_idx_imm renamable $r2, renamable $p0, 0 :: (store (s32))
    renamable $r5 = nuw nsw ADD_add_r_ri killed renamable $r5, 1, implicit-def $srcarry
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.2

  bb.3:
    successors: %bb.1(0x7c000000), %bb.4(0x04000000)
    liveins: $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4

    renamable $r3 = nuw nsw ADD_add_r_ri killed renamable $r3, 1, implicit-def $srcarry
    renamable $r0 = LoopDec killed renamable $r0, implicit-def $srcarry
    LoopJNZ renamable $r0, renamable $p2

  bb.4 (align 16):
    PseudoRET implicit $lr

...
