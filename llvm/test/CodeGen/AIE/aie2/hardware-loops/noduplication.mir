# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -mtriple=aie2 --start-after=instruction-select \
# RUN:   --stop-after=aie-finalize-mi-bundles %s -o - | FileCheck %s

# This code triggered tail duplication into duplicating the LoopStart.
# That made the loop lose its preheader, that made hardwareloop expansion
# bail out, that left a LoopStart leaking into bundle finalization causing
# an assert.

# We could probably expand multiple LoopStarts leading to a single loop
# correctly, but since they take up so much padding space in their 112 byte
# distance, we really shouldn't.
# This test is to make sure the loopstart doesn't get duplicated in the
# first place. That's engineered by an explicit 'isNotDuplicable' MI flag.
# We should only have a single lc/ls/le setting. Any other change is
# admissible and can be freely auto-updated.

---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: main
  ; CHECK: bb.0.entry (align 16):
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r1, $r16, $r17, $r18, $p6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   frame-setup BUNDLE implicit-def $sp, implicit $sp {
  ; CHECK-NEXT:     frame-setup PADDB_sp_imm 32, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r17, implicit $sp {
  ; CHECK-NEXT:     ST_dms_spill killed $r17, -24, implicit $sp :: (store (s32) into %stack.2)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $p6, implicit $sp {
  ; CHECK-NEXT:     renamable $p6 = MOVA_lda_cg 0
  ; CHECK-NEXT:     ST_dms_spill internal killed $p6, -32, implicit $sp :: (store (s32) into %stack.4)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $lr, implicit $p6 {
  ; CHECK-NEXT:     JL_IND renamable $p6, implicit-def $lr
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r16, implicit $sp {
  ; CHECK-NEXT:     ST_dms_spill killed $r16, -20, implicit $sp :: (store (s32) into %stack.1)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r16, implicit killed $r1 {
  ; CHECK-NEXT:     $r16 = MOV_mv_scl killed $r1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $p0, implicit $lr, implicit $sp {
  ; CHECK-NEXT:     $p0 = MOVA_lda_cg 0
  ; CHECK-NEXT:     ST_dms_spill $lr, -16, implicit $sp :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $p1, implicit killed $r18, implicit $sp {
  ; CHECK-NEXT:     $p1 = MOVA_lda_cg 0
  ; CHECK-NEXT:     ST_dms_spill killed $r18, -28, implicit $sp :: (store (s32) into %stack.3)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r18, implicit-def $r17 {
  ; CHECK-NEXT:     renamable $r18 = MOVA_lda_cg 1
  ; CHECK-NEXT:     renamable $r17 = MOVX_alu_cg 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier csr_aie2, implicit killed $p0, implicit killed $p1, implicit-def dead $r0
  ; CHECK-NEXT:   BUNDLE implicit-def $r0, implicit killed $r16, implicit killed $r18 {
  ; CHECK-NEXT:     renamable $r0 = AND killed renamable $r16, killed renamable $r18
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r0 {
  ; CHECK-NEXT:     JNZ killed renamable $r0, %bb.2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p6, $r17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r0, implicit $r0, implicit $p6 {
  ; CHECK-NEXT:     ST_S8_ag_idx_imm renamable $r0, renamable $p6, 0 :: (store (s8) into `ptr null`, align 4)
  ; CHECK-NEXT:     renamable $r0 = MOVX_alu_cg 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2 (align 16):
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $lc, implicit killed $r17 {
  ; CHECK-NEXT:     $lc = MOV_mv_scl killed $r17
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $ls {
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.3
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $le {
  ; CHECK-NEXT:     $le = MOVXM_lng_cg <mcsymbol .L_1120>
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r0 {
  ; CHECK-NEXT:     renamable $r0 = MOVA_lda_cg 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3 (align 16):
  ; CHECK-NEXT:   successors: %bb.3(0x7c000000), %bb.4(0x04000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r0, implicit-def dead $srcarry, implicit killed $r0 {
  ; CHECK-NEXT:     renamable $r0 = ADD_add_r_ri killed renamable $r0, 1, implicit-def dead $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   BUNDLE implicit-def $lr, implicit $sp {
  ; CHECK-NEXT:     $lr = LDA_dms_spill -16, implicit $sp :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $p6, implicit $sp {
  ; CHECK-NEXT:     $p6 = LDA_dms_spill -32, implicit $sp :: (load (s32) from %stack.4)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r18, implicit $sp {
  ; CHECK-NEXT:     $r18 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.3)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r17, implicit $sp {
  ; CHECK-NEXT:     $r17 = LDA_dms_spill -24, implicit $sp :: (load (s32) from %stack.2)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r16, implicit $sp {
  ; CHECK-NEXT:     $r16 = LDA_dms_spill -20, implicit $sp :: (load (s32) from %stack.1)
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit $lr {
  ; CHECK-NEXT:     RET implicit $lr
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   frame-destroy BUNDLE implicit-def $r0, implicit-def $sp, implicit $sp {
  ; CHECK-NEXT:     $r0 = MOVA_lda_cg 0
  ; CHECK-NEXT:     frame-destroy PADDB_sp_imm -32, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r0
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $r1

    %2:er = COPY $r1
    %0:er = MOV_RLC_imm10_pseudo 0
    %4:ep = MOV_PD_imm10_pseudo 0
    %18:er = MOV_RLC_imm10_pseudo 0
    %11:er = MOV_RLC_imm10_pseudo 1
    ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    $p0 = COPY %4
    $p1 = COPY %4
    PseudoJL_IND %4, csr_aie2, implicit-def $lr, implicit $p0, implicit $p1, implicit-def $r0
    ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    %17:er = AND %2, %11
    PseudoJNZ %17, %bb.3
    PseudoJ_jump_imm %bb.2

  bb.2:
    successors: %bb.4(0x80000000)

    ST_S8_ag_idx_imm %18, %4, 0 :: (store (s8) into `ptr null`, align 4)
    PseudoJ_jump_imm %bb.4

  bb.3:
    successors: %bb.4(0x80000000)


  bb.4:
    successors: %bb.6(0x80000000)

    LoopStart %0
    PseudoJ_jump_imm %bb.6

  bb.5:
    $r0 = COPY %0
    PseudoRET implicit $lr, implicit $r0

  bb.6:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)

    %7:er = PHI %9, %bb.6, %0, %bb.4
    %9:er = ADD_add_r_ri %7, 1, implicit-def dead $srcarry
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.6
    PseudoJ_jump_imm %bb.5
...
