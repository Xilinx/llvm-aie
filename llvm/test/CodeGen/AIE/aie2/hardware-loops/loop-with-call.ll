; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

; RUN: llc -O2 -mtriple=aie2 --enable-aie-hardware-loops \
; RUN:   --enable-aie-zero-overhead-loops %s -o - | FileCheck %s
%struct.Symbol = type { [50 x i8], i32 }

@test_buf0 = dso_local local_unnamed_addr global [3 x i32] [i32 1, i32 2, i32 3], align 4
@test_buf1 = dso_local local_unnamed_addr global [3 x [3 x i32]] [[3 x i32] [i32 1, i32 2, i32 3], [3 x i32] [i32 4, i32 5, i32 6], [3 x i32] [i32 7, i32 8, i32 9]], align 4
@symbolCount = dso_local local_unnamed_addr global i32 0, align 4
@symbolTable = dso_local global [1000 x %struct.Symbol] zeroinitializer, align 4
@.str = private unnamed_addr constant [5 x i8] c"IntV\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"FloatV\00", align 1

define dso_local void @_Z16addToSymbolTablePKci(ptr nocapture readonly %name, i32 noundef %dataType) {
; CHECK-LABEL: _Z16addToSymbolTablePKci:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #32; nopx
; CHECK-NEXT:    st p7, [sp, #-32]; movxm p7, #symbolCount // 4-byte Folded Spill
; CHECK-NEXT:    lda r17, [p7, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r1, #56; mov p2, p0
; CHECK-NEXT:    st r17, [sp, #-24]; jl #strcpy // 4-byte Folded Spill
; CHECK-NEXT:    st p6, [sp, #-28]; mul r1, r17, r1 // 4-byte Folded Spill Delay Slot 5
; CHECK-NEXT:    st lr, [sp, #-16]; movxm p6, #symbolTable // 4-byte Folded Spill Delay Slot 4
; CHECK-NEXT:    mov m0, r1 // Delay Slot 3
; CHECK-NEXT:    paddb [p6], m0; st r16, [sp, #-20] // 4-byte Folded Spill Delay Slot 2
; CHECK-NEXT:    or r16, r0, r0; mov p1, p6 // Delay Slot 1
; CHECK-NEXT:    lda lr, [sp, #-16]; nopx // 4-byte Folded Reload
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    lda p6, [sp, #-28] // 4-byte Folded Reload
; CHECK-NEXT:    lda r17, [sp, #-24] // 4-byte Folded Reload
; CHECK-NEXT:    lda r16, [sp, #-20] // 4-byte Folded Reload
; CHECK-NEXT:    lda p7, [sp, #-32] // 4-byte Folded Reload
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    st r16, [p6, #52] // Delay Slot 4
; CHECK-NEXT:    add r0, r17, #1 // Delay Slot 3
; CHECK-NEXT:    st r0, [p7, #0] // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %0 = load i32, ptr @symbolCount, align 4
  %1 = trunc i32 %0 to i20
  %arrayidx = getelementptr inbounds [1000 x %struct.Symbol], ptr @symbolTable, i20 0, i20 %1
  %call = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %arrayidx, ptr noundef nonnull dereferenceable(1) %name)
  %dataType3 = getelementptr inbounds [1000 x %struct.Symbol], ptr @symbolTable, i20 0, i20 %1, i32 1
  store i32 %dataType, ptr %dataType3, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, ptr @symbolCount, align 4
  ret void
}

declare dso_local ptr @strcpy(ptr noalias returned writeonly, ptr noalias nocapture readonly)

define dso_local void @_Z5test4i(i32 noundef %n) {
; CHECK-LABEL: _Z5test4i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #32; nopxm
; CHECK-NEXT:    mova r1, #0; st r16, [sp, #-24] // 4-byte Folded Spill
; CHECK-NEXT:    ge r0, r1, r0; mov r16, r0
; CHECK-NEXT:    jnz r0, #.LBB1_3
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st lr, [sp, #-20] // 4-byte Folded Spill Delay Slot 3
; CHECK-NEXT:    st p6, [sp, #-28] // 4-byte Folded Spill Delay Slot 2
; CHECK-NEXT:    st p7, [sp, #-32] // 4-byte Folded Spill Delay Slot 1
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    nopa ; movxm p6, #.L.str
; CHECK-NEXT:    movxm p7, #.L.str.1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB1_2: // %for.body
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    nopb ; nopa ; nops ; jl #_Z16addToSymbolTablePKci; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mova r0, #0; mov p0, p6 // Delay Slot 1
; CHECK-NEXT:    nopb ; nopa ; nops ; jl #_Z16addToSymbolTablePKci; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mova r0, #1; mov p0, p7 // Delay Slot 1
; CHECK-NEXT:    nopb ; nopa ; nops ; add r16, r16, #-1; nopm ; nopv
; CHECK-NEXT:    jnz r16, #.LBB1_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB1_3: // %for.cond.cleanup
; CHECK-NEXT:    lda lr, [sp, #-20]; nopb ; nopxm ; nops // 4-byte Folded Reload
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    lda p7, [sp, #-32] // 4-byte Folded Reload
; CHECK-NEXT:    lda p6, [sp, #-28] // 4-byte Folded Reload
; CHECK-NEXT:    lda r16, [sp, #-24] // 4-byte Folded Reload
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %cmp2 = icmp sgt i32 %n, 0
  br i1 %cmp2, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void

for.body:                                         ; preds = %entry, %for.body
  %i.03 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  tail call void @_Z16addToSymbolTablePKci(ptr nonnull @.str, i32 noundef 0)
  tail call void @_Z16addToSymbolTablePKci(ptr nonnull @.str.1, i32 noundef 1)
  %inc = add nuw nsw i32 %i.03, 1
  %exitcond.not = icmp eq i32 %inc, %n
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
