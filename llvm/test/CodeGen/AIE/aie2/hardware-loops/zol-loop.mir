# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=aie-hardware-loops \
# RUN:   --enable-aie-hardware-loops --enable-aie-zero-overhead-loops %s -verify-machineinstrs -o - | \
# RUN:   FileCheck %s
---
name:            simple_loop
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: simple_loop
  ; CHECK: bb.0.entry (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.3(0x30000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r1 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r2 = GE renamable $r1, renamable $r0
  ; CHECK-NEXT:   PseudoJNZ killed renamable $r2, %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $lc = ADD_NC $r0, 0
  ; CHECK-NEXT:   $ls = MOVXM_lng_cg %bb.2
  ; CHECK-NEXT:   $le = MOVXM_lng_cg <mcsymbol .L_1120>
  ; CHECK-NEXT:   renamable $r0 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   renamable $r2 = MOV_RLC_imm10_pseudo 2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2 (align 16):
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.3(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r3 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))
  ; CHECK-NEXT:   renamable $r3 = ADD renamable $r0, killed renamable $r3, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $r4 = LSHL renamable $r1, renamable $r2
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl killed $r4
  ; CHECK-NEXT:   renamable $r1 = nuw nsw ADD_add_r_ri killed renamable $r1, 1, implicit-def $srcarry
  ; CHECK-NEXT:   ST_dms_sts_idx killed renamable $r3, renamable $p1, killed renamable $dj0 :: (store (s32))
  ; CHECK-NEXT:   renamable $r0 = nsw ADD_add_r_ri killed renamable $r0, -1, implicit-def $srcarry
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3 (align 16):
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry (align 16):
    successors: %bb.1(0x50000000), %bb.3(0x30000000)
    liveins: $p0, $p1, $r0

    renamable $r1 = MOV_RLC_imm10_pseudo 0
    renamable $r2 = GE renamable $r1, renamable $r0
    PseudoJNZ killed renamable $r2, %bb.3

  bb.1:
    successors: %bb.2(0x80000000)
    liveins: $p0, $p1, $r0, $r1

    LoopStart killed renamable $r0, 0
    renamable $r0 = MOV_RLC_imm10_pseudo 1
    renamable $r2 = MOV_RLC_imm10_pseudo 2

  bb.2 (align 16):
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $p0, $p1, $r0, $r1, $r2

    renamable $r3 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32))
    renamable $r3 = ADD renamable $r0, killed renamable $r3, implicit-def $srcarry
    renamable $r4 = LSHL renamable $r1, renamable $r2
    $dj0 = MOV_mv_scl killed $r4
    renamable $r1 = nuw nsw ADD_add_r_ri killed renamable $r1, 1, implicit-def $srcarry
    ST_dms_sts_idx killed renamable $r3, renamable $p1, killed renamable $dj0 :: (store (s32))
    renamable $r0 = nsw ADD_add_r_ri killed renamable $r0, -1, implicit-def $srcarry
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.2

  bb.3 (align 16):
    PseudoRET implicit $lr

...
