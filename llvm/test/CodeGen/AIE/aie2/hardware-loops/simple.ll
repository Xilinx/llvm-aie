; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 --enable-aie-zero-overhead-loops=false \
; RUN:    --aie-force-hl-gen=true %s -o - | FileCheck %s

define void @simple(ptr nocapture %out, ptr nocapture readonly %in, i32 noundef %size) {
; CHECK-LABEL: simple:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %for.body.lr.ph
; CHECK-NEXT:    mova r2, #0; nopb ; nopxm ; nops
; CHECK-NEXT:    add.nc r0, r0, #-1
; CHECK-NEXT:    mova r3, #2
; CHECK-NEXT:    movxm p2, #.LBB0_1
; CHECK-NEXT:    lda r1, [p0, #0]
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_1: // %for.body
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    nopb ; nopa ; nops ; lshl r4, r2, r3; nopm ; nopv
; CHECK-NEXT:    mov dj0, r4
; CHECK-NEXT:    lda r4, [p1, dj0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    jnzd r0, r0, p2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    add r2, r2, #1 // Delay Slot 3
; CHECK-NEXT:    add r1, r1, r4 // Delay Slot 2
; CHECK-NEXT:    st r1, [p0, #0] // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  // %bb.2: // %for.cond.cleanup
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
for.body.lr.ph:
  %out.promoted = load i32, ptr %out, align 4
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %add7 = phi i32 [ %out.promoted, %for.body.lr.ph ], [ %add, %for.body ]
  %i.06 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %0 = trunc i32 %i.06 to i20
  %arrayidx = getelementptr inbounds i32, ptr %in, i20 %0
  %1 = load i32, ptr %arrayidx, align 4
  %add = add nsw i32 %add7, %1
  store i32 %add, ptr %out, align 4
  %inc = add nuw nsw i32 %i.06, 1
  %exitcond.not = icmp eq i32 %inc, %size
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
