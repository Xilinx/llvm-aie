; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 --enable-aie-hardware-loops %s -o - | FileCheck %s

define void @cbz_exit(ptr %in, ptr %res) {
; CHECK-LABEL: cbz_exit:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r0, #-1; nopb ; nopxm
; CHECK-NEXT:    mova r1, #2
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_1: // %loop
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    nopa ; nopb ; add r0, r0, #1
; CHECK-NEXT:    lshl r2, r0, r1
; CHECK-NEXT:    mov dj0, r2
; CHECK-NEXT:    lda r3, [p0, dj0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    jnz r3, #.LBB0_1
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  // %bb.2: // %exit
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    st r0, [p1, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  br label %loop

loop:
  %offset = phi i32 [ 0, %entry ], [ %next, %loop ]
  %ptr = getelementptr i32, ptr %in, i32 %offset
  %val = load i32, ptr %ptr
  %next = add i32 %offset, 1
  %cmp = icmp eq i32 %val, 0
  br i1 %cmp, label %exit, label %loop

exit:
  store i32 %offset, ptr %res
  ret void
}

define void @cbnz_exit(ptr %in, ptr %res) {
; CHECK-LABEL: cbnz_exit:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r0, #-1; nopb ; nopxm
; CHECK-NEXT:    mova r1, #2
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB1_1: // %loop
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    nopa ; nopb ; add r0, r0, #1
; CHECK-NEXT:    lshl r2, r0, r1
; CHECK-NEXT:    mov dj0, r2
; CHECK-NEXT:    lda r3, [p0, dj0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    jz r3, #.LBB1_1
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  // %bb.2: // %exit
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    st r0, [p1, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  br label %loop

loop:
  %offset = phi i32 [ 0, %entry ], [ %next, %loop ]
  %ptr = getelementptr i32, ptr %in, i32 %offset
  %val = load i32, ptr %ptr
  %next = add i32 %offset, 1
  %cmp = icmp ne i32 %val, 0
  br i1 %cmp, label %exit, label %loop

exit:
  store i32 %offset, ptr %res
  ret void
}
