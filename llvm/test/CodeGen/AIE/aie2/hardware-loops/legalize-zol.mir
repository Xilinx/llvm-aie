# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O2 -mtriple=aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name:            simple
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: simple
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
  ; CHECK-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.set.loop.iterations), [[COPY2]](s32)
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[LOAD]](s32), %bb.0, %7(s32), %bb.2
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:_(s32) = G_PHI [[C1]](s32), %bb.0, %9(s32), %bb.2
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
  ; CHECK-NEXT:   [[MUL:%[0-9]+]]:_(s32) = G_MUL [[PHI1]], [[C2]]
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s20) = G_TRUNC [[MUL]](s32)
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[TRUNC]](s20)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(p0) = COPY [[PTR_ADD]](p0)
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[COPY3]](p0) :: (load (s32))
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:_(s32) = nsw G_ADD [[PHI]], [[LOAD1]]
  ; CHECK-NEXT:   G_STORE [[ADD]](s32), [[COPY]](p0) :: (store (s32))
  ; CHECK-NEXT:   [[ADD1:%[0-9]+]]:_(s32) = nuw nsw G_ADD [[PHI1]], [[C]]
  ; CHECK-NEXT:   [[INT:%[0-9]+]]:_(s32) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.loop.decrement), [[C]](s32)
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[INT]], 1
  ; CHECK-NEXT:   G_BRCOND [[ASSERT_ZEXT]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0

    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s32) = COPY $r0
    %13:_(s32) = G_CONSTANT i32 1
    %16:_(s32) = G_CONSTANT i32 0
    %3:_(s32) = G_LOAD %0(p0) :: (load (s32))
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.set.loop.iterations), %2(s32)
    G_BR %bb.1

  bb.2:
    PseudoRET implicit $lr

  bb.1:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)

    %4:_(s32) = G_PHI %3(s32), %bb.0, %12(s32), %bb.1
    %5:_(s32) = G_PHI %16(s32), %bb.0, %14(s32), %bb.1
    %6:_(s20) = G_TRUNC %5(s32)
    %7:_(s20) = G_CONSTANT i20 4
    %8:_(s20) = G_MUL %6, %7
    %9:_(p0) = G_PTR_ADD %1, %8(s20)
    %10:_(p0) = COPY %9(p0)
    %11:_(s32) = G_LOAD %10(p0) :: (load (s32))
    %12:_(s32) = nsw G_ADD %4, %11
    G_STORE %12(s32), %0(p0) :: (store (s32))
    %14:_(s32) = nuw nsw G_ADD %5, %13
    %15:_(s1) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.loop.decrement), %13(s32)
    G_BRCOND %15(s1), %bb.1
    G_BR %bb.2
...
