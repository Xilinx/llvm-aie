; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s

define i64 @test_ge_v64uint8(<64 x i8> %a, <64 x i8> %b) {
; CHECK-LABEL: test_ge_v64uint8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vge.d8 r25:r24, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %0 = tail call <2 x i32> @llvm.aie2.vge8(<64 x i8> %a, <64 x i8> %b, i32 0)
  %1 = bitcast <2 x i32> %0 to i64
  ret i64 %1
}

define i64 @test_ge_v64int8(<64 x i8> %a, <64 x i8> %b) {
; CHECK-LABEL: test_ge_v64int8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vge.s8 r25:r24, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %0 = tail call <2 x i32> @llvm.aie2.vge8(<64 x i8> %a, <64 x i8> %b, i32 1)
  %1 = bitcast <2 x i32> %0 to i64
  ret i64 %1
}

define i32 @test_ge_v32uint16(<32 x i16> %a, <32 x i16> %b) {
; CHECK-LABEL: test_ge_v32uint16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vge.d16 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vge16(<32 x i16> %a, <32 x i16> %b, i32 0)
  ret i32 %0
}

define i32 @test_ge_v32int16(<32 x i16> %a, <32 x i16> %b) {
; CHECK-LABEL: test_ge_v32int16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vge.s16 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vge16(<32 x i16> %a, <32 x i16> %b, i32 1)
  ret i32 %0
}

define i32 @test_ge_v16uint32(<16 x i32> %a, <16 x i32> %b) {
; CHECK-LABEL: test_ge_v16uint32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vge.d32 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vge32(<16 x i32> %a, <16 x i32> %b, i32 0)
  ret i32 %0
}

define i32 @test_ge_v16int32(<16 x i32> %a, <16 x i32> %b) {
; CHECK-LABEL: test_ge_v16int32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vge.s32 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vge32(<16 x i32> %a, <16 x i32> %b, i32 1)
  ret i32 %0
}

define i64 @test_ge_v64int8_sgn(<64 x i8> %a, <64 x i8> %b, i1 zeroext %sgn) {
; CHECK-LABEL: test_ge_v64int8_sgn:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov crVaddSign, r2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vge.d8 r25:r24, x0, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call <2 x i32> @llvm.aie2.vge8(<64 x i8> %a, <64 x i8> %b, i32 %conv.i)
  %1 = bitcast <2 x i32> %0 to i64
  ret i64 %1
}

define i32 @test_ge_v32uint16_sgn(<32 x i16> %a, <32 x i16> %b, i1 zeroext %sgn) {
; CHECK-LABEL: test_ge_v32uint16_sgn:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; mov r2, r16
; CHECK-NEXT:    mov crVaddSign, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vge.d16 r16, x0, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r2 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call i32 @llvm.aie2.vge16(<32 x i16> %a, <32 x i16> %b, i32 %conv.i)
  ret i32 %0
}

define i32 @test_ge_v16int32_sgn(<16 x i32> %a, <16 x i32> %b, i1 zeroext %sgn) {
; CHECK-LABEL: test_ge_v16int32_sgn:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; mov r2, r16
; CHECK-NEXT:    mov crVaddSign, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vge.d32 r16, x0, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r2 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call i32 @llvm.aie2.vge32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i)
  ret i32 %0
}

define i64 @test_lt_v64uint8(<64 x i8> %a, <64 x i8> %b) {
; CHECK-LABEL: test_lt_v64uint8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vlt.d8 r25:r24, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %0 = tail call <2 x i32> @llvm.aie2.vlt8(<64 x i8> %a, <64 x i8> %b, i32 0)
  %1 = bitcast <2 x i32> %0 to i64
  ret i64 %1
}

define i64 @test_lt_v64int8(<64 x i8> %a, <64 x i8> %b) {
; CHECK-LABEL: test_lt_v64int8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vlt.s8 r25:r24, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %0 = tail call <2 x i32> @llvm.aie2.vlt8(<64 x i8> %a, <64 x i8> %b, i32 1)
  %1 = bitcast <2 x i32> %0 to i64
  ret i64 %1
}

define i32 @test_lt_v32uint16(<32 x i16> %a, <32 x i16> %b) {
; CHECK-LABEL: test_lt_v32uint16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vlt.d16 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vlt16(<32 x i16> %a, <32 x i16> %b, i32 0)
  ret i32 %0
}

define i32 @test_lt_v32int16(<32 x i16> %a, <32 x i16> %b) {
; CHECK-LABEL: test_lt_v32int16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vlt.s16 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vlt16(<32 x i16> %a, <32 x i16> %b, i32 1)
  ret i32 %0
}

define i32 @test_lt_v16uint32(<16 x i32> %a, <16 x i32> %b) {
; CHECK-LABEL: test_lt_v16uint32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vlt.d32 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vlt32(<16 x i32> %a, <16 x i32> %b, i32 0)
  ret i32 %0
}

define i32 @test_lt_v16int32(<16 x i32> %a, <16 x i32> %b) {
; CHECK-LABEL: test_lt_v16int32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vlt.s32 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vlt32(<16 x i32> %a, <16 x i32> %b, i32 1)
  ret i32 %0
}

define i64 @test_lt_v64uint8_sgn(<64 x i8> %a, <64 x i8> %b, i1 zeroext %sgn) {
; CHECK-LABEL: test_lt_v64uint8_sgn:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov crVaddSign, r2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vlt.d8 r25:r24, x0, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call <2 x i32> @llvm.aie2.vlt8(<64 x i8> %a, <64 x i8> %b, i32 %conv.i)
  %1 = bitcast <2 x i32> %0 to i64
  ret i64 %1
}

define i32 @test_lt_v32int16_sgn(<32 x i16> %a, <32 x i16> %b, i1 zeroext %sgn) {
; CHECK-LABEL: test_lt_v32int16_sgn:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; mov r2, r16
; CHECK-NEXT:    mov crVaddSign, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vlt.d16 r16, x0, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r2 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call i32 @llvm.aie2.vlt16(<32 x i16> %a, <32 x i16> %b, i32 %conv.i)
  ret i32 %0
}

define i32 @test_lt_v16uint32_sgn(<16 x i32> %a, <16 x i32> %b, i1 zeroext %sgn) {
; CHECK-LABEL: test_lt_v16uint32_sgn:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; mov r2, r16
; CHECK-NEXT:    mov crVaddSign, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vlt.d32 r16, x0, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r2 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call i32 @llvm.aie2.vlt32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i)
  ret i32 %0
}

declare <2 x i32> @llvm.aie2.vge8(<64 x i8>, <64 x i8>, i32)
declare i32 @llvm.aie2.vge16(<32 x i16>, <32 x i16>, i32)
declare i32 @llvm.aie2.vge32(<16 x i32>, <16 x i32>, i32)
declare <2 x i32> @llvm.aie2.vlt8(<64 x i8>, <64 x i8>, i32)
declare i32 @llvm.aie2.vlt16(<32 x i16>, <32 x i16>, i32)
declare i32 @llvm.aie2.vlt32(<16 x i32>, <16 x i32>, i32)

define i32 @test_lt_v32bfloat16(<32 x bfloat> %a, <32 x bfloat> %b) {
; CHECK-LABEL: test_lt_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vlt.bf16 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vltbf16(<32 x bfloat> %a, <32 x bfloat> %b)
  ret i32 %0
}

define i32 @test_ge_v32bfloat16(<32 x bfloat> %a, <32 x bfloat> %b) {
; CHECK-LABEL: test_ge_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vge.bf16 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vgebf16(<32 x bfloat> %a, <32 x bfloat> %b)
  ret i32 %0
}

define i32 @test_le_v32bfloat16(<32 x bfloat> %a, <32 x bfloat> %b) {
; CHECK-LABEL: test_le_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vge.bf16 r16, x2, x0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vgebf16(<32 x bfloat> %b, <32 x bfloat> %a)
  ret i32 %0
}

define i32 @test_gt_v32bfloat16(<32 x bfloat> %a, <32 x bfloat> %b) {
; CHECK-LABEL: test_gt_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    vlt.bf16 r16, x2, x0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vltbf16(<32 x bfloat> %b, <32 x bfloat> %a)
  ret i32 %0
}

define i32 @test_ltz_v32bfloat16(<32 x bfloat> %a) {
; CHECK-LABEL: test_ltz_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov r1, r16
; CHECK-NEXT:    movxm r0, #32768
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vbcst.16 x2, r0 // Delay Slot 5
; CHECK-NEXT:    vlt.bf16 r16, x0, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call <32 x i16> @llvm.aie2.vbroadcast16.I512(i32 32768)
  %1 = bitcast <32 x i16> %0 to <32 x bfloat>
  %2 = tail call i32 @llvm.aie2.vltbf16(<32 x bfloat> %a, <32 x bfloat> %1)
  ret i32 %2
}

define i32 @test_gtz_v32bfloat16(<32 x bfloat> %a) {
; CHECK-LABEL: test_gtz_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; mov r1, r16
; CHECK-NEXT:    mova r0, #0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vbcst.16 x2, r0 // Delay Slot 5
; CHECK-NEXT:    vlt.bf16 r16, x2, x0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call <32 x i16> @llvm.aie2.vbroadcast16.I512(i32 0)
  %1 = bitcast <32 x i16> %0 to <32 x bfloat>
  %2 = tail call i32 @llvm.aie2.vltbf16(<32 x bfloat> %1, <32 x bfloat> %a)
  ret i32 %2
}

define i32 @test_eq_v32bfloat16(<32 x bfloat> %a, <32 x bfloat> %b) {
; CHECK-LABEL: test_eq_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; nopx ; mov r1, r16; nopv
; CHECK-NEXT:    nopa ; mov r2, r17
; CHECK-NEXT:    vge.bf16 r16, x2, x0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vge.bf16 r17, x0, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    and r0, r17, r16 // Delay Slot 3
; CHECK-NEXT:    mov r17, r2 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vgebf16(<32 x bfloat> %b, <32 x bfloat> %a)
  %1 = tail call i32 @llvm.aie2.vgebf16(<32 x bfloat> %a, <32 x bfloat> %b)
  %and.i = and i32 %1, %0
  ret i32 %and.i
}

define i32 @test_ne_v32bfloat16(<32 x bfloat> %a, <32 x bfloat> %b) {
; CHECK-LABEL: test_ne_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; nopx ; mov r1, r16; nopv
; CHECK-NEXT:    nopa ; mov r2, r17
; CHECK-NEXT:    vlt.bf16 r16, x0, x2
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vlt.bf16 r17, x2, x0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    or r0, r17, r16 // Delay Slot 3
; CHECK-NEXT:    mov r17, r2 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vltbf16(<32 x bfloat> %a, <32 x bfloat> %b)
  %1 = tail call i32 @llvm.aie2.vltbf16(<32 x bfloat> %b, <32 x bfloat> %a)
  %or.i = or i32 %1, %0
  ret i32 %or.i
}

declare i32 @llvm.aie2.vltbf16(<32 x bfloat>, <32 x bfloat>) #1
declare i32 @llvm.aie2.vgebf16(<32 x bfloat>, <32 x bfloat>) #1
declare <32 x i16> @llvm.aie2.vbroadcast16.I512(i32) #2
