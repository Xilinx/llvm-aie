; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 %s -o - | FileCheck %s

define dso_local noundef <64 x i8> @_Z12test_insert8Dv64_aic(<64 x i8> noundef %v, i32 noundef %idx, i8 noundef signext %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z12test_insert8Dv64_aic:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r0 // Delay Slot 3
; CHECK-NEXT:    vinsert.8 x0, x2, r29, r1 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <64 x i8> %v to <16 x i32>
  %conv.i = sext i8 %b to i32
  %1 = tail call <16 x i32> @llvm.aie2.vinsert8.I512(<16 x i32> %0, i32 %idx, i32 %conv.i)
  %2 = bitcast <16 x i32> %1 to <64 x i8>
  ret <64 x i8> %2
}

define dso_local noundef <64 x i8> @_Z13test_insert16Dv64_ais(<64 x i8> noundef %v, i32 noundef %idx, i16 noundef signext %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z13test_insert16Dv64_ais:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r0 // Delay Slot 3
; CHECK-NEXT:    vinsert.16 x0, x2, r29, r1 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <64 x i8> %v to <16 x i32>
  %conv.i = sext i16 %b to i32
  %1 = tail call <16 x i32> @llvm.aie2.vinsert16.I512(<16 x i32> %0, i32 %idx, i32 %conv.i)
  %2 = bitcast <16 x i32> %1 to <64 x i8>
  ret <64 x i8> %2
}

define dso_local noundef <64 x i8> @_Z13test_insert32Dv64_aii(<64 x i8> noundef %v, i32 noundef %idx, i32 noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z13test_insert32Dv64_aii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r0 // Delay Slot 3
; CHECK-NEXT:    vinsert.32 x0, x2, r29, r1 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <64 x i8> %v to <16 x i32>
  %1 = tail call <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32> %0, i32 %idx, i32 %b)
  %2 = bitcast <16 x i32> %1 to <64 x i8>
  ret <64 x i8> %2
}

define dso_local noundef <64 x i8> @_Z13test_insert64Dv64_aiDv8_a(<64 x i8> noundef %v, i32 noundef %idx, <8 x i8> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z13test_insert64Dv64_aiDv8_a:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r0 // Delay Slot 3
; CHECK-NEXT:    vinsert.64 x0, x2, r29, r17:r16 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <64 x i8> %v to <16 x i32>
  %1 = bitcast <8 x i8> %b to <2 x i32>
  %2 = tail call <16 x i32> @llvm.aie2.vinsert64.I512(<16 x i32> %0, i32 %idx, <2 x i32> %1)
  %3 = bitcast <16 x i32> %2 to <64 x i8>
  ret <64 x i8> %3
}

define dso_local noundef <32 x i16> @_Z11test_insertDv32_tiy(<32 x i16> noundef %v, i32 noundef %idx, i64 noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv32_tiy:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov r29, r0 // Delay Slot 5
; CHECK-NEXT:    mov r24, r1 // Delay Slot 4
; CHECK-NEXT:    mov r25, r2 // Delay Slot 3
; CHECK-NEXT:    vinsert.64 x0, x2, r29, r25:r24 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <32 x i16> %v to <16 x i32>
  %1 = bitcast i64 %b to <2 x i32>
  %2 = tail call <16 x i32> @llvm.aie2.vinsert64.I512(<16 x i32> %0, i32 %idx, <2 x i32> %1)
  %3 = bitcast <16 x i32> %2 to <32 x i16>
  ret <32 x i16> %3
}

declare <16 x i32> @llvm.aie2.vinsert8.I512(<16 x i32>, i32, i32) #1
declare <16 x i32> @llvm.aie2.vinsert16.I512(<16 x i32>, i32, i32) #1
declare <16 x i32> @llvm.aie2.vinsert32.I512(<16 x i32>, i32, i32) #1
declare <16 x i32> @llvm.aie2.vinsert64.I512(<16 x i32>, i32, <2 x i32>) #1
