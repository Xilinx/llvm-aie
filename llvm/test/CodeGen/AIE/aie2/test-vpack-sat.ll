; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s


define void @test_pack_sat_I16_s(<32 x i16> %v, ptr %p1, ptr %p2, i32 %sign) {
; CHECK-LABEL: test_pack_sat_I16_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crSat, #0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crPackSign, r0 // Delay Slot 5
; CHECK-NEXT:    vst.pack.d8.d16 x0, [p0, #0] // Delay Slot 4
; CHECK-NEXT:    mov crSat, #1 // Delay Slot 3
; CHECK-NEXT:    vst.pack.d8.d16 x0, [p1, #0] // Delay Slot 2
; CHECK-NEXT:    mov crPackSign, #0 // Delay Slot 1
entry:
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 0)
  %0 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %1 = tail call <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16> %v, i32 %sign, i32 %0)
  store <32 x i8> %1, ptr %p1, align 32, !tbaa !2
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 1)
  %2 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %3 = tail call <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16> %v, i32 %sign, i32 %2)
  store <32 x i8> %3, ptr %p2, align 32, !tbaa !2
  ret void
}


define void @test_pack_sat_I8_s(<64 x i8>  %v, ptr %p1, ptr %p2, i32 %sign) {
; CHECK-LABEL: test_pack_sat_I8_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crSat, #0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crPackSign, r0 // Delay Slot 5
; CHECK-NEXT:    vst.pack.d4.d8 x0, [p0, #0] // Delay Slot 4
; CHECK-NEXT:    mov crSat, #1 // Delay Slot 3
; CHECK-NEXT:    vst.pack.d4.d8 x0, [p1, #0] // Delay Slot 2
; CHECK-NEXT:    mov crPackSign, #0 // Delay Slot 1
entry:
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 0)
  %0 = bitcast <64 x i8> %v to <32 x i16>
  %1 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %2 = tail call <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16> %0, i32 %sign, i32 %1)
  store <32 x i8> %2, ptr %p1, align 32, !tbaa !2
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 1)
  %3 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %4 = tail call <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16> %0, i32 %sign, i32 %3)
  store <32 x i8> %4, ptr %p2, align 32, !tbaa !2
  ret void
}

define void @test_pack_sat_I16(<32 x i16> %v, ptr %p1, ptr %p2) {
; CHECK-LABEL: test_pack_sat_I16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov crSat, #1 // Delay Slot 5
; CHECK-NEXT:    vst.pack.s8.s16 x0, [p0, #0] // Delay Slot 4
; CHECK-NEXT:    mov crSat, #0 // Delay Slot 3
; CHECK-NEXT:    vst.pack.s8.s16 x0, [p1, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 1)
  %0 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %1 = tail call <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16> %v, i32 1, i32 %0)
  store <32 x i8> %1, ptr %p1, align 32, !tbaa !2
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 0)
  %2 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %3 = tail call <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16> %v, i32 1, i32 %2)
  store <32 x i8> %3, ptr %p2, align 32, !tbaa !2
  ret void
}

define void @test_pack_sat_I8(<64 x i8> %v, ptr %p1, ptr %p2) {
; CHECK-LABEL: test_pack_sat_I8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov crSat, #0 // Delay Slot 5
; CHECK-NEXT:    vst.pack.s4.s8 x0, [p0, #0] // Delay Slot 4
; CHECK-NEXT:    mov crSat, #1 // Delay Slot 3
; CHECK-NEXT:    vst.pack.s4.s8 x0, [p1, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 0)
  %0 = bitcast <64 x i8> %v to <32 x i16>
  %1 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %2 = tail call <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16> %0, i32 1, i32 %1)
  store <32 x i8> %2, ptr %p1, align 32, !tbaa !2
  tail call void @llvm.aie2.set.ctrl.reg(i32 9, i32 1)
  %3 = tail call i32 @llvm.aie2.get.ctrl.reg(i32 9)
  %4 = tail call <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16> %0, i32 1, i32 %3)
  store <32 x i8> %4, ptr %p2, align 32, !tbaa !2
  ret void
}

declare <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16>, i32, i32)

declare <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16>, i32, i32)

declare i32 @llvm.aie2.get.ctrl.reg(i32)

declare void @llvm.aie2.set.ctrl.reg(i32, i32)

!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
