; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 %s -o - | FileCheck %s

define <16 x i8> @test_undef_v32int4() {
; CHECK-LABEL: test_undef_v32int4:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <4 x i32> @llvm.aie2.v4int32()
  %1 = bitcast <4 x i32> %0 to <16 x i8>
  ret <16 x i8> %1
}

define <16 x i8> @test_undef_v16int8() {
; CHECK-LABEL: test_undef_v16int8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <16 x i8> @llvm.aie2.v16int8()
  ret <16 x i8> %0
}

define <8 x i16> @test_undef_v8int16() {
; CHECK-LABEL: test_undef_v8int16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <8 x i16> @llvm.aie2.v8int16()
  ret <8 x i16> %0
}

define <4 x i32> @test_undef_v4int32() {
; CHECK-LABEL: test_undef_v4int32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <4 x i32> @llvm.aie2.v4int32()
  ret <4 x i32> %0
}

define <32 x i8> @test_undef_v64int4() {
; CHECK-LABEL: test_undef_v64int4:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i32> @llvm.aie2.v8int32()
  %1 = bitcast <8 x i32> %0 to <32 x i8>
  ret <32 x i8> %1
}

define <32 x i8> @test_undef_v32int8() {
; CHECK-LABEL: test_undef_v32int8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <32 x i8> @llvm.aie2.v32int8()
  ret <32 x i8> %0
}

define <16 x i16> @test_undef_v16int16() {
; CHECK-LABEL: test_undef_v16int16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <16 x i16> @llvm.aie2.v16int16()
  ret <16 x i16> %0
}

define <8 x i32> @test_undef_v8int32() {
; CHECK-LABEL: test_undef_v8int32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <8 x i32> @llvm.aie2.v8int32()
  ret <8 x i32> %0
}

define <4 x i64> @test_undef_v8acc32() {
; CHECK-LABEL: test_undef_v8acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <4 x i64> @llvm.aie2.v8acc32()
  ret <4 x i64> %0
}

define <4 x i64> @test_undef_v4acc64() {
; CHECK-LABEL: test_undef_v4acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <4 x i64> @llvm.aie2.v4acc64()
  ret <4 x i64> %0
}

define <64 x i8> @test_undef_v128int4() {
; CHECK-LABEL: test_undef_v128int4:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i32> @llvm.aie2.v16int32()
  %1 = bitcast <16 x i32> %0 to <64 x i8>
  ret <64 x i8> %1
}

define <64 x i8> @test_undef_v64int8() {
; CHECK-LABEL: test_undef_v64int8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <64 x i8> @llvm.aie2.v64int8()
  ret <64 x i8> %0
}

define <32 x i16> @test_undef_v32int16() {
; CHECK-LABEL: test_undef_v32int16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <32 x i16> @llvm.aie2.v32int16()
  ret <32 x i16> %0
}

define <16 x i32> @test_undef_v16int32() {
; CHECK-LABEL: test_undef_v16int32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <16 x i32> @llvm.aie2.v16int32()
  ret <16 x i32> %0
}


define <8 x i64> @test_undef_v16acc32() {
; CHECK-LABEL: test_undef_v16acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <8 x i64> @llvm.aie2.v16acc32()
  ret <8 x i64> %0
}

define <8 x i64> @test_undef_v8acc64() {
; CHECK-LABEL: test_undef_v8acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <8 x i64> @llvm.aie2.v8acc64()
  ret <8 x i64> %0
}

define <128 x i8> @test_undef_v256int4() {
; CHECK-LABEL: test_undef_v256int4:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x i32> @llvm.aie2.v32int32()
  %1 = bitcast <32 x i32> %0 to <128 x i8>
  ret <128 x i8> %1
}

define <128 x i8> @test_undef_v128int8() {
; CHECK-LABEL: test_undef_v128int8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <128 x i8> @llvm.aie2.v128int8()
  ret <128 x i8> %0
}

define <64 x i16> @test_undef_v64int16() {
; CHECK-LABEL: test_undef_v64int16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <64 x i16> @llvm.aie2.v64int16()
  ret <64 x i16> %0
}

define <32 x i32> @test_undef_v32int32() {
; CHECK-LABEL: test_undef_v32int32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <32 x i32> @llvm.aie2.v32int32()
  ret <32 x i32> %0
}

define <16 x i64> @test_undef_v32acc32() {
; CHECK-LABEL: test_undef_v32acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <16 x i64> @llvm.aie2.v32acc32()
  ret <16 x i64> %0
}

define <16 x i64> @test_undef_v16acc64() {
; CHECK-LABEL: test_undef_v16acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <16 x i64> @llvm.aie2.v16acc64()
  ret <16 x i64> %0
}

define <8 x i64> @test_undef_v16accfloat() {
; CHECK-LABEL: test_undef_v16accfloat:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <8 x i64> @llvm.aie2.v16accfloat()
  ret <8 x i64> %0
}

define <16 x i64> @test_undef_v32accfloat() {
; CHECK-LABEL: test_undef_v32accfloat:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <16 x i64> @llvm.aie2.v32accfloat()
  ret <16 x i64> %0
}

define <8 x bfloat> @test_undef_v8bfloat16() {
; CHECK-LABEL: test_undef_v8bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <8 x bfloat> @llvm.aie2.v8bfloat16()
  ret <8 x bfloat> %0
}

define <16 x bfloat> @test_undef_v16bfloat16() {
; CHECK-LABEL: test_undef_v16bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <16 x bfloat> @llvm.aie2.v16bfloat16()
  ret <16 x bfloat> %0
}

define <32 x bfloat> @test_undef_v32bfloat16() {
; CHECK-LABEL: test_undef_v32bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <32 x bfloat> @llvm.aie2.v32bfloat16()
  ret <32 x bfloat> %0
}

define <64 x bfloat> @test_undef_v64bfloat16() {
; CHECK-LABEL: test_undef_v64bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call noundef <64 x bfloat> @llvm.aie2.v64bfloat16()
  ret <64 x bfloat> %0
}

define <8 x float> @test_undef_v8float()  {
; CHECK-LABEL: test_undef_v8float:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x float> @llvm.aie2.v8float()
  ret <8 x float> %0
}

define <16 x float> @test_undef_v16float()  {
; CHECK-LABEL: test_undef_v16float:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x float> @llvm.aie2.v16float()
  ret <16 x float> %0
}

define <32 x float> @test_undef_v32float()  {
; CHECK-LABEL: test_undef_v32float:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x float> @llvm.aie2.v32float()
  ret <32 x float> %0
}

declare <4 x i32> @llvm.aie2.v4int32()
declare <16 x i8> @llvm.aie2.v16int8()
declare <8 x i16> @llvm.aie2.v8int16()
declare <8 x i32> @llvm.aie2.v8int32()
declare <32 x i8> @llvm.aie2.v32int8()
declare <16 x i16> @llvm.aie2.v16int16()
declare <4 x i64> @llvm.aie2.v8acc32()
declare <4 x i64> @llvm.aie2.v4acc64()
declare <16 x i32> @llvm.aie2.v16int32()
declare <64 x i8> @llvm.aie2.v64int8()
declare <32 x i16> @llvm.aie2.v32int16()
declare <8 x i64> @llvm.aie2.v16acc32()
declare <8 x i64> @llvm.aie2.v8acc64()
declare <32 x i32> @llvm.aie2.v32int32()
declare <128 x i8> @llvm.aie2.v128int8()
declare <64 x i16> @llvm.aie2.v64int16()
declare <16 x i64> @llvm.aie2.v32acc32()
declare <16 x i64> @llvm.aie2.v16acc64()
declare <4 x i64> @llvm.aie2.v8accfloat()
declare <8 x i64> @llvm.aie2.v16accfloat()
declare <16 x i64> @llvm.aie2.v32accfloat()
declare <8 x bfloat> @llvm.aie2.v8bfloat16()
declare <16 x bfloat> @llvm.aie2.v16bfloat16()
declare <32 x bfloat> @llvm.aie2.v32bfloat16()
declare <64 x bfloat> @llvm.aie2.v64bfloat16()
declare <8 x float> @llvm.aie2.v8float()
declare <16 x float> @llvm.aie2.v16float()
declare <32 x float> @llvm.aie2.v32float()
