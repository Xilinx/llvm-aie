# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple=aie2 -verify-machineinstrs --run-pass=greedy,virtregrewriter %s -o - | FileCheck %s
# RUN: llc -mtriple=aie2 -verify-machineinstrs --run-pass=greedy,greedy,virtregrewriter %s -o - | FileCheck %s

# Similar to required-reg.mir as well, but the registers are only "preferred".
# Greedy should prefer ignoring the hint over spilling.

---
name:            test_force_r13
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
registers:
  - { id: 0, class: er, preferred-register: '$r13' }
  - { id: 1, class: er, preferred-register: '' }
body:             |
  bb.0.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_force_r13
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r0 = LDA_dms_lda_idx_imm $p0, 0
    ; CHECK-NEXT: renamable $r1 = LDA_dms_lda_idx_imm $p0, 4
    ; CHECK-NEXT: $r13 = MUL_mul_r_rr renamable $r0, killed renamable $r1
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $r0
    %0:er = LDA_dms_lda_idx_imm $p0, 0
    %1:er = LDA_dms_lda_idx_imm $p0, 4
    $r13 = MUL_mul_r_rr %0, %1
    PseudoRET implicit $lr, implicit %0
...

---
name:            test_force_d3
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
registers:
  - { id: 0, class: ep, preferred-register: '' }
  - { id: 1, class: ed, preferred-register: '$d3' }
body:             |
  bb.0.entry:
    liveins: $p0, $d1
    ; CHECK-LABEL: name: test_force_d3
    ; CHECK: liveins: $d1, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $d0 = COPY $d1
    ; CHECK-NEXT: dead $p0, $dc0 = PADDA_2D_split killed $p0, $m0, $dn0, $dj0, $dc0
    ; CHECK-NEXT: $d3 = COPY $d1
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $dc0
    %0:ep = COPY $p0
    %1:ed = COPY $d1
    %0:ep, %1.sub_dim_count:ed = PADDA_2D_split %0, %1.sub_mod, %1.sub_dim_size, %1.sub_dim_stride, %1.sub_dim_count
    $d3 = COPY $d1
    PseudoRET implicit $lr, implicit %1.sub_dim_count
...
