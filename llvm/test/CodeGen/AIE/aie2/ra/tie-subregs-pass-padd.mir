# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -verify-machineinstrs --run-pass=aie-subregs %s -o - | FileCheck %s

---
name:            test_padd
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_padd
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:em = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:edn = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:edj = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:edc = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[COPY]], %subreg.sub_mod, [[COPY1]], %subreg.sub_dim_size, [[COPY2]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
  ; CHECK-NEXT:   %6:ep, [[COPY5]].sub_dim_count:ed = PADDA_2D [[COPY4]], [[COPY5]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit %6, implicit [[COPY5]].sub_dim_count
  bb.0.entry:
    liveins: $r0, $r1, $r2, $r3, $p0

    %0:em =  COPY $r0
    %1:edn = COPY $r1
    %2:edj = COPY $r2
    %3:edc = COPY $r3
    %4:ep = COPY $p0

    ; ISel code for add_2d_byte
    %10:ed = REG_SEQUENCE %0, %subreg.sub_mod, %1, %subreg.sub_dim_size, %2, %subreg.sub_dim_stride, %3, %subreg.sub_dim_count
    %20:ep, %21:edc = PADDA_2D %4, %10

  bb.1:
    PseudoRET implicit $lr, implicit %20, implicit %21
...

---
name:            test_padd_multi_use
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_padd_multi_use
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $p0, $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:em = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:edn = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:edj = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:edc = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[COPY]], %subreg.sub_mod, [[COPY1]], %subreg.sub_dim_size, [[COPY2]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
  ; CHECK-NEXT:   %6:ep, [[COPY5]].sub_dim_count:ed = PADDA_2D [[COPY4]], [[COPY5]]
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
  ; CHECK-NEXT:   %8:ep, [[COPY6]].sub_dim_count:ed = PADDA_2D [[COPY4]], [[COPY6]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit %6, implicit [[COPY5]].sub_dim_count, implicit %8, implicit [[COPY6]].sub_dim_count
  bb.0.entry:
    liveins: $r0, $r1, $r2, $r3, $p0, $p1

    %0:em =  COPY $r0
    %1:edn = COPY $r1
    %2:edj = COPY $r2
    %3:edc = COPY $r3
    %4:ep = COPY $p0

    %10:ed = REG_SEQUENCE %0, %subreg.sub_mod, %1, %subreg.sub_dim_size, %2, %subreg.sub_dim_stride, %3, %subreg.sub_dim_count
    %20:ep, %21:edc = PADDA_2D %4, %10
    %22:ep, %23:edc = PADDA_2D %4, %10

  bb.1:
    PseudoRET implicit $lr, implicit %20, implicit %21, implicit %22, implicit %23
...

---
name:            test_padd_killed_src
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_padd_killed_src
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d1, $d2, $p0, $p1, $p2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ed = COPY $d0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:ed = COPY [[COPY]]
  ; CHECK-NEXT:   %2:ep, [[COPY2]].sub_dim_count:ed = PADDA_2D killed [[COPY1]], [[COPY2]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit %2, implicit [[COPY2]].sub_dim_count
  bb.0.entry:
    liveins: $d0, $d1, $d2, $p0, $p1, $p2
    %0:ed = COPY $d0
    %10:ep = COPY $p0
    %400:ep, %500:edc = PADDA_2D killed %10, killed %0

  bb.1:
    PseudoRET implicit $lr, implicit %400, implicit %500
...

---
name:            test_padd_already_tied
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_padd_already_tied
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $p0, $m0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:em = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:edn = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:edj = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:edc = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[COPY]], %subreg.sub_mod, [[COPY1]], %subreg.sub_dim_size, [[COPY2]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count
  ; CHECK-NEXT:   %6:ep, [[REG_SEQUENCE]].sub_dim_count:ed = PADDA_2D [[COPY4]], [[REG_SEQUENCE]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit %6, implicit [[REG_SEQUENCE]].sub_dim_count
  bb.0.entry:
    liveins: $r0, $r1, $r2, $r3, $p0, $m0

    %0:em =  COPY $r0
    %1:edn = COPY $r1
    %2:edj = COPY $r2
    %3:edc = COPY $r3
    %4:ep = COPY $p0

    ; ISel code for add_2d_byte
    %10:ed = REG_SEQUENCE %0, %subreg.sub_mod, %1, %subreg.sub_dim_size, %2, %subreg.sub_dim_stride, %3, %subreg.sub_dim_count
    %20:ep, %10.sub_dim_count:ed = PADDA_2D %4, %10

  bb.1:
    PseudoRET implicit $lr, implicit %20, implicit %10.sub_dim_count
...

---
name:            test_padd_2d
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $d0, $p0
    ; CHECK-LABEL: name: test_padd_2d
    ; CHECK: liveins: $d0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ed = COPY $d0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ed = COPY [[COPY]]
    ; CHECK-NEXT: %2:ep, [[COPY2]].sub_dim_count:ed = PADDA_2D [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ed = COPY [[COPY]]
    ; CHECK-NEXT: %4:ep, [[COPY3]].sub_dim_count:ed = PADDB_2D [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:ed = COPY [[COPY]]
    ; CHECK-NEXT: %6:ep, [[COPY4]].sub_dim_count:ed = PADDS_2D [[COPY1]], [[COPY4]]
    %0:ed = COPY $d0
    %10:ep = COPY $p0
    %100:ep, %200:edc = PADDA_2D %10, %0
    %400:ep, %500:edc = PADDB_2D %10, %0
    %700:ep, %800:edc = PADDS_2D %10, %0
...

---
name:            test_padd_3d
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_padd_3d
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0_3d, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:eds = COPY $d0_3d
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:eds = COPY [[COPY]]
  ; CHECK-NEXT:   %2:ep, [[COPY2]].sub_dim_count:eds, [[COPY2]].sub_hi_dim_then_sub_dim_count:eds = PADDA_3D [[COPY1]], [[COPY2]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:eds = COPY [[COPY]]
  ; CHECK-NEXT:   %5:ep, [[COPY3]].sub_dim_count:eds, [[COPY3]].sub_hi_dim_then_sub_dim_count:eds = PADDB_3D [[COPY1]], [[COPY3]]
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:eds = COPY [[COPY]]
  ; CHECK-NEXT:   %8:ep, [[COPY4]].sub_dim_count:eds, [[COPY4]].sub_hi_dim_then_sub_dim_count:eds = PADDS_3D [[COPY1]], [[COPY4]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit %5, implicit [[COPY3]].sub_dim_count, implicit [[COPY3]].sub_hi_dim_then_sub_dim_count, implicit [[COPY]]
  bb.0.entry:
    liveins: $d0_3d, $p0
    %0:eds = COPY $d0_3d
    %10:ep = COPY $p0
    %100:ep, %200:edc, %300:edc = PADDA_3D %10, %0
    %400:ep, %500:edc, %600:edc = PADDB_3D %10, %0
    %700:ep, %800:edc, %900:edc = PADDS_3D %10, %0

  bb.1:
    PseudoRET implicit $lr, implicit %400, implicit %500, implicit %600, implicit %0
...
