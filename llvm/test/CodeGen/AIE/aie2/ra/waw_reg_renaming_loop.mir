# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# NOTE: Example file for Write After Write Register Renaming in Loop test
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# unit test for the WAW register renaming pass and check edge cases
# RUN: llc -mtriple=aie2 -verify-machineinstrs --start-before=greedy --stop-after=virtregrewriter %s -o - | FileCheck %s


# Basic check if %7:mxm will be renamed ($x0 -> $x4) and will not use the another
# already defined register, i.e. $x2 of VLDA_3D_dmw_lda_w
---
name:            simple_waw_replacement
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: simple_waw_replacement
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $p3 = COPY $p0
  ; CHECK-NEXT:   renamable $d3 = COPY $d0
  ; CHECK-NEXT:   $wl0, dead $p3, dead $dc3 = VLDA_2D_dmw_lda_w killed $p3, $d3
  ; CHECK-NEXT:   renamable $p3 = COPY $p1
  ; CHECK-NEXT:   renamable $d3_3d = COPY $d1_3d
  ; CHECK-NEXT:   $wl2, dead $p3, dead $dc3, dead $dc7 = VLDA_3D_dmw_lda_w killed $p3, $d3_3d
  ; CHECK-NEXT:   renamable $x4, dead renamable $l4 = VMAX_LT_D8 renamable $x0, renamable $x2, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $p3 = COPY $p2
  ; CHECK-NEXT:   renamable $d3 = COPY $d2
  ; CHECK-NEXT:   dead $p3, dead $dc3 = VST_2D_dmw_sts_w killed $wl4, killed $p3, $d3
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $r0, $p0, $p1, $p2, $d0, $d1_3d, $d2
  LoopStart $r0, 0
  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2
    %110:ep = COPY $p0
    %111:ed = COPY $d0
    undef %0.sub_256_lo:mxa, %110:ep, %111.sub_dim_count:ed = VLDA_2D_dmw_lda_w %110, killed %111
    %99:ep = COPY $p1
    %100:eds = COPY $d1_3d
    undef %3.sub_256_lo:mxa, %99:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %99, killed %100
    %7:mxm, %8:el = VMAX_LT_D8 %0, %3, implicit $crvaddsign
    %120:ep = COPY $p2
    %121:ed = COPY $d2
    %120:ep, %121.sub_dim_count:ed = VST_2D_dmw_sts_w %7.sub_256_lo:mxm, killed %120, killed %121
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    PseudoRET implicit $lr
...

# Check the ability to find nested loop bodies.
---
name:            nested_loop_test
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: nested_loop_test
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.4(0x30000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $r1, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r2 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r3 = GE renamable $r2, renamable $r0
  ; CHECK-NEXT:   PseudoJNZ killed renamable $r3, %bb.4
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $r1, $r2, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r3 = MOV_RLC_imm10_pseudo 2
  ; CHECK-NEXT:   renamable $r4 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x50000000), %bb.5(0x30000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r5 = GE renamable $r2, renamable $r1
  ; CHECK-NEXT:   PseudoJNZ killed renamable $r5, %bb.5
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.6(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r5 = LSHL renamable $r4, renamable $r3
  ; CHECK-NEXT:   renamable $dj0 = COPY killed renamable $r5
  ; CHECK-NEXT:   renamable $r5 = GEU renamable $r3, renamable $r4
  ; CHECK-NEXT:   renamable $r6 = COPY renamable $r1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   successors: %bb.4(0x04000000), %bb.2(0x7c000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r4 = nuw nsw ADD_add_r_ri killed renamable $r4, 1, implicit-def dead $srcarry
  ; CHECK-NEXT:   renamable $r5 = EQ renamable $r0, renamable $r4
  ; CHECK-NEXT:   PseudoJNZ killed renamable $r5, %bb.4
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6:
  ; CHECK-NEXT:   successors: %bb.7(0x40000000), %bb.8(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $dj0, $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJNZ renamable $r5, %bb.8
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7:
  ; CHECK-NEXT:   successors: %bb.8(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $dj0, $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $p3 = COPY $p0
  ; CHECK-NEXT:   renamable $d3 = COPY $d0
  ; CHECK-NEXT:   $wl0, dead $p3, dead $dc3 = VLDA_2D_dmw_lda_w killed $p3, $d3
  ; CHECK-NEXT:   renamable $p3 = COPY $p1
  ; CHECK-NEXT:   renamable $d3_3d = COPY $d1_3d
  ; CHECK-NEXT:   $wl2, dead $p3, dead $dc3, dead $dc7 = VLDA_3D_dmw_lda_w killed $p3, $d3_3d
  ; CHECK-NEXT:   renamable $x0, dead renamable $l4 = VMAX_LT_D8 renamable $x0, renamable $x2, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $p3 = COPY $p2
  ; CHECK-NEXT:   renamable $d3 = COPY $d2
  ; CHECK-NEXT:   dead $p3, dead $dc3 = VST_2D_dmw_sts_w killed $wl0, killed $p3, $d3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8:
  ; CHECK-NEXT:   successors: %bb.5(0x04000000), %bb.6(0x7c000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $dj0, $p0, $p1, $p2, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r6 = ADD_add_r_ri killed renamable $r6, -1, implicit-def dead $srcarry
  ; CHECK-NEXT:   PseudoJZ renamable $r6, %bb.5
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.6
  bb.0:
    successors: %bb.1(0x50000000), %bb.4(0x30000000)
    liveins: $p0, $r0, $r1, $p1, $p2, $d0, $d1_3d, $d2

    renamable $r2 = MOV_RLC_imm10_pseudo 0
    renamable $r3 = GE renamable $r2, renamable $r0
    PseudoJNZ killed renamable $r3, %bb.4
    PseudoJ_jump_imm %bb.1

  bb.1:;for.cond1.preheader.lr.ph:
    successors: %bb.2(0x80000000)
    liveins: $p0, $r0, $r1, $r2, $p1, $p2, $d0, $d1_3d, $d2

    renamable $r3 = MOV_RLC_imm10_pseudo 2
    renamable $r4 = MOV_RLC_imm10_pseudo 0

  bb.2:;for.cond1.preheader:
    successors: %bb.3(0x50000000), %bb.5(0x30000000)
    liveins: $p0, $r0, $r1, $r2, $r3, $r4, $p1, $p2, $d0, $d1_3d, $d2

    renamable $r5 = GE renamable $r2, renamable $r1
    PseudoJNZ killed renamable $r5, %bb.5
    PseudoJ_jump_imm %bb.3

  bb.3:;for.body4.lr.ph:
    successors: %bb.6(0x80000000)
    liveins: $p0, $r0, $r1, $r2, $r3, $r4, $p1, $p2, $d0, $d1_3d, $d2

    renamable $r5 = LSHL renamable $r4, renamable $r3
    renamable $dj0 = COPY killed renamable $r5
    renamable $r5 = GEU renamable $r3, renamable $r4
    renamable $r6 = COPY renamable $r1
    PseudoJ_jump_imm %bb.6

  bb.4:;for.cond.cleanup:
    PseudoRET implicit $lr

  bb.5:;for.cond.cleanup3:
    successors: %bb.4(0x04000000), %bb.2(0x7c000000)
    liveins: $p0, $r0, $r1, $r2, $r3, $r4, $p1, $p2, $d0, $d1_3d, $d2

    renamable $r4 = nuw nsw ADD_add_r_ri killed renamable $r4, 1, implicit-def dead $srcarry
    renamable $r5 = EQ renamable $r0, renamable $r4
    PseudoJNZ killed renamable $r5, %bb.4
    PseudoJ_jump_imm %bb.2

  bb.6:;.for.body4:
    successors: %bb.7(0x40000000), %bb.8(0x40000000)
    liveins: $dj0, $p0, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $p1, $p2, $d0, $d1_3d, $d2

    PseudoJNZ renamable $r5, %bb.8
    PseudoJ_jump_imm %bb.7

  bb.7:;if.then:
    successors: %bb.8(0x80000000)
    liveins: $dj0, $p0, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $p1, $p2, $d0, $d1_3d, $d2
    %210:ep = COPY $p0
    %211:ed = COPY $d0
    undef %20.sub_256_lo:mxa, %210:ep, %211.sub_dim_count:ed = VLDA_2D_dmw_lda_w %210, killed %211
    %299:ep = COPY $p1
    %200:eds = COPY $d1_3d
    undef %23.sub_256_lo:mxa, %299:ep, %200.sub_dim_count:eds, %200.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %299, killed %200
    %27:mxm, %28:el = VMAX_LT_D8 %20, %23, implicit $crvaddsign
    %220:ep = COPY $p2
    %221:ed = COPY $d2
    %220:ep, %221.sub_dim_count:ed = VST_2D_dmw_sts_w %27.sub_256_lo:mxm, killed %220, killed %221

  bb.8:;for.inc:
    successors: %bb.5(0x04000000), %bb.6(0x7c000000)
    liveins: $dj0, $p0, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $p1, $p2, $d0, $d1_3d, $d2

    renamable $r6 = ADD_add_r_ri killed renamable $r6, -1, implicit-def dead $srcarry
    PseudoJZ renamable $r6, %bb.5
    PseudoJ_jump_imm %bb.6

...

# Check if the blocked super/sub-register ($wh3, $wl0, $wl1, $y2, $y3) will
# interfere in the renaming for the larger Def (%7:mxm), i.e. the registers
# ($x0, $x4, $x5, $x6, $x7, $x8) are already blocked and are not available for
# register renaming.
---
name:            test_interference_super_sub_regs
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_interference_super_sub_regs
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $wh3, $wl0, $wl1, $y2, $y3, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $wh3, $wl0, $wl1, $y2, $y3, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $p3 = COPY $p0
  ; CHECK-NEXT:   renamable $d3 = COPY $d0
  ; CHECK-NEXT:   $wl2, dead $p3, dead $dc3 = VLDA_2D_dmw_lda_w killed $p3, $d3
  ; CHECK-NEXT:   renamable $p3 = COPY $p1
  ; CHECK-NEXT:   renamable $d3_3d = COPY $d1_3d
  ; CHECK-NEXT:   $wl8, dead $p3, dead $dc3, dead $dc7 = VLDA_3D_dmw_lda_w killed $p3, $d3_3d
  ; CHECK-NEXT:   renamable $x10, dead renamable $l4 = VMAX_LT_D8 renamable $x2, renamable $x8, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $p3 = COPY $p2
  ; CHECK-NEXT:   renamable $d3 = COPY $d2
  ; CHECK-NEXT:   dead $p3, dead $dc3 = VST_2D_dmw_sts_w killed $wl10, killed $p3, $d3
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $wh3, $wl0, $wl1, $y2, $y3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $wl0, implicit $wl1, implicit $wh3, implicit $y2, implicit $y3
  bb.0.entry:
  successors: %bb.1
  liveins: $r0, $p0, $p1, $p2, $d0, $d1_3d, $d2, $wl0, $wl1, $wh3, $y2, $y3
  LoopStart $r0, 0
  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2, $wl0, $wl1, $wh3, $y2, $y3
    %110:ep = COPY $p0
    %111:ed = COPY $d0
    undef %0.sub_256_lo:mxa, %110:ep, %111.sub_dim_count:ed = VLDA_2D_dmw_lda_w %110, killed %111
    %99:ep = COPY $p1
    %100:eds = COPY $d1_3d
    undef %3.sub_256_lo:mxa, %99:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %99, killed %100
    %7:mxm, %8:el = VMAX_LT_D8 %0, %3, implicit $crvaddsign
    %120:ep = COPY $p2
    %121:ed = COPY $d2
    %120:ep, %121.sub_dim_count:ed = VST_2D_dmw_sts_w %7.sub_256_lo:mxm, killed %120, killed %121
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    liveins: $wl0, $wl1, $wh3, $y2, $y3
    PseudoRET implicit $lr,  implicit $wl0, implicit $wl1, implicit $wh3, implicit $y2, implicit $y3
...

# Ignore copy instructions for renaming candidates.
---
name:            copy_rename
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: copy_rename
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $p3 = COPY $p0
  ; CHECK-NEXT:   renamable $d3 = COPY $d0
  ; CHECK-NEXT:   $wl0, dead $p3, dead $dc3 = VLDA_2D_dmw_lda_w killed $p3, $d3
  ; CHECK-NEXT:   renamable $p3 = COPY $p1
  ; CHECK-NEXT:   renamable $d3_3d = COPY $d1_3d
  ; CHECK-NEXT:   $wl2, dead $p3, dead $dc3, dead $dc7 = VLDA_3D_dmw_lda_w killed $p3, $d3_3d
  ; CHECK-NEXT:   renamable $x4, dead renamable $l4 = VMAX_LT_D8 killed renamable $x0, renamable $x2, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $p3 = COPY $p2
  ; CHECK-NEXT:   renamable $d3 = COPY $d2
  ; CHECK-NEXT:   dead $p3, dead $dc3 = VST_2D_dmw_sts_w killed $wl4, killed $p3, $d3
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $r0, $p0, $p1, $p2, $d0, $d1_3d, $d2
  LoopStart $r0, 0
  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2
    %110:ep = COPY $p0
    %111:ed = COPY $d0
    undef %0.sub_256_lo:mxa, %110:ep, %111.sub_dim_count:ed = VLDA_2D_dmw_lda_w %110, killed %111
    %99:ep = COPY $p1
    %100:eds = COPY $d1_3d
    %1:mxa = COPY %0
    undef %3.sub_256_lo:mxa, %99:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %99, killed %100
    %7:mxm, %8:el = VMAX_LT_D8 %1, %3, implicit $crvaddsign
    %120:ep = COPY $p2
    %121:ed = COPY $d2
    %120:ep, %121.sub_dim_count:ed = VST_2D_dmw_sts_w %7.sub_256_lo:mxm, killed %120, killed %121
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    PseudoRET implicit $lr
...

# Don't rename superregisters
# (undef %281.sub_256_lo:vec512, undef %282.sub_256_lo:vec512),
# if parts of the sub-register (%281.sub_256_hi:vec512, %282.sub_256_hi:vec512)
# are defined by a copy.
---
name:            redundant_sub_reg_moves
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: redundant_sub_reg_moves
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $bml1, $bml2, $p0, $r0, $r6, $wl0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $bml1, $bml2, $p0, $r6, $wl0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
  ; CHECK-NEXT:   renamable $wh2 = COPY $wl0
  ; CHECK-NEXT:   renamable $bmh0 = VCONV_FP32_BF16 renamable $wl2
  ; CHECK-NEXT:   $bml1 = VMAC_F_vmac_bm_core_dense killed renamable $bmh0, killed renamable $x2, renamable $x2, $r6, implicit-def dead $srfpflags, implicit $crfpmask
  ; CHECK-NEXT:   renamable $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
  ; CHECK-NEXT:   renamable $wh2 = COPY $wl0
  ; CHECK-NEXT:   renamable $bmh1 = VCONV_FP32_BF16 renamable $wl2
  ; CHECK-NEXT:   $bml2 = VMAC_F_vmac_bm_core_dense killed renamable $bmh1, killed renamable $x2, renamable $x2, $r6, implicit-def dead $srfpflags, implicit $crfpmask
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $bml1, $bml2, $p0, $r6, $wl0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $r0, $p0, $wl0, $r6, $bml1, $bml2
  LoopStart $r0, 0
  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $wl0, $r6, $bml1, $bml2
    undef %281.sub_256_lo:vec512 = VLDA_dmw_lda_w_ag_idx_imm $p0, 32
    %281.sub_256_hi:vec512 = COPY $wl0
    %271:acc512 = VCONV_FP32_BF16 %281.sub_256_lo:vec512
    $bml1 = VMAC_F_vmac_bm_core_dense %271, %281:vec512, %281:vec512, $r6, implicit-def dead $srfpflags, implicit $crfpmask

    undef %282.sub_256_lo:vec512 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    %282.sub_256_hi:vec512 = COPY $wl0
    %272:acc512 = VCONV_FP32_BF16 %282.sub_256_lo:vec512
    $bml2 = VMAC_F_vmac_bm_core_dense %272, %282:vec512, %282:vec512, $r6, implicit-def dead $srfpflags, implicit $crfpmask
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    liveins: $p0, $wl0, $r6, $bml1, $bml2
    PseudoRET implicit $lr
...
