# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# NOTE: Example file for Write After Write Register Renaming in Loop test
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple=aie2 -verify-machineinstrs --run-pass=greedy,aie-wawreg-rewrite,virtregrewriter %s -o - | FileCheck %s
#
---
name:            test_base
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_base
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $p3 = COPY $p0
  ; CHECK-NEXT:   renamable $d3 = COPY $d0
  ; CHECK-NEXT:   $wl0, dead $p3, dead $dc3 = VLDA_2D_dmw_lda_w killed $p3, $d3
  ; CHECK-NEXT:   renamable $p3 = COPY $p1
  ; CHECK-NEXT:   renamable $d3_3d = COPY $d1_3d
  ; CHECK-NEXT:   $wl2, dead $p3, dead $dc3, dead $dc7 = VLDA_3D_dmw_lda_w killed $p3, $d3_3d
  ; CHECK-NEXT:   renamable $x1, dead renamable $l4 = VMAX_LT_D8 renamable $x0, renamable $x2, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $p3 = COPY $p2
  ; CHECK-NEXT:   renamable $d3 = COPY $d2
  ; CHECK-NEXT:   dead $p3, dead $dc3 = VST_2D_dmw_sts_w killed $wl1, killed $p3, $d3
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2
  liveins: $r0
  LoopStart $r0


  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2
    %110:ep = COPY $p0
    %111:ed = COPY $d0
    undef %0.sub_256_lo:mxa, %110:ep, %111.sub_dim_count:ed = VLDA_2D_dmw_lda_w %110, killed %111
    %99:ep = COPY $p1
    %100:eds = COPY $d1_3d
    undef %3.sub_256_lo:mxa, %99:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %99, killed %100
    %7:mxm, %8:el = VMAX_LT_D8 %0, %3, implicit $crvaddsign
    %120:ep = COPY $p2
    %121:ed = COPY $d2
    %120:ep, %121.sub_dim_count:ed = VST_2D_dmw_sts_w %7.sub_256_lo:mxm, killed %120, killed %121
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    PseudoRET implicit $lr
...
---
name:            test_interference
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_interference
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT:   $wl0, $p0, $dc0 = VLDA_2D_dmw_lda_w killed $p0, $d0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $x0:0x0000000000000002, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl2, $p0, $dc0 = VLDA_2D_dmw_lda_w killed $p0, $d0
  ; CHECK-NEXT:   renamable $p3 = COPY $p1
  ; CHECK-NEXT:   renamable $d3_3d = COPY $d1_3d
  ; CHECK-NEXT:   $wl4, dead $p3, dead $dc3, dead $dc7 = VLDA_3D_dmw_lda_w killed $p3, $d3_3d
  ; CHECK-NEXT:   renamable $x1, dead renamable $l4 = VMAX_LT_D8 renamable $x2, renamable $x4, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $p3 = COPY $p2
  ; CHECK-NEXT:   renamable $d3 = COPY $d2
  ; CHECK-NEXT:   $p3, $dc3 = VST_2D_dmw_sts_w killed $wl1, killed $p3, $d3
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $d3:0x0000000000000870, $p3, $x0:0x0000000000000002
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   dead $p3, dead $dc3 = VST_2D_dmw_sts_w killed $wl0, killed $p3, $d3
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2
  liveins: $r0
  LoopStart $r0
  %110:ep = COPY $p0
  %111:ed = COPY $d0
  undef %200.sub_256_lo:mxa, %110:ep, %111.sub_dim_count:ed = VLDA_2D_dmw_lda_w %110, killed %111


  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p1, $p2, $d0, $d1_3d, $d2
    undef %0.sub_256_lo:mxa, %110:ep, %111.sub_dim_count:ed = VLDA_2D_dmw_lda_w %110, killed %111
    %99:ep = COPY $p1
    %100:eds = COPY $d1_3d
    undef %3.sub_256_lo:mxa, %99:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %99, killed %100
    %7:mxm, %8:el = VMAX_LT_D8 %0, %3, implicit $crvaddsign
    %120:ep = COPY $p2
    %121:ed = COPY $d2
    %120:ep, %121.sub_dim_count:ed = VST_2D_dmw_sts_w %7.sub_256_lo:mxm, killed %120, killed %121
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    %120:ep, %121.sub_dim_count:ed = VST_2D_dmw_sts_w %200.sub_256_lo:mxa, killed %120, killed %121
    PseudoRET implicit $lr
...
---
name:            test_waw_super_sub_regs
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_waw_super_sub_regs
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $r0, $wh3, $wl0, $wl1, $y2, $y3, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $d2, $p0, $p1, $p2, $wh3, $wl0, $wl1, $y2, $y3, $d1_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $p3 = COPY $p0
  ; CHECK-NEXT:   renamable $d3 = COPY $d0
  ; CHECK-NEXT:   $wl2, dead $p3, dead $dc3 = VLDA_2D_dmw_lda_w killed $p3, $d3
  ; CHECK-NEXT:   renamable $p3 = COPY $p1
  ; CHECK-NEXT:   renamable $d3_3d = COPY $d1_3d
  ; CHECK-NEXT:   $wl8, dead $p3, dead $dc3, dead $dc7 = VLDA_3D_dmw_lda_w killed $p3, $d3_3d
  ; CHECK-NEXT:   renamable $x9, dead renamable $l4 = VMAX_LT_D8 renamable $x2, renamable $x8, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $p3 = COPY $p2
  ; CHECK-NEXT:   renamable $d3 = COPY $d2
  ; CHECK-NEXT:   dead $p3, dead $dc3 = VST_2D_dmw_sts_w killed $wl9, killed $p3, $d3
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $wh3, $wl0, $wl1, $y2, $y3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $wl0, implicit $wl1, implicit $wh3, implicit $y2, implicit $y3
  bb.0.entry:
  successors: %bb.1
  liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2, $wl0, $wl1, $wh3, $y2, $y3
  liveins: $r0
  LoopStart $r0

  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $p2, $d0, $d1_3d, $d2, $wl0, $wl1, $wh3, $y2, $y3
    %110:ep = COPY $p0
    %111:ed = COPY $d0
    undef %0.sub_256_lo:mxa, %110:ep, %111.sub_dim_count:ed = VLDA_2D_dmw_lda_w %110, killed %111
    %99:ep = COPY $p1
    %100:eds = COPY $d1_3d
    undef %3.sub_256_lo:mxa, %99:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %99, killed %100
    %7:mxm, %8:el = VMAX_LT_D8 %0, %3, implicit $crvaddsign
    %120:ep = COPY $p2
    %121:ed = COPY $d2
    %120:ep, %121.sub_dim_count:ed = VST_2D_dmw_sts_w %7.sub_256_lo:mxm, killed %120, killed %121
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    liveins: $wl0, $wl1, $wh3, $y2, $y3
    PseudoRET implicit $lr,  implicit $wl0, implicit $wl1, implicit $wh3, implicit $y2, implicit $y3
...
---
name:            test_waw_super_sub_acc_replacement
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_waw_super_sub_acc_replacement
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r0, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x0 = VBCST_8 $r25
  ; CHECK-NEXT:   renamable $cm0 = VLDA_UPS_S64_S16_ag_idx $s0, $p0, $dj0, implicit-def $srups_of, implicit $crsat
  ; CHECK-NEXT:   renamable $bmh1 = VMUL_F_vmac_bm_core_dense killed renamable $x0, renamable $x0, $r25, implicit-def $srfpflags, implicit $crfpmask
  ; CHECK-NEXT:   renamable $bmh2 = VADD_F killed renamable $bmh1, renamable $bmh1, $r25, implicit-def $srfpflags, implicit $crfpmask
  ; CHECK-NEXT:   renamable $cm3 = VADD killed renamable $cm0, renamable $cm0, $r25
  ; CHECK-NEXT:   VST_SRS_D16_S32_ag_idx $p0, $dj0, killed renamable $bmh2, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  ; CHECK-NEXT:   VST_SRS_D8_S32_ag_idx $p0, $dj0, killed renamable $cm3, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0
  liveins: $r0
  LoopStart $r0

  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0
    %1:mxm = VBCST_8  $r25
    %10:mcmm = VLDA_UPS_S64_S16_ag_idx $s0, $p0, $dj0, implicit-def $srups_of, implicit $crsat

    %3:mbma = VMUL_F_vmac_bm_core_dense %1, %1, $r25, implicit-def $srfpflags, implicit $crfpmask
    %4:mbma = VADD_F %3, %3, $r25, implicit-def $srfpflags, implicit $crfpmask
    %11:mcmm = VADD %10, %10, $r25

    VST_SRS_D16_S32_ag_idx $p0, $dj0, %4, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    VST_SRS_D8_S32_ag_idx $p0, $dj0, %11, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0
    PseudoRET implicit $lr
...
---
name:            test_waw_gpr_replacement
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_waw_gpr_replacement
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r0, $r1, $r2, $r4, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT:   renamable $r0 = ADD $r1, $r2, implicit-def $srcarry
  ; CHECK-NEXT:   $r8 = ADD renamable $r0, $r1, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $r0 = AND $r8, killed renamable $r0
  ; CHECK-NEXT:   ST_dms_sts_idx_imm killed renamable $r0, $p0, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r2, $r4, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r0 = AND $r2, $r4
  ; CHECK-NEXT:   renamable $r0 = ADD $r2, killed renamable $r0, implicit-def dead $srcarry
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r0, $r2, $r4, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0
  liveins: $r0, $r1, $r2, $r4
  LoopStart $r0
  %100:er = ADD $r1, $r2, implicit-def $srcarry
  $r8 = ADD %100, $r1, implicit-def $srcarry
  %103:er = AND $r8, %100
  ST_dms_sts_idx_imm %103, $p0, 0

  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0, $r2, $r4
    %20:er = AND $r2, $r4
    %21:er = ADD $r2, %20, implicit-def dead $srcarry

    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0, $r2, $r4
    $r0 = COPY %21
    PseudoRET implicit $lr
...
