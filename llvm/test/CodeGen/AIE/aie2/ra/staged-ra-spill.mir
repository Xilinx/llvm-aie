# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -O2 -mtriple=aie2 -verify-machineinstrs --aie-staged-ra -start-before=greedy -stop-after=virtregrewriter %s -o - \
# RUN:    | FileCheck %s --check-prefix=RA

# Test what happens  the 2D allocation stage needs to spill, and then the
# last allocation stage needs to spill again to make space for allocating
# %7:edj = MOV_PD_imm10_pseudo 12.
---
name:            test_spill_2d_last_stage
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $p1, $d1, $d2, $d3, $d4, $d5, $d6, $d7
    ; RA-LABEL: name: test_spill_2d_last_stage
    ; RA: liveins: $d1, $d2, $d3, $d4, $d5, $d6, $d7, $p0, $p1
    ; RA-NEXT: {{  $}}
    ; RA-NEXT: renamable $dn0 = LDA_dms_lda_idx_imm renamable $p1, 0
    ; RA-NEXT: ST_D_SPILL renamable $d0, %stack.0, implicit $sp :: (store (s128) into %stack.0, align 4)
    ; RA-NEXT: renamable $d0 = LDA_D_SPILL %stack.0, implicit $sp :: (load (s128) from %stack.0, align 4)
    ; RA-NEXT: renamable $m0 = LDA_dms_lda_idx_imm renamable $p1, 4
    ; RA-NEXT: ST_D_SPILL killed renamable $d0, %stack.0, implicit $sp :: (store (s128) into %stack.0, align 4)
    ; RA-NEXT: renamable $d0 = LDA_D_SPILL %stack.0, implicit $sp :: (load (s128) from %stack.0, align 4)
    ; RA-NEXT: renamable $dj0 = LDA_dms_lda_idx_imm renamable $p1, 8
    ; RA-NEXT: ST_D_SPILL killed renamable $d0, %stack.0, implicit $sp :: (store (s128) into %stack.0, align 4)
    ; RA-NEXT: renamable $dj0 = MOV_PD_imm10_pseudo 12
    ; RA-NEXT: renamable $r0 = LDA_dms_lda_idx renamable $p1, killed renamable $dj0
    ; RA-NEXT: renamable $d0 = LDA_D_SPILL %stack.0, implicit $sp :: (load (s128) from %stack.0, align 4)
    ; RA-NEXT: renamable $dc0 = COPY killed renamable $r0
    ; RA-NEXT: ST_D_SPILL killed renamable $d0, %stack.0, implicit $sp :: (store (s128) into %stack.0, align 4)
    ; RA-NEXT: renamable $dn0 = LDA_dms_lda_idx_imm renamable $p1, 16
    ; RA-NEXT: renamable $m0 = LDA_dms_lda_idx_imm renamable $p1, 20
    ; RA-NEXT: renamable $dj0 = LDA_dms_lda_idx_imm renamable $p1, 24
    ; RA-NEXT: renamable $dc0 = LDA_dms_lda_idx_imm killed renamable $p1, 28
    ; RA-NEXT: ST_D_SPILL killed renamable $d0, %stack.1, implicit $sp :: (store (s128) into %stack.1, align 4)
    ; RA-NEXT: renamable $d0 = LDA_D_SPILL %stack.0, implicit $sp :: (load (s128) from %stack.0, align 4)
    ; RA-NEXT: $p0, $dc0 = PADDA_2D_split killed $p0, $m0, $dn0, $dj0, $dc0
    ; RA-NEXT: ST_D_SPILL killed renamable $d0, %stack.0, implicit $sp :: (store (s128) into %stack.0, align 4)
    ; RA-NEXT: renamable $d0 = LDA_D_SPILL %stack.1, implicit $sp :: (load (s128) from %stack.1, align 4)
    ; RA-NEXT: $p0, dead $dc0 = PADDA_2D_split killed $p0, $m0, $dn0, $dj0, $dc0
    ; RA-NEXT: renamable $d0 = LDA_D_SPILL %stack.0, implicit $sp :: (load (s128) from %stack.0, align 4)
    ; RA-NEXT: PseudoRET implicit $lr, implicit killed renamable $p0, implicit killed renamable $dc0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7
    %20:ep = COPY $p0
    %21:ep = COPY $p1
    undef %100.sub_dim_size:ed = LDA_dms_lda_idx_imm %21, 0
    %100.sub_mod:ed = LDA_dms_lda_idx_imm %21, 4
    %100.sub_dim_stride:ed = LDA_dms_lda_idx_imm %21, 8
    %7:edj = MOV_PD_imm10_pseudo 12
    %8:er = LDA_dms_lda_idx %21, %7
    %100.sub_dim_count:ed = COPY %8
    undef %101.sub_dim_size:ed = LDA_dms_lda_idx_imm %21, 16
    %101.sub_mod:ed = LDA_dms_lda_idx_imm %21, 20
    %101.sub_dim_stride:ed = LDA_dms_lda_idx_imm %21, 24
    %101.sub_dim_count:ed = LDA_dms_lda_idx_imm %21, 28
    %20:ep, %100.sub_dim_count:ed = PADDA_2D_split %20, %100.sub_mod, %100.sub_dim_size, %100.sub_dim_stride, %100.sub_dim_count
    %20:ep, %101.sub_dim_count:ed = PADDA_2D_split %20, %101.sub_mod, %101.sub_dim_size, %101.sub_dim_stride, %101.sub_dim_count
    PseudoRET implicit $lr, implicit %20, implicit %100.sub_dim_count, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7
...
