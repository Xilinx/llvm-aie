# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --start-before=greedy --stop-after=virtregrewriter --mtriple=aie2 -o - %s | FileCheck %s

# A simpler version of debug_value_2d_reg.mir to verify DBG instructions are
# handled gracefully by the custom RA pipeline.

--- |
  source_filename = "t.ll"
  target datalayout = "e-m:e-p:20:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32"
  target triple = "aie2"

  define i32 @foo(i32 noundef returned %a) !dbg !6 {
  entry:
    tail call void @llvm.dbg.value(metadata i32 %a, metadata !11, metadata !DIExpression()), !dbg !12
    ret i32 %a
  }

  declare void @llvm.dbg.value(metadata, metadata, metadata) #0

  attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5}

  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 18.0.0git", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "t.c", directory: "llvm-aie")
  !2 = !{i32 7, !"Dwarf Version", i32 4}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"debug-info-assignment-tracking", i1 true}
  !6 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !10)
  !7 = !DISubroutineType(types: !8)
  !8 = !{!9, !9}
  !9 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !10 = !{!11}
  !11 = !DILocalVariable(name: "a", arg: 1, scope: !6, file: !1, line: 1, type: !9)
  !12 = !DILocation(line: 0, scope: !6)

...
---
name:            foo
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $r1

    ; CHECK-LABEL: name: foo
    ; CHECK: liveins: $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r0 = COPY $r1
    ; CHECK-NEXT: DBG_VALUE $r0, $noreg, !11, !DIExpression(), debug-location !12
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:er = COPY $r1
    DBG_VALUE %0, $noreg, !11, !DIExpression(), debug-location !12
    $r0 = COPY %0
    PseudoRET implicit $lr, implicit killed $r0

...
