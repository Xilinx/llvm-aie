# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -verify-machineinstrs --run-pass=aie-subregs %s -o - | FileCheck %s

---
name:            test_vld_2d
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $r0, $r1, $r2, $r3, $p0, $m0, $s0, $s1, $s2, $s3

    ; CHECK-LABEL: name: test_vld_2d
    ; CHECK: liveins: $r0, $r1, $r2, $r3, $p0, $m0, $s0, $s1, $s2, $s3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:em = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edn = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY $r2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edc = COPY $r3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[COPY]], %subreg.sub_mod, [[COPY1]], %subreg.sub_dim_size, [[COPY2]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $wl0, %6:ep, [[COPY5]].sub_dim_count:ed = VLDA_2D_dmw_lda_w [[COPY4]], [[COPY5]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $amll0, %8:ep, [[COPY6]].sub_dim_count:ed = VLDA_2D_dmw_lda_am [[COPY4]], [[COPY6]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $bmh0, %10:ep, [[COPY7]].sub_dim_count:ed = VLDA_2D_UPS_S32_D16 $s0, [[COPY4]], [[COPY7]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $bml2, %12:ep, [[COPY8]].sub_dim_count:ed = VLDA_2D_UPS_S32_S16 $s1, [[COPY4]], [[COPY8]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $bmh5, %14:ep, [[COPY9]].sub_dim_count:ed = VLDA_2D_UPS_S64_D32 $s2, [[COPY4]], [[COPY9]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $bml7, %16:ep, [[COPY10]].sub_dim_count:ed = VLDA_2D_UPS_S64_S32 $s3, [[COPY4]], [[COPY10]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $cm0, %18:ep, [[COPY11]].sub_dim_count:ed = VLDA_2D_UPS_S32_D8 $s0, [[COPY4]], [[COPY11]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $cm2, %20:ep, [[COPY12]].sub_dim_count:ed = VLDA_2D_UPS_S32_S8 $s1, [[COPY4]], [[COPY12]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $cm5, %22:ep, [[COPY13]].sub_dim_count:ed = VLDA_2D_UPS_S64_S16 $s2, [[COPY4]], [[COPY13]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $cm7, %24:ep, [[COPY14]].sub_dim_count:ed = VLDA_2D_UPS_S64_D16 $s3, [[COPY4]], [[COPY14]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $wl0, %26:ep, [[COPY15]].sub_dim_count:ed = VLDB_2D [[COPY4]], [[COPY15]]
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $wl0, %28:ep, [[COPY16]].sub_dim_count:ed = VLDB_2D_128 [[COPY4]], [[COPY16]]
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $bml0, %30:ep, [[COPY17]].sub_dim_count:ed = VLDA_2D_CONV_FP32_BF16 [[COPY4]], [[COPY17]]
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $x0, %32:ep, [[COPY18]].sub_dim_count:ed = VLDB_2D_UNPACK_S8_S4 [[COPY4]], [[COPY18]]
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $x1, %34:ep, [[COPY19]].sub_dim_count:ed = VLDB_2D_UNPACK_S16_S8 [[COPY4]], [[COPY19]]
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $x3, %36:ep, [[COPY20]].sub_dim_count:ed = VLDB_2D_UNPACK_D8_D4 [[COPY4]], [[COPY20]], implicit $crunpacksign
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $x6, %38:ep, [[COPY21]].sub_dim_count:ed = VLDB_2D_UNPACK_D16_D8 [[COPY4]], [[COPY21]], implicit $crunpacksign
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:ed = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: $wl0, %40:ep, [[COPY22]].sub_dim_count:ed = VLD_2D_pseudo [[COPY4]], [[COPY22]]
    %0:em =  COPY $r0
    %1:edn = COPY $r1
    %2:edj = COPY $r2
    %3:edc = COPY $r3
    %4:ep = COPY $p0

    %10:ed = REG_SEQUENCE %0, %subreg.sub_mod, %1, %subreg.sub_dim_size, %2, %subreg.sub_dim_stride, %3, %subreg.sub_dim_count
    $wl0, %20:ep, %21:edc = VLDA_2D_dmw_lda_w %4, %10
    $amll0, %30:ep, %31:edc = VLDA_2D_dmw_lda_am %4, %10
    $bmh0, %40:ep, %41:edc = VLDA_2D_UPS_S32_D16 $s0, %4, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $bml2, %50:ep, %51:edc = VLDA_2D_UPS_S32_S16 $s1, %4, %10, implicit-def $srups_of, implicit $crsat
    $bmh5, %60:ep, %61:edc = VLDA_2D_UPS_S64_D32 $s2, %4, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $bml7, %70:ep, %71:edc = VLDA_2D_UPS_S64_S32 $s3, %4, %10, implicit-def $srups_of, implicit $crsat
    $cm0, %80:ep, %81:edc = VLDA_2D_UPS_S32_D8  $s0, %4, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $cm2, %90:ep, %91:edc = VLDA_2D_UPS_S32_S8  $s1, %4, %10, implicit-def $srups_of, implicit $crsat
    $cm5, %100:ep, %101:edc = VLDA_2D_UPS_S64_S16 $s2, %4, %10, implicit-def $srups_of, implicit $crsat
    $cm7, %110:ep, %111:edc = VLDA_2D_UPS_S64_D16 $s3, %4, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $wl0, %120:ep, %121:edc = VLDB_2D %4, %10
    $wl0, %130:ep, %131:edc = VLDB_2D_128 %4, %10
    $bml0, %140:ep, %141:edc = VLDA_2D_CONV_FP32_BF16 %4, %10
    $x0, %150:ep, %151:edc = VLDB_2D_UNPACK_S8_S4 %4, %10
    $x1, %160:ep, %161:edc = VLDB_2D_UNPACK_S16_S8 %4, %10
    $x3, %170:ep, %171:edc = VLDB_2D_UNPACK_D8_D4 %4, %10, implicit $crunpacksign
    $x6, %180:ep, %181:edc = VLDB_2D_UNPACK_D16_D8 %4, %10, implicit $crunpacksign
    $wl0, %190:ep, %191:edc = VLD_2D_pseudo %4, %10
...

---
name:            test_vld_3d
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $d0_3d, $p0, $s0, $s1, $s2, $s3
    ; CHECK-LABEL: name: test_vld_3d
    ; CHECK: liveins: $d0_3d, $p0, $s0, $s1, $s2, $s3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d0_3d
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $wl0, %2:ep, [[COPY2]].sub_dim_count:eds, [[COPY2]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $amll0, %5:ep, [[COPY3]].sub_dim_count:eds, [[COPY3]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_am [[COPY]], [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $bmh0, %8:ep, [[COPY4]].sub_dim_count:eds, [[COPY4]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D16 $s0, [[COPY]], [[COPY4]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $bml2, %11:ep, [[COPY5]].sub_dim_count:eds, [[COPY5]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_S16 $s1, [[COPY]], [[COPY5]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $bmh5, %14:ep, [[COPY6]].sub_dim_count:eds, [[COPY6]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_D32 $s2, [[COPY]], [[COPY6]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $bml7, %17:ep, [[COPY7]].sub_dim_count:eds, [[COPY7]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_S32 $s3, [[COPY]], [[COPY7]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $cm0, %20:ep, [[COPY8]].sub_dim_count:eds, [[COPY8]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 $s0, [[COPY]], [[COPY8]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $cm2, %23:ep, [[COPY9]].sub_dim_count:eds, [[COPY9]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_S8 $s1, [[COPY]], [[COPY9]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $cm5, %26:ep, [[COPY10]].sub_dim_count:eds, [[COPY10]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_S16 $s2, [[COPY]], [[COPY10]], implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $cm7, %29:ep, [[COPY11]].sub_dim_count:eds, [[COPY11]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_D16 $s3, [[COPY]], [[COPY11]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $wl0, %32:ep, [[COPY12]].sub_dim_count:eds, [[COPY12]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D [[COPY]], [[COPY12]]
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $wl0, %35:ep, [[COPY13]].sub_dim_count:eds, [[COPY13]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_128 [[COPY]], [[COPY13]]
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $bml0, %38:ep, [[COPY14]].sub_dim_count:eds, [[COPY14]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_CONV_FP32_BF16 [[COPY]], [[COPY14]]
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $x0, %41:ep, [[COPY15]].sub_dim_count:eds, [[COPY15]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_S8_S4 [[COPY]], [[COPY15]]
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $x1, %44:ep, [[COPY16]].sub_dim_count:eds, [[COPY16]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_S16_S8 [[COPY]], [[COPY16]]
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $x3, %47:ep, [[COPY17]].sub_dim_count:eds, [[COPY17]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_D8_D4 [[COPY]], [[COPY17]], implicit $crunpacksign
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $x6, %50:ep, [[COPY18]].sub_dim_count:eds, [[COPY18]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_D16_D8 [[COPY]], [[COPY18]], implicit $crunpacksign
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:eds = COPY [[COPY1]]
    ; CHECK-NEXT: $wl0, %53:ep, [[COPY19]].sub_dim_count:eds, [[COPY19]].sub_hi_dim_then_sub_dim_count:eds = VLD_3D_pseudo [[COPY]], [[COPY19]]
    %0:ep = COPY $p0
    %10:eds = COPY $d0_3d
    $wl0, %20:ep, %21:edc, %22:edc = VLDA_3D_dmw_lda_w %0, %10
    $amll0, %30:ep, %31:edc, %32:edc = VLDA_3D_dmw_lda_am %0, %10
    $bmh0, %40:ep, %41:edc, %42:edc = VLDA_3D_UPS_S32_D16 $s0, %0, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $bml2, %50:ep, %51:edc, %52:edc = VLDA_3D_UPS_S32_S16 $s1, %0, %10, implicit-def $srups_of, implicit $crsat
    $bmh5, %60:ep, %61:edc, %62:edc = VLDA_3D_UPS_S64_D32 $s2, %0, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $bml7, %70:ep, %71:edc, %72:edc = VLDA_3D_UPS_S64_S32 $s3, %0, %10, implicit-def $srups_of, implicit $crsat
    $cm0, %80:ep, %81:edc, %82:edc = VLDA_3D_UPS_S32_D8  $s0, %0, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $cm2, %90:ep, %91:edc, %92:edc = VLDA_3D_UPS_S32_S8  $s1, %0, %10, implicit-def $srups_of, implicit $crsat
    $cm5, %100:ep, %101:edc, %102:edc = VLDA_3D_UPS_S64_S16 $s2, %0, %10, implicit-def $srups_of, implicit $crsat
    $cm7, %110:ep, %111:edc, %112:edc = VLDA_3D_UPS_S64_D16 $s3, %0, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $wl0, %120:ep, %121:edc, %122:edc = VLDB_3D %0, %10
    $wl0, %130:ep, %131:edc, %132:edc = VLDB_3D_128 %0, %10
    $bml0, %140:ep, %141:edc, %142:edc = VLDA_3D_CONV_FP32_BF16 %0, %10
    $x0, %150:ep, %151:edc, %152:edc = VLDB_3D_UNPACK_S8_S4 %0, %10
    $x1, %160:ep, %161:edc, %162:edc = VLDB_3D_UNPACK_S16_S8 %0, %10
    $x3, %170:ep, %171:edc, %172:edc = VLDB_3D_UNPACK_D8_D4 %0, %10, implicit $crunpacksign
    $x6, %180:ep, %181:edc, %182:edc = VLDB_3D_UNPACK_D16_D8 %0, %10, implicit $crunpacksign
    $wl0, %190:ep, %191:edc, %192:edc = VLD_3D_pseudo %0, %10
...
