# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -O2 -mtriple=aie2 -verify-machineinstrs -run-pass=aie-split-instrs-create %s -o - | FileCheck %s

# Verify that instructions are successfully rewritten into _split instructions
# that expose sub-registers.

---
name:            test_split_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1
    ; CHECK-LABEL: name: test_split_2D
    ; CHECK: liveins: $p0, $d1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = PADDA_2D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = PADDB_2D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = PADDS_2D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %20:ep, %100.sub_dim_count:ed = PADDA_2D killed %20, killed %100
    %20:ep, %100.sub_dim_count:ed = PADDB_2D killed %20, killed %100
    dead %20:ep, dead %100.sub_dim_count:ed = PADDS_2D killed %20, killed %100
...

# In particular, pay attention to undef for sub_hi_dim_then_sub_mod.
---
name:            test_split_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d
    ; CHECK-LABEL: name: test_split_3D
    ; CHECK: liveins: $p0, $d1_3d
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = PADDA_3D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = PADDB_3D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = PADDS_3D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = PADDA_3D killed %20, killed %100
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = PADDB_3D killed %20, killed %100
    dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = PADDS_3D killed %20, killed %100
...

---
name:            VLD_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1
    ; CHECK-LABEL: name: VLD_2D
    ; CHECK: liveins: $p0, $d1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: dead %2:mwa, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_dmw_lda_w_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %3:mamm, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_dmw_lda_am_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %4:mwa, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = VLDB_2D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    dead %0:mwa, %20:ep, %100.sub_dim_count:ed = VLDA_2D_dmw_lda_w killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %1:mamm, %20:ep, %100.sub_dim_count:ed = VLDA_2D_dmw_lda_am killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %2:mwa, dead %20:ep, dead %100.sub_dim_count:ed = VLDB_2D killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
...

---
name:            VLD_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d
    ; CHECK-LABEL: name: VLD_3D
    ; CHECK: liveins: $p0, $d1_3d
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: dead %2:mwa, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %3:mamm, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_am_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %4:mwa, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    dead %0:mwa, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %1:mamm, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_am killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %2:mwa, dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = VLDB_3D killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
...

---
name:            VLD_2D_MultiSlot
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1
    ; CHECK-LABEL: name: VLD_2D_MultiSlot
    ; CHECK: liveins: $p0, $d1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: dead [[VLD_2D_pseudo_split:%[0-9]+]]:mwa, [[COPY:%[0-9]+]]:ep, [[COPY1:%[0-9]+]].sub_dim_count:ed = VLD_2D_pseudo_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead [[VLD_2D_pseudo_split1:%[0-9]+]]:mwa, dead [[COPY:%[0-9]+]]:ep, dead [[COPY1:%[0-9]+]].sub_dim_count:ed = VLD_2D_pseudo_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    dead %0:mwa, %20:ep, %100.sub_dim_count:ed = VLD_2D_pseudo killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %2:mwa, dead %20:ep, dead %100.sub_dim_count:ed = VLD_2D_pseudo killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
...


---
name:            VLD_3D_MultiSlot
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d
    ; CHECK-LABEL: name: VLD_3D_MultiSlot
    ; CHECK: liveins: $p0, $d1_3d
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: dead [[VLD_3D_pseudo_split:%[0-9]+]]:mwa, [[COPY:%[0-9]+]]:ep, [[COPY1:%[0-9]+]].sub_dim_count:eds, [[COPY1:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLD_3D_pseudo_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead [[VLD_3D_pseudo_split1:%[0-9]+]]:mwa, dead [[COPY:%[0-9]+]]:ep, dead [[COPY1:%[0-9]+]].sub_dim_count:eds, dead [[COPY1:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLD_3D_pseudo_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    dead %0:mwa, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLD_3D_pseudo killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %2:mwa, dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = VLD_3D_pseudo killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
...

---
name:            VLD_2D_CONV
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1
    ; CHECK-LABEL: name: VLD_2D_CONV
    ; CHECK: liveins: $p0, $d1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: dead %2:mbms, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = VLDA_2D_CONV_FP32_BF16_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    dead %1:mbms, dead %20:ep, dead %100.sub_dim_count:ed = VLDA_2D_CONV_FP32_BF16 killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
...

---
name:            VLD_3D_CONV
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d
    ; CHECK-LABEL: name: VLD_3D_CONV
    ; CHECK: liveins: $p0, $d1_3d
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: dead %2:mbms, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_CONV_FP32_BF16_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    dead %1:mbms, dead %20:ep, dead %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_CONV_FP32_BF16 killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
...


---
name:            VLDB_2D_UNPACK
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1
    ; CHECK-LABEL: name: VLDB_2D_UNPACK
    ; CHECK: liveins: $p0, $d1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: dead %2:mxs, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDB_2D_UNPACK_S8_S4_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %3:mxs, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDB_2D_UNPACK_S16_S8_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %4:mxs, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDB_2D_UNPACK_D8_D4_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit $crunpacksign :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %5:mxs, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = VLDB_2D_UNPACK_D16_D8_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit $crunpacksign :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    dead %0:mxs, %20:ep, %100.sub_dim_count:ed = VLDB_2D_UNPACK_S8_S4 killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %1:mxs, %20:ep, %100.sub_dim_count:ed = VLDB_2D_UNPACK_S16_S8 killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %2:mxs, %20:ep, %100.sub_dim_count:ed = VLDB_2D_UNPACK_D8_D4 killed %20, killed %100, implicit $crunpacksign :: (load (<8 x s32>) from unknown-address)
    dead %3:mxs, dead %20:ep, dead %100.sub_dim_count:ed = VLDB_2D_UNPACK_D16_D8 killed %20, killed %100, implicit $crunpacksign :: (load (<8 x s32>) from unknown-address)
...

---
name:            VLDB_3D_UNPACK
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d
    ; CHECK-LABEL: name: VLDB_3D_UNPACK
    ; CHECK: liveins: $p0, $d1_3d
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: dead %2:mxs, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_S8_S4_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %3:mxs, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_S16_S8_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %4:mxs, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_D8_D4_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit $crunpacksign :: (load (<8 x s32>))
    ; CHECK-NEXT: dead %5:mxs, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_D16_D8_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit $crunpacksign :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    dead %0:mxs, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_S8_S4 killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %1:mxs, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_S16_S8 killed %20, killed %100 :: (load (<8 x s32>) from unknown-address)
    dead %2:mxs, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_D8_D4 killed %20, killed %100, implicit $crunpacksign :: (load (<8 x s32>) from unknown-address)
    dead %3:mxs, dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_UNPACK_D16_D8 killed %20, killed %100, implicit $crunpacksign :: (load (<8 x s32>) from unknown-address)
...


---
name:            VST_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $wl0
    ; CHECK-LABEL: name: VST_2D
    ; CHECK: liveins: $p0, $d1, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mws = COPY $wl0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mams = COPY $wl0
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_dmw_sts_w_split [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_128_split killed [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (store (<8 x s32>))
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = VST_2D_dmw_sts_am_split killed [[COPY3]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %0:mws = COPY $wl0
    %1:mams = COPY $wl0
    %20:ep, %100.sub_dim_count:ed = VST_2D_dmw_sts_w %0, killed %20, killed %100 :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_128 killed %0, killed %20, killed %100 :: (store (<8 x s32>) into unknown-address)
    dead %20:ep, dead %100.sub_dim_count:ed = VST_2D_dmw_sts_am killed %1, killed %20, killed %100 :: (store (<8 x s32>) into unknown-address)
...

---
name:            ST_2D_Q
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $wl0
    ; CHECK-LABEL: name: ST_2D_Q
    ; CHECK: liveins: $p0, $d1, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mqqa = COPY $wl0
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = ST_2D_dmv_sts_q_split killed [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (store (<4 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %0:mqqa = COPY $wl0
    %20:ep, %100.sub_dim_count:ed = ST_2D_dmv_sts_q killed %0, killed %20, killed %100 :: (store (<4 x s32>) into unknown-address)
...

# In particular, pay attention to undef for sub_hi_dim_then_sub_mod.
---
name:            VST_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d, $wl0
    ; CHECK-LABEL: name: VST_3D
    ; CHECK: liveins: $p0, $d1_3d, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mws = COPY $wl0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mams = COPY $wl0
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_dmw_sts_w_split [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_128_split killed [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (store (<8 x s32>))
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_dmw_sts_am_split killed [[COPY3]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %0:mws = COPY $wl0
    %1:mams = COPY $wl0
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_dmw_sts_w %0, killed %20, killed %100 :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_128 killed %0, killed %20, killed %100 :: (store (<8 x s32>) into unknown-address)
    dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_dmw_sts_am killed %1, killed %20, killed %100 :: (store (<8 x s32>) into unknown-address)
...

---
name:            ST_3D_Q
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d, $wl0
    ; CHECK-LABEL: name: ST_3D_Q
    ; CHECK: liveins: $p0, $d1_3d, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mqqa = COPY $wl0
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = ST_3D_dmv_sts_q_split killed [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (store (<4 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %0:mqqa = COPY $wl0
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = ST_3D_dmv_sts_q killed %0, killed %20, killed %100 :: (store (<4 x s32>) into unknown-address)
...

---
name:            VLD_UPS_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $s0
    ; CHECK-LABEL: name: VLD_UPS_2D
    ; CHECK: liveins: $p0, $d1, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S32_D16_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S64_D32_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S32_D8_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S64_D16_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S32_S16_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S64_S32_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S32_S8_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VLDA_2D_UPS_S64_S16_split $s0, [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %0:mbms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S32_D16 $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %0:mbms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S64_D32 $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S32_D8  $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S64_D16 $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %0:mbms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S32_S16 $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
    %0:mbms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S64_S32 $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S32_S8  $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:ed = VLDA_2D_UPS_S64_S16 $s0, %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
...

---
name:            VLD_UPS_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d, $s0
    ; CHECK-LABEL: name: VLD_UPS_3D
    ; CHECK: liveins: $p0, $d1_3d, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D16_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_D32_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_D16_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_S16_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: %2:mbms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_S32_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_S8_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: %3:mcms, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_S16_split $s0, killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %0:mbms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D16 $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %0:mbms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_D32 $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8  $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_D16 $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address)
    %0:mbms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_S16 $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
    %0:mbms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_S32 $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_S8  $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
    %1:mcms, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S64_S16 $s0, killed %20, killed %100, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address)
...

---
name:            VST_PACK_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $x0
    ; CHECK-LABEL: name: VST_PACK_2D
    ; CHECK: liveins: $p0, $d1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mxs = COPY $x0
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_PACK_D4_D8_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, [[COPY2]], implicit $crsat, implicit $crpacksign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_PACK_D8_D16_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, [[COPY2]], implicit $crsat, implicit $crpacksign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_PACK_S4_S8_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, [[COPY2]], implicit $crsat :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_PACK_S8_S16_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, [[COPY2]], implicit $crsat :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %200:mxs = COPY $x0
    %20:ep, %100.sub_dim_count:ed = VST_2D_PACK_D4_D8 %20, %100, %200, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_PACK_D8_D16 %20, %100, %200, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_PACK_S4_S8 %20, %100, %200, implicit $crsat :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_PACK_S8_S16 %20, %100, %200, implicit $crsat :: (store (<8 x s32>) into unknown-address)
...

---
name:            VST_PACK_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $x0
    ; CHECK-LABEL: name: VST_PACK_3D
    ; CHECK: liveins: $p0, $d1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mxs = COPY $x0
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_D4_D8_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count, [[COPY2]], implicit $crsat, implicit $crpacksign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_D8_D16_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count, [[COPY2]], implicit $crsat, implicit $crpacksign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_S4_S8_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count, [[COPY2]], implicit $crsat :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_S8_S16_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count, [[COPY2]], implicit $crsat :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %200:mxs = COPY $x0
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_D4_D8 %20, %100, %200, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_D8_D16 %20, %100, %200, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_S4_S8 %20, %100, %200, implicit $crsat :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_PACK_S8_S16 %20, %100, %200, implicit $crsat :: (store (<8 x s32>) into unknown-address)
...

---
name:            VST_SRS_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $bml0, $cm1, $s0
    ; CHECK-LABEL: name: VST_SRS_2D
    ; CHECK: liveins: $p0, $d1, $bml0, $cm1, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_D8_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_D16_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_D16_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_D32_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_S8_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_S16_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_S16_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_2D_SRS_S32_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_D8_S32  killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_D16_S64 killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_D16_S32 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_D32_S64 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_S8_S32  killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_S16_S64 killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_S16_S32 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:ed = VST_2D_SRS_S32_S64 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
...

# In particular, pay attention to undef for sub_hi_dim_then_sub_mod.
---
name:            VST_SRS_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d, $bml0, $cm1, $s0
    ; CHECK-LABEL: name: VST_SRS_3D
    ; CHECK: liveins: $p0, $d1_3d, $bml0, $cm1, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D8_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D16_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D16_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D32_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S8_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S16_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S16_S32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S32_S64_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D8_S32  killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D16_S64 killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D16_S32 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_D32_S64 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S8_S32  killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S16_S64 killed %20, killed %100, $cm1,  $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S16_S32 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_3D_SRS_S32_S64 killed %20, killed %100, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address)
...

---
name:            VST_CONV_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $bml0
    ; CHECK-LABEL: name: VST_CONV_2D
    ; CHECK: liveins: $p0, $d1, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = VST_CONV_2D_BF16_FP32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %20:ep, %100.sub_dim_count:ed = VST_CONV_2D_BF16_FP32 killed %20, killed %100, $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>) into unknown-address)
...

---
name:            VST_CONV_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d, $bml0
    ; CHECK-LABEL: name: VST_CONV_3D
    ; CHECK: liveins: $p0, $d1_3d, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VST_CONV_3D_BF16_FP32_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count, $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = VST_CONV_3D_BF16_FP32 killed %20, killed %100, $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>) into unknown-address)
...

---
name:            VLD_2D_128
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1
    ; CHECK-LABEL: name: VLD_2D_128
    ; CHECK: liveins: $p0, $d1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: dead %2:mwa, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = VLDB_2D_128_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (load (<8 x s16>))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    dead %2:mwa, dead %20:ep, dead %100.sub_dim_count:ed = VLDB_2D_128 killed %20, killed %100 :: (load (<8 x s16>) from unknown-address)
...

---
name:            VLD_3D_128
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d
    ; CHECK-LABEL: name: VLD_3D_128
    ; CHECK: liveins: $p0, $d1_3d
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: dead %2:mwa, dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_128_split killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (<8 x s16>))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    dead %2:mwa, dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = VLDB_3D_128 killed %20, killed %100 :: (load (<8 x s16>) from unknown-address)
...

---
name:            LDA_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $r0
    ; CHECK-LABEL: name: LDA_2D
    ; CHECK: liveins: $p0, $d1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: dead %2:msclst, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = LDA_2D_dms_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %3:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = LDA_2D_S8_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %4:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = LDA_2D_U8_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %5:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = LDA_2D_S16_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %6:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = LDA_2D_U16_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (load (s32))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    dead %2:msclst, %20:ep, %100.sub_dim_count:ed = LDA_2D_dms_lda %20, %100 :: (load (s32) from unknown-address)
    dead %3:er, %20:ep, %100.sub_dim_count:ed = LDA_2D_S8_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
    dead %4:er, %20:ep, %100.sub_dim_count:ed = LDA_2D_U8_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
    dead %5:er, %20:ep, %100.sub_dim_count:ed = LDA_2D_S16_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
    dead %6:er, %20:ep, %100.sub_dim_count:ed = LDA_2D_U16_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
...

---
name:            LDA_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $r0
    ; CHECK-LABEL: name: LDA_3D
    ; CHECK: liveins: $p0, $d1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: dead %2:msclst, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = LDA_3D_dms_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %3:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = LDA_3D_S8_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %4:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = LDA_3D_U8_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %5:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = LDA_3D_S16_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (s32))
    ; CHECK-NEXT: dead %6:er, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = LDA_3D_U16_dmhb_lda_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (s32))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    dead %2:msclst, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = LDA_3D_dms_lda %20, %100 :: (load (s32) from unknown-address)
    dead %3:er, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = LDA_3D_S8_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
    dead %4:er, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds  = LDA_3D_U8_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
    dead %5:er, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = LDA_3D_S16_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
    dead %6:er, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = LDA_3D_U16_dmhb_lda %20, %100 :: (load (s32) from unknown-address)
...

---
name:            LDA_2D_Q
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $r0
    ; CHECK-LABEL: name: LDA_2D_Q
    ; CHECK: liveins: $p0, $d1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: dead %2:mqqa, [[COPY]]:ep, [[COPY1]].sub_dim_count:ed = LDA_2D_dmv_lda_q_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (load (s32))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    dead %2:mqqa, %20:ep, %100.sub_dim_count:ed = LDA_2D_dmv_lda_q %20, %100 :: (load (s32) from unknown-address)
...

---
name:            LDA_3D_Q
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $r0
    ; CHECK-LABEL: name: LDA_3D_Q
    ; CHECK: liveins: $p0, $d1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: dead %2:mqqa, [[COPY]]:ep, [[COPY1]].sub_dim_count:eds, [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = LDA_3D_dmv_lda_q_split [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (load (s32))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    dead %2:mqqa, %20:ep, %100.sub_dim_count:eds, %100.sub_hi_dim_then_sub_dim_count:eds = LDA_3D_dmv_lda_q %20, %100 :: (load (s32) from unknown-address)
...

---
name:            ST_2D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1, $r0
    ; CHECK-LABEL: name: ST_2D
    ; CHECK: liveins: $p0, $d1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ed = COPY $d1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = ST_2D_dms_sts_split [[COPY2]], [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (store (s32))
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = ST_2D_S8_split [[COPY2]], [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count :: (store (s8))
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:ed = ST_2D_S16_split [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count :: (store (s16))
    %20:ep = COPY $p0
    %100:ed = COPY $d1
    %2:er = COPY $r0
    dead %20:ep, dead %100.sub_dim_count:ed = ST_2D_dms_sts %2:er, %20, %100 :: (store (s32) into unknown-address)
    dead %20:ep, dead %100.sub_dim_count:ed = ST_2D_S8 %2:er, %20, %100 :: (store (s8) into unknown-address)
    dead %20:ep, dead %100.sub_dim_count:ed = ST_2D_S16 %2:er, killed %20, killed %100 :: (store (s16) into unknown-address)
...

---
name:            ST_3D
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $d1_3d, $r0
    ; CHECK-LABEL: name: ST_3D
    ; CHECK: liveins: $p0, $d1_3d, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eds = COPY $d1_3d
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = ST_3D_dms_sts_split [[COPY2]], [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (store (s32))
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = ST_3D_S8_split [[COPY2]], [[COPY]], [[COPY1]].sub_mod, [[COPY1]].sub_dim_size, [[COPY1]].sub_dim_stride, [[COPY1]].sub_dim_count, undef [[COPY1]].sub_hi_dim_then_sub_mod, [[COPY1]].sub_hi_dim_then_sub_dim_size, [[COPY1]].sub_hi_dim_then_sub_dim_stride, [[COPY1]].sub_hi_dim_then_sub_dim_count :: (store (s8))
    ; CHECK-NEXT: dead [[COPY]]:ep, dead [[COPY1]].sub_dim_count:eds, dead [[COPY1]].sub_hi_dim_then_sub_dim_count:eds = ST_3D_S16_split [[COPY2]], killed [[COPY]], killed [[COPY1]].sub_mod, killed [[COPY1]].sub_dim_size, killed [[COPY1]].sub_dim_stride, killed [[COPY1]].sub_dim_count, killed undef [[COPY1]].sub_hi_dim_then_sub_mod, killed [[COPY1]].sub_hi_dim_then_sub_dim_size, killed [[COPY1]].sub_hi_dim_then_sub_dim_stride, killed [[COPY1]].sub_hi_dim_then_sub_dim_count :: (store (s16))
    %20:ep = COPY $p0
    %100:eds = COPY $d1_3d
    %2:er = COPY $r0
    dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = ST_3D_dms_sts %2:er, %20, %100 :: (store (s32) into unknown-address)
    dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = ST_3D_S8 %2:er, %20, %100 :: (store (s8) into unknown-address)
    dead %20:ep, dead %100.sub_dim_count:eds, dead %100.sub_hi_dim_then_sub_dim_count:eds = ST_3D_S16 %2:er, killed %20, killed %100 :: (store (s16) into unknown-address)
...
