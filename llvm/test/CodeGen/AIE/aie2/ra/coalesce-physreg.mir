# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=register-coalescer %s -verify-machineinstrs -o - \
# RUN:    | FileCheck %s --check-prefix=COALESCER
# RUN: llc -mtriple aie2 -start-before=register-coalescer --stop-after=virtregrewriter %s -verify-machineinstrs -o - \
# RUN:    | FileCheck %s --check-prefix=REGALLOC

# The point here is to verify how copies to/from control registers are coalesced.

# Standard code for __builtin_aiev2_pack_I8_I16(v, /*sign=*/1, get_sat());
---
name: copy_from_to_crsat
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x0
    ; COALESCER-LABEL: name: copy_from_to_crsat
    ; COALESCER: liveins: $x0
    ; COALESCER-NEXT: {{  $}}
    ; COALESCER-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; COALESCER-NEXT: $crsat = COPY $crsat
    ; COALESCER-NEXT: [[VPACK_S4_S8_:%[0-9]+]]:vec256 = VPACK_S4_S8 [[COPY]], implicit $crsat
    ; COALESCER-NEXT: $wl0 = COPY [[VPACK_S4_S8_]]
    ; REGALLOC-LABEL: name: copy_from_to_crsat
    ; REGALLOC: liveins: $x0
    ; REGALLOC-NEXT: {{  $}}
    ; REGALLOC-NEXT: renamable $wl0 = VPACK_S4_S8 killed renamable $x0, implicit $crsat
    %0:vec512 = COPY $x0
    %1:ercr = COPY $crsat
    $crsat = COPY %1
    %2:vec256 = VPACK_S4_S8 %0, implicit $crsat
    $wl0 = COPY %2
...

# Standard code for:
#   set_sat(sat_val);
#   __builtin_aiev2_pack_I8_I16(v, /*sign=*/1, get_sat());
---
name: copy_to_from_to_crsat
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x0, $r0
    ; COALESCER-LABEL: name: copy_to_from_to_crsat
    ; COALESCER: liveins: $x0, $r0
    ; COALESCER-NEXT: {{  $}}
    ; COALESCER-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; COALESCER-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; COALESCER-NEXT: $crsat = COPY [[COPY1]]
    ; COALESCER-NEXT: $crsat = COPY $crsat
    ; COALESCER-NEXT: [[VPACK_S4_S8_:%[0-9]+]]:vec256 = VPACK_S4_S8 [[COPY]], implicit $crsat
    ; COALESCER-NEXT: $wl0 = COPY [[VPACK_S4_S8_]]
    ; REGALLOC-LABEL: name: copy_to_from_to_crsat
    ; REGALLOC: liveins: $r0, $x0
    ; REGALLOC-NEXT: {{  $}}
    ; REGALLOC-NEXT: $crsat = COPY killed renamable $r0
    ; REGALLOC-NEXT: renamable $wl0 = VPACK_S4_S8 killed renamable $x0, implicit $crsat
    %0:vec512 = COPY $x0
    %10:er = COPY $r0
    %11:ercr = COPY %10
    $crsat = COPY %11
    %1:ercr = COPY $crsat
    $crsat = COPY %1
    %2:vec256 = VPACK_S4_S8 %0, implicit $crsat
    $wl0 = COPY %2
...

# A case where VPACK uses the previous crSat value obtained from e.g. getSat(),
# but crSat has been overwritten between getSat() and pack()
#
# FIXME: The first COPY to $crsat is dead, but not simplified. This extends the
# live range of $r0, wasting one GPR.
---
name: get_set_pack
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x0, $r0
    ; COALESCER-LABEL: name: get_set_pack
    ; COALESCER: liveins: $x0, $r0
    ; COALESCER-NEXT: {{  $}}
    ; COALESCER-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; COALESCER-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; COALESCER-NEXT: [[COPY2:%[0-9]+]]:ercr = COPY $crsat
    ; COALESCER-NEXT: $crsat = COPY [[COPY1]]
    ; COALESCER-NEXT: $crsat = COPY [[COPY2]]
    ; COALESCER-NEXT: [[VPACK_S4_S8_:%[0-9]+]]:vec256 = VPACK_S4_S8 [[COPY]], implicit $crsat
    ; COALESCER-NEXT: $wl0 = COPY [[VPACK_S4_S8_]]
    ; REGALLOC-LABEL: name: get_set_pack
    ; REGALLOC: liveins: $r0, $x0
    ; REGALLOC-NEXT: {{  $}}
    ; REGALLOC-NEXT: renamable $r1 = COPY $crsat
    ; REGALLOC-NEXT: $crsat = COPY killed renamable $r0
    ; REGALLOC-NEXT: $crsat = COPY killed renamable $r1
    ; REGALLOC-NEXT: renamable $wl0 = VPACK_S4_S8 killed renamable $x0, implicit $crsat
    %0:vec512 = COPY $x0
    %10:er = COPY $r0
    %1:ercr = COPY $crsat
    %11:ercr = COPY %10
    $crsat = COPY %11
    $crsat = COPY %1
    %2:vec256 = VPACK_S4_S8 %0, implicit $crsat
    $wl0 = COPY %2
...

# ISel code for:
#   __builtin_aiev2_pack_I8_I16(v, sign, get_sat());
#   __builtin_aiev2_pack_I8_I16(v, sign, get_sat());
#
# FIXME: Redundant $crpacksign assignments
---
name: pack_dyn_sign
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x0, $r0
    ; COALESCER-LABEL: name: pack_dyn_sign
    ; COALESCER: liveins: $x0, $r0
    ; COALESCER-NEXT: {{  $}}
    ; COALESCER-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; COALESCER-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; COALESCER-NEXT: $crsat = COPY $crsat
    ; COALESCER-NEXT: $crpacksign = COPY [[COPY1]]
    ; COALESCER-NEXT: [[VPACK_D4_D8_:%[0-9]+]]:vec256 = VPACK_D4_D8 [[COPY]], implicit $crsat, implicit $crpacksign
    ; COALESCER-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; COALESCER-NEXT: $crsat = COPY $crsat
    ; COALESCER-NEXT: $crpacksign = COPY [[COPY1]]
    ; COALESCER-NEXT: [[VPACK_D4_D8_1:%[0-9]+]]:vec256 = VPACK_D4_D8 [[COPY]], implicit $crsat, implicit $crpacksign
    ; COALESCER-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; COALESCER-NEXT: $wl0 = COPY [[VPACK_D4_D8_]]
    ; COALESCER-NEXT: $wh0 = COPY [[VPACK_D4_D8_1]]
    ; REGALLOC-LABEL: name: pack_dyn_sign
    ; REGALLOC: liveins: $r0, $x0
    ; REGALLOC-NEXT: {{  $}}
    ; REGALLOC-NEXT: $crpacksign = COPY renamable $r0
    ; REGALLOC-NEXT: renamable $wh2 = VPACK_D4_D8 renamable $x0, implicit $crsat, implicit $crpacksign
    ; REGALLOC-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; REGALLOC-NEXT: $crpacksign = COPY killed renamable $r0
    ; REGALLOC-NEXT: renamable $wh0 = VPACK_D4_D8 killed renamable $x0, implicit $crsat, implicit $crpacksign
    ; REGALLOC-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; REGALLOC-NEXT: $wl0 = COPY killed renamable $wh2
    %0:vec512 = COPY $x0
    %1:er = COPY $r0
    %10:ercr = COPY $crsat
    $crsat = COPY %10
    %11:ercr = COPY %1
    $crpacksign = COPY %11
    %2:vec256 = VPACK_D4_D8 %0, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    %20:ercr = COPY $crsat
    $crsat = COPY %20
    $crpacksign = COPY %11
    %3:vec256 = VPACK_D4_D8 %0, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    $wl0 = COPY %2
    $wh0 = COPY %3
...
