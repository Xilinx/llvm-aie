# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -O2 -mtriple=aie2 -verify-machineinstrs --aie-staged-ra -start-before=greedy -stop-after=virtregrewriter %s -o - \
# RUN:    | FileCheck %s --check-prefix=RA

# The point is to verify how "hint recoloring" behaves with required register
# assignments that originate from staged allocation. Hint recoloring should
# NEVER un-assign a requred register.

# Here, %100 gets assigned to $d0 in the 2D stage.
# Due to interferences, %301 gets assigned to $m4, and %401 to $m0 in the
# final stage.
# Because of the phys-reg copies, hints are broken:
#  - %100.sub_mod would really like to go to $m4 instead of $m0
#  - %301 would really like to go to $m0 instead of $m4
#  - %401 would really like to go to $m4 instead of $m0
# For this reason, hint recoloring can "recolor" those assignments and break the
# required assignment of %100.sub_mod to $m0.
---
name:            test_multistage_hint_recoloring
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $p1, $d1_3d, $d2_3d, $d3_3d, $m4
    ; RA-LABEL: name: test_multistage_hint_recoloring
    ; RA: liveins: $m4, $p0, $p1, $d1_3d, $d2_3d, $d3_3d
    ; RA-NEXT: {{  $}}
    ; RA-NEXT: renamable $r0 = LDA_dms_lda_idx_imm renamable $p1, 16
    ; RA-NEXT: renamable $dn0 = LDA_dms_lda_idx_imm renamable $p1, 0
    ; RA-NEXT: renamable $m0 = COPY killed renamable $m4
    ; RA-NEXT: renamable $dj0 = LDA_dms_lda_idx_imm renamable $p1, 8
    ; RA-NEXT: renamable $dc0 = LDA_dms_lda_idx_imm killed renamable $p1, 12
    ; RA-NEXT: $p0, dead $dc0 = PADDA_2D_split killed $p0, $m0, killed $dn0, killed $dj0, killed $dc0
    ; RA-NEXT: renamable $m4 = COPY killed renamable $m0
    ; RA-NEXT: renamable $m0 = COPY killed renamable $r0
    ; RA-NEXT: dead renamable $p0 = PADDA_lda_ptr_inc_idx killed renamable $p0, renamable $m0
    ; RA-NEXT: PseudoRET implicit $lr, implicit $d1_3d, implicit $d2_3d, implicit $d3_3d, implicit $m0, implicit $m4
    %20:ep = COPY $p0
    %21:ep = COPY $p1
    %23:em = COPY $m4

    %300:spill_em_to_er = LDA_dms_lda_idx_imm %21, 16

    undef %100.sub_dim_size:ed = LDA_dms_lda_idx_imm %21, 0
    %100.sub_mod:ed = COPY %23
    %100.sub_dim_stride:ed = LDA_dms_lda_idx_imm %21, 8
    %100.sub_dim_count:ed = LDA_dms_lda_idx_imm %21, 12
    %20:ep, %100.sub_dim_count:ed = PADDA_2D_split %20, %100.sub_mod, %100.sub_dim_size, %100.sub_dim_stride, %100.sub_dim_count

    %301:em_as_32bit = COPY %300
    %20:ep = PADDA_lda_ptr_inc_idx %20, %301
    %401:spill_em_to_er = COPY %100.sub_mod

    $m0 = COPY %301
    $m4 = COPY %401
    PseudoRET implicit $lr, implicit $d1_3d, implicit $d2_3d, implicit $d3_3d, implicit $m0, implicit $m4
...
