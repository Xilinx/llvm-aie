# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# NOTE: Example file for Write After Write Register Renaming in Loop test
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple=aie2 -verify-machineinstrs --start-before=greedy --stop-after=virtregrewriter  %s  -o - | FileCheck %s
#
---
name:            long_reg_blocking
alignment:       16
legalized:       true
tracksRegLiveness: true
registers:
  - { id: 100, class: er, preferred-register: '$r28' }
  - { id: 101, class: er, preferred-register: '$r25' }
body:             |
  ; CHECK-LABEL: name: long_reg_blocking
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d1, $p0, $p1, $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r25, $r31, $x2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT:   renamable $r28 = AND $r2, $r3
  ; CHECK-NEXT:   renamable $r25 = AND $r4, $r5
  ; CHECK-NEXT:   $r31 = AND killed renamable $r28, killed renamable $r25
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d1, $p0, $p1, $r1, $r2, $r3, $r4, $r5, $r7, $r31, $x2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $p1 = COPY $p0
  ; CHECK-NEXT:   renamable $d0 = COPY $d1
  ; CHECK-NEXT:   $wl0, dead $p1, dead $dc0 = VLDA_2D_dmw_lda_w killed $p1, $d0
  ; CHECK-NEXT:   dead renamable $x4, $l4 = VMAX_LT_S8 renamable $x0, $x2, implicit $crvaddsign
  ; CHECK-NEXT:   renamable $r0 = AND $r7, $r1
  ; CHECK-NEXT:   renamable $r28 = NE killed renamable $r0, $r1
  ; CHECK-NEXT:   ST_TM killed renamable $r28, $p0 :: (store (s32) into custom "TileMemory", addrspace 15)
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $d1, $p0, $p1, $r1, $r2, $r3, $r4, $r5, $r7, $r31, $x2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $p0, $p1,$d1, $x2, $r5, $r1, $r7, $r25, $r2, $r3, $r4, $r5, $r31
  liveins: $r0
  LoopStart $r0
  %100:er = AND $r2, $r3
  %101:er = AND $r4, $r5
  $r31 = AND %100, %101
  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $d1, $x2, $r5, $r1, $r7,$r2, $r3, $r4, $r5, $r31
    %1:ep = COPY $p0
    %2:ed = COPY $d1
    undef %3.sub_256_lo:vec512, %1:ep, %2.sub_dim_count:ed = VLDA_2D_dmw_lda_w %1, killed %2
    %4:vec512,  $l4 = VMAX_LT_S8 %3, $x2, implicit $crvaddsign
    %5:er = AND $r7, $r1,
    %6:er = NE %5, $r1,
    ST_TM %6, $p0,  :: (store (s32) into custom "TileMemory")
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    liveins: $p0, $p1, $d1, $x2, $r5, $r1, $r7, $r2, $r3, $r4, $r5, $r31
    PseudoRET implicit $lr
...
---
name:            test_waw_gpr_replacement
alignment:       16
legalized:       true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: test_waw_gpr_replacement
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r0, $r1, $r2, $r4, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   LoopStart $r0
  ; CHECK-NEXT:   renamable $r0 = ADD $r1, $r2, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $r1 = ADD renamable $r0, $r1, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $r0 = AND killed renamable $r1, killed renamable $r0
  ; CHECK-NEXT:   ST_dms_sts_idx_imm killed renamable $r0, $p0, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r2, $r4, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r0 = AND $r2, $r4
  ; CHECK-NEXT:   dead renamable $r1 = ADD $r2, killed renamable $r0, implicit-def dead $srcarry
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $d0, $dj0, $p0, $r2, $r4, $r25, $r26, $s0, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1
  liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0
  liveins: $r0, $r1, $r2, $r4
  LoopStart $r0
  %100:er = ADD $r1, $r2, implicit-def $srcarry
  %101:er = ADD %100, $r1, implicit-def $srcarry
  %103:er = AND %101, %100
  ST_dms_sts_idx_imm %103, $p0, 0

  bb.1:
    successors: %bb.1, %bb.2
    liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0, $r2, $r4
    %20:er = AND $r2, $r4
    %21:er = ADD $r2, %20, implicit-def dead $srcarry

    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  bb.2:
    liveins: $p0, $d0, $r25, $r26, $x10, $dj0, $s0, $r2, $r4
    PseudoRET implicit $lr
...
