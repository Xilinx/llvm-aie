; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s


define dso_local noundef <64 x i8> @_Z20test_min_ge_v64uint8Dv64_hS_Ry(<64 x i8> noundef %a, <64 x i8> noundef %b, ptr nocapture nonnull writeonly align 4 dereferenceable(8) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_min_ge_v64uint8Dv64_hS_Ry:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    vmin_ge.d8 x0, r25:r24, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 0)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}


define dso_local noundef <64 x i8> @_Z20test_min_ge_v64uint8Dv64_hS_bRy(<64 x i8> noundef %a, <64 x i8> noundef %b, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(8) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_min_ge_v64uint8Dv64_hS_bRy:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmin_ge.d8 x0, r25:r24, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 %conv.i)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define dso_local noundef <64 x i8> @_Z17test_min_v64uint8Dv64_hS_(<64 x i8> noundef %a, <64 x i8> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_min_v64uint8Dv64_hS_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmin_ge.d8 x0, r25:r24, x2, x4 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 0)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %1
}

define dso_local noundef <64 x i8> @_Z17test_min_v64uint8Dv64_hS_b(<64 x i8> noundef %a, <64 x i8> noundef %b, i1 noundef zeroext %sgn) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_min_v64uint8Dv64_hS_b:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov crVaddSign, r0 // Delay Slot 4
; CHECK-NEXT:    vmin_ge.d8 x0, r25:r24, x2, x4 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 1
entry:
  %conv.i.i = zext i1 %sgn to i32
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 %conv.i.i)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %1
}


define dso_local noundef <64 x i8> @_Z19test_min_ge_v64int8Dv64_aS_Ry(<64 x i8> noundef %a, <64 x i8> noundef %b, ptr nocapture nonnull writeonly align 4 dereferenceable(8) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z19test_min_ge_v64int8Dv64_aS_Ry:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    vmin_ge.s8 x0, r25:r24, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 1)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}


define dso_local noundef <64 x i8> @_Z19test_min_ge_v64int8Dv64_aS_bRy(<64 x i8> noundef %a, <64 x i8> noundef %b, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(8) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z19test_min_ge_v64int8Dv64_aS_bRy:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmin_ge.d8 x0, r25:r24, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 %conv.i)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define dso_local noundef <64 x i8> @_Z16test_min_v64int8Dv64_aS_(<64 x i8> noundef %a, <64 x i8> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z16test_min_v64int8Dv64_aS_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmin_ge.s8 x0, r25:r24, x2, x4 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 1)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %1
}

define dso_local noundef <64 x i8> @_Z16test_min_v64int8Dv64_aS_b(<64 x i8> noundef %a, <64 x i8> noundef %b, i1 noundef zeroext %sgn) local_unnamed_addr #1 {
; CHECK-LABEL: _Z16test_min_v64int8Dv64_aS_b:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov crVaddSign, r0 // Delay Slot 4
; CHECK-NEXT:    vmin_ge.d8 x0, r25:r24, x2, x4 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 1
entry:
  %conv.i.i = zext i1 %sgn to i32
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8> %a, <64 x i8> %b, i32 %conv.i.i)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %1
}


define dso_local noundef <32 x i16> @_Z21test_min_ge_v32uint16Dv32_tS_Rj(<32 x i16> noundef %a, <32 x i16> noundef %b, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z21test_min_ge_v32uint16Dv32_tS_Rj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vmin_ge.d16 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    mov.d1 r0, r16 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 0)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}


define dso_local noundef <32 x i16> @_Z21test_min_ge_v32uint16Dv32_tS_bRj(<32 x i16> noundef %a, <32 x i16> noundef %b, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z21test_min_ge_v32uint16Dv32_tS_bRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmin_ge.d16 x0, r16, x2, x4 // Delay Slot 5
; CHECK-NEXT:    mov.d2 r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 %conv.i)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define dso_local noundef <32 x i16> @_Z18test_min_v32uint16Dv32_tS_(<32 x i16> noundef %a, <32 x i16> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z18test_min_v32uint16Dv32_tS_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r0, r16 // Delay Slot 4
; CHECK-NEXT:    vmin_ge.d16 x0, r16, x2, x4 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 0)
  %1 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %1
}

define dso_local noundef <32 x i16> @_Z18test_min_v32uint16Dv32_tS_b(<32 x i16> noundef %a, <32 x i16> noundef %b, i1 noundef zeroext %sgn) local_unnamed_addr #1 {
; CHECK-LABEL: _Z18test_min_v32uint16Dv32_tS_b:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov r1, r16
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crVaddSign, r0 // Delay Slot 5
; CHECK-NEXT:    vmin_ge.d16 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i.i = zext i1 %sgn to i32
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 %conv.i.i)
  %1 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %1
}


define dso_local noundef <32 x i16> @_Z20test_min_ge_v32int16Dv32_sS_Rj(<32 x i16> noundef %a, <32 x i16> noundef %b, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_min_ge_v32int16Dv32_sS_Rj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vmin_ge.s16 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    mov.d1 r0, r16 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 1)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}


define dso_local noundef <32 x i16> @_Z20test_min_ge_v32int16Dv32_sS_bRj(<32 x i16> noundef %a, <32 x i16> noundef %b, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_min_ge_v32int16Dv32_sS_bRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmin_ge.d16 x0, r16, x2, x4 // Delay Slot 5
; CHECK-NEXT:    mov.d2 r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 %conv.i)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define dso_local noundef <32 x i16> @_Z17test_min_v32int16Dv32_sS_(<32 x i16> noundef %a, <32 x i16> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_min_v32int16Dv32_sS_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r0, r16 // Delay Slot 4
; CHECK-NEXT:    vmin_ge.s16 x0, r16, x2, x4 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 1)
  %1 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %1
}

define dso_local noundef <32 x i16> @_Z17test_min_v32int16Dv32_sS_b(<32 x i16> noundef %a, <32 x i16> noundef %b, i1 noundef zeroext %sgn) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_min_v32int16Dv32_sS_b:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov r1, r16
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crVaddSign, r0 // Delay Slot 5
; CHECK-NEXT:    vmin_ge.d16 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i.i = zext i1 %sgn to i32
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16> %a, <32 x i16> %b, i32 %conv.i.i)
  %1 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %1
}


define dso_local noundef <16 x i32> @_Z21test_min_ge_v16uint32Dv16_jS_bRj(<16 x i32> noundef %a, <16 x i32> noundef %b, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z21test_min_ge_v16uint32Dv16_jS_bRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmin_ge.d32 x0, r16, x2, x4 // Delay Slot 5
; CHECK-NEXT:    mov.d2 r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

define dso_local noundef <16 x i32> @_Z18test_min_v16uint32Dv16_jS_(<16 x i32> noundef %a, <16 x i32> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z18test_min_v16uint32Dv16_jS_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r0, r16 // Delay Slot 4
; CHECK-NEXT:    vmin_ge.d32 x0, r16, x2, x4 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32> %a, <16 x i32> %b, i32 0)
  %1 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %1
}

define dso_local noundef <16 x i32> @_Z18test_min_v16uint32Dv16_jS_b(<16 x i32> noundef %a, <16 x i32> noundef %b, i1 noundef zeroext %sgn) local_unnamed_addr #1 {
; CHECK-LABEL: _Z18test_min_v16uint32Dv16_jS_b:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov r1, r16
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crVaddSign, r0 // Delay Slot 5
; CHECK-NEXT:    vmin_ge.d32 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i.i = zext i1 %sgn to i32
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i.i)
  %1 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %1
}


define dso_local noundef <16 x i32> @_Z20test_min_ge_v16int32Dv16_iS_Rj(<16 x i32> noundef %a, <16 x i32> noundef %b, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_min_ge_v16int32Dv16_iS_Rj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vmin_ge.s32 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    mov.d1 r0, r16 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32> %a, <16 x i32> %b, i32 1)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}


define dso_local noundef <16 x i32> @_Z20test_min_ge_v16int32Dv16_iS_bRj(<16 x i32> noundef %a, <16 x i32> noundef %b, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_min_ge_v16int32Dv16_iS_bRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmin_ge.d32 x0, r16, x2, x4 // Delay Slot 5
; CHECK-NEXT:    mov.d2 r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

define dso_local noundef <16 x i32> @_Z17test_min_v16int32Dv16_iS_(<16 x i32> noundef %a, <16 x i32> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_min_v16int32Dv16_iS_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r0, r16 // Delay Slot 4
; CHECK-NEXT:    vmin_ge.s32 x0, r16, x2, x4 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32> %a, <16 x i32> %b, i32 1)
  %1 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %1
}

define dso_local noundef <16 x i32> @_Z17test_min_v16int32Dv16_iS_b(<16 x i32> noundef %a, <16 x i32> noundef %b, i1 noundef zeroext %sgn) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_min_v16int32Dv16_iS_b:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov r1, r16
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crVaddSign, r0 // Delay Slot 5
; CHECK-NEXT:    vmin_ge.d32 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i.i = zext i1 %sgn to i32
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i.i)
  %1 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %1
}

declare { <64 x i8>, <2 x i32> } @llvm.aie2.vmin.ge8(<64 x i8>, <64 x i8>, i32) #2
declare { <32 x i16>, i32 } @llvm.aie2.vmin.ge16(<32 x i16>, <32 x i16>, i32) #2
declare { <16 x i32>, i32 } @llvm.aie2.vmin.ge32(<16 x i32>, <16 x i32>, i32) #2
