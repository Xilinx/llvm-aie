; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc < %s -verify-machineinstrs -mtriple=aie2 | FileCheck %s

%struct.getss = type { i32, i32 }

define void @put_ms(i32 inreg %a, i32 inreg %tlast) local_unnamed_addr {
; CHECK-LABEL: put_ms:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopv // Delay Slot 5
; CHECK-NEXT:    mov r28, r1 // Delay Slot 4
; CHECK-NEXT:    mov ms, r0, r28 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  tail call void @llvm.aie2.put.ms(i32 %a, i32 %tlast)
  ret void
}

define i32 @put_ms_nb(i32 inreg %a) local_unnamed_addr {
; CHECK-LABEL: put_ms_nb:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopv // Delay Slot 5
; CHECK-NEXT:    mov.nb.tlast ms, r1 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov r0, srMS0 // Delay Slot 1
entry:
  %b = tail call i32 @llvm.aie2.put.ms.nb(i32 %a, i32 1)
  ret i32 %b
}

define { i32, i32 } @get_ss(i32 inreg %a) local_unnamed_addr {
; CHECK-LABEL: get_ss:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov r0, SS; nopxm ; nopv
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov r1, srSS0 // Delay Slot 1
entry:
  %0 = call { i32, i32 } @llvm.aie2.get.ss()
  ret { i32, i32 } %0
}

define { i32, i32 } @get_ss_nb(i32 inreg %a) local_unnamed_addr {
; CHECK-LABEL: get_ss_nb:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov.nb r0, SS; nopxm ; nopv
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov r1, srSS0 // Delay Slot 1
entry:
  %0 = call { i32, i32 } @llvm.aie2.get.ss.nb()
  ret { i32, i32 } %0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare { i32, i32 } @llvm.aie2.get.ss() #0

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare { i32, i32 } @llvm.aie2.get.ss.nb() #0

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aie2.put.ms(i32, i32) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i32 @llvm.aie2.put.ms.nb(i32, i32) #0



attributes #0 = { nocallback nofree nosync nounwind willreturn }
