; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2  --issue-limit=1  %s -o - | FileCheck %s

define dso_local noundef <8 x i64> @test_add_conf(<8 x i64> noundef %acc1, <8 x i64> noundef %acc2, i32 noundef %zero_acc1, i32 noundef %sub_acc1, i32 noundef %sub_acc2) {
; CHECK-LABEL: test_add_conf:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; mova r3, #12; nops ; nopxm ; nopv
; CHECK-NEXT:    mova r4, #13; nopx
; CHECK-NEXT:    mova r5, #28
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    lshl r2, r2, r4
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    or r0, r0, r2
; CHECK-NEXT:    or r0, r0, r5
; CHECK-NEXT:    vadd.f bml0, bml1, bml2, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl4.i.i = shl i32 %sub_acc1, 12
  %shl6.i.i = shl i32 %sub_acc2, 13
  %or7.i.i = or i32 %shl4.i.i, %zero_acc1
  %or11.i.i = or i32 %or7.i.i, %shl6.i.i
  %or19.i.i = or i32 %or11.i.i, 28
  %0 = tail call <8 x i64> @llvm.aie2.add.accfloat(<8 x i64> %acc1, <8 x i64> %acc2, i32 %or19.i.i)
  ret <8 x i64> %0
}


define dso_local noundef <8 x i64> @test_sub_conf(<8 x i64> noundef %acc1, <8 x i64> noundef %acc2, i32 noundef %zero_acc1, i32 noundef %sub_acc1, i32 noundef %sub_acc2) {
; CHECK-LABEL: test_sub_conf:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; mova r3, #12; nops ; nopxm ; nopv
; CHECK-NEXT:    mova r4, #13; nopx
; CHECK-NEXT:    mova r5, #28
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    lshl r2, r2, r4
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    or r0, r0, r2
; CHECK-NEXT:    or r0, r0, r5
; CHECK-NEXT:    vsub.f bml0, bml1, bml2, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl4.i.i = shl i32 %sub_acc1, 12
  %shl6.i.i = shl i32 %sub_acc2, 13
  %or7.i.i = or i32 %shl4.i.i, %zero_acc1
  %or11.i.i = or i32 %or7.i.i, %shl6.i.i
  %or19.i.i = or i32 %or11.i.i, 28
  %0 = tail call <8 x i64> @llvm.aie2.sub.accfloat(<8 x i64> %acc1, <8 x i64> %acc2, i32 %or19.i.i)
  ret <8 x i64> %0
}


define dso_local noundef <8 x i64> @test_add(<8 x i64> noundef %acc1, <8 x i64> noundef %acc2) {
; CHECK-LABEL: test_add:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r0, #28; nopb ; nopxm ; nops
; CHECK-NEXT:    vadd.f bml0, bml1, bml2, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.add.accfloat(<8 x i64> %acc1, <8 x i64> %acc2, i32 28)
  ret <8 x i64> %0
}


define dso_local noundef <8 x i64> @test_sub(<8 x i64> noundef %acc1, <8 x i64> noundef %acc2) {
; CHECK-LABEL: test_sub:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r0, #28; nopb ; nopxm ; nops
; CHECK-NEXT:    vsub.f bml0, bml1, bml2, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.sub.accfloat(<8 x i64> %acc1, <8 x i64> %acc2, i32 28)
  ret <8 x i64> %0
}


define dso_local noundef <8 x i64> @test_broadcast_zero_to_v16accfloat() {
; CHECK-LABEL: test_broadcast_zero_to_v16accfloat:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; vclr bml0
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.clr16f.conf()
  ret <8 x i64> %0
}

declare <8 x i64> @llvm.aie2.add.accfloat(<8 x i64>, <8 x i64>, i32)

declare <8 x i64> @llvm.aie2.sub.accfloat(<8 x i64>, <8 x i64>, i32)

declare <8 x i64> @llvm.aie2.clr16f.conf()
