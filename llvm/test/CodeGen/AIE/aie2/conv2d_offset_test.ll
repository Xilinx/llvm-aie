; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2  --issue-limit=1 %s -o - | FileCheck %s
; ModuleID = 'conv2d_offset_test.cc'
source_filename = "conv2d_offset_test.cc"
target datalayout = "e-m:e-p:20:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32"
target triple = "aie2"

%struct.conv2d_internal_params = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i8, i8, i8, i8, i8, i16, i8, i8, i16, i8, i8, i8, i8, i8, i32, i8, i32, i32, i8, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, [22 x i8] }

@X = dso_local global %struct.conv2d_internal_params zeroinitializer, align 32

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local noundef i32 @_Z3foov() #0 {
; CHECK-LABEL: _Z3foov:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; movxm p0, #(X+92)
; CHECK-NEXT:    mova dj0, #96
; CHECK-NEXT:    mova dj1, #-68
; CHECK-NEXT:    mova dj2, #-56
; CHECK-NEXT:    mov p1, p0
; CHECK-NEXT:    lda r0, [p0, #8]
; CHECK-NEXT:    lda.u8 r1, [p0, dj0]
; CHECK-NEXT:    lda r1, [p1], #8
; CHECK-NEXT:    lda.u16 r1, [p0, dj1]
; CHECK-NEXT:    lda.u8 r1, [p0, dj2]
; CHECK-NEXT:    nop
; CHECK-NEXT:    lda r1, [p0, #4]
; CHECK-NEXT:    nop
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    lda r1, [p0, #80]
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    lda r1, [p0, #92]
; CHECK-NEXT:    lda r1, [p0, #44]
; CHECK-NEXT:    lda r1, [p1, #0]
; CHECK-NEXT:    lda r1, [p0, #76]
; CHECK-NEXT:    lda r1, [p0, #-60]
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    add r0, r0, r1 // Delay Slot 5
; CHECK-NEXT:    add r0, r0, r1 // Delay Slot 4
; CHECK-NEXT:    add r0, r0, r1 // Delay Slot 3
; CHECK-NEXT:    add r0, r0, r1 // Delay Slot 2
; CHECK-NEXT:    add r0, r0, r1 // Delay Slot 1
entry:
  %0 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 51), align 4
  %1 = load i8, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 73), align 4
  %conv = zext i8 %1 to i32
  %add = add nsw i32 %0, %conv
  %2 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 49), align 4
  %add1 = add nsw i32 %add, %2
  %3 = load i16, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 22), align 8
  %conv2 = zext i16 %3 to i32
  %add3 = add nsw i32 %add1, %conv2
  %4 = load i8, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 29), align 4
  %conv4 = zext i8 %4 to i32
  %add5 = add nsw i32 %add3, %conv4
  %5 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 50), align 32
  %add6 = add nsw i32 %add5, %5
  %6 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 69), align 4
  %add7 = add nsw i32 %add6, %6
  %7 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 72), align 8
  %add8 = add nsw i32 %add7, %7
  %8 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 60), align 8
  %add9 = add nsw i32 %add8, %8
  %9 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 51), align 4
  %add10 = add nsw i32 %add9, %9
  %10 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 68), align 8
  %add11 = add nsw i32 %add10, %10
  %11 = load i32, ptr getelementptr inbounds (%struct.conv2d_internal_params, ptr @X, i32 0, i32 28), align 32
  %add12 = add nsw i32 %add11, %11
  ret i32 %add12
}

attributes #0 = { mustprogress noinline nounwind optnone "no-trapping-math"="true" "stack-protector-buffer-size"="8" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 16.0.0"}
