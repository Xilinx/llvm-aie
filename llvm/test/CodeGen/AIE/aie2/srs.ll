; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc < %s --issue-limit=1 -verify-machineinstrs -mtriple=aie2 \
; RUN:   | FileCheck %s

define dso_local noundef <16 x bfloat> @_Z19test_to_v16bfloat16Dv16_u10__accfloat(<8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z19test_to_v16bfloat16Dv16_u10__accfloat:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vconv.bf16.fp32 wl0, bml0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64> %acc)
  ret <16 x bfloat> %0
}
declare <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64>)

define dso_local noundef <32 x i8> @_Z14test_ssrs_gen0Dv16_u9__acc32x2ii(<16 x i64> %acc, i32 noundef %shft, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z14test_ssrs_gen0Dv16_u9__acc32x2ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crSRSSign, r1 // Delay Slot 5
; CHECK-NEXT:    vsrs.d8.s32 wl0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSRSSign, #0 // Delay Slot 1
entry:
  %0 = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> %acc, i32 %shft, i32 %sign)
  ret <32 x i8> %0
}

define dso_local noundef <16 x i16> @_Z14test_ssrs_gen1Dv16_u7__acc64ii(<16 x i64> %acc, i32 noundef %shft, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z14test_ssrs_gen1Dv16_u7__acc64ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crSRSSign, r1 // Delay Slot 5
; CHECK-NEXT:    vsrs.d16.s64 wl0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSRSSign, #0 // Delay Slot 1
entry:
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> %acc, i32 %shft, i32 %sign)
  ret <16 x i16> %0
}

define dso_local noundef <32 x i16> @_Z15test_ulsrs_gen0Dv16_u9__acc32x2ii(<16 x i64> %acc, i32 noundef %shft, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z15test_ulsrs_gen0Dv16_u9__acc32x2ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crSRSSign, r1 // Delay Slot 5
; CHECK-NEXT:    vsrs.d16.s32 x0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSRSSign, #0 // Delay Slot 1
entry:
  %0 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %acc, i32 %shft, i32 %sign)
  ret <32 x i16> %0
}

define dso_local noundef <16 x i32> @_Z14test_lsrs_gen0Dv16_u7__acc64ii(<16 x i64> %acc, i32 noundef %shft, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z14test_lsrs_gen0Dv16_u7__acc64ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crSRSSign, r1 // Delay Slot 5
; CHECK-NEXT:    vsrs.d32.s64 x0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSRSSign, #0 // Delay Slot 1
entry:
  %0 = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> %acc, i32 %shft, i32 %sign)
  ret <16 x i32> %0
}

define dso_local noundef <8 x i32> @_Z14test_lsrs_gen1Dv8_u7__acc64ii(<8 x i64> %acc, i32 noundef %shft, i32 noundef %sign) local_unnamed_addr #1 {
; CHECK-LABEL: _Z14test_lsrs_gen1Dv8_u7__acc64ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crSRSSign, r1 // Delay Slot 5
; CHECK-NEXT:    vsrs.d32.s64 wl0, bml0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSRSSign, #0 // Delay Slot 1
entry:
  %0 = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> %acc, i32 %shft, i32 %sign)
  ret <8 x i32> %0
}

define dso_local noundef <16 x i16> @_Z14test_lsrs_gen3Dv8_u9__acc32x2ii(<8 x i64> %acc, i32 noundef %shft, i32 noundef %sign) local_unnamed_addr #1 {
; CHECK-LABEL: _Z14test_lsrs_gen3Dv8_u9__acc32x2ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crSRSSign, r1 // Delay Slot 5
; CHECK-NEXT:    vsrs.d16.s32 wl0, bml0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSRSSign, #0 // Delay Slot 1
entry:
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> %acc, i32 %shft, i32 %sign)
  ret <16 x i16> %0
}

define dso_local noundef <32 x i8> @_Z17test_ssrs_signed0Dv16_u9__acc32x2i(<16 x i64> %acc, i32 noundef %shft) local_unnamed_addr #0 {
; CHECK-LABEL: _Z17test_ssrs_signed0Dv16_u9__acc32x2i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov s0, r0 // Delay Slot 5
; CHECK-NEXT:    vsrs.s8.s32 wl0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> %acc, i32 %shft, i32 1)
  ret <32 x i8> %0
}

define dso_local noundef <16 x i16> @_Z17test_ssrs_signed1Dv16_u7__acc64i(<16 x i64> %acc, i32 noundef %shft) local_unnamed_addr #0 {
; CHECK-LABEL: _Z17test_ssrs_signed1Dv16_u7__acc64i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov s0, r0 // Delay Slot 5
; CHECK-NEXT:    vsrs.s16.s64 wl0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> %acc, i32 %shft, i32 1)
  ret <16 x i16> %0
}

define dso_local noundef <32 x i16> @_Z18test_ulsrs_signed0Dv16_u9__acc32x2i(<16 x i64> %acc, i32 noundef %shft) local_unnamed_addr #0 {
; CHECK-LABEL: _Z18test_ulsrs_signed0Dv16_u9__acc32x2i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov s0, r0 // Delay Slot 5
; CHECK-NEXT:    vsrs.s16.s32 x0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %acc, i32 %shft, i32 1)
  ret <32 x i16> %0
}

define dso_local noundef <16 x i32> @_Z17test_lsrs_signed0Dv16_u7__acc64i(<16 x i64> %acc, i32 noundef %shft) local_unnamed_addr #0 {
; CHECK-LABEL: _Z17test_lsrs_signed0Dv16_u7__acc64i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov s0, r0 // Delay Slot 5
; CHECK-NEXT:    vsrs.s32.s64 x0, cm0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> %acc, i32 %shft, i32 1)
  ret <16 x i32> %0
}

define dso_local noundef <8 x i32> @_Z17test_lsrs_signed1Dv8_u7__acc64i(<8 x i64> %acc, i32 noundef %shft) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_lsrs_signed1Dv8_u7__acc64i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov s0, r0 // Delay Slot 5
; CHECK-NEXT:    vsrs.s32.s64 wl0, bml0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> %acc, i32 %shft, i32 1)
  ret <8 x i32> %0
}

define dso_local noundef <16 x i16> @_Z17test_lsrs_signed3Dv8_u9__acc32x2i(<8 x i64> %acc, i32 noundef %shft) local_unnamed_addr #1 {
; CHECK-LABEL: _Z17test_lsrs_signed3Dv8_u9__acc32x2i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov s0, r0 // Delay Slot 5
; CHECK-NEXT:    vsrs.s16.s32 wl0, bml0, s0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> %acc, i32 %shft, i32 1)
  ret <16 x i16> %0
}

declare <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64>, i32, i32) #2

declare <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64>, i32, i32) #2

declare <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64>, i32, i32) #2

declare <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64>, i32, i32) #2

declare <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64>, i32, i32) #2

declare <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64>, i32, i32) #2
