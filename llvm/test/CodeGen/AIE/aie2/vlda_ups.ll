; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc < %s --issue-limit=1 -verify-machineinstrs -mtriple=aie2 \
; RUN:   | FileCheck %s
; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i64> @_Z5test0Dv16_s(<16 x i16> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test0Dv16_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #128; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-128]
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vlda.ups.s32.s16 bmh0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-64
; CHECK-NEXT:    vst amhh0, [p0, #32]
; CHECK-NEXT:    vst amhl0, [p0, #0]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-128 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  %b = alloca <8 x i64>, align 64
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <16 x i16> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  %0 = tail call <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> %a.0.a.0.a.0.a.0., i32 4, i32 1)
  store volatile <8 x i64> %0, ptr %b, align 64, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <8 x i64>, ptr %b, align 64, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i64> @_Z5test1Dv8_i(<8 x i32> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test1Dv8_i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #128; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-128]
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vlda.ups.s64.d32 bmh0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-64
; CHECK-NEXT:    vst amhh0, [p0, #32]
; CHECK-NEXT:    vst amhl0, [p0, #0]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-128 // Delay Slot 1
entry:
  %a = alloca <8 x i32>, align 32
  %b = alloca <8 x i64>, align 64
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <8 x i32> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <8 x i32>, ptr %a, align 32, !tbaa !2
  %0 = tail call <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32> %a.0.a.0.a.0.a.0., i32 4, i32 0)
  store volatile <8 x i64> %0, ptr %b, align 64, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <8 x i64>, ptr %b, align 64, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i64> @_Z5test2Dv32_a(<32 x i8> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test2Dv32_a:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #256; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-256]
; CHECK-NEXT:    paddb [p0], #-256
; CHECK-NEXT:    vlda.ups.s32.s8 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vst amhh0, [p0, #96]
; CHECK-NEXT:    vst amhl0, [p0, #64]
; CHECK-NEXT:    vst amlh0, [p0, #32]
; CHECK-NEXT:    vst amll0, [p0, #0]
; CHECK-NEXT:    vlda amhh0, [p0, #96]
; CHECK-NEXT:    vlda amhl0, [p0, #64]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-256 // Delay Slot 1
entry:
  %a = alloca <32 x i8>, align 32
  %b = alloca <16 x i64>, align 128
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <32 x i8> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <32 x i8>, ptr %a, align 32, !tbaa !2
  %0 = tail call <16 x i64> @llvm.aie2.acc32.v32.I256.ups(<32 x i8> %a.0.a.0.a.0.a.0., i32 4, i32 1)
  store volatile <16 x i64> %0, ptr %b, align 128, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <16 x i64>, ptr %b, align 128, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i64> @_Z5test3Dv16_s(<16 x i16> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test3Dv16_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #128; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-128]
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vlda.ups.s32.s16 bmh0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-64
; CHECK-NEXT:    vst amhh0, [p0, #32]
; CHECK-NEXT:    vst amhl0, [p0, #0]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-128 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  %b = alloca <8 x i64>, align 64
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <16 x i16> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  %0 = tail call <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> %a.0.a.0.a.0.a.0., i32 4, i32 1)
  store volatile <8 x i64> %0, ptr %b, align 64, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <8 x i64>, ptr %b, align 64, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i64> @_Z5test4Dv16_s(<16 x i16> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test4Dv16_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #256; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-256]
; CHECK-NEXT:    paddb [p0], #-256
; CHECK-NEXT:    vlda.ups.s64.s16 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vst amhh0, [p0, #96]
; CHECK-NEXT:    vst amhl0, [p0, #64]
; CHECK-NEXT:    vst amlh0, [p0, #32]
; CHECK-NEXT:    vst amll0, [p0, #0]
; CHECK-NEXT:    vlda amhh0, [p0, #96]
; CHECK-NEXT:    vlda amhl0, [p0, #64]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-256 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  %b = alloca <16 x i64>, align 128
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <16 x i16> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  %0 = tail call <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> %a.0.a.0.a.0.a.0., i32 4, i32 1)
  store volatile <16 x i64> %0, ptr %b, align 128, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <16 x i64>, ptr %b, align 128, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i64> @_Z5test5Dv16_s(<16 x i16> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test5Dv16_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #256; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-256]
; CHECK-NEXT:    paddb [p0], #-256
; CHECK-NEXT:    vlda.ups.s64.s16 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vst amhh0, [p0, #96]
; CHECK-NEXT:    vst amhl0, [p0, #64]
; CHECK-NEXT:    vst amlh0, [p0, #32]
; CHECK-NEXT:    vst amll0, [p0, #0]
; CHECK-NEXT:    vlda amhh0, [p0, #96]
; CHECK-NEXT:    vlda amhl0, [p0, #64]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-256 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  %b = alloca <16 x i64>, align 128
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <16 x i16> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  %0 = tail call <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> %a.0.a.0.a.0.a.0., i32 4, i32 1)
  store volatile <16 x i64> %0, ptr %b, align 128, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <16 x i64>, ptr %b, align 128, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i64> @_Z5test6Dv16_s(<16 x i16> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test6Dv16_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #256; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-256]
; CHECK-NEXT:    paddb [p0], #-256
; CHECK-NEXT:    vlda.ups.s64.s16 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vst amhh0, [p0, #96]
; CHECK-NEXT:    vst amhl0, [p0, #64]
; CHECK-NEXT:    vst amlh0, [p0, #32]
; CHECK-NEXT:    vst amll0, [p0, #0]
; CHECK-NEXT:    vlda amhh0, [p0, #96]
; CHECK-NEXT:    vlda amhl0, [p0, #64]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-256 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  %b = alloca <16 x i64>, align 128
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <16 x i16> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  %0 = tail call <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> %a.0.a.0.a.0.a.0., i32 4, i32 1)
  store volatile <16 x i64> %0, ptr %b, align 128, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <16 x i64>, ptr %b, align 128, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i64> @_Z5test7Dv16_s(<16 x i16> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test7Dv16_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #128; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-128]
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vlda.ups.s32.s16 bmh0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-64
; CHECK-NEXT:    vst amhh0, [p0, #32]
; CHECK-NEXT:    vst amhl0, [p0, #0]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-128 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  %b = alloca <8 x i64>, align 64
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <16 x i16> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  %0 = tail call <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> %a.0.a.0.a.0.a.0., i32 4, i32 1)
  store volatile <8 x i64> %0, ptr %b, align 64, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <8 x i64>, ptr %b, align 64, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i64> @_Z5test8Dv16_t(<16 x i16> noundef %arg0) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test8Dv16_t:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; paddb [sp], #128; nopx
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    vst wl0, [sp, #-128]
; CHECK-NEXT:    paddb [p0], #-128
; CHECK-NEXT:    vlda.ups.s32.d16 bmh0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-64
; CHECK-NEXT:    vst amhh0, [p0, #32]
; CHECK-NEXT:    vst amhl0, [p0, #0]
; CHECK-NEXT:    vlda amlh0, [p0, #32]
; CHECK-NEXT:    vlda amll0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-128 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  %b = alloca <8 x i64>, align 64
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  store volatile <16 x i16> %arg0, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %b)
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  %0 = tail call <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16> %a.0.a.0.a.0.a.0., i32 4, i32 0)
  store volatile <8 x i64> %0, ptr %b, align 64, !tbaa !2
  %b.0.b.0.b.0.b.0. = load volatile <8 x i64>, ptr %b, align 64, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %b)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i64> %b.0.b.0.b.0.b.0.
}

; Function Attrs: nofree nosync nounwind memory(none)
declare <8 x i64> @llvm.aie2.acc32.v16.I256.ups(<16 x i16>, i32, i32) #2

; Function Attrs: nofree nosync nounwind memory(none)
declare <8 x i64> @llvm.aie2.acc64.v8.I256.ups(<8 x i32>, i32, i32) #2

; Function Attrs: nofree nosync nounwind memory(none)
declare <16 x i64> @llvm.aie2.acc32.v32.I256.ups(<32 x i8>, i32, i32) #2

; Function Attrs: nofree nosync nounwind memory(none)
declare <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16>, i32, i32) #2

attributes #0 = { mustprogress nofree nounwind memory(inaccessiblemem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nosync nounwind memory(none) }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 16.0.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
