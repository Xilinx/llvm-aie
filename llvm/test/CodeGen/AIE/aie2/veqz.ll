; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s

define i64 @test_eqz_v64i8(<64 x i8> %a) {
; CHECK-LABEL: test_eqz_v64i8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    veqz.8 r25:r24, x0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %0 = tail call <2 x i32> @llvm.aie2.veqz8(<64 x i8> %a)
  %1 = bitcast <2 x i32> %0 to i64
  ret i64 %1
}

define i32 @test_eqz_v32i16(<32 x i16> %a) {
; CHECK-LABEL: test_eqz_v32i16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    veqz.16 r16, x0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.veqz16(<32 x i16> %a)
  ret i32 %0
}

define i32 @test_eqz_v16i32(<16 x i32> %a) {
; CHECK-LABEL: test_eqz_v16i32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    veqz.32 r16, x0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.veqz32(<16 x i32> %a)
  ret i32 %0
}

define i32 @test_eqz_v32bf16(<32 x bfloat> %a) {
; CHECK-LABEL: test_eqz_v32bf16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov r1, r16 // Delay Slot 5
; CHECK-NEXT:    veqz.16 r16, x0 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r0, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = bitcast <32 x bfloat> %a to <32 x i16>
  %1 = tail call i32 @llvm.aie2.veqz16(<32 x i16> %0)
  ret i32 %1
}

declare <2 x i32> @llvm.aie2.veqz8(<64 x i8>) #1

declare i32 @llvm.aie2.veqz16(<32 x i16>) #1

declare i32 @llvm.aie2.veqz32(<16 x i32>) #1
