# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# Here we create scenarios where two registers from a singleton class are live.
# RA should then inflate one of the register classes to eR to allow allocation.
# This will typically involve COPY instructions to/from those singleton classes
# as well


# Here the second ACQ has both of its operands constrained to er26.
# The first one should be inflated to er and copied from r26.
---
name:            inflate_er26_same_instr
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $r0, $x0, $r1
    ; CHECK-LABEL: name: inflate_er26_same_instr
    ; CHECK: liveins: $r0, $r1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r26 = COPY $r0
    ; CHECK-NEXT: renamable $r1 = ADD_add_r_ri renamable $r26, renamable $r26, implicit-def $srcarry
    ; CHECK-NEXT: renamable $r0 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: ACQ_COND_mLockId_imm 0, killed renamable $r0, renamable $r26
    ; CHECK-NEXT: renamable $r0 = COPY killed renamable $r26
    ; CHECK-NEXT: renamable $r26 = COPY killed renamable $r1
    ; CHECK-NEXT: ACQ_COND_mLockId_imm 1, killed renamable $r0, killed renamable $r26
    %1:er26 = COPY $r0
    %2:er26 = ADD_add_r_ri %1, %1, implicit-def $srcarry
    %3:er = MOV_RLC_imm10_pseudo 1
    ACQ_COND_mLockId_imm 0, %3, %1
    ACQ_COND_mLockId_imm 1, %1, %2
...


# Here there are two livin/liveout er26 registers. They need to be copied
# to/from other GPRs back and forth.
# Note: The $r2 = COPY $r26 in between the ACQ is useless, because r2 and r26
# have the same content. Maybe "hasSideEffects" blurs the view of Greedy.
---
name:            inflate_er26_bb_live_accross_bb
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: inflate_er26_bb_live_accross_bb
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r2 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r3 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r1 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r26 = COPY killed renamable $r2
  ; CHECK-NEXT:   ACQ_COND_mLockId_imm 0, renamable $r0, renamable $r26
  ; CHECK-NEXT:   renamable $r2 = COPY killed renamable $r26
  ; CHECK-NEXT:   renamable $r26 = COPY renamable $r3
  ; CHECK-NEXT:   ACQ_COND_mLockId_imm 1, renamable $r0, killed renamable $r26
  ; CHECK-NEXT:   renamable $r2 = ADD_add_r_ri killed renamable $r2, renamable $r1, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $r3 = ADD_add_r_ri killed renamable $r3, renamable $r1, implicit-def $srcarry
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.1.entry:
    liveins: $r0
    %1:er = COPY $r0
    %2:er26 = MOV_RLC_imm10_pseudo 0
    %3:er26 = MOV_RLC_imm10_pseudo 0
    %4:er = MOV_RLC_imm10_pseudo 1
  bb.2:
    ACQ_COND_mLockId_imm 0, %1, %2
    ACQ_COND_mLockId_imm 1, %1, %3
    %2:er26 = ADD_add_r_ri %2, %4, implicit-def $srcarry
    %3:er26 = ADD_add_r_ri %3, %4, implicit-def $srcarry
    PseudoJ_jump_imm %bb.2
...


# Here the second SELEQZ has both of its operands constrained to er27.
# The last one should be inflated to er and copied from r27.
---
name:            inflate_er27_same_instr
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $r0, $x0, $r1
    ; CHECK-LABEL: name: inflate_er27_same_instr
    ; CHECK: liveins: $r0, $r1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r27 = COPY $r0
    ; CHECK-NEXT: renamable $r2 = ADD_add_r_ri renamable $r27, renamable $r27, implicit-def $srcarry
    ; CHECK-NEXT: renamable $r0 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: renamable $r1 = SELEQZ killed renamable $r1, killed renamable $r0, renamable $r27
    ; CHECK-NEXT: renamable $r0 = COPY killed renamable $r27
    ; CHECK-NEXT: renamable $r27 = COPY killed renamable $r2
    ; CHECK-NEXT: dead renamable $r1 = SELEQZ killed renamable $r1, killed renamable $r0, killed renamable $r27
    %0:er = COPY $r1
    %1:er27 = COPY $r0
    %2:er27 = ADD_add_r_ri %1, %1, implicit-def $srcarry
    %3:er = MOV_RLC_imm10_pseudo 1
    %0:er = SELEQZ %0, %3, %1
    %0:er = SELEQZ %0, %1, %2
...


# Here there are two livin/liveout er27 registers. They need to be copied
# to/from other GPRs back and forth.
---
name:            inflate_er27_bb_live_accross_bb
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: inflate_er27_bb_live_accross_bb
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r3 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r4 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r2 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r27 = COPY killed renamable $r3
  ; CHECK-NEXT:   renamable $r1 = SELEQZ killed renamable $r1, renamable $r0, renamable $r27
  ; CHECK-NEXT:   renamable $r3 = COPY killed renamable $r27
  ; CHECK-NEXT:   renamable $r27 = COPY renamable $r4
  ; CHECK-NEXT:   renamable $r1 = SELEQZ killed renamable $r1, renamable $r0, killed renamable $r27
  ; CHECK-NEXT:   renamable $r3 = ADD_add_r_ri killed renamable $r3, renamable $r2, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $r4 = ADD_add_r_ri killed renamable $r4, renamable $r2, implicit-def $srcarry
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.1.entry:
    liveins: $r0, $r1
    %0:er = COPY $r1
    %1:er = COPY $r0
    %2:er27 = MOV_RLC_imm10_pseudo 0
    %3:er27 = MOV_RLC_imm10_pseudo 0
    %4:er = MOV_RLC_imm10_pseudo 1
  bb.2:
    %0:er = SELEQZ %0, %1, %2
    %0:er = SELEQZ %0, %1, %3
    %2:er27 = ADD_add_r_ri %2, %4, implicit-def $srcarry
    %3:er27 = ADD_add_r_ri %3, %4, implicit-def $srcarry
    PseudoJ_jump_imm %bb.2
...


# Here the second VINSERT has both of its operands constrained to er29.
# The last one should be inflated to er and copied from r29.
---
name:            inflate_er29_same_instr
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $r0, $x0, $r1
    ; CHECK-LABEL: name: inflate_er29_same_instr
    ; CHECK: liveins: $r0, $r1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r29 = ADD_add_r_ri renamable $r0, renamable $r0, implicit-def $srcarry
    ; CHECK-NEXT: renamable $r2 = COPY killed renamable $r29
    ; CHECK-NEXT: renamable $r29 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $x0 = VINSERT_16 killed renamable $x0, killed renamable $r29, renamable $r2
    ; CHECK-NEXT: renamable $r29 = COPY killed renamable $r2
    ; CHECK-NEXT: dead renamable $x0 = VINSERT_16 killed renamable $x0, killed renamable $r29, killed renamable $r1
    %0:vec512 = COPY $x0
    %1:er29 = COPY $r0
    %2:er29 = ADD_add_r_ri %1, %1, implicit-def $srcarry
    %3:er = COPY $r1
    %0:vec512 = VINSERT_16 %0, %1, %2
    %0:vec512 = VINSERT_16 %0, %2, %3
...


# Here there are two livin/liveout er29 registers. They need to be copied
# to/from other GPRs back and forth.
---
name:            inflate_er29_bb_live_accross_bb
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: inflate_er29_bb_live_accross_bb
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r2 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r3 = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   renamable $r1 = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r29 = COPY killed renamable $r2
  ; CHECK-NEXT:   renamable $x0 = VINSERT_16 killed renamable $x0, renamable $r29, renamable $r0
  ; CHECK-NEXT:   renamable $r2 = COPY killed renamable $r29
  ; CHECK-NEXT:   renamable $r29 = COPY renamable $r3
  ; CHECK-NEXT:   renamable $x0 = VINSERT_16 killed renamable $x0, killed renamable $r29, renamable $r0
  ; CHECK-NEXT:   renamable $r2 = ADD_add_r_ri killed renamable $r2, renamable $r1, implicit-def $srcarry
  ; CHECK-NEXT:   renamable $r3 = ADD_add_r_ri killed renamable $r3, renamable $r1, implicit-def $srcarry
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.1.entry:
    liveins: $r0, $x0
    %0:vec512 = COPY $x0
    %1:er = COPY $r0
    %2:er29 = MOV_RLC_imm10_pseudo 0
    %3:er29 = MOV_RLC_imm10_pseudo 0
    %4:er = MOV_RLC_imm10_pseudo 1
  bb.2:
    %0:vec512 = VINSERT_16 %0, %2, %1
    %0:vec512 = VINSERT_16 %0, %3, %1
    %2:er29 = ADD_add_r_ri %2, %4, implicit-def $srcarry
    %3:er29 = ADD_add_r_ri %3, %4, implicit-def $srcarry
    PseudoJ_jump_imm %bb.2
...
