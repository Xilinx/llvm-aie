# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There is only one eDN (MOD) register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.

# %0 isn't used by "real" instructions directly, greedy assumes the reg class
# would not benefit from enlarging, and prefers spilling.
---
  name:            spill_to_mem
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $dn0, $dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7

    ; CHECK-LABEL: name: spill_to_mem
    ; CHECK: liveins: $dn0, $dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: ST_dms_spill $dn0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $dn0 = COPY $dn1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $dn0, $p0, 0, implicit $dn1, implicit $dn2, implicit $dn3, implicit $dn4, implicit $dn5, implicit $dn6, implicit $dn7
    ; CHECK-NEXT: renamable $dn0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $dn0
      %0:edn = COPY $dn0 ; -> only $dn0 is available

      ; spill $dn0 before it is re-defined and used
      $dn0 = COPY $dn1
      ST_dms_sts_idx_imm $dn0, $p0, 0, implicit $dn1, implicit $dn2, implicit $dn3, implicit $dn4, implicit $dn5, implicit $dn6, implicit $dn7

      ; reload %0 / $dn0 before PseudoRET
      PseudoRET implicit $lr, implicit %0
...

# %0 is used by "real" instructions, but those impose no strict constraints
# on the current reg class. Greedy prefers spilling, because splitting is
# "similar to spilling", only without the extra COPY instructions.
---
  name:            spill_to_mem2
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7

    ; CHECK-LABEL: name: spill_to_mem2
    ; CHECK: liveins: $dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $dn0 = LDA_dms_lda_idx_imm $p0, 0
    ; CHECK-NEXT: ST_dms_spill killed renamable $dn0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $dn0 = COPY $dn1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $dn0, $p0, 0, implicit $dn1, implicit $dn2, implicit $dn3, implicit $dn4, implicit $dn5, implicit $dn6, implicit $dn7
    ; CHECK-NEXT: renamable $dn0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $dn0, $p0, 4
      %0:edn_as_32bit = LDA_dms_lda_idx_imm $p0, 0 ; -> only $dn0 is available

      ; spill $dn0 before it is re-defined and used
      $dn0 = COPY $dn1
      ST_dms_sts_idx_imm $dn0, $p0, 0, implicit $dn1, implicit $dn2, implicit $dn3, implicit $dn4, implicit $dn5, implicit $dn6, implicit $dn7

      ; reload %0 / $dn0 before ST
      ST_dms_sts_idx_imm %0, $p0, 4
...

# FIXME: Once we have PADDA_2D_split with an explicit use of %0, the latter
# should be spilled "to GPRs" instead of to memory.
---
  name:            spill_to_reg
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $dn0, $dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7

    ; CHECK-LABEL: name: spill_to_reg
    ; CHECK: liveins: $dn0, $dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: ST_dms_spill $dn0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $dn0 = COPY $dn1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $dn0, $p0, 0, implicit $dn1, implicit $dn2, implicit $dn3, implicit $dn4, implicit $dn5, implicit $dn6, implicit $dn7
    ; CHECK-NEXT: $dn0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $p0, $dc0 = PADDA_2D $p0, $d0
      %0:edn = COPY $dn0 ; -> only $dn0 is available

      ; spill $dn0 before it is re-defined and used
      $dn0 = COPY $dn1
      ST_dms_sts_idx_imm $dn0, $p0, 0, implicit $dn1, implicit $dn2, implicit $dn3, implicit $dn4, implicit $dn5, implicit $dn6, implicit $dn7

      ; reload %0 / $dn0 before PADDA_2D
      $dn0 = COPY %0
      $p0, $dc0 = PADDA_2D $p0, $d0
...
