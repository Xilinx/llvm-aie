# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There is only one eDJ (MOD) register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.

# %0 isn't used by "real" instructions directly, greedy assumes the reg class
# would not benefit from enlarging, and prefers spilling.
---
  name:            spill_to_mem
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $dj0, $dj1, $dj2, $dj3, $dj4, $dj5, $dj6, $dj7

    ; CHECK-LABEL: name: spill_to_mem
    ; CHECK: liveins: $dj0, $dj1, $dj2, $dj3, $dj4, $dj5, $dj6, $dj7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: ST_dms_spill $dj0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $dj0 = COPY $dj1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $dj0, $p0, 0, implicit $dj1, implicit $dj2, implicit $dj3, implicit $dj4, implicit $dj5, implicit $dj6, implicit $dj7
    ; CHECK-NEXT: renamable $dj0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $dj0
      %0:edj = COPY $dj0 ; -> only $dj0 is available

      ; spill $dj0 before it is re-defined and used
      $dj0 = COPY $dj1
      ST_dms_sts_idx_imm $dj0, $p0, 0, implicit $dj1, implicit $dj2, implicit $dj3, implicit $dj4, implicit $dj5, implicit $dj6, implicit $dj7

      ; reload %0 / $dj0 before PseudoRET
      PseudoRET implicit $lr, implicit %0
...

# %0 is used by "real" instructions, but those impose no strict constraints
# on the current reg class. Greedy prefers spilling, because splitting is
# "similar to spilling", only without the extra COPY instructions.
---
  name:            spill_to_mem2
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $dj1, $dj2, $dj3, $dj4, $dj5, $dj6, $dj7

    ; CHECK-LABEL: name: spill_to_mem2
    ; CHECK: liveins: $dj1, $dj2, $dj3, $dj4, $dj5, $dj6, $dj7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $dj0 = LDA_dms_lda_idx_imm $p0, 0
    ; CHECK-NEXT: ST_dms_spill killed renamable $dj0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $dj0 = COPY $dj1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $dj0, $p0, 0, implicit $dj1, implicit $dj2, implicit $dj3, implicit $dj4, implicit $dj5, implicit $dj6, implicit $dj7
    ; CHECK-NEXT: renamable $dj0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $dj0, $p0, 4
      %0:edj_as_32bit = LDA_dms_lda_idx_imm $p0, 0 ; -> only $dj0 is available

      ; spill $dj0 before it is re-defined and used
      $dj0 = COPY $dj1
      ST_dms_sts_idx_imm $dj0, $p0, 0, implicit $dj1, implicit $dj2, implicit $dj3, implicit $dj4, implicit $dj5, implicit $dj6, implicit $dj7

      ; reload %0 / $dj0 before ST
      ST_dms_sts_idx_imm %0, $p0, 4
...

# %0 is used by a real/non-COPY instruction that has a constrained class
# compared to spill_eDJ_to_eR. Here, greedy favors splitting over spilling.
---
  name:            spill_to_reg
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $r0, $dj0, $dj1, $dj2, $dj3, $dj4, $dj5, $dj6, $dj7

    ; CHECK-LABEL: name: spill_to_reg
    ; CHECK: liveins: $dj0, $dj1, $dj2, $dj3, $dj4, $dj5, $dj6, $dj7, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r1 = COPY $dj0
    ; CHECK-NEXT: $dj0 = COPY $dj1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $dj0, $p0, 0, implicit $dj1, implicit $dj2, implicit $dj3, implicit $dj4, implicit $dj5, implicit $dj6, implicit $dj7
    ; CHECK-NEXT: renamable $dj0 = COPY killed renamable $r1
    ; CHECK-NEXT: ST_dms_sts_idx $r0, $p0, killed renamable $dj0
      %0:edj = COPY $dj0 ; -> only $dj0 is available

      ; spill $dj0 before it is re-defined and used
      $dj0 = COPY $dj1
      ST_dms_sts_idx_imm $dj0, $p0, 0, implicit $dj1, implicit $dj2, implicit $dj3, implicit $dj4, implicit $dj5, implicit $dj6, implicit $dj7

      ; reload %0 / $dj0 before it is used as an offset in ST
      ST_dms_sts_idx $r0, $p0, %0
...
