# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs --aie-reserved-gprs=31 -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# We particularly focus on the spill_es_to_er when there is a high GPR and
# SHIFT (eS) register pressure. Because spill_es_to_er isn't a subclass of
# mSclStRegClass, we cannot spill it directly and need a COPY to eR first.


# There are only 2 free registers in spill_es_to_er: $r0 and $s0.
# Those are both used by ST_dms_sts_idx_imm, so %0 needs to spill to memory.
---
name:            spill_to_mem
alignment:       16
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $r1, $x0, $s0, $s1, $s2, $s3
    ; CHECK-LABEL: name: spill_to_mem
    ; CHECK: liveins: $p0, $r0, $r1, $s0, $s1, $s2, $s3, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: ST_dms_spill $r1, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 0, implicit $s0
    ; CHECK-NEXT: renamable $r0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: renamable $s0 = MOV_mv_scl killed renamable $r0
    ; CHECK-NEXT: renamable $cm0 = VUPS_S32_D16_mv_ups_x2c $x0, killed renamable $s0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $cm0, implicit $s1, implicit $s2, implicit $s3
    %0:spill_es_to_er = COPY $r1
    ST_dms_sts_idx_imm $r0, $p0, 0, implicit $s0 ; Uses all free regs in spill_es_to_er
    %10:mss = COPY %0
    %20:acc1024 = VUPS_S32_D16_mv_ups_x2c $x0, %10, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    PseudoRET implicit $lr, implicit %20, implicit $s1, implicit $s2, implicit $s3
...

# No CSR for S registers, spill to mem.
---
name:            spill_es_to_er_class
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $s0
    ; CHECK-LABEL: name: spill_es_to_er_class
    ; CHECK: liveins: $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r0 = MOV_mv_scl $s0
    ; CHECK-NEXT: ST_dms_spill killed renamable $r0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: PseudoJL 32, csr_aie2, implicit-def $lr
    ; CHECK-NEXT: renamable $r0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: renamable $s0 = MOV_mv_scl killed renamable $r0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $s0
    %0:spill_es_to_er = COPY $s0
    PseudoJL 32, csr_aie2, implicit-def $lr
    PseudoRET implicit $lr, implicit %0
...
