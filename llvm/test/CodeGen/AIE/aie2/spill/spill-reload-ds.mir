# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There is only one eDS (dimension) register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.

---
  name:            test
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $d1_3d, $d2_3d, $d3_3d

    ; CHECK-LABEL: name: test
    ; CHECK: liveins: $p0, $d1_3d, $d2_3d, $d3_3d
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $m0 = COPY renamable $r0
    ; CHECK-NEXT: renamable $dn0 = COPY renamable $r0
    ; CHECK-NEXT: renamable $dj0 = COPY renamable $r0
    ; CHECK-NEXT: renamable $dc0 = COPY renamable $r0
    ; CHECK-NEXT: renamable $m4 = COPY renamable $r0
    ; CHECK-NEXT: renamable $dn4 = COPY renamable $r0
    ; CHECK-NEXT: renamable $dj4 = COPY renamable $r0
    ; CHECK-NEXT: renamable $dc4 = COPY killed renamable $r0
    ; CHECK-NEXT: ST_DS_SPILL killed renamable $d0_3d, %stack.0, implicit $sp :: (store (s256) into %stack.0, align 4)
    ; CHECK-NEXT: $d0_3d = COPY $d1_3d
    ; CHECK-NEXT: $p0, $dc0, $dc4 = PADDA_3D $p0, $d0_3d, implicit $d1_3d, implicit $d2_3d, implicit $d3_3d
    ; CHECK-NEXT: renamable $d0_3d = LDA_DS_SPILL %stack.0, implicit $sp :: (load (s256) from %stack.0, align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $d0_3d
      %10:er = MOVA_lda_cg 32
      undef %0.sub_mod:eds = COPY %10 ; -> only $d0_3d is available for %0
      %0.sub_dim_size:eds = COPY %10
      %0.sub_dim_stride:eds = COPY %10
      %0.sub_dim_count:eds = COPY %10
      %0.sub_hi_dim_then_sub_mod:eds = COPY %10
      %0.sub_hi_dim_then_sub_dim_size:eds = COPY %10
      %0.sub_hi_dim_then_sub_dim_stride:eds = COPY %10
      %0.sub_hi_dim_then_sub_dim_count:eds = COPY %10

      ; spill $d0_3d before it is re-defined and used
      $d0_3d = COPY $d1_3d
      $p0, $dc0, $dc4 = PADDA_3D $p0, $d0_3d, implicit $d1_3d, implicit $d2_3d, implicit $d3_3d

      ; reload %0 / $d0 before PseudoRET
      PseudoRET implicit $lr, implicit %0
...
