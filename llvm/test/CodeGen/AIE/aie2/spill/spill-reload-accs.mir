# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There is only one AM register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.
---
name:            test_256_scarce_regs
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $p0, $amll1, $amll2, $amll3, $amll4, $amll5, $amll6, $amll7, $amll8, $amhl0, $amhl1, $amhl2, $amhl3, $amhl4, $amhl5, $amhl6, $amhl7, $amhl8, $amlh0, $amlh1, $amlh2, $amlh3, $amlh4, $amlh5, $amlh6, $amlh7, $amlh8, $amhh0, $amhh1, $amhh2, $amhh3, $amhh4, $amhh5, $amhh6, $amhh7, $amhh8

    ; CHECK-LABEL: name: test_256_scarce_regs
    ; CHECK: liveins: $amhh0, $amhh1, $amhh2, $amhh3, $amhh4, $amhh5, $amhh6, $amhh7, $amhh8, $amhl0, $amhl1, $amhl2, $amhl3, $amhl4, $amhl5, $amhl6, $amhl7, $amhl8, $amlh0, $amlh1, $amlh2, $amlh3, $amlh4, $amlh5, $amlh6, $amlh7, $amlh8, $amll1, $amll2, $amll3, $amll4, $amll5, $amll6, $amll7, $amll8, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $amll0 = VLDA_dmw_lda_am_ag_idx_imm $p0, 0
    ; CHECK-NEXT: VST_dmw_sts_am_ag_spill killed renamable $amll0, %stack.0, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: $amll0 = COPY $amll1
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm $amll0, $p0, 0, implicit $amll1, implicit $amll2, implicit $amll3, implicit $amll4, implicit $amll5, implicit $amll6, implicit $amll7, implicit $amll8, implicit $amhl0, implicit $amhl1, implicit $amhl2, implicit $amhl3, implicit $amhl4, implicit $amhl5, implicit $amhl6, implicit $amhl7, implicit $amhl8, implicit $amlh0, implicit $amlh1, implicit $amlh2, implicit $amlh3, implicit $amlh4, implicit $amlh5, implicit $amlh6, implicit $amlh7, implicit $amlh8, implicit $amhh0, implicit $amhh1, implicit $amhh2, implicit $amhh3, implicit $amhh4, implicit $amhh5, implicit $amhh6, implicit $amhh7, implicit $amhh8
    ; CHECK-NEXT: renamable $amhh0 = VLDA_dmw_lda_am_ag_spill %stack.0, implicit $sp :: (load (s256) from %stack.0)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $amhh0
    %0:acc256 = VLDA_dmw_lda_am_ag_idx_imm $p0, 0 ; -> only $amll0 is available

    ; spill $amll0 before it is re-defined and used
    $amll0 = COPY $amll1
    VST_dmw_sts_am_ag_idx_imm $amll0, $p0, 0, implicit $amll1, implicit $amll2, implicit $amll3, implicit $amll4, implicit $amll5, implicit $amll6, implicit $amll7, implicit $amll8, implicit $amhl0, implicit $amhl1, implicit $amhl2, implicit $amhl3, implicit $amhl4, implicit $amhl5, implicit $amhl6, implicit $amhl7, implicit $amhl8, implicit $amlh0, implicit $amlh1, implicit $amlh2, implicit $amlh3, implicit $amlh4, implicit $amlh5, implicit $amlh6, implicit $amlh7, implicit $amlh8, implicit $amhh0, implicit $amhh1, implicit $amhh2, implicit $amhh3, implicit $amhh4, implicit $amhh5, implicit $amhh6, implicit $amhh7, implicit $amhh8

    ; reload %0 / $ amll0 before PseudoRET
    PseudoRET implicit $lr, implicit %0
...

---
name:            test_256_caller_saved
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $amll0

    ; CHECK-LABEL: name: test_256_caller_saved
    ; CHECK: liveins: $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: VST_dmw_sts_am_ag_spill $amll0, %stack.0, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: JL 32, csr_aie2, implicit-def $lr
    ; CHECK-NEXT: renamable $amhh0 = VLDA_dmw_lda_am_ag_spill %stack.0, implicit $sp :: (load (s256) from %stack.0)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $amhh0
    %0:acc256 = COPY $amll0
    JL 32, csr_aie2, implicit-def $lr
    PseudoRET implicit $lr, implicit %0
...

# There is only one BM register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.
---
name:            test_512_scarce_regs
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $x0, $r0, $p0, $bml1, $bml2, $bml3, $bml4, $bml5, $bml6, $bml7, $bml8, $bmh0, $bmh1, $bmh2, $bmh3, $bmh4, $bmh5, $bmh6, $bmh7, $bmh8

    ; CHECK-LABEL: name: test_512_scarce_regs
    ; CHECK: liveins: $bmh0, $bmh1, $bmh2, $bmh3, $bmh4, $bmh5, $bmh6, $bmh7, $bmh8, $bml1, $bml2, $bml3, $bml4, $bml5, $bml6, $bml7, $bml8, $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $bml0 = COPY $x0
    ; CHECK-NEXT: VST_BM_SPILL killed renamable $bml0, %stack.0, implicit $sp :: (store (s512) into %stack.0, align 32)
    ; CHECK-NEXT: $bml0 = COPY $bml1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 0, implicit $bml0, implicit $bml1, implicit $bml2, implicit $bml3, implicit $bml4, implicit $bml5, implicit $bml6, implicit $bml7, implicit $bml8, implicit $bmh0, implicit $bmh1, implicit $bmh2, implicit $bmh3, implicit $bmh4, implicit $bmh5, implicit $bmh6, implicit $bmh7, implicit $bmh8
    ; CHECK-NEXT: renamable $bmh0 = VLDA_BM_SPILL %stack.0, implicit $sp :: (load (s512) from %stack.0, align 32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $bmh0
    %0:acc512 = COPY $x0 ; -> only $bml0 is available

    ; spill $bml0 before it is re-defined and used
    $bml0 = COPY $bml1
    ST_dms_sts_idx_imm $r0, $p0, 0, implicit $bml0, implicit $bml1, implicit $bml2, implicit $bml3, implicit $bml4, implicit $bml5, implicit $bml6, implicit $bml7, implicit $bml8, implicit $bmh0, implicit $bmh1, implicit $bmh2, implicit $bmh3, implicit $bmh4, implicit $bmh5, implicit $bmh6, implicit $bmh7, implicit $bmh8

    ; reload %0 / $bml0 before PseudoRET
    PseudoRET implicit $lr, implicit %0
...

---
name:            test_512_caller_saved
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $bml0

    ; CHECK-LABEL: name: test_512_caller_saved
    ; CHECK: liveins: $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: VST_BM_SPILL $bml0, %stack.0, implicit $sp :: (store (s512) into %stack.0, align 32)
    ; CHECK-NEXT: JL 32, csr_aie2, implicit-def $lr
    ; CHECK-NEXT: renamable $bmh0 = VLDA_BM_SPILL %stack.0, implicit $sp :: (load (s512) from %stack.0, align 32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $bmh0
    %0:acc512 = COPY $bml0
    JL 32, csr_aie2, implicit-def $lr
    PseudoRET implicit $lr, implicit %0
...

# There is only one CM register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.
---
name:            test_1024_scarce_regs
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $y2, $r0, $p0, $cm1, $cm2, $cm3, $cm4, $cm5, $cm6, $cm7, $cm8

    ; CHECK-LABEL: name: test_1024_scarce_regs
    ; CHECK: liveins: $cm1, $cm2, $cm3, $cm4, $cm5, $cm6, $cm7, $cm8, $p0, $r0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $cm0 = COPY $y2
    ; CHECK-NEXT: VST_CM_SPILL killed renamable $cm0, %stack.0, implicit $sp :: (store (s1024) into %stack.0, align 32)
    ; CHECK-NEXT: $cm0 = COPY $cm1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 0, implicit $cm0, implicit $cm1, implicit $cm2, implicit $cm3, implicit $cm4, implicit $cm5, implicit $cm6, implicit $cm7, implicit $cm8
    ; CHECK-NEXT: renamable $cm0 = VLDA_CM_SPILL %stack.0, implicit $sp :: (load (s1024) from %stack.0, align 32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $cm0
    %0:acc1024 = COPY $y2 ; -> only $cm0 is available

    ; spill $cm0 before it is re-defined and used
    $cm0 = COPY $cm1
    ST_dms_sts_idx_imm $r0, $p0, 0, implicit $cm0, implicit $cm1, implicit $cm2, implicit $cm3, implicit $cm4, implicit $cm5, implicit $cm6, implicit $cm7, implicit $cm8

    ; reload %0 / $cm0 before PseudoRET
    PseudoRET implicit $lr, implicit %0
...

---
name:            test_1024_caller_saved
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $cm0

    ; CHECK-LABEL: name: test_1024_caller_saved
    ; CHECK: liveins: $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: VST_CM_SPILL $cm0, %stack.0, implicit $sp :: (store (s1024) into %stack.0, align 32)
    ; CHECK-NEXT: JL 32, csr_aie2, implicit-def $lr
    ; CHECK-NEXT: renamable $cm0 = VLDA_CM_SPILL %stack.0, implicit $sp :: (load (s1024) from %stack.0, align 32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $cm0
    %0:acc1024 = COPY $cm0
    JL 32, csr_aie2, implicit-def $lr
    PseudoRET implicit $lr, implicit %0
...
