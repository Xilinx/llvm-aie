# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There is only 8 eP (PTR) register available in AIE2, in the test we are using
# 10 PTR (9 + 1 for stack). Here we test that it is properly spilled to GPR reg.
# 2 PTR reg are expected to be spilled to GPRs.

---
  name:            test
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true

  stack:
    - { id: 0, name: "", offset: 0, size: 4, alignment: 4 }
    - { id: 1, name: "", offset: 4, size: 4, alignment: 4 }
    - { id: 2, name: "", offset: 8, size: 4, alignment: 4 }
    - { id: 3, name: "", offset: 12, size: 4, alignment: 4 }
    - { id: 4, name: "", offset: 16, size: 4, alignment: 4 }
    - { id: 5, name: "", offset: 20, size: 4, alignment: 4 }
    - { id: 6, name: "", offset: 24, size: 4, alignment: 4 }
    - { id: 7, name: "", offset: 28, size: 4, alignment: 4 }
    - { id: 8, name: "", offset: 32, size: 4, alignment: 4 }
  body:             |
    bb.1.entry:
      liveins:
    ; CHECK-LABEL: name: test
    ; CHECK: renamable $r0 = MOVA_lda_cg 1
    ; CHECK-NEXT: renamable $r1 = MOVA_lda_cg 2
    ; CHECK-NEXT: renamable $r2 = MOVA_lda_cg 3
    ; CHECK-NEXT: renamable $r3 = MOVA_lda_cg 4
    ; CHECK-NEXT: renamable $r4 = MOVA_lda_cg 5
    ; CHECK-NEXT: renamable $r5 = MOVA_lda_cg 6
    ; CHECK-NEXT: renamable $r6 = MOVA_lda_cg 7
    ; CHECK-NEXT: renamable $r7 = MOVA_lda_cg 8
    ; CHECK-NEXT: renamable $r8 = MOVA_lda_cg 9
    ; CHECK-NEXT: renamable $p0 = PseudoFI %stack.0, implicit $sp
    ; CHECK-NEXT: renamable $r10 = COPY killed renamable $p0
    ; CHECK-NEXT: renamable $p1 = PseudoFI %stack.1, implicit $sp
    ; CHECK-NEXT: renamable $p2 = PseudoFI %stack.2, implicit $sp
    ; CHECK-NEXT: renamable $p3 = PseudoFI %stack.3, implicit $sp
    ; CHECK-NEXT: renamable $p4 = PseudoFI %stack.4, implicit $sp
    ; CHECK-NEXT: renamable $p5 = PseudoFI %stack.5, implicit $sp
    ; CHECK-NEXT: renamable $p6 = PseudoFI %stack.6, implicit $sp
    ; CHECK-NEXT: renamable $p7 = PseudoFI %stack.7, implicit $sp
    ; CHECK-NEXT: renamable $p0 = PseudoFI %stack.8, implicit $sp
    ; CHECK-NEXT: renamable $r9 = COPY killed renamable $p0
    ; CHECK-NEXT: renamable $p0 = COPY killed renamable $r10
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r0, killed renamable $p0, 0 :: (volatile store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r1, killed renamable $p1, 0 :: (volatile store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r2, killed renamable $p2, 0 :: (volatile store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r3, killed renamable $p3, 0 :: (volatile store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r4, killed renamable $p4, 0 :: (volatile store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r5, killed renamable $p5, 0 :: (volatile store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r6, killed renamable $p6, 0 :: (volatile store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r7, killed renamable $p7, 0 :: (volatile store (s32))
    ; CHECK-NEXT: renamable $p0 = COPY killed renamable $r9
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed renamable $r8, killed renamable $p0, 0 :: (volatile store (s32))
    ; CHECK-NEXT: $r0 = MOVA_lda_cg 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
      %10:er = MOVA_lda_cg 1
      %11:er = MOVA_lda_cg 2
      %12:er = MOVA_lda_cg 3
      %13:er = MOVA_lda_cg 4
      %14:er = MOVA_lda_cg 5
      %15:er = MOVA_lda_cg 6
      %16:er = MOVA_lda_cg 7
      %17:er = MOVA_lda_cg 8
      %18:er = MOVA_lda_cg 9
      %1:ep = PseudoFI %stack.0, implicit $sp
      %2:ep = PseudoFI %stack.1, implicit $sp
      %3:ep = PseudoFI %stack.2, implicit $sp
      %4:ep = PseudoFI %stack.3, implicit $sp
      %5:ep = PseudoFI %stack.4, implicit $sp
      %6:ep = PseudoFI %stack.5, implicit $sp
      %7:ep = PseudoFI %stack.6, implicit $sp
      %8:ep = PseudoFI %stack.7, implicit $sp
      %9:ep = PseudoFI %stack.8, implicit $sp
      ST_dms_sts_idx_imm %10:er, %1:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %11:er, %2:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %12:er, %3:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %13:er, %4:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %14:er, %5:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %15:er, %6:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %16:er, %7:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %17:er, %8:ep, 0 :: (volatile store (s32))
      ST_dms_sts_idx_imm %18:er, %9:ep, 0 :: (volatile store (s32))
      $r0 = MOVA_lda_cg 0
      PseudoRET implicit $lr, implicit $r0
...
