# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There are 5 mSs (SHIFT) registers in use, one by %20, and 4 by the PseudoRET.
# There are only 4 physical mSs registers, one needs to be spilled and reloaded.
---
name:            spill_to_mem
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $x0, $s0
    ; CHECK-LABEL: name: spill_to_mem
    ; CHECK: liveins: $s0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $r0 = MOV_mv_scl killed renamable $r0
    ; CHECK-NEXT: ST_dms_spill killed renamable $r0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $s2 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $s3 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $s1 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $cm0 = VUPS_S32_D16_mv_ups_x2c $x0, $s0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: renamable $r0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: renamable $s0 = MOV_mv_scl killed renamable $r0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $s0, implicit killed renamable $s2, implicit killed renamable $s3, implicit killed renamable $s1, implicit killed renamable $cm0
    %10:er = MOVA_lda_cg 32
    %0:mss = COPY %10
    %11:er = MOVA_lda_cg 32
    %1:mss = COPY %11
    %12:er = MOVA_lda_cg 32
    %2:mss = COPY %12
    %13:er = MOVA_lda_cg 32
    %3:mss = COPY %13
    %20:acc1024 = VUPS_S32_D16_mv_ups_x2c $x0, $s0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3, implicit %20
...

# Similar to the test above but with "real" instructions using the S registers.
# Otherwise the regalloc heuristics think it's not worth splitting the live
# ranges and using GPRs to copy back and forth.
---
name:            spill_to_gpr
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $x0, $s0, $p0

    ; CHECK-LABEL: name: spill_to_gpr
    ; CHECK: liveins: $p0, $s0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $r1 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $s2 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $s3 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $r0 = MOVA_lda_cg 32
    ; CHECK-NEXT: renamable $s1 = COPY killed renamable $r0
    ; CHECK-NEXT: renamable $cm0 = VUPS_S32_D16_mv_ups_x2c $x0, $s0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: renamable $s0 = COPY killed renamable $r1
    ; CHECK-NEXT: renamable $cm1 = VUPS_S32_D16_mv_ups_x2c $x0, killed renamable $s0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: renamable $cm2 = VUPS_S32_D16_mv_ups_x2c $x0, killed renamable $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: renamable $cm3 = VUPS_S32_D16_mv_ups_x2c $x0, killed renamable $s3, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: renamable $cm4 = VUPS_S32_D16_mv_ups_x2c $x0, killed renamable $s1, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $cm0, implicit killed renamable $cm1, implicit killed renamable $cm2, implicit killed renamable $cm3, implicit killed renamable $cm4
    %10:er = MOVA_lda_cg 32
    %0:mss = COPY %10
    %11:er = MOVA_lda_cg 32
    %1:mss = COPY %11
    %12:er = MOVA_lda_cg 32
    %2:mss = COPY %12
    %13:er = MOVA_lda_cg 32
    %3:mss = COPY %13
    %20:acc1024 = VUPS_S32_D16_mv_ups_x2c $x0, $s0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    %21:acc1024 = VUPS_S32_D16_mv_ups_x2c $x0, %0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    %22:acc1024 = VUPS_S32_D16_mv_ups_x2c $x0, %1, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    %23:acc1024 = VUPS_S32_D16_mv_ups_x2c $x0, %2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    %24:acc1024 = VUPS_S32_D16_mv_ups_x2c $x0, %3, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    PseudoRET implicit $lr, implicit %20, implicit %21, implicit %22, implicit %23, implicit %24
...

---
name:            spill_to_mem_caller_saved
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $s0
    ; CHECK-LABEL: name: spill_to_mem_caller_saved
    ; CHECK: liveins: $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r0 = MOV_mv_scl $s0
    ; CHECK-NEXT: ST_dms_spill killed renamable $r0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: PseudoJL 32, csr_aie2, implicit-def $lr
    ; CHECK-NEXT: renamable $r0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: renamable $s0 = MOV_mv_scl killed renamable $r0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $s0
    %0:es = COPY $s0
    PseudoJL 32, csr_aie2, implicit-def $lr
    PseudoRET implicit $lr, implicit %0
...

---
name:            spill_es_to_er_class
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $s0
    ; CHECK-LABEL: name: spill_es_to_er_class
    ; CHECK: liveins: $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $r16 = COPY $s0
    ; CHECK-NEXT: PseudoJL 32, csr_aie2, implicit-def $lr
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit killed renamable $r16
    %0:spill_es_to_er = COPY $s0
    PseudoJL 32, csr_aie2, implicit-def $lr
    PseudoRET implicit $lr, implicit %0
...
