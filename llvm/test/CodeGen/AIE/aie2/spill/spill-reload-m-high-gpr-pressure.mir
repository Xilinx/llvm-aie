# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --verify-machineinstrs --aie-reserved-gprs=32 -run-pass=greedy -run-pass=virtregrewriter %s -o - | FileCheck %s

# There is only one eM (MOD) register available, it will then be used for the %0
# virtual register. Here we test that it is properly spilled and then reloaded.

# Here it is "spilled" to DN, as there are no GPRs left due to --aie-reserved-gprs.
---
  name:            spill_to_dn_reg
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $m0, $m1, $m2, $m3, $m4, $m5, $m6, $m7

    ; CHECK-LABEL: name: spill_to_dn_reg
    ; CHECK: liveins: $m0, $m1, $m2, $m3, $m4, $m5, $m6, $m7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $dn0 = COPY $m0
    ; CHECK-NEXT: $m0 = COPY $m1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $m0, $p0, 0, implicit $m1, implicit $m2, implicit $m3, implicit $m4, implicit $m5, implicit $m6, implicit $m7
    ; CHECK-NEXT: renamable $m0 = COPY killed renamable $dn0
    ; CHECK-NEXT: $p0 = PADDA_lda_ptr_inc_idx $p0, killed renamable $m0
      %0:em = COPY $m0 ; -> only $m0 is available

      ; spill $m0 before it is re-defined and used
      $m0 = COPY $m1
      ST_dms_sts_idx_imm $m0, $p0, 0, implicit $m1, implicit $m2, implicit $m3, implicit $m4, implicit $m5, implicit $m6, implicit $m7

      ; reload %0 / $m0 before PADDA
      $p0 = PADDA_lda_ptr_inc_idx $p0, %0
...

# Here it is spilled to memory, as there are no GPRs left due to --aie-reserved-gprs,
# and no DN registers left either.
---
  name:            spill_to_mem
  alignment:       16
  legalized:       true
  regBankSelected: true
  selected:        true
  tracksRegLiveness: true
  body:             |
    bb.1.entry:
      liveins: $p0, $m0, $m1, $m2, $m3, $m4, $m5, $m6, $m7, $dn0 , $dn1 , $dn2 , $dn3 , $dn4 , $dn5 , $dn6 , $dn7

    ; CHECK-LABEL: name: spill_to_mem
    ; CHECK: liveins: $dn0, $dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7, $m0, $m1, $m2, $m3, $m4, $m5, $m6, $m7, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: ST_dms_spill $m0, %stack.0, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $m0 = COPY $m1
    ; CHECK-NEXT: ST_dms_sts_idx_imm $m0, $p0, 0, implicit $m1, implicit $m2, implicit $m3, implicit $m4, implicit $m5, implicit $m6, implicit $m7, implicit $dn0, implicit $dn1, implicit $dn2, implicit $dn3, implicit $dn4, implicit $dn5, implicit $dn6, implicit $dn7
    ; CHECK-NEXT: renamable $m0 = LDA_dms_spill %stack.0, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $p0 = PADDA_lda_ptr_inc_idx $p0, killed renamable $m0
      %0:em = COPY $m0 ; -> only $m0 is available

      ; spill $m0 before it is re-defined and used
      $m0 = COPY $m1
      ST_dms_sts_idx_imm $m0, $p0, 0, implicit $m1, implicit $m2, implicit $m3, implicit $m4, implicit $m5, implicit $m6, implicit $m7, implicit $dn0 , implicit $dn1 , implicit $dn2 , implicit $dn3 , implicit $dn4 , implicit $dn5 , implicit $dn6 , implicit $dn7

      ; reload %0 / $m0 before PADDA
      $p0 = PADDA_lda_ptr_inc_idx $p0, %0
...
