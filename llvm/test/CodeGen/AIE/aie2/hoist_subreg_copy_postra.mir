# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --mtriple=aie2 --run-pass=machinelicm -verify-machineinstrs %s -o - | FileCheck  %s

---
name:            constant_vmov
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: constant_vmov
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $r0, $r1, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x2 = VBCST_32 $r0
  ; CHECK-NEXT:   $wh0 = VMOV_mv_w $wl2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $wl2, $p0, $p1, $p2, $r0, $r1, $s0, $wh0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, 32
  ; CHECK-NEXT:   $wl1, $p1 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p1, 32
  ; CHECK-NEXT:   $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
  ; CHECK-NEXT:   $p2 = VST_SRS_S8_S32_ag_pstm_nrm_imm $p2, 32, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
  ; CHECK-NEXT:   PseudoJZ $r1, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.1:
    liveins: $p0, $p1, $p2, $r0, $r1, $s0
    $x2 = VBCST_32 $r0

  bb.3:
    liveins: $wl2, $p0, $p1, $p2, $r0, $r1, $s0
    $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, 32
    $wh0 = VMOV_mv_w $wl2
    $wl1, $p1 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p1, 32
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
    $p2 = VST_SRS_S8_S32_ag_pstm_nrm_imm $p2, 32, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    PseudoJZ $r1, %bb.3

  bb.2:
    PseudoRET implicit $lr
...


# $wh0 = VMOV_mv_w $wl2 cannot be hoisted due to the clobber from csr_aie2
---
name:            regmask_clobber
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: regmask_clobber
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $r0, $r16, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x2 = VBCST_32 $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $wl2, $p0, $p1, $p2, $r0, $r16, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, 32
  ; CHECK-NEXT:   $wh0 = VMOV_mv_w $wl2
  ; CHECK-NEXT:   $wl1, $p1 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p1, 32
  ; CHECK-NEXT:   $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
  ; CHECK-NEXT:   $p2 = VST_SRS_S8_S32_ag_pstm_nrm_imm $p2, 32, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
  ; CHECK-NEXT:   PseudoJL 32, csr_aie2, implicit-def $lr
  ; CHECK-NEXT:   PseudoJZ $r16, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.1:
    liveins: $p0, $p1, $p2, $r0, $r16, $s0
    $x2 = VBCST_32 $r0

  bb.3:
    liveins: $wl2, $p0, $p1, $p2, $r0, $r16, $s0
    $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, 32
    $wh0 = VMOV_mv_w $wl2
    $wl1, $p1 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p1, 32
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
    $p2 = VST_SRS_S8_S32_ag_pstm_nrm_imm $p2, 32, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    PseudoJL 32, implicit-def $lr, csr_aie2
    PseudoJZ $r16, %bb.3

  bb.2:
    PseudoRET implicit $lr
...

# wh3 is re-defined in the loop through the definition of x3
# Make sure it's not hoisted
---
name:            non_constant_vmov
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: non_constant_vmov
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $r0, $r1, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x2 = VBCST_32 $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $wl2, $p0, $p1, $p2, $r0, $r1, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, 32
  ; CHECK-NEXT:   $wl1, $p1 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p1, 32
  ; CHECK-NEXT:   $x3 = VADD_32 $x0, $x1
  ; CHECK-NEXT:   $wh3 = VMOV_mv_w $wl2
  ; CHECK-NEXT:   $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 32
  ; CHECK-NEXT:   $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wh3, $p2, 32
  ; CHECK-NEXT:   PseudoJZ $r1, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.1:
    liveins: $p0, $p1, $p2, $r0, $r1, $s0
    $x2 = VBCST_32 $r0

  bb.3:
    liveins: $wl2, $p0, $p1, $p2, $r0, $r1, $s0
    $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, 32
    $wl1, $p1 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p1, 32
    $x3 = VADD_32 $x0, $x1
    $wh3 = VMOV_mv_w $wl2
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 32
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wh3, $p2, 32
    PseudoJZ $r1, %bb.3

  bb.2:
    PseudoRET implicit $lr
...
