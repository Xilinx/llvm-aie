; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s
define dso_local noundef signext i8 @_Z21test_ext_v2int4_sign1Dv64_DB8_i(<64 x i8> noundef %v, i32 noundef %idx) {
; CHECK-LABEL: _Z21test_ext_v2int4_sign1Dv64_DB8_i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov r1, r16
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mova r16, #6 // Delay Slot 5
; CHECK-NEXT:    vextract.s8 r0, x0, r16 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov r16, r1 // Delay Slot 2
; CHECK-NEXT:    extend.s8 r0, r0 // Delay Slot 1
entry:
  %0 = tail call i32 @llvm.aie2.vextract.elem8.I512(<64 x i8> %v, i32 6, i32 1)
  %conv.i = trunc i32 %0 to i8
  ret i8 %conv.i
}
define dso_local noundef <16 x i32> @_Z17test_max_v16int32Dv16_iS_b(<16 x i32> noundef %a, <16 x i32> noundef %b, i1 noundef zeroext %sgn) {
; CHECK-LABEL: _Z17test_max_v16int32Dv16_iS_b:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov r1, r16
; CHECK-NEXT:    mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmax_lt.d32 x0, r16, x2, x4 // Delay Slot 5
; CHECK-NEXT:    vmax_lt.s32 x0, r16, x0, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i.i = zext i1 %sgn to i32
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmax.lt32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i.i)
  %1 = extractvalue { <16 x i32>, i32 } %0, 0
  %2 = tail call { <16 x i32>, i32 } @llvm.aie2.vmax.lt32(<16 x i32> %1, <16 x i32> %b, i32 1)
  %3 = extractvalue { <16 x i32>, i32 } %2, 0
  ret <16 x i32> %3
}

declare i32 @llvm.aie2.vextract.elem8.I512(<64 x i8>, i32, i32)
declare { <16 x i32>, i32 } @llvm.aie2.vmax.lt32(<16 x i32>, <16 x i32>, i32)
