; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s


define dso_local noundef <64 x i8> @_Z21test_get_scd_v128int4i(i32 noundef %en) local_unnamed_addr #0 {
; CHECK-LABEL: _Z21test_get_scd_v128int4i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, r0
; CHECK-NEXT:    vmov x0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 %en)
  %1 = bitcast <16 x i32> %0 to <64 x i8>
  ret <64 x i8> %1
}

define dso_local noundef <8 x i64> @_Z20test_get_scd_v8acc64i(i32 noundef %en) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_get_scd_v8acc64i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, r0
; CHECK-NEXT:    vmov bml0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.scd.read.acc32(i32 %en)
  ret <8 x i64> %0
}

define dso_local noundef <16 x i64> @_Z24test_get_scd_v16acc64_loi(i32 noundef %en) local_unnamed_addr #0 {
; CHECK-LABEL: _Z24test_get_scd_v16acc64_loi:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, r0
; CHECK-NEXT:    vmov.lo cm0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.scd.expand.lo(i32 %en)
  ret <16 x i64> %0
}

define dso_local noundef <16 x i64> @_Z24test_get_scd_v16acc64_hii(i32 noundef %en) local_unnamed_addr #0 {
; CHECK-LABEL: _Z24test_get_scd_v16acc64_hii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, r0
; CHECK-NEXT:    vmov.hi cm0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.scd.expand.hi(i32 %en)
  ret <16 x i64> %0
}

define dso_local noundef <64 x i8> @_Z25test_get_scd_v128int4_en0v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z25test_get_scd_v128int4_en0v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, #0
; CHECK-NEXT:    vmov x0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 0)
  %1 = bitcast <16 x i32> %0 to <64 x i8>
  ret <64 x i8> %1
}

define dso_local noundef <8 x i64> @_Z24test_get_scd_v8acc64_en0v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z24test_get_scd_v8acc64_en0v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, #0
; CHECK-NEXT:    vmov bml0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.scd.read.acc32(i32 0)
  ret <8 x i64> %0
}

define dso_local noundef <16 x i64> @_Z28test_get_scd_v16acc64_lo_en0v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z28test_get_scd_v16acc64_lo_en0v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, #0
; CHECK-NEXT:    vmov.lo cm0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.scd.expand.lo(i32 0)
  ret <16 x i64> %0
}

define dso_local noundef <16 x i64> @_Z28test_get_scd_v16acc64_hi_en0v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z28test_get_scd_v16acc64_hi_en0v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mov crSCDEn, #0
; CHECK-NEXT:    vmov.hi cm0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crSCDEn, #1 // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.scd.expand.hi(i32 0)
  ret <16 x i64> %0
}

define dso_local noundef <64 x i8> @_Z25test_get_scd_v128int4_en1v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z25test_get_scd_v128int4_en1v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    vmov x0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i32> @llvm.aie2.scd.read.vec(i32 1)
  %1 = bitcast <16 x i32> %0 to <64 x i8>
  ret <64 x i8> %1
}

define dso_local noundef <8 x i64> @_Z24test_get_scd_v8acc64_en1v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z24test_get_scd_v8acc64_en1v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    vmov bml0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.scd.read.acc32(i32 1)
  ret <8 x i64> %0
}

define dso_local noundef <16 x i64> @_Z28test_get_scd_v16acc64_lo_en1v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z28test_get_scd_v16acc64_lo_en1v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    vmov.lo cm0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.scd.expand.lo(i32 1)
  ret <16 x i64> %0
}

define dso_local noundef <16 x i64> @_Z28test_get_scd_v16acc64_hi_en1v() local_unnamed_addr #0 {
; CHECK-LABEL: _Z28test_get_scd_v16acc64_hi_en1v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    vmov.hi cm0, SCD
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.scd.expand.hi(i32 1)
  ret <16 x i64> %0
}

define dso_local void @_Z12test_put_mcdDv8_u7__acc64i(<8 x i64> noundef %a, i32 noundef %en) local_unnamed_addr #0 {
; CHECK-LABEL: _Z12test_put_mcdDv8_u7__acc64i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crMCDEn, r0 // Delay Slot 3
; CHECK-NEXT:    vmov MCD, bml0 // Delay Slot 2
; CHECK-NEXT:    mov crMCDEn, #1 // Delay Slot 1
entry:
  tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> %a, i32 %en)
  ret void
}

define dso_local void @_Z12test_put_mcdDv32_si(<32 x i16> noundef %a, i32 noundef %en) local_unnamed_addr #0 {
; CHECK-LABEL: _Z12test_put_mcdDv32_si:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crMCDEn, r0 // Delay Slot 3
; CHECK-NEXT:    vmov MCD, x0 // Delay Slot 2
; CHECK-NEXT:    mov crMCDEn, #1 // Delay Slot 1
entry:
  %0 = bitcast <32 x i16> %a to <16 x i32>
  tail call void @llvm.aie2.mcd.write.vec(<16 x i32> %0, i32 %en)
  ret void
}

define dso_local void @_Z16test_put_mcd_en0Dv8_u7__acc64(<8 x i64> noundef %a) local_unnamed_addr #0 {
; CHECK-LABEL: _Z16test_put_mcd_en0Dv8_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crMCDEn, #0 // Delay Slot 3
; CHECK-NEXT:    vmov MCD, bml0 // Delay Slot 2
; CHECK-NEXT:    mov crMCDEn, #1 // Delay Slot 1
entry:
  tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> %a, i32 0)
  ret void
}

define dso_local void @_Z16test_put_mcd_en0Dv32_s(<32 x i16> noundef %a) local_unnamed_addr #0 {
; CHECK-LABEL: _Z16test_put_mcd_en0Dv32_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crMCDEn, #0 // Delay Slot 3
; CHECK-NEXT:    vmov MCD, x0 // Delay Slot 2
; CHECK-NEXT:    mov crMCDEn, #1 // Delay Slot 1
entry:
  %0 = bitcast <32 x i16> %a to <16 x i32>
  tail call void @llvm.aie2.mcd.write.vec(<16 x i32> %0, i32 0)
  ret void
}

define dso_local void @_Z16test_put_mcd_en1Dv8_u7__acc64(<8 x i64> noundef %a) local_unnamed_addr #0 {
; CHECK-LABEL: _Z16test_put_mcd_en1Dv8_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    vmov MCD, bml0 // Delay Slot 1
entry:
  tail call void @llvm.aie2.mcd.write.acc32(<8 x i64> %a, i32 1)
  ret void
}

define dso_local void @_Z16test_put_mcd_en1Dv32_s(<32 x i16> noundef %a) local_unnamed_addr #0 {
; CHECK-LABEL: _Z16test_put_mcd_en1Dv32_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    vmov MCD, x0 // Delay Slot 1
entry:
  %0 = bitcast <32 x i16> %a to <16 x i32>
  tail call void @llvm.aie2.mcd.write.vec(<16 x i32> %0, i32 1)
  ret void
}

declare <16 x i32> @llvm.aie2.scd.read.vec(i32) #1
declare <8 x i64> @llvm.aie2.scd.read.acc32(i32) #1
declare <16 x i64> @llvm.aie2.scd.expand.lo(i32) #1
declare <16 x i64> @llvm.aie2.scd.expand.hi(i32) #1
declare void @llvm.aie2.mcd.write.acc32(<8 x i64>, i32) #1
declare void @llvm.aie2.mcd.write.vec(<16 x i32>, i32) #1
