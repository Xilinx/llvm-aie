; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O2 --filetype=asm %s -o - | FileCheck %s

define <32 x i8> @_Z5test0Dv64_a(<64 x i8> %b) {
; CHECK-LABEL: _Z5test0Dv64_a:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    vst.pack.d4.d8 x2, [p0, #0]
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %ret = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %ret)
  %0 = bitcast <64 x i8> %b to <32 x i16>
  %1 = tail call <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16> %0, i32 0)
  store volatile <32 x i8> %1, ptr %ret, align 32
  %ret.0.ret.0.ret.0.ret.0. = load volatile <32 x i8>, ptr %ret, align 32
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %ret)
  ret <32 x i8> %ret.0.ret.0.ret.0.ret.0.
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

define <32 x i8> @_Z5test2Dv32_s(<32 x i16> %b) {
; CHECK-LABEL: _Z5test2Dv32_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    vst.pack.d8.d16 x2, [p0, #0]
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %ret = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %ret)
  %0 = tail call <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16> %b, i32 0)
  store volatile <32 x i8> %0, ptr %ret, align 32
  %ret.0.ret.0.ret.0.ret.0. = load volatile <32 x i8>, ptr %ret, align 32
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %ret)
  ret <32 x i8> %ret.0.ret.0.ret.0.ret.0.
}

define <32 x i8> @_Z5test1Dv64_a(<64 x i8> %b) {
; CHECK-LABEL: _Z5test1Dv64_a:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    vst.pack.s4.s8 x2, [p0, #0]
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %ret = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %ret)
  %0 = bitcast <64 x i8> %b to <32 x i16>
  %1 = tail call <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16> %0, i32 1)
  store volatile <32 x i8> %1, ptr %ret, align 32
  %ret.0.ret.0.ret.0.ret.0. = load volatile <32 x i8>, ptr %ret, align 32
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %ret)
  ret <32 x i8> %ret.0.ret.0.ret.0.ret.0.
}

define <32 x i8> @_Z5test3Dv32_s(<32 x i16> %b) {
; CHECK-LABEL: _Z5test3Dv32_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    vst.pack.s8.s16 x2, [p0, #0]
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %ret = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %ret)
  %0 = tail call <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16> %b, i32 1)
  store volatile <32 x i8> %0, ptr %ret, align 32
  %ret.0.ret.0.ret.0.ret.0. = load volatile <32 x i8>, ptr %ret, align 32
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %ret)
  ret <32 x i8> %ret.0.ret.0.ret.0.ret.0.
}

define <32 x i8> @_Z5test4Dv64_a(<64 x i8> %b) {
; CHECK-LABEL: _Z5test4Dv64_a:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    vst.pack.s4.s8 x2, [p0, #0]
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %ret = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %ret)
  %0 = bitcast <64 x i8> %b to <32 x i16>
  %1 = tail call <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16> %0, i32 1)
  store volatile <32 x i8> %1, ptr %ret, align 32
  %ret.0.ret.0.ret.0.ret.0. = load volatile <32 x i8>, ptr %ret, align 32
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %ret)
  ret <32 x i8> %ret.0.ret.0.ret.0.ret.0.
}

define <32 x i8> @_Z5test6Dv32_s(<32 x i16> %b) {
; CHECK-LABEL: _Z5test6Dv32_s:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    vst.pack.s8.s16 x2, [p0, #0]
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %ret = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %ret)
  %0 = tail call <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16> %b, i32 1)
  store volatile <32 x i8> %0, ptr %ret, align 32
  %ret.0.ret.0.ret.0.ret.0. = load volatile <32 x i8>, ptr %ret, align 32
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %ret)
  ret <32 x i8> %ret.0.ret.0.ret.0.ret.0.
}

declare <32 x i8> @llvm.aie2.pack.I4.I8(<32 x i16>, i32)
declare <32 x i8> @llvm.aie2.pack.I8.I16(<32 x i16>, i32)
