; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc < %s --issue-limit=1 -verify-machineinstrs -mtriple=aie2 \
; RUN:   | FileCheck %s

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i16> @_Z5test0Dv16_u7__acc32(<8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test0Dv16_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.d16.s32 bml0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> %acc, i32 2, i32 0)
  store volatile <16 x i16> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i16> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i32> @_Z5test1Dv8_u7__acc64(<8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test1Dv8_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.d32.s64 bml0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <8 x i32>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> %acc, i32 2, i32 0)
  store volatile <8 x i32> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <8 x i32>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i32> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i16> @_Z5test2Dv16_u7__acc32(<8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test2Dv16_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.s16.s32 bml0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> %acc, i32 2, i32 1)
  store volatile <16 x i16> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i16> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i32> @_Z5test3Dv8_u7__acc64(<8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test3Dv8_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.s32.s64 bml0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <8 x i32>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> %acc, i32 2, i32 1)
  store volatile <8 x i32> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <8 x i32>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i32> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i16> @_Z5test4Dv16_u7__acc64(<16 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test4Dv16_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.s16.s64 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> %acc, i32 2, i32 1)
  store volatile <16 x i16> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i16> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <32 x i8> @_Z5test5Dv32_u7__acc32(<16 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test5Dv32_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.s8.s32 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> %acc, i32 2, i32 1)
  store volatile <32 x i8> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <32 x i8>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <32 x i8> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i16> @_Z5test6Dv16_u7__acc64(<16 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test6Dv16_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.d16.s64 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> %acc, i32 2, i32 0)
  store volatile <16 x i16> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i16> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <32 x i8> @_Z5test7Dv32_u7__acc32(<16 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test7Dv32_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.d8.s32 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> %acc, i32 2, i32 0)
  store volatile <32 x i8> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <32 x i8>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <32 x i8> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i16> @_Z5test8Dv16_u7__acc64(<16 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test8Dv16_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.s16.s64 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64> %acc, i32 2, i32 1)
  store volatile <16 x i16> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i16> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <32 x i8> @_Z5test9Dv32_u7__acc32(<16 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z5test9Dv32_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.s8.s32 cm0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <32 x i8>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64> %acc, i32 2, i32 1)
  store volatile <32 x i8> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <32 x i8>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <32 x i8> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i16> @_Z6test10Dv16_u7__acc32(<8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z6test10Dv16_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.d16.s32 bml0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <16 x i16>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> %acc, i32 4, i32 0)
  store volatile <16 x i16> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i16> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <8 x i32> @_Z6test11Dv8_u7__acc64(<8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: _Z6test11Dv8_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    mova r0, #4
; CHECK-NEXT:    mov p0, sp
; CHECK-NEXT:    paddb [p0], #-32
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.d32.s64 bml0, s0, [p0, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %a = alloca <8 x i32>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64> %acc, i32 4, i32 0)
  store volatile <8 x i32> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <8 x i32>, ptr %a, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <8 x i32> %a.0.a.0.a.0.a.0.
}

; Function Attrs: mustprogress nofree nounwind memory(inaccessiblemem: readwrite)
define dso_local noundef <16 x i16> @test_postincrement(ptr %array, <8 x i64> noundef %acc) local_unnamed_addr #0 {
; CHECK-LABEL: test_postincrement:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r0, #2
; CHECK-NEXT:    mov s0, r0
; CHECK-NEXT:    vst.srs.d16.s32 bml0, s0, [p0], #32
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    vlda wl0, [p0, #0]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %a = getelementptr inbounds [16 x <16 x i16>], ptr %array, i32 0, i32 0
  %b = getelementptr inbounds [16 x <16 x i16>], ptr %array, i32 0, i32 1

  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %a)
  %0 = tail call <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64> %acc, i32 2, i32 0)
  store volatile <16 x i16> %0, ptr %a, align 32, !tbaa !2
  %a.0.a.0.a.0.a.0. = load volatile <16 x i16>, ptr %b, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %a)
  ret <16 x i16> %a.0.a.0.a.0.a.0.
}

; Function Attrs: nofree nosync nounwind memory(none)
declare <16 x i16> @llvm.aie2.I256.v16.acc32.srs(<8 x i64>, i32, i32) #2

; Function Attrs: nofree nosync nounwind memory(none)
declare <8 x i32> @llvm.aie2.I256.v8.acc64.srs(<8 x i64>, i32, i32) #2

; Function Attrs: nofree nosync nounwind memory(none)
declare <16 x i16> @llvm.aie2.I256.v16.acc64.srs(<16 x i64>, i32, i32) #2

; Function Attrs: nofree nosync nounwind memory(none)
declare <32 x i8> @llvm.aie2.I256.v32.acc32.srs(<16 x i64>, i32, i32) #2

attributes #0 = { mustprogress nofree nounwind memory(inaccessiblemem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nosync nounwind memory(none) }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 16.0.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
