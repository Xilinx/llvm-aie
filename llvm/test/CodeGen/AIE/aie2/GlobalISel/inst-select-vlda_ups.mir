# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VLDA_UPS_S32_D16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S32_D16_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<16 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s16>))
    %7:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v16.I256.ups), %5:vregbank(<16 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S32_D16_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16_dyn
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S32_D16_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = COPY $r1
    %5:vregbank(<16 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s16>))
    %7:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v16.I256.ups), %5:vregbank(<16 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S32_S16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S32_S16
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_S16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_S16_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S32_S16_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<16 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s16>))
    %7:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v16.I256.ups), %5:vregbank(<16 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...


---
name:            VLDA_UPS_S64_D32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S64_D32_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<8 x s32>) = G_LOAD %1:ptrregbank(p0) :: (load (<8 x s32>))
    %7:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v8.I256.ups), %5:vregbank(<8 x s32>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S64_D32_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32_dyn
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S64_D32_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = COPY $r1
    %5:vregbank(<8 x s32>) = G_LOAD %1:ptrregbank(p0) :: (load (<8 x s32>))
    %7:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v8.I256.ups), %5:vregbank(<8 x s32>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...


---
name:            VLDA_UPS_S64_S32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S64_S32
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_S32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_S32_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S64_S32_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<8 x s32>) = G_LOAD %1:ptrregbank(p0) :: (load (<8 x s32>))
    %7:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v8.I256.ups), %5:vregbank(<8 x s32>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...


---
name:            VLDA_UPS_S32_D8
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D8
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S32_D8_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<32 x s8>) = G_LOAD %1:ptrregbank(p0) :: (load (<32 x s8>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I256.ups), %5:vregbank(<32 x s8>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S32_D8_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S32_D8_dyn
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S32_D8_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = COPY $r1
    %5:vregbank(<32 x s8>) = G_LOAD %1:ptrregbank(p0) :: (load (<32 x s8>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I256.ups), %5:vregbank(<32 x s8>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...


---
name:            VLDA_UPS_S32_S8
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S32_S8
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_S8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_S8_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S32_S8_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<32 x s8>) = G_LOAD %1:ptrregbank(p0) :: (load (<32 x s8>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I256.ups), %5:vregbank(<32 x s8>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...


---
name:            VLDA_UPS_S64_D16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D16
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D16_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S64_D16_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S64_D16_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<16 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s16>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I256.ups), %5:vregbank(<16 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S64_D16_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S64_D16_dyn
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D16_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S64_D16_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S64_D16_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = COPY $r1
    %5:vregbank(<16 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s16>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I256.ups), %5:vregbank(<16 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...


---
name:            VLDA_UPS_S64_S16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: VLDA_UPS_S64_S16
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_S16_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S64_S16_ag_idx_imm [[COPY2]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_UPS_S64_S16_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<16 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s16>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I256.ups), %5:vregbank(<16 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S64_D32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm1:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_UPS_S64_D32_ag_idx_imm1]], %subreg.sub_512_lo, [[VLDA_UPS_S64_D32_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<16 x s32>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s32>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), %5:vregbank(<16 x s32>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S64_D32_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32_512_bits_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY3]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm1:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY4]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_UPS_S64_D32_ag_idx_imm1]], %subreg.sub_512_lo, [[VLDA_UPS_S64_D32_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = COPY $r1
    %5:vregbank(<16 x s32>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s32>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), %5:vregbank(<16 x s32>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S64_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_S32_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_S32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_S32_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_S32_ag_idx_imm1:%[0-9]+]]:acc512 = VLDA_UPS_S64_S32_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_UPS_S64_S32_ag_idx_imm1]], %subreg.sub_512_lo, [[VLDA_UPS_S64_S32_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<16 x s32>) = G_LOAD %1:ptrregbank(p0) :: (load (<16 x s32>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), %5:vregbank(<16 x s32>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S32_D16_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm1:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_UPS_S32_D16_ag_idx_imm1]], %subreg.sub_512_lo, [[VLDA_UPS_S32_D16_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<32 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<32 x s16>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I512.ups), %5:vregbank(<32 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLDA_UPS_S32_D16_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16_512_bits_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY3]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm1:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY4]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>), align 64)
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_UPS_S32_D16_ag_idx_imm1]], %subreg.sub_512_lo, [[VLDA_UPS_S32_D16_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = COPY $r1
    %5:vregbank(<32 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<32 x s16>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I512.ups), %5:vregbank(<32 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

# We are currently not able to combine VLDA.UPS for 512 bit stores
---
name:            VLDA_UPS_S32_S16_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_S16_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_S16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_S16_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_S16_ag_idx_imm1:%[0-9]+]]:acc512 = VLDA_UPS_S32_S16_ag_idx_imm [[COPY3]], [[COPY]], 0, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_UPS_S32_S16_ag_idx_imm1]], %subreg.sub_512_lo, [[VLDA_UPS_S32_S16_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:gprregbank(s32) = COPY $r0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<32 x s16>) = G_LOAD %1:ptrregbank(p0) :: (load (<32 x s16>))
    %7:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I512.ups), %5:vregbank(<32 x s16>), %2:gprregbank(s32), %6:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...
