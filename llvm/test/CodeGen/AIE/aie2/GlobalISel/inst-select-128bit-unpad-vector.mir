# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

# Note that G_AIE_UNPAD_VECTOR is always legal, so it would be sufficient to
# have only two tests: one for extrating from 512 bits, and one from 256 bits.

---
name:            test_unpad_256_bit_v8int32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_unpad_256_bit_v8int32
    ; CHECK: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY [[COPY]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY1]]
    %1:vregbank(<8 x s32>) = COPY $wl2
    %2:vregbank(<4 x s32>) = G_AIE_UNPAD_VECTOR %1
    PseudoRET implicit $lr, implicit %2
...

---
name:            test_unpad_256_bit_v16int16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_unpad_256_bit_v16int16
    ; CHECK: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY [[COPY]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY1]]
    %1:vregbank(<16 x s16>) = COPY $wl2
    %2:vregbank(<8 x s16>) = G_AIE_UNPAD_VECTOR %1
    PseudoRET implicit $lr, implicit %2
...

---
name:            test_unpad_256_bit_v32int8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_unpad_256_bit_v32int8
    ; CHECK: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY [[COPY]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY1]]
    %1:vregbank(<32 x s8>) = COPY $wl2
    %2:vregbank(<16 x s8>) = G_AIE_UNPAD_VECTOR %1
    PseudoRET implicit $lr, implicit %2
...

---
name:            test_unpad_512_bit_v16int32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_unpad_512_bit_v16int32
    ; CHECK: [[COPY:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY1]]
    %1:vregbank(<16 x s32>) = COPY $x2
    %2:vregbank(<4 x s32>) = G_AIE_UNPAD_VECTOR %1
    PseudoRET implicit $lr, implicit %2
...

---
name:            test_unpad_512_bit_v32int16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_unpad_512_bit_v32int16
    ; CHECK: [[COPY:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY1]]
    %1:vregbank(<32 x s16>) = COPY $x2
    %2:vregbank(<8 x s16>) = G_AIE_UNPAD_VECTOR %1
    PseudoRET implicit $lr, implicit %2
...

---
name:            test_unpad_512_bit_v64int8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_unpad_512_bit_v64int8
    ; CHECK: [[COPY:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY1]]
    %1:vregbank(<64 x s8>) = COPY $x2
    %2:vregbank(<16 x s8>) = G_AIE_UNPAD_VECTOR %1
    PseudoRET implicit $lr, implicit %2
...
