# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
---
name:            test0
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test0
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<16 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<16 x s16>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<16 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test1
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test1
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<16 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<16 x s16>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<16 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test2
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test2
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s8>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<32 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test3
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test3
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s8>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<32 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test4
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test4
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[EVEC:%[0-9]+]]:_(s32) = G_EXTRACT_VECTOR_ELT [[COPY]](<8 x s32>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[EVEC]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<8 x s32>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_EXTRACT_VECTOR_ELT %0(<8 x s32>), %1(s32)
    $r0 = COPY %2(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test0_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test0_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s16>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<32 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test1_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test1_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s16>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<32 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test2_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test2_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s8>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<64 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test3_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test3_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s8>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<64 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test4_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test4_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[EVEC:%[0-9]+]]:_(s32) = G_EXTRACT_VECTOR_ELT [[COPY]](<16 x s32>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[EVEC]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<16 x s32>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_EXTRACT_VECTOR_ELT %0(<16 x s32>), %1(s32)
    $r0 = COPY %2(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test0_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test0_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s16>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<64 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test1_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test1_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s16>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<64 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test2_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test2_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<128 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<128 x s8>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<128 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test3_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test3_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<128 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<128 x s8>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<128 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test4_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test4_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[EVEC:%[0-9]+]]:_(s32) = G_EXTRACT_VECTOR_ELT [[COPY]](<32 x s32>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[EVEC]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s32>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_EXTRACT_VECTOR_ELT %0(<32 x s32>), %1(s32)
    $r0 = COPY %2(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test_v2int32
legalized:       false
body:             |
  bb.1.entry:
    liveins: $l0

    ; CHECK-LABEL: name: test_v2int32
    ; CHECK: liveins: $l0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $l0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<2 x s32>)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[UV]](s32)
    ; CHECK-NEXT: $r0 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<2 x s32>) = COPY $l0
    %2:_(s32) = G_CONSTANT i32 0
    %0:_(s32) = G_EXTRACT_VECTOR_ELT %1(<2 x s32>), %2(s32)
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_8bit_256
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 1, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: extract_8bit_256
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s8>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 8
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s8))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s8))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[LOAD]], 8
    ; CHECK-NEXT: $r0 = COPY [[SEXT_INREG]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<32 x s8>) = COPY $wl0
    %4:_(s32) = G_CONSTANT i32 5
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s8) = G_EXTRACT_VECTOR_ELT %1(<32 x s8>), %4(s32)
    G_STORE %3(s8), %2(p0) :: (volatile store (s8))
    %0:_(s8) = G_LOAD %2(p0) :: (volatile dereferenceable load (s8))
    LIFETIME_END %stack.0
    %5:_(s32) = G_SEXT %0(s8)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_16bit_256
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 2, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: extract_16bit_256
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<16 x s16>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 16
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s16))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s16))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[LOAD]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<16 x s16>) = COPY $wl0
    %4:_(s32) = G_CONSTANT i32 15
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s16) = G_EXTRACT_VECTOR_ELT %1(<16 x s16>), %4(s32)
    G_STORE %3(s16), %2(p0) :: (volatile store (s16))
    %0:_(s16) = G_LOAD %2(p0) :: (volatile dereferenceable load (s16))
    LIFETIME_END %stack.0
    %5:_(s32) = G_ZEXT %0(s16)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_8bit_512
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 1, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: extract_8bit_512
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 63
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s8>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 8
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s8))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s8))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[LOAD]], 8
    ; CHECK-NEXT: $r0 = COPY [[SEXT_INREG]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<64 x s8>) = COPY $x0
    %4:_(s32) = G_CONSTANT i32 63
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s8) = G_EXTRACT_VECTOR_ELT %1(<64 x s8>), %4(s32)
    G_STORE %3(s8), %2(p0) :: (volatile store (s8))
    %0:_(s8) = G_LOAD %2(p0) :: (volatile dereferenceable load (s8))
    LIFETIME_END %stack.0
    %5:_(s32) = G_SEXT %0(s8)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_16bit_512
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 2, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: extract_16bit_512
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s16>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 16
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s16))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s16))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[LOAD]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<32 x s16>) = COPY $x0
    %4:_(s32) = G_CONSTANT i32 15
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s16) = G_EXTRACT_VECTOR_ELT %1(<32 x s16>), %4(s32)
    G_STORE %3(s16), %2(p0) :: (volatile store (s16))
    %0:_(s16) = G_LOAD %2(p0) :: (volatile dereferenceable load (s16))
    LIFETIME_END %stack.0
    %5:_(s32) = G_ZEXT %0(s16)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_8bit_1024
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 1, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: extract_8bit_1024
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<128 x s8>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 8
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s8))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s8))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[LOAD]], 8
    ; CHECK-NEXT: $r0 = COPY [[SEXT_INREG]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<128 x s8>) = COPY $y2
    %4:_(s32) = G_CONSTANT i32 127
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s8) = G_EXTRACT_VECTOR_ELT %1(<128 x s8>), %4(s32)
    G_STORE %3(s8), %2(p0) :: (volatile store (s8))
    %0:_(s8) = G_LOAD %2(p0) :: (volatile dereferenceable load (s8))
    LIFETIME_END %stack.0
    %5:_(s32) = G_SEXT %0(s8)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_16bit_1024
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 2, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: extract_16bit_1024
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 63
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s16>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 16
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s16))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s16))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[LOAD]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<64 x s16>) = COPY $y2
    %4:_(s32) = G_CONSTANT i32 63
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s16) = G_EXTRACT_VECTOR_ELT %1(<64 x s16>), %4(s32)
    G_STORE %3(s16), %2(p0) :: (volatile store (s16))
    %0:_(s16) = G_LOAD %2(p0) :: (volatile dereferenceable load (s16))
    LIFETIME_END %stack.0
    %5:_(s32) = G_ZEXT %0(s16)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
