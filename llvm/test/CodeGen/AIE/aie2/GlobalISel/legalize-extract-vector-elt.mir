# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s
---
name:            test0
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test0
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<16 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<16 x s16>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<16 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test1
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test1
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<16 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<16 x s16>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<16 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test2
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test2
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s8>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<32 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test3
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test3
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s8>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<32 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test4
legalized:       false
body:             |
  bb.0.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: test4
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<8 x s32>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<8 x s32>) = COPY $wl0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_EXTRACT_VECTOR_ELT %0(<8 x s32>), %1(s32)
    $r0 = COPY %2(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test0_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test0_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s16>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<32 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test1_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test1_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s16>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<32 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test2_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test2_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s8>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<64 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test3_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test3_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s8>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<64 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test4_512bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $x0

    ; CHECK-LABEL: name: test4_512bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<16 x s32>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<16 x s32>) = COPY $x0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_EXTRACT_VECTOR_ELT %0(<16 x s32>), %1(s32)
    $r0 = COPY %2(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test0_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test0_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s16>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<64 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test1_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test1_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s16>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<64 x s16>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<64 x s16>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test2_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test2_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<128 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<128 x s8>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %0(<128 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test3_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test3_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_ZEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT [[COPY]](<128 x s8>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_ZEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<128 x s8>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %0(<128 x s8>), %1(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            test4_1024bit
legalized:       false
body:             |
  bb.0.entry:
    liveins: $y2

    ; CHECK-LABEL: name: test4_1024bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s32>), [[C]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %0:_(<32 x s32>) = COPY $y2
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_EXTRACT_VECTOR_ELT %0(<32 x s32>), %1(s32)
    $r0 = COPY %2(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            test_v2int32
legalized:       false
body:             |
  bb.1.entry:
    liveins: $l0

    ; CHECK-LABEL: name: test_v2int32
    ; CHECK: liveins: $l0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $l0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<2 x s32>)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[UV]](s32)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<2 x s32>)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[UV3]](s32)
    ; CHECK-NEXT: $r0 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: $r1 = COPY [[COPY2]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<2 x s32>) = COPY $l0
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s32) = G_EXTRACT_VECTOR_ELT %1(<2 x s32>), %2(s32)
    %4:_(s32) = G_CONSTANT i32 1
    %5:_(s32) = G_EXTRACT_VECTOR_ELT %1(<2 x s32>), %4(s32)
    $r0 = COPY %3(s32)
    $r1 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            test_v2int32_dyn
legalized:       false
body:             |
  bb.1.entry:
    liveins: $l0, $r1

    ; CHECK-LABEL: name: test_v2int32_dyn
    ; CHECK: liveins: $l0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $l0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<2 x s32>)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[COPY1]](s32), [[UV1]], [[UV]]
    ; CHECK-NEXT: $r0 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<2 x s32>) = COPY $l0
    %2:_(s32) = COPY $r1
    %0:_(s32) = G_EXTRACT_VECTOR_ELT %1(<2 x s32>), %2(s32)
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            extract_8bit_256
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 1, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: extract_8bit_256
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s8>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 8
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s8))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s8))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[LOAD]], 8
    ; CHECK-NEXT: $r0 = COPY [[SEXT_INREG]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<32 x s8>) = COPY $wl0
    %4:_(s32) = G_CONSTANT i32 5
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s8) = G_EXTRACT_VECTOR_ELT %1(<32 x s8>), %4(s32)
    G_STORE %3(s8), %2(p0) :: (volatile store (s8))
    %0:_(s8) = G_LOAD %2(p0) :: (volatile dereferenceable load (s8))
    LIFETIME_END %stack.0
    %5:_(s32) = G_SEXT %0(s8)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_16bit_256
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 2, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: extract_16bit_256
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<16 x s16>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 16
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s16))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s16))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[LOAD]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<16 x s16>) = COPY $wl0
    %4:_(s32) = G_CONSTANT i32 15
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s16) = G_EXTRACT_VECTOR_ELT %1(<16 x s16>), %4(s32)
    G_STORE %3(s16), %2(p0) :: (volatile store (s16))
    %0:_(s16) = G_LOAD %2(p0) :: (volatile dereferenceable load (s16))
    LIFETIME_END %stack.0
    %5:_(s32) = G_ZEXT %0(s16)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_8bit_512
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 1, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: extract_8bit_512
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 63
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s8>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 8
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s8))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s8))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[LOAD]], 8
    ; CHECK-NEXT: $r0 = COPY [[SEXT_INREG]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(<64 x s8>) = COPY $x0
    %4:_(s32) = G_CONSTANT i32 63
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s8) = G_EXTRACT_VECTOR_ELT %1(<64 x s8>), %4(s32)
    G_STORE %3(s8), %2(p0) :: (volatile store (s8))
    %0:_(s8) = G_LOAD %2(p0) :: (volatile dereferenceable load (s8))
    LIFETIME_END %stack.0
    %5:_(s32) = G_SEXT %0(s8)
    $r0 = COPY %5(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            extract_16bit_512
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 2, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: extract_16bit_512
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<32 x s16>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 16
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s16))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s16))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[LOAD]], [[C1]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[AND]](s32)
    %1:_(<32 x s16>) = COPY $x0
    %4:_(s32) = G_CONSTANT i32 15
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s16) = G_EXTRACT_VECTOR_ELT %1(<32 x s16>), %4(s32)
    G_STORE %3(s16), %2(p0) :: (volatile store (s16))
    %0:_(s16) = G_LOAD %2(p0) :: (volatile dereferenceable load (s16))
    LIFETIME_END %stack.0
    %5:_(s32) = G_ZEXT %0(s16)
    PseudoRET implicit $lr, implicit %5

...
---
name:            extract_8bit_1024
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 1, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: extract_8bit_1024
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<128 x s8>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 8
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s8))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s8))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[LOAD]], 8
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[SEXT_INREG]](s32)
    %1:_(<128 x s8>) = COPY $y2
    %4:_(s32) = G_CONSTANT i32 127
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s8) = G_EXTRACT_VECTOR_ELT %1(<128 x s8>), %4(s32)
    G_STORE %3(s8), %2(p0) :: (volatile store (s8))
    %0:_(s8) = G_LOAD %2(p0) :: (volatile dereferenceable load (s8))
    LIFETIME_END %stack.0
    %5:_(s32) = G_SEXT %0(s8)
    PseudoRET implicit $lr, implicit %5
...
---
name:            extract_16bit_1024
legalized:       false
stack:
  - { id: 0, name: "", offset: 0, size: 2, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: extract_16bit_1024
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 63
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[COPY]](<64 x s16>), [[C]](s32)
    ; CHECK-NEXT: [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[AIE_SEXT_EXTRACT_VECTOR_ELT]], 16
    ; CHECK-NEXT: G_STORE [[ASSERT_SEXT]](s32), [[FRAME_INDEX]](p0) :: (volatile store (s16))
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (volatile dereferenceable load (s16))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[LOAD]], [[C1]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[AND]](s32)
    %1:_(<64 x s16>) = COPY $y2
    %4:_(s32) = G_CONSTANT i32 63
    %2:_(p0) = G_FRAME_INDEX %stack.0
    LIFETIME_START %stack.0
    %3:_(s16) = G_EXTRACT_VECTOR_ELT %1(<64 x s16>), %4(s32)
    G_STORE %3(s16), %2(p0) :: (volatile store (s16))
    %0:_(s16) = G_LOAD %2(p0) :: (volatile dereferenceable load (s16))
    LIFETIME_END %stack.0
    %5:_(s32) = G_ZEXT %0(s16)
    PseudoRET implicit $lr, implicit %5
...

---
name: test_extract_32_0
body: |
  bb.1.entry:
    liveins: $r0
    ; CHECK-LABEL: name: test_extract_32_0
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s8>) = COPY $r0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(s32) = G_BITCAST [[COPY]](<4 x s8>)
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST]], [[C]](s32)
    ; CHECK-NEXT: $r2 = COPY [[LSHR]](s32)
    %0:_(<4 x s8>) = COPY $r0
    %5:_(s32) = G_CONSTANT i32 0
    %4:_(s8) = G_EXTRACT_VECTOR_ELT %0(<4 x s8>), %5(s32)
    %1:_(s32) = G_ANYEXT %4(s8)
    $r2 = COPY %1(s32)
...

---
name: test_extract_32_1
body: |
  bb.1.entry:
    liveins: $r0
    ; CHECK-LABEL: name: test_extract_32_1
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s8>) = COPY $r0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(s32) = G_BITCAST [[COPY]](<4 x s8>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST]], [[C]](s32)
    ; CHECK-NEXT: $r2 = COPY [[LSHR]](s32)
    %0:_(<4 x s8>) = COPY $r0
    %5:_(s32) = G_CONSTANT i32 1
    %4:_(s8) = G_EXTRACT_VECTOR_ELT %0(<4 x s8>), %5(s32)
    %1:_(s32) = G_ANYEXT %4(s8)
    $r2 = COPY %1(s32)
...

---
name: test_extract_32_2
body: |
  bb.1.entry:
    liveins: $r0
    ; CHECK-LABEL: name: test_extract_32_2
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s8>) = COPY $r0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(s32) = G_BITCAST [[COPY]](<4 x s8>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST]], [[C]](s32)
    ; CHECK-NEXT: $r2 = COPY [[LSHR]](s32)
    %0:_(<4 x s8>) = COPY $r0
    %5:_(s32) = G_CONSTANT i32 2
    %4:_(s8) = G_EXTRACT_VECTOR_ELT %0(<4 x s8>), %5(s32)
    %1:_(s32) = G_ANYEXT %4(s8)
    $r2 = COPY %1(s32)
...

---
name: test_extract_32_3
body: |
  bb.1.entry:
    liveins: $r0
    ; CHECK-LABEL: name: test_extract_32_3
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s8>) = COPY $r0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(s32) = G_BITCAST [[COPY]](<4 x s8>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST]], [[C]](s32)
    ; CHECK-NEXT: $r2 = COPY [[LSHR]](s32)
    %0:_(<4 x s8>) = COPY $r0
    %5:_(s32) = G_CONSTANT i32 3
    %4:_(s8) = G_EXTRACT_VECTOR_ELT %0(<4 x s8>), %5(s32)
    %1:_(s32) = G_ANYEXT %4(s8)
    $r2 = COPY %1(s32)
...

---
name: test_extract_16bit
body: |
  bb.1.entry:
    ; CHECK-LABEL: name: test_extract_16bit
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 42
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C2]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C3]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[AND]], [[C4]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[SHL1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[AND]](s32)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[COPY2]], [[C5]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[OR2]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[OR3]](s32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(s32) = G_BITCAST [[BITCAST]](<4 x s8>)
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST1]], [[C1]](s32)
    ; CHECK-NEXT: $r0 = COPY [[LSHR]](s32)
  %0:_(s8) = G_CONSTANT i8 42
  %1:_(<2 x s8>) = G_BUILD_VECTOR %0(s8), %0(s8)
  %2:_(s32) = G_CONSTANT i32 0
  %3:_(s8) = G_EXTRACT_VECTOR_ELT %1(<2 x s8>), %2(s32)
  %4:_(s32) = G_ANYEXT %3(s8)
  $r0 = COPY %4(s32)
...
---
name: test_extract_128bit
body: |
  bb.1.entry:
    ; CHECK-LABEL: name: test_extract_128bit
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 77
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 68
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 33
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF1]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI4:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI3]], [[DEF]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI5:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI4]], [[DEF]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI6:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI5]], [[DEF]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI7:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI6]], [[DEF]](s32)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[AIE_ADD_VECTOR_ELT_HI7]](<16 x s32>)
    ; CHECK-NEXT: [[AIE_SEXT_EXTRACT_VECTOR_ELT:%[0-9]+]]:_(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT [[UV1]](<8 x s32>), [[C4]](s32)
    ; CHECK-NEXT: $r0 = COPY [[AIE_SEXT_EXTRACT_VECTOR_ELT]](s32)
    %0:_(s32) = G_CONSTANT i32 65
    %1:_(s32) = G_CONSTANT i32 77
    %2:_(s32) = G_CONSTANT i32 68
    %3:_(s32) = G_CONSTANT i32 33
    %4:_(<4 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32)
    %5:_(s32) = G_CONSTANT i32 2
    %6:_(s32) = G_EXTRACT_VECTOR_ELT %4(<4 x s32>), %5(s32)
    $r0 = COPY %6(s32)
