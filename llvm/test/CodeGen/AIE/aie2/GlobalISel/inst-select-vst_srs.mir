# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VST_SRS_D16_S32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_D16_S32
    ; CHECK: liveins: $bml0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 0
    %6:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v16.acc32.srs), %0:accregbank(<8 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s16>), %3:ptrregbank(p0) :: (store (<16 x s16>))
...

---
name:            VST_SRS_D16_S32_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_D16_S32_dyn
    ; CHECK: liveins: $bml0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = COPY $r1
    %6:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v16.acc32.srs), %0:accregbank(<8 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s16>), %3:ptrregbank(p0) :: (store (<16 x s16>))
...

---
name:            VST_SRS_S16_S32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_S16_S32
    ; CHECK: liveins: $bml0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 1
    %6:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v16.acc32.srs), %0:accregbank(<8 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s16>), %3:ptrregbank(p0) :: (store (<16 x s16>))
...

---
name:            VST_SRS_D32_S64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_D32_S64
    ; CHECK: liveins: $bml0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 0
    %6:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %0:accregbank(<8 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<8 x s32>), %3:ptrregbank(p0) :: (store (<8 x s32>))
...

---
name:            VST_SRS_D32_S64_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_D32_S64_dyn
    ; CHECK: liveins: $bml0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = COPY $r1
    %6:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %0:accregbank(<8 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<8 x s32>), %3:ptrregbank(p0) :: (store (<8 x s32>))
...

---
name:            VST_SRS_S32_S64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_S32_S64
    ; CHECK: liveins: $bml0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 1
    %6:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %0:accregbank(<8 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<8 x s32>), %3:ptrregbank(p0) :: (store (<8 x s32>))
...

---
name:            VST_SRS_D16_S64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_D16_S64
    ; CHECK: liveins: $cm0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 0
    %6:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v16.acc64.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s16>), %3:ptrregbank(p0) :: (store (<16 x s16>))
...

---
name:            VST_SRS_D16_S64_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_D16_S64_dyn
    ; CHECK: liveins: $cm0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = COPY $r1
    %6:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v16.acc64.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s16>), %3:ptrregbank(p0) :: (store (<16 x s16>))
...

---
name:            VST_SRS_S16_S64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0, $r0, $r1
    ; CHECK-LABEL: name: VST_SRS_S16_S64
    ; CHECK: liveins: $cm0, $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S16_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 1
    %6:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v16.acc64.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s16>), %3:ptrregbank(p0) :: (store (<16 x s16>))
...

---
name:            VST_SRS_D8_S32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0, $r0
    ; CHECK-LABEL: name: VST_SRS_D8_S32
    ; CHECK: liveins: $cm0, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 0
    %6:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<32 x s8>), %3:ptrregbank(p0) :: (store (<32 x s8>))
...

---
name:            VST_SRS_D8_S32_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0, $r0
    ; CHECK-LABEL: name: VST_SRS_D8_S32_dyn
    ; CHECK: liveins: $cm0, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = COPY $r1
    %6:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<32 x s8>), %3:ptrregbank(p0) :: (store (<32 x s8>))
...

---
name:            VST_SRS_S8_S32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0, $r0
    ; CHECK-LABEL: name: VST_SRS_S8_S32
    ; CHECK: liveins: $cm0, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S8_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 1
    %6:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<32 x s8>), %3:ptrregbank(p0) :: (store (<32 x s8>))
...

---
name:            VST_SRS_D32_S64_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 0
    %6:vregbank(<16 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v16.acc64.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s32>), %3:ptrregbank(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_D32_S64_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_512_bits_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 32, [[COPY5]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 0, [[COPY4]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = COPY $r1
    %6:vregbank(<16 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v16.acc64.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s32>), %3:ptrregbank(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_S32_S64_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S32_S64_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY2]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY2]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>), align 64)
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 1
    %6:vregbank(<16 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v16.acc64.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<16 x s32>), %3:ptrregbank(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_D16_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY2]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY2]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>), align 64)
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 0
    %6:vregbank(<32 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v32.acc32.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<32 x s16>), %3:ptrregbank(p0) :: (store (<32 x s16>))
...

---
name:            VST_SRS_D16_S32_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_512_bits_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY2]], 32, [[COPY5]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into unknown-address + 32)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY2]], 0, [[COPY4]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>), align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = COPY $r1
    %6:vregbank(<32 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v32.acc32.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<32 x s16>), %3:ptrregbank(p0) :: (store (<32 x s16>))
...

# We are currently not able to combine VST.SRS for 512 bit stores
---
name:            VST_SRS_S16_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S16_S32_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[COPY2]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[COPY2]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>), align 64)
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:gprregbank(s32) = COPY $r0
    %3:ptrregbank(p0) = COPY $p0
    %7:gprregbank(s32) = G_CONSTANT i32 1
    %6:vregbank(<32 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I512.v32.acc32.srs), %0:accregbank(<16 x s64>), %1:gprregbank(s32), %7:gprregbank(s32)
    G_STORE %6:vregbank(<32 x s16>), %3:ptrregbank(p0) :: (store (<32 x s16>))
...

---
name:            VST_SRS_D8_S32_CONCAT
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $cm1, $p0, $r0

    ; CHECK-LABEL: name: VST_SRS_D8_S32_CONCAT
    ; CHECK: liveins: $cm0, $cm1, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm [[COPY2]], 32, [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:accregbank(<16 x s64>) = COPY $cm1
    %2:ptrregbank(p0) = COPY $p0
    %3:gprregbank(s32) = COPY $r0
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %4:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %0(<16 x s64>), %5(s32), %3(s32)
    %6:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %1(<16 x s64>), %5(s32), %3(s32)
    %7:vregbank(<8 x s32>) = G_BITCAST %4(<32 x s8>)
    %8:vregbank(<8 x s32>) = G_BITCAST %6(<32 x s8>)
    %9:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %7(<8 x s32>), %8(<8 x s32>)
    G_STORE %9(<16 x s32>), %2(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_S8_S32_CONCAT
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $cm1, $p0, $r0

    ; CHECK-LABEL: name: VST_SRS_S8_S32_CONCAT
    ; CHECK: liveins: $cm0, $cm1, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_S8_S32_ag_idx_imm [[COPY2]], 32, [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_S8_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>), align 64)
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:accregbank(<16 x s64>) = COPY $cm1
    %2:ptrregbank(p0) = COPY $p0
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %4:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %0(<16 x s64>), %5(s32), %3(s32)
    %6:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %1(<16 x s64>), %5(s32), %3(s32)
    %7:vregbank(<8 x s32>) = G_BITCAST %4(<32 x s8>)
    %8:vregbank(<8 x s32>) = G_BITCAST %6(<32 x s8>)
    %9:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %7(<8 x s32>), %8(<8 x s32>)
    G_STORE %9(<16 x s32>), %2(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_D8_S32_VST_SRS_S8_S32_CONCAT
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $cm1, $p0, $r0

    ; CHECK-LABEL: name: VST_SRS_D8_S32_VST_SRS_S8_S32_CONCAT
    ; CHECK: liveins: $cm0, $cm1, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm [[COPY2]], 32, [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_S8_S32_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>), align 64)
    %0:accregbank(<16 x s64>) = COPY $cm0
    %1:accregbank(<16 x s64>) = COPY $cm1
    %2:ptrregbank(p0) = COPY $p0
    %3:gprregbank(s32) = COPY $r0
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %4:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %0(<16 x s64>), %5(s32), %6(s32)
    %7:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v32.acc32.srs), %1(<16 x s64>), %5(s32), %3(s32)
    %8:vregbank(<8 x s32>) = G_BITCAST %4(<32 x s8>)
    %9:vregbank(<8 x s32>) = G_BITCAST %7(<32 x s8>)
    %10:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %8(<8 x s32>), %9(<8 x s32>)
    G_STORE %10(<16 x s32>), %2(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_D32_S64_CONCAT
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $bml1, $p0, $r0

    ; CHECK-LABEL: name: VST_SRS_D32_S64_CONCAT
    ; CHECK: liveins: $bml0, $bml1, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 32, [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:ptrregbank(p0) = COPY $p0
    %3:gprregbank(s32) = COPY $r0
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %4:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %0(<8 x s64>), %5(s32), %3(s32)
    %6:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %1(<8 x s64>), %5(s32), %3(s32)
    %7:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %4(<8 x s32>), %6(<8 x s32>)
    G_STORE %7(<16 x s32>), %2(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_S32_S64_CONCAT
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $bml1, $p0, $r0

    ; CHECK-LABEL: name: VST_SRS_S32_S64_CONCAT
    ; CHECK: liveins: $bml0, $bml1, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY2]], 32, [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>), align 64)
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:ptrregbank(p0) = COPY $p0
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %4:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %0(<8 x s64>), %5(s32), %3(s32)
    %6:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %1(<8 x s64>), %5(s32), %3(s32)
    %7:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %4(<8 x s32>), %6(<8 x s32>)
    G_STORE %7(<16 x s32>), %2(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_S32_S64_VST_SRS_D32_S64_CONCAT
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $cm1, $p0, $r0

    ; CHECK-LABEL: name: VST_SRS_S32_S64_VST_SRS_D32_S64_CONCAT
    ; CHECK: liveins: $cm0, $cm1, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY2]], 32, [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY2]], 0, [[COPY]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:ptrregbank(p0) = COPY $p0
    %3:gprregbank(s32) = COPY $r0
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %7:gprregbank(s32) = G_CONSTANT i32 1
    %4:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %0(<8 x s64>), %5(s32), %3(s32)
    %6:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %1(<8 x s64>), %5(s32), %7(s32)
    %8:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %4(<8 x s32>), %6(<8 x s32>)
    G_STORE %8(<16 x s32>), %2(p0) :: (store (<16 x s32>))
...

---
name:            VST_SRS_S32_S64_CONCAT_SET_SAT
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $bml1, $p0, $r0

    ; CHECK-LABEL: name: VST_SRS_S32_S64_CONCAT_SET_SAT
    ; CHECK: liveins: $bml0, $bml1, $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: [[VSRS_S32_S64_mv_w_srs:%[0-9]+]]:ewl = VSRS_S32_S64_mv_w_srs [[COPY]], [[COPY3]], implicit-def dead $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: [[VSRS_S32_S64_mv_w_srs1:%[0-9]+]]:ewh = VSRS_S32_S64_mv_w_srs [[COPY1]], [[COPY4]], implicit-def dead $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VSRS_S32_S64_mv_w_srs]], %subreg.sub_256_lo, [[VSRS_S32_S64_mv_w_srs1]], %subreg.sub_256_hi
    ; CHECK-NEXT: $crsat = MOV_scalar_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vec256 = COPY [[REG_SEQUENCE]].sub_256_lo
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vec256 = COPY [[REG_SEQUENCE]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY6]], [[COPY2]], 32 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY5]], [[COPY2]], 0 :: (store (<8 x s32>), align 64)
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:ptrregbank(p0) = COPY $p0
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %4:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %0(<8 x s64>), %5(s32), %3(s32)
    %6:vregbank(<8 x s32>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.I256.v8.acc64.srs), %1(<8 x s64>), %5(s32), %3(s32)
    %7:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %4(<8 x s32>), %6(<8 x s32>)
    %8:gprregbank(s32) = G_CONSTANT i32 9
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.set.ctrl.reg), %8:gprregbank(s32), %3:gprregbank(s32)
    G_STORE %7(<16 x s32>), %2(p0) :: (store (<16 x s32>))
...
