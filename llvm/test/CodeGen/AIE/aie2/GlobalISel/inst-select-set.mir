# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            set_512_256
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl2
    ; CHECK-LABEL: name: set_512_256
    ; CHECK: liveins: $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ewl = COPY [[COPY]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY1]], %subreg.sub_256_lo
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %4:gprregbank(s32) = G_CONSTANT i32 0
    %2:vregbank(<8 x s32>) = G_BITCAST %1:vregbank(<32 x s8>)
    %3:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.set.I512.I256), %2:vregbank(<8 x s32>), %4:gprregbank(s32)
    %0:vregbank(<64 x s8>) = G_BITCAST %3:vregbank(<16 x s32>)
    $x0 = COPY %0:vregbank(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            set_1024_256
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl0
    ; CHECK-LABEL: name: set_1024_256
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ewhe = COPY [[COPY]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY1]], %subreg.sub_256_hi
    ; CHECK-NEXT: $y2 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:vregbank(<32 x s8>) = COPY $wl0
    %4:gprregbank(s32) = G_CONSTANT i32 1
    %2:vregbank(<8 x s32>) = G_BITCAST %1:vregbank(<32 x s8>)
    %3:vregbank(<32 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.set.I1024.I256), %2:vregbank(<8 x s32>), %4:gprregbank(s32)
    %0:vregbank(<128 x s8>) = G_BITCAST %3:vregbank(<32 x s32>)
    $y2 = COPY %0:vregbank(<128 x s8>)
    PseudoRET implicit $lr, implicit $y2
...

---
name:            set_1024_512
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0
    ; CHECK-LABEL: name: set_1024_512
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:exe = COPY [[COPY]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY1]], %subreg.sub_512_lo
    ; CHECK-NEXT: $y2 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:vregbank(<64 x s8>) = COPY $x0
    %4:gprregbank(s32) = G_CONSTANT i32 0
    %2:vregbank(<16 x s32>) = G_BITCAST %1:vregbank(<64 x s8>)
    %3:vregbank(<32 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.set.I1024.I512), %2:vregbank(<16 x s32>), %4:gprregbank(s32)
    %0:vregbank(<128 x s8>) = G_BITCAST %3:vregbank(<32 x s32>)
    $y2 = COPY %0:vregbank(<128 x s8>)
    PseudoRET implicit $lr, implicit $y2
...

---
name:            set_512_256_acc32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1
    ; CHECK-LABEL: name: set_512_256_acc32
    ; CHECK: liveins: $amll1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:mams = COPY $amll1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_hi
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $bml0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %0:accregbank(<8 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.set.512.256.acc), %1:accregbank(<4 x s64>), %2:gprregbank(s32)
    $bml0 = COPY %0:accregbank(<8 x s64>)
    PseudoRET implicit $lr, implicit $bml0
...

---
name:            set_512_256_acc64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1
    ; CHECK-LABEL: name: set_512_256_acc64
    ; CHECK: liveins: $amll1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:mams = COPY $amll1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $bml0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:gprregbank(s32) = G_CONSTANT i32 0
    %0:accregbank(<8 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.set.512.256.acc), %1:accregbank(<4 x s64>), %2:gprregbank(s32)
    $bml0 = COPY %0:accregbank(<8 x s64>)
    PseudoRET implicit $lr, implicit $bml0
...

---
name:            set_1024_256_acc32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1
    ; CHECK-LABEL: name: set_1024_256_acc32
    ; CHECK: liveins: $amll1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:eamlh = COPY $amll1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_256_hi
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.set.1024.256.acc), %1:accregbank(<4 x s64>), %2:gprregbank(s32)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            set_1024_512_acc32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml1
    ; CHECK-LABEL: name: set_1024_512_acc32
    ; CHECK: liveins: $bml1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ebml = COPY $bml1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_512_lo
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:gprregbank(s32) = G_CONSTANT i32 0
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.set.1024.512.acc), %1:accregbank(<8 x s64>), %2:gprregbank(s32)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            set_1024_256_acc64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1
    ; CHECK-LABEL: name: set_1024_256_acc64
    ; CHECK: liveins: $amll1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:eamlh = COPY $amll1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_256_hi
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.set.1024.256.acc), %1:accregbank(<4 x s64>), %2:gprregbank(s32)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            set_1024_512_acc64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml1
    ; CHECK-LABEL: name: set_1024_512_acc64
    ; CHECK: liveins: $bml1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ebml = COPY $bml1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_512_lo
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:gprregbank(s32) = G_CONSTANT i32 0
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.set.1024.512.acc), %1:accregbank(<8 x s64>), %2:gprregbank(s32)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            set_1024_512_bf
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $x0
    ; CHECK-LABEL: name: set_1024_512_bf
    ; CHECK: liveins: $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:exo = COPY $x0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY]], %subreg.sub_512_hi
    ; CHECK-NEXT: $y2 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %2:vregbank(<32 x s16>) = COPY $x0
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %0:vregbank(<64 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.set.bf1024.bf512), %2:vregbank(<32 x s16>), %3:gprregbank(s32)
    $y2 = COPY %0:vregbank(<64 x s16>)
    PseudoRET implicit $lr, implicit $y2
...


---
name:            set_1024_256_bf
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $y2
    ; CHECK-LABEL: name: set_1024_256_bf
    ; CHECK: liveins: $r0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ewho = COPY [[COPY]].sub_512_hi_256_hi
    ; CHECK-NEXT: $wl0 = COPY [[COPY1]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:vregbank(<64 x s16>) = COPY $y2
    %3:gprregbank(s32) = G_CONSTANT i32 3
    %0:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.ext.bf256.bf1024), %1:vregbank(<64 x s16>), %3:gprregbank(s32)
    $wl0 = COPY %0:vregbank(<16 x s16>)
    PseudoRET implicit $lr, implicit $wl0
...

---
name:            set_512_256_bf
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $wl2
    ; CHECK-LABEL: name: set_512_256_bf
    ; CHECK: liveins: $r0, $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ewh = COPY $wl2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %2:vregbank(<16 x s16>) = COPY $wl2
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %0:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.set.bf512.bf256), %2:vregbank(<16 x s16>), %3:gprregbank(s32)
    $x0 = COPY %0:vregbank(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0
...
