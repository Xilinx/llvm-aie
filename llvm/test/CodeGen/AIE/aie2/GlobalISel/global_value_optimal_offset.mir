# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-prelegalizer-combiner -aie2prelegalizercombiner-only-enable-rule="combine_globalval_offset" %s -verify-machineinstrs -o - | FileCheck %s
--- |

  %struct.anon = type { i32, i32, i8, i32, i32, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i32, i32, i8, i32, i8, i8, i8, i8 }

  @X = internal global %struct.anon zeroinitializer, align 4

  define dso_local noundef i32 @global_value_opt_offset(i32 noundef %x) {
  entry:
    %x.addr = alloca i32, align 4
    store i32 %x, ptr %x.addr, align 4
    %0 = load i32, ptr @X, align 4
    %1 = load i32, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 1), align 4
    %add = add nsw i32 %0, %1
    %2 = load i8, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 5), align 4
    %conv = sext i8 %2 to i32
    %add1 = add nsw i32 %add, %conv
    %3 = load i8, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 8), align 4
    %conv2 = sext i8 %3 to i32
    %add3 = add nsw i32 %add1, %conv2
    %4 = load i32, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 6), align 4
    %add4 = add nsw i32 %add3, %4
    %5 = load i8, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 38), align 1
    %conv5 = sext i8 %5 to i32
    %add6 = add nsw i32 %add4, %conv5
    %6 = load i8, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 33), align 4
    %conv7 = sext i8 %6 to i32
    %add8 = add nsw i32 %add6, %conv7
    %7 = load i32, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 26), align 4
    %add9 = add nsw i32 %add8, %7
    %8 = load i8, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 16), align 4
    %conv10 = sext i8 %8 to i32
    %add11 = add nsw i32 %add9, %conv10
    %9 = load i32, ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 27), align 4
    %add12 = add nsw i32 %add11, %9
    ret i32 %add12
  }

...
---
name:            global_value_opt_offset
legalized:       false
regBankSelected: false
stack:
  - { id: 0, name: x.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1.entry:
    liveins: $r1

    ; CHECK-LABEL: name: global_value_opt_offset
    ; CHECK: liveins: $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE target-flags(aie2-global) @X + 20
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 -20
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C]](s20)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s20) = G_CONSTANT i20 -16
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C2]](s20)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s20) = G_CONSTANT i20 20
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s20) = G_CONSTANT i20 32
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s20) = G_CONSTANT i20 12
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C5]](s20)
    ; CHECK-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C1]](s20)
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s20) = G_CONSTANT i20 71
    ; CHECK-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C6]](s20)
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s20) = G_CONSTANT i20 60
    ; CHECK-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C7]](s20)
    ; CHECK-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C4]](s20)
    ; CHECK-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C3]](s20)
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s20) = G_CONSTANT i20 36
    ; CHECK-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C8]](s20)
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0.x.addr
    ; CHECK-NEXT: G_STORE [[COPY]](s32), [[FRAME_INDEX]](p0) :: (store (s32) into %ir.x.addr)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (dereferenceable load (s32) from @X)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD1]](p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 1)`)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = nsw G_ADD [[LOAD]], [[LOAD1]]
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[GV]](p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 5)`, align 4)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD]], [[SEXTLOAD]]
    ; CHECK-NEXT: [[SEXTLOAD1:%[0-9]+]]:_(s32) = G_SEXTLOAD [[PTR_ADD2]](p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 8)`, align 4)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD1]], [[SEXTLOAD1]]
    ; CHECK-NEXT: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD3]](p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 6)`)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD2]], [[LOAD2]]
    ; CHECK-NEXT: [[SEXTLOAD2:%[0-9]+]]:_(s32) = G_SEXTLOAD [[PTR_ADD4]](p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 38)`)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD3]], [[SEXTLOAD2]]
    ; CHECK-NEXT: [[SEXTLOAD3:%[0-9]+]]:_(s32) = G_SEXTLOAD [[PTR_ADD5]](p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 33)`, align 4)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD4]], [[SEXTLOAD3]]
    ; CHECK-NEXT: [[LOAD3:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD6]](p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 26)`)
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD5]], [[LOAD3]]
    ; CHECK-NEXT: [[SEXTLOAD4:%[0-9]+]]:_(s32) = G_SEXTLOAD [[PTR_ADD7]](p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 16)`, align 4)
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD6]], [[SEXTLOAD4]]
    ; CHECK-NEXT: [[LOAD4:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD8]](p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 27)`)
    ; CHECK-NEXT: [[ADD8:%[0-9]+]]:_(s32) = nsw G_ADD [[ADD7]], [[LOAD4]]
    ; CHECK-NEXT: $r0 = COPY [[ADD8]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(s32) = COPY $r1
    %4:_(p0) = G_GLOBAL_VALUE @X
    %7:_(s20) = G_CONSTANT i20 4
    %6:_(p0) = G_PTR_ADD %4, %7(s20)
    %11:_(s20) = G_CONSTANT i20 20
    %10:_(p0) = G_PTR_ADD %4, %11(s20)
    %16:_(s20) = G_CONSTANT i20 32
    %15:_(p0) = G_PTR_ADD %4, %16(s20)
    %21:_(s20) = G_CONSTANT i20 24
    %20:_(p0) = G_PTR_ADD %4, %21(s20)
    %25:_(s20) = G_CONSTANT i20 91
    %24:_(p0) = G_PTR_ADD %4, %25(s20)
    %30:_(s20) = G_CONSTANT i20 80
    %29:_(p0) = G_PTR_ADD %4, %30(s20)
    %35:_(s20) = G_CONSTANT i20 52
    %34:_(p0) = G_PTR_ADD %4, %35(s20)
    %39:_(s20) = G_CONSTANT i20 40
    %38:_(p0) = G_PTR_ADD %4, %39(s20)
    %44:_(s20) = G_CONSTANT i20 56
    %43:_(p0) = G_PTR_ADD %4, %44(s20)
    %2:_(p0) = G_FRAME_INDEX %stack.0.x.addr
    G_STORE %1(s32), %2(p0) :: (store (s32) into %ir.x.addr)
    %3:_(s32) = G_LOAD %4(p0) :: (dereferenceable load (s32) from @X)
    %5:_(s32) = G_LOAD %6(p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 1)`)
    %8:_(s32) = nsw G_ADD %3, %5
    %9:_(s8) = G_LOAD %10(p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 5)`, align 4)
    %12:_(s32) = G_SEXT %9(s8)
    %13:_(s32) = nsw G_ADD %8, %12
    %14:_(s8) = G_LOAD %15(p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 8)`, align 4)
    %17:_(s32) = G_SEXT %14(s8)
    %18:_(s32) = nsw G_ADD %13, %17
    %19:_(s32) = G_LOAD %20(p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 6)`)
    %22:_(s32) = nsw G_ADD %18, %19
    %23:_(s8) = G_LOAD %24(p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 38)`)
    %26:_(s32) = G_SEXT %23(s8)
    %27:_(s32) = nsw G_ADD %22, %26
    %28:_(s8) = G_LOAD %29(p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 33)`, align 4)
    %31:_(s32) = G_SEXT %28(s8)
    %32:_(s32) = nsw G_ADD %27, %31
    %33:_(s32) = G_LOAD %34(p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 26)`)
    %36:_(s32) = nsw G_ADD %32, %33
    %37:_(s8) = G_LOAD %38(p0) :: (dereferenceable load (s8) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 16)`, align 4)
    %40:_(s32) = G_SEXT %37(s8)
    %41:_(s32) = nsw G_ADD %36, %40
    %42:_(s32) = G_LOAD %43(p0) :: (dereferenceable load (s32) from `ptr getelementptr inbounds (%struct.anon, ptr @X, i32 0, i32 27)`)
    %0:_(s32) = nsw G_ADD %41, %42
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0

...
