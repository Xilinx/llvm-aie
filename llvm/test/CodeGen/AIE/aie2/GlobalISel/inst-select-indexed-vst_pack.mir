# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VST_PACK_D8_D16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_PACK_D8_D16
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 96, [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 128
    ; CHECK-NEXT: VST_PACK_D8_D16_ag_idx [[COPY1]], [[MOV_PD_imm10_pseudo]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY $dj0
    ; CHECK-NEXT: VST_PACK_D8_D16_ag_idx [[COPY1]], [[COPY2]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    %0:vregbank(<32 x s16>) = COPY $x0
    %2:ptrregbank(p0) = COPY $p0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    %3:modregbank(s20) = G_CONSTANT i20 96
    G_AIE_OFFSET_STORE %5:vregbank(<32 x s8>), %2:ptrregbank(p0), %3:modregbank(s20) :: (store (<32 x s8>))
    %8:modregbank(s20) = G_CONSTANT i20 128
    %9:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %9:vregbank(<32 x s8>), %2:ptrregbank(p0), %8:modregbank(s20) :: (store (<32 x s8>))
    %10:modregbank(s20) = COPY $dj0
    %11:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %11:vregbank(<32 x s8>), %2:ptrregbank(p0), %10:modregbank(s20) :: (store (<32 x s8>))
...

---
name:            VST_PACK_D8_D16_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_PACK_D8_D16_dyn
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $s0
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 96, [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 128
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: VST_PACK_D8_D16_ag_idx [[COPY1]], [[MOV_PD_imm10_pseudo]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edj = COPY $dj0
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: VST_PACK_D8_D16_ag_idx [[COPY1]], [[COPY3]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    %0:vregbank(<32 x s16>) = COPY $x0
    %2:ptrregbank(p0) = COPY $p0
    %6:gprregbank(s32) = COPY $s0
    %5:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    %3:modregbank(s20) = G_CONSTANT i20 96
    G_AIE_OFFSET_STORE %5:vregbank(<32 x s8>), %2:ptrregbank(p0), %3:modregbank(s20) :: (store (<32 x s8>))
    %8:modregbank(s20) = G_CONSTANT i20 128
    %9:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %9:vregbank(<32 x s8>), %2:ptrregbank(p0), %8:modregbank(s20) :: (store (<32 x s8>))
    %10:modregbank(s20) = COPY $dj0
    %11:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %11:vregbank(<32 x s8>), %2:ptrregbank(p0), %10:modregbank(s20) :: (store (<32 x s8>))
...

---
name:            VST_PACK_S8_S16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_PACK_S8_S16
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_PACK_S8_S16_ag_idx_imm [[COPY1]], 96, [[COPY]], implicit $crsat :: (store (<32 x s8>))
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 128
    ; CHECK-NEXT: VST_PACK_S8_S16_ag_idx [[COPY1]], [[MOV_PD_imm10_pseudo]], [[COPY]], implicit $crsat :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY $dj0
    ; CHECK-NEXT: VST_PACK_S8_S16_ag_idx [[COPY1]], [[COPY2]], [[COPY]], implicit $crsat :: (store (<32 x s8>))
    %0:vregbank(<32 x s16>) = COPY $x0
    %2:ptrregbank(p0) = COPY $p0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    %3:modregbank(s20) = G_CONSTANT i20 96
    G_AIE_OFFSET_STORE %5:vregbank(<32 x s8>), %2:ptrregbank(p0), %3:modregbank(s20) :: (store (<32 x s8>))
    %8:modregbank(s20) = G_CONSTANT i20 128
    %9:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %9:vregbank(<32 x s8>), %2:ptrregbank(p0), %8:modregbank(s20) :: (store (<32 x s8>))
    %10:modregbank(s20) = COPY $dj0
    %11:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %0:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %11:vregbank(<32 x s8>), %2:ptrregbank(p0), %10:modregbank(s20) :: (store (<32 x s8>))
...

---
name:            VST_PACK_D4_D8
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_PACK_D4_D8
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_PACK_D4_D8_ag_idx_imm [[COPY1]], 96, [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 128
    ; CHECK-NEXT: VST_PACK_D4_D8_ag_idx [[COPY1]], [[MOV_PD_imm10_pseudo]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY $dj0
    ; CHECK-NEXT: VST_PACK_D4_D8_ag_idx [[COPY1]], [[COPY2]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    %0:vregbank(<64 x s8>) = COPY $x0
    %1:vregbank(<32 x s16>) = G_BITCAST %0:vregbank(<64 x s8>)
    %2:ptrregbank(p0) = COPY $p0
    %6:gprregbank(s32) = G_CONSTANT i32 0
    %5:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    %3:modregbank(s20) = G_CONSTANT i20 96
    G_AIE_OFFSET_STORE %5:vregbank(<32 x s8>), %2:ptrregbank(p0), %3:modregbank(s20) :: (store (<32 x s8>))
    %8:modregbank(s20) = G_CONSTANT i20 128
    %9:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %9:vregbank(<32 x s8>), %2:ptrregbank(p0), %8:modregbank(s20) :: (store (<32 x s8>))
    %10:modregbank(s20) = COPY $dj0
    %11:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %11:vregbank(<32 x s8>), %2:ptrregbank(p0), %10:modregbank(s20) :: (store (<32 x s8>))
...

---
name:            VST_PACK_D4_D8_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_PACK_D4_D8_dyn
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $s0
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: VST_PACK_D4_D8_ag_idx_imm [[COPY1]], 96, [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 128
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: VST_PACK_D4_D8_ag_idx [[COPY1]], [[MOV_PD_imm10_pseudo]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edj = COPY $dj0
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: VST_PACK_D4_D8_ag_idx [[COPY1]], [[COPY3]], [[COPY]], implicit $crsat, implicit $crpacksign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    %0:vregbank(<64 x s8>) = COPY $x0
    %1:vregbank(<32 x s16>) = G_BITCAST %0:vregbank(<64 x s8>)
    %2:ptrregbank(p0) = COPY $p0
    %6:gprregbank(s32) = COPY $s0
    %5:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    %3:modregbank(s20) = G_CONSTANT i20 96
    G_AIE_OFFSET_STORE %5:vregbank(<32 x s8>), %2:ptrregbank(p0), %3:modregbank(s20) :: (store (<32 x s8>))
    %8:modregbank(s20) = G_CONSTANT i20 128
    %9:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %9:vregbank(<32 x s8>), %2:ptrregbank(p0), %8:modregbank(s20) :: (store (<32 x s8>))
    %10:modregbank(s20) = COPY $dj0
    %11:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %11:vregbank(<32 x s8>), %2:ptrregbank(p0), %10:modregbank(s20) :: (store (<32 x s8>))
...

---
name:            VST_PACK_S4_S8
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_PACK_S4_S8
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_PACK_S4_S8_ag_idx_imm [[COPY1]], 96, [[COPY]], implicit $crsat :: (store (<32 x s8>))
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 128
    ; CHECK-NEXT: VST_PACK_S4_S8_ag_idx [[COPY1]], [[MOV_PD_imm10_pseudo]], [[COPY]], implicit $crsat :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY $dj0
    ; CHECK-NEXT: VST_PACK_S4_S8_ag_idx [[COPY1]], [[COPY2]], [[COPY]], implicit $crsat :: (store (<32 x s8>))
    %0:vregbank(<64 x s8>) = COPY $x0
    %1:vregbank(<32 x s16>) = G_BITCAST %0:vregbank(<64 x s8>)
    %2:ptrregbank(p0) = COPY $p0
    %6:gprregbank(s32) = G_CONSTANT i32 1
    %5:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    %3:modregbank(s20) = G_CONSTANT i20 96
    G_AIE_OFFSET_STORE %5:vregbank(<32 x s8>), %2:ptrregbank(p0), %3:modregbank(s20) :: (store (<32 x s8>))
    %8:modregbank(s20) = G_CONSTANT i20 128
    %9:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %9:vregbank(<32 x s8>), %2:ptrregbank(p0), %8:modregbank(s20) :: (store (<32 x s8>))
    %10:modregbank(s20) = COPY $dj0
    %11:vregbank(<32 x s8>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %1:vregbank(<32 x s16>), %6:gprregbank(s32)
    G_AIE_OFFSET_STORE %11:vregbank(<32 x s8>), %2:ptrregbank(p0), %10:modregbank(s20) :: (store (<32 x s8>))
...
