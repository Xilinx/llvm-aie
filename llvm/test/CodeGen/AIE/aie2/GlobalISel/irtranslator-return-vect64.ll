; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; 64-bit vector types

%struct.S2v2int32 = type { <2 x i32>, <2 x i32> }

define <2 x i32> @callee_v2int32() {
  ; CHECK-LABEL: name: callee_v2int32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   $l0 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $l0
  ret <2 x i32> zeroinitializer
}

define <4 x i16> @callee_v4int16() {
  ; CHECK-LABEL: name: callee_v4int16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s16>) = G_BUILD_VECTOR [[C]](s16), [[C]](s16), [[C]](s16), [[C]](s16)
  ; CHECK-NEXT:   $l0 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $l0
  ret <4 x i16> zeroinitializer
}

define <8 x i8> @callee_v8int8() {
  ; CHECK-LABEL: name: callee_v8int8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s8>) = G_BUILD_VECTOR [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8)
  ; CHECK-NEXT:   $l0 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $l0
  ret <8 x i8> zeroinitializer
}

define %struct.S2v2int32 @callee_S2v2int32() {
  ; CHECK-LABEL: name: callee_S2v2int32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   $l0 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l1 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $l0, implicit $l1
  ret %struct.S2v2int32 zeroinitializer
}
