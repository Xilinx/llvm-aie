# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            concat_512_256
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_512_256
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ewl = COPY [[COPY]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ewh = COPY [[COPY1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY2]], %subreg.sub_256_lo, [[COPY3]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %2:vregbank(<32 x s8>) = COPY $wl4
    %3:vregbank(<8 x s32>) = G_BITCAST %1:vregbank(<32 x s8>)
    %4:vregbank(<8 x s32>) = G_BITCAST %2:vregbank(<32 x s8>)
    %5:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I512.I256), %3:vregbank(<8 x s32>), %4:vregbank(<8 x s32>)
    %0:vregbank(<64 x s8>) = G_BITCAST %5:vregbank(<16 x s32>)
    $x0 = COPY %0:vregbank(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_1024_256
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl0, $wl2, $wl6, $wl8
    ; CHECK-LABEL: name: concat_1024_256
    ; CHECK: liveins: $wl0, $wl2, $wl6, $wl8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY $wl6
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY $wl8
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:ewle = COPY [[COPY]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ewhe = COPY [[COPY1]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:ewlo = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:ewho = COPY [[COPY3]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY4]], %subreg.sub_256_lo, [[COPY5]], %subreg.sub_256_hi, [[COPY6]], %subreg.sub_512_hi_256_lo, [[COPY7]], %subreg.sub_512_hi_256_hi
    ; CHECK-NEXT: $y2 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:vregbank(<32 x s8>) = COPY $wl0
    %2:vregbank(<32 x s8>) = COPY $wl2
    %3:vregbank(<32 x s8>) = COPY $wl6
    %4:vregbank(<32 x s8>) = COPY $wl8
    %5:vregbank(<8 x s32>) = G_BITCAST %1:vregbank(<32 x s8>)
    %6:vregbank(<8 x s32>) = G_BITCAST %2:vregbank(<32 x s8>)
    %7:vregbank(<8 x s32>) = G_BITCAST %3:vregbank(<32 x s8>)
    %8:vregbank(<8 x s32>) = G_BITCAST %4:vregbank(<32 x s8>)
    %9:vregbank(<32 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I1024.I256), %5:vregbank(<8 x s32>), %6:vregbank(<8 x s32>), %7:vregbank(<8 x s32>), %8:vregbank(<8 x s32>)
    %0:vregbank(<128 x s8>) = G_BITCAST %9:vregbank(<32 x s32>)
    $y2 = COPY %0:vregbank(<128 x s8>)
    PseudoRET implicit $lr, implicit $y2
...

---
name:            concat_1024_512
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: concat_1024_512
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:exe = COPY [[COPY]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:exo = COPY [[COPY1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY2]], %subreg.sub_512_lo, [[COPY3]], %subreg.sub_512_hi
    ; CHECK-NEXT: $y2 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x2
    %3:vregbank(<16 x s32>) = G_BITCAST %1:vregbank(<64 x s8>)
    %4:vregbank(<16 x s32>) = G_BITCAST %2:vregbank(<64 x s8>)
    %5:vregbank(<32 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.I1024.I512), %3:vregbank(<16 x s32>), %4:vregbank(<16 x s32>)
    %0:vregbank(<128 x s8>) = G_BITCAST %5:vregbank(<32 x s32>)
    $y2 = COPY %0:vregbank(<128 x s8>)
    PseudoRET implicit $lr, implicit $y2
...

---
name:            concat_512_256_acc32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1, $amll2
    ; CHECK-LABEL: name: concat_512_256_acc32
    ; CHECK: liveins: $amll1, $amll2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:mams = COPY $amll1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:mams = COPY $amll2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[COPY1]], %subreg.sub_256_hi
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $bml0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:accregbank(<4 x s64>) = COPY $amll2
    %0:accregbank(<8 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.512.256.acc), %1:accregbank(<4 x s64>), %2:accregbank(<4 x s64>)
    $bml0 = COPY %0:accregbank(<8 x s64>)
    PseudoRET implicit $lr, implicit $bml0
...

---
name:            concat_1024_256_acc32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1, $amll2, $amll3, $amll4
    ; CHECK-LABEL: name: concat_1024_256_acc32
    ; CHECK: liveins: $amll1, $amll2, $amll3, $amll4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:eamll = COPY $amll1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eamlh = COPY $amll2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:eamhl = COPY $amll3
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:eamhh = COPY $amll4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[COPY1]], %subreg.sub_256_hi, [[COPY2]], %subreg.sub_512_hi_256_lo, [[COPY3]], %subreg.sub_512_hi_256_hi
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:accregbank(<4 x s64>) = COPY $amll2
    %3:accregbank(<4 x s64>) = COPY $amll3
    %4:accregbank(<4 x s64>) = COPY $amll4
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.1024.256.acc), %1:accregbank(<4 x s64>), %2:accregbank(<4 x s64>), %3:accregbank(<4 x s64>), %4:accregbank(<4 x s64>)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            concat_1024_512_acc32
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml1, $bml2
    ; CHECK-LABEL: name: concat_1024_512_acc32
    ; CHECK: liveins: $bml1, $bml2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ebml = COPY $bml1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ebmh = COPY $bml2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_512_lo, [[COPY1]], %subreg.sub_512_hi
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:accregbank(<8 x s64>) = COPY $bml2
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.1024.512.acc), %1:accregbank(<8 x s64>), %2:accregbank(<8 x s64>)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            concat_512_256_acc64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1, $amll2
    ; CHECK-LABEL: name: concat_512_256_acc64
    ; CHECK: liveins: $amll1, $amll2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:mams = COPY $amll1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:mams = COPY $amll2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[COPY1]], %subreg.sub_256_hi
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $bml0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:accregbank(<4 x s64>) = COPY $amll2
    %0:accregbank(<8 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.512.256.acc), %1:accregbank(<4 x s64>), %2:accregbank(<4 x s64>)
    $bml0 = COPY %0:accregbank(<8 x s64>)
    PseudoRET implicit $lr, implicit $bml0
...

---
name:            concat_1024_512_acc64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml1, $bml2
    ; CHECK-LABEL: name: concat_1024_512_acc64
    ; CHECK: liveins: $bml1, $bml2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ebml = COPY $bml1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ebmh = COPY $bml2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_512_lo, [[COPY1]], %subreg.sub_512_hi
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<8 x s64>) = COPY $bml1
    %2:accregbank(<8 x s64>) = COPY $bml2
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.1024.512.acc), %1:accregbank(<8 x s64>), %2:accregbank(<8 x s64>)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            concat_1024_256_acc64
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll1, $amll2, $amll3, $amll4
    ; CHECK-LABEL: name: concat_1024_256_acc64
    ; CHECK: liveins: $amll1, $amll2, $amll3, $amll4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:eamll = COPY $amll1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:eamlh = COPY $amll2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:eamhl = COPY $amll3
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:eamhh = COPY $amll4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc1024 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[COPY1]], %subreg.sub_256_hi, [[COPY2]], %subreg.sub_512_hi_256_lo, [[COPY3]], %subreg.sub_512_hi_256_hi
    ; CHECK-NEXT: $cm0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:accregbank(<4 x s64>) = COPY $amll1
    %2:accregbank(<4 x s64>) = COPY $amll2
    %3:accregbank(<4 x s64>) = COPY $amll3
    %4:accregbank(<4 x s64>) = COPY $amll4
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.1024.256.acc), %1:accregbank(<4 x s64>), %2:accregbank(<4 x s64>), %3:accregbank(<4 x s64>), %4:accregbank(<4 x s64>)
    $cm0 = COPY %0:accregbank(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0
...

---
name:            concat_512_256_bf
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_512_256_bf
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ewl = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ewh = COPY $wl4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[COPY1]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<16 x s16>) = COPY $wl2
    %2:vregbank(<16 x s16>) = COPY $wl4
    %0:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.bf512.bf256), %1:vregbank(<16 x s16>), %2:vregbank(<16 x s16>)
    $x0 = COPY %0:vregbank(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_1024_256_bf
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl0, $wl2, $wl6, $wl8
    ; CHECK-LABEL: name: concat_1024_256_bf
    ; CHECK: liveins: $wl0, $wl2, $wl6, $wl8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ewle = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ewhe = COPY $wl2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ewlo = COPY $wl6
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ewho = COPY $wl8
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[COPY1]], %subreg.sub_256_hi, [[COPY2]], %subreg.sub_512_hi_256_lo, [[COPY3]], %subreg.sub_512_hi_256_hi
    ; CHECK-NEXT: $y2 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:vregbank(<16 x s16>) = COPY $wl0
    %2:vregbank(<16 x s16>) = COPY $wl2
    %3:vregbank(<16 x s16>) = COPY $wl6
    %4:vregbank(<16 x s16>) = COPY $wl8
    %0:vregbank(<64 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.bf1024.bf256), %1:vregbank(<16 x s16>), %2:vregbank(<16 x s16>), %3:vregbank(<16 x s16>), %4:vregbank(<16 x s16>)
    $y2 = COPY %0:vregbank(<64 x s16>)
    PseudoRET implicit $lr, implicit $y2
...

---
name:            concat_1024_512_bf
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: concat_1024_512_bf
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:exe = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:exo = COPY $x2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY]], %subreg.sub_512_lo, [[COPY1]], %subreg.sub_512_hi
    ; CHECK-NEXT: $y2 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %0:vregbank(<64 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.concat.bf1024.bf512), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>)
    $y2 = COPY %0:vregbank(<64 x s16>)
    PseudoRET implicit $lr, implicit $y2
...
