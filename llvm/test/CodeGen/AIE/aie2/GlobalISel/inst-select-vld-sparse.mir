# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            _Z22test_sparse_pop_set_lo_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: _Z22test_sparse_pop_set_lo_16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_16_set_low:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_POP_16_set_low1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_16_set_low [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_16_set_low1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_16_set_low1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_16_set_low]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<32 x s16>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<32 x s16>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.16.set.lo), %7:vregbank(<32 x s16>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<32 x s16>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z31test_sparse_pop_and_get_pointer_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z31test_sparse_pop_and_get_pointer_16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_16_and_get_pointer:%[0-9]+]]:edn0, [[PSEUDO_VLD_SPARSE_POP_16_and_get_pointer1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_16_and_get_pointer [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_16_and_get_pointer1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_16_and_get_pointer1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_16_and_get_pointer]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<32 x s16>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<32 x s16>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.16.and.get.pointer), %7:vregbank(<32 x s16>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<32 x s16>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z25test_sparse_pop_insert_hi_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-LABEL: name: _Z25test_sparse_pop_insert_hi_16
    ; CHECK: liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY $q1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY2]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY]], %subreg.sub_sparse_x, [[COPY1]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_16_insert_hi:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_POP_16_insert_hi1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_16_insert_hi [[LDA_dms_lda_idx_imm]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_16_insert_hi1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_16_insert_hi1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_16_insert_hi]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY5]], [[COPY2]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY3]]
    ; CHECK-NEXT: $q0 = COPY [[COPY4]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %4:vregbank(<32 x s16>) = COPY $x1
  %5:vregbank(s128) = COPY $q1
  %6:ptrregbank(p0) = COPY $p0
  %11:vregbank(<32 x s16>) = G_IMPLICIT_DEF
  %12:vregbank(s128) = G_IMPLICIT_DEF
  %7:ptrregbank(p0) = G_LOAD %6:ptrregbank(p0) :: (load (p0), align 4)
  %8:ptrregbank(p0), %9:vregbank(<32 x s16>), %10:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.16.insert.hi), %11:vregbank(<32 x s16>), %12:vregbank(s128), %4:vregbank(<32 x s16>), %5:vregbank(s128), %7:ptrregbank(p0)
  G_STORE %8:ptrregbank(p0), %6:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %9:vregbank(<32 x s16>)
  $q0 = COPY %10:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z22test_sparse_peek_set_lo_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: _Z22test_sparse_peek_set_lo_16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_16_set_low:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_PEEK_16_set_low1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_16_set_low [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_set_low1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_set_low1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_set_low]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<32 x s16>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<32 x s16>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.16.set.lo), %7:vregbank(<32 x s16>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<32 x s16>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z31test_sparse_peek_and_get_pointer_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z31test_sparse_peek_and_get_pointer_16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_16_and_get_pointer:%[0-9]+]]:edn0, [[PSEUDO_VLD_SPARSE_PEEK_16_and_get_pointer1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_16_and_get_pointer [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_and_get_pointer1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_and_get_pointer1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_and_get_pointer]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<32 x s16>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<32 x s16>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.16.and.get.pointer), %7:vregbank(<32 x s16>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<32 x s16>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z25test_sparse_peek_insert_hi_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-LABEL: name: _Z25test_sparse_peek_insert_hi_16
    ; CHECK: liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY $q1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY2]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY]], %subreg.sub_sparse_x, [[COPY1]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_16_insert_hi:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_PEEK_16_insert_hi1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_16_insert_hi [[LDA_dms_lda_idx_imm]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_insert_hi1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_insert_hi1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_16_insert_hi]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY5]], [[COPY2]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY3]]
    ; CHECK-NEXT: $q0 = COPY [[COPY4]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %4:vregbank(<32 x s16>) = COPY $x1
  %5:vregbank(s128) = COPY $q1
  %6:ptrregbank(p0) = COPY $p0
  %11:vregbank(<32 x s16>) = G_IMPLICIT_DEF
  %12:vregbank(s128) = G_IMPLICIT_DEF
  %7:ptrregbank(p0) = G_LOAD %6:ptrregbank(p0) :: (load (p0), align 4)
  %8:ptrregbank(p0), %9:vregbank(<32 x s16>), %10:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.16.insert.hi), %11:vregbank(<32 x s16>), %12:vregbank(s128), %4:vregbank(<32 x s16>), %5:vregbank(s128), %7:ptrregbank(p0)
  G_STORE %8:ptrregbank(p0), %6:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %9:vregbank(<32 x s16>)
  $q0 = COPY %10:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...


---
name:            _Z17test_sparse_reset_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z17test_sparse_reset_16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (dereferenceable load (p0), align 4)
    ; CHECK-NEXT: [[VLDB_SPARSE_RESET_16_:%[0-9]+]]:ep = VLDB_SPARSE_RESET_16 [[LDA_dms_lda_idx_imm]], implicit-def $srsparse_of, implicit-def $dp, implicit $dp
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = COPY [[VLDB_SPARSE_RESET_16_]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY1]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr
  %0:ptrregbank(p0) = COPY $p0
  %1:ptrregbank(p0) = G_LOAD %0:ptrregbank(p0) :: (dereferenceable load (p0), align 4)
  %2:ptrregbank(p0) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.reset.16), %1:ptrregbank(p0)
  G_STORE %2:ptrregbank(p0), %0:ptrregbank(p0) :: (store (p0), align 4)
  PseudoRET implicit $lr
...

---
name:            _Z17test_sparse_fill_16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z17test_sparse_fill_16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (dereferenceable load (p0), align 4)
    ; CHECK-NEXT: [[VLDB_SPARSE_FILL_16_:%[0-9]+]]:ep = VLDB_SPARSE_FILL_16 [[LDA_dms_lda_idx_imm]], implicit-def $srsparse_of, implicit $dp
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = COPY [[VLDB_SPARSE_FILL_16_]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY1]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr
  %0:ptrregbank(p0) = COPY $p0
  %1:ptrregbank(p0) = G_LOAD %0:ptrregbank(p0) :: (dereferenceable load (p0), align 4)
  %2:ptrregbank(p0) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.fill.16), %1:ptrregbank(p0)
  G_STORE %2:ptrregbank(p0), %0:ptrregbank(p0) :: (store (p0), align 4)
  PseudoRET implicit $lr
...

---
name:            _Z22test_sparse_pop_set_lo_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: _Z22test_sparse_pop_set_lo_8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_8_set_low:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_POP_8_set_low1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_8_set_low [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_8_set_low1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_8_set_low1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_8_set_low]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<64 x s8>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<64 x s8>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.8.set.lo), %7:vregbank(<64 x s8>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<64 x s8>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z31test_sparse_pop_and_get_pointer_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z31test_sparse_pop_and_get_pointer_8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_8_and_get_pointer:%[0-9]+]]:edn0, [[PSEUDO_VLD_SPARSE_POP_8_and_get_pointer1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_8_and_get_pointer [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_8_and_get_pointer1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_8_and_get_pointer1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_8_and_get_pointer]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<64 x s8>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<64 x s8>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.8.and.get.pointer), %7:vregbank(<64 x s8>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<64 x s8>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z25test_sparse_pop_insert_hi_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-LABEL: name: _Z25test_sparse_pop_insert_hi_8
    ; CHECK: liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY $q1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY2]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY]], %subreg.sub_sparse_x, [[COPY1]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_8_insert_hi:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_POP_8_insert_hi1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_8_insert_hi [[LDA_dms_lda_idx_imm]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_8_insert_hi1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_8_insert_hi1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_8_insert_hi]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY5]], [[COPY2]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY3]]
    ; CHECK-NEXT: $q0 = COPY [[COPY4]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %4:vregbank(<64 x s8>) = COPY $x1
  %5:vregbank(s128) = COPY $q1
  %6:ptrregbank(p0) = COPY $p0
  %11:vregbank(<64 x s8>) = G_IMPLICIT_DEF
  %12:vregbank(s128) = G_IMPLICIT_DEF
  %7:ptrregbank(p0) = G_LOAD %6:ptrregbank(p0) :: (load (p0), align 4)
  %8:ptrregbank(p0), %9:vregbank(<64 x s8>), %10:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.8.insert.hi), %11:vregbank(<64 x s8>), %12:vregbank(s128), %4:vregbank(<64 x s8>), %5:vregbank(s128), %7:ptrregbank(p0)
  G_STORE %8:ptrregbank(p0), %6:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %9:vregbank(<64 x s8>)
  $q0 = COPY %10:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z22test_sparse_peek_set_lo_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: _Z22test_sparse_peek_set_lo_8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_8_set_low:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_PEEK_8_set_low1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_8_set_low [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_set_low1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_set_low1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_set_low]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<64 x s8>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<64 x s8>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.8.set.lo), %7:vregbank(<64 x s8>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<64 x s8>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z31test_sparse_peek_and_get_pointer_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z31test_sparse_peek_and_get_pointer_8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_8_and_get_pointer:%[0-9]+]]:edn0, [[PSEUDO_VLD_SPARSE_PEEK_8_and_get_pointer1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_8_and_get_pointer [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_and_get_pointer1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_and_get_pointer1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_and_get_pointer]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<64 x s8>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<64 x s8>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.8.and.get.pointer), %7:vregbank(<64 x s8>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<64 x s8>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z25test_sparse_peek_insert_hi_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-LABEL: name: _Z25test_sparse_peek_insert_hi_8
    ; CHECK: liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY $q1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY2]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY]], %subreg.sub_sparse_x, [[COPY1]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_8_insert_hi:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_PEEK_8_insert_hi1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_8_insert_hi [[LDA_dms_lda_idx_imm]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_insert_hi1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_insert_hi1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_8_insert_hi]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY5]], [[COPY2]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY3]]
    ; CHECK-NEXT: $q0 = COPY [[COPY4]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %4:vregbank(<64 x s8>) = COPY $x1
  %5:vregbank(s128) = COPY $q1
  %6:ptrregbank(p0) = COPY $p0
  %11:vregbank(<64 x s8>) = G_IMPLICIT_DEF
  %12:vregbank(s128) = G_IMPLICIT_DEF
  %7:ptrregbank(p0) = G_LOAD %6:ptrregbank(p0) :: (load (p0), align 4)
  %8:ptrregbank(p0), %9:vregbank(<64 x s8>), %10:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.8.insert.hi), %11:vregbank(<64 x s8>), %12:vregbank(s128), %4:vregbank(<64 x s8>), %5:vregbank(s128), %7:ptrregbank(p0)
  G_STORE %8:ptrregbank(p0), %6:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %9:vregbank(<64 x s8>)
  $q0 = COPY %10:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...


---
name:            _Z17test_sparse_reset_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z17test_sparse_reset_8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (dereferenceable load (p0), align 4)
    ; CHECK-NEXT: [[VLDB_SPARSE_RESET_8_:%[0-9]+]]:ep = VLDB_SPARSE_RESET_8 [[LDA_dms_lda_idx_imm]], implicit-def $srsparse_of, implicit-def $dp, implicit $dp
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = COPY [[VLDB_SPARSE_RESET_8_]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY1]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr
  %0:ptrregbank(p0) = COPY $p0
  %1:ptrregbank(p0) = G_LOAD %0:ptrregbank(p0) :: (dereferenceable load (p0), align 4)
  %2:ptrregbank(p0) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.reset.8), %1:ptrregbank(p0)
  G_STORE %2:ptrregbank(p0), %0:ptrregbank(p0) :: (store (p0), align 4)
  PseudoRET implicit $lr
...

---
name:            _Z17test_sparse_fill_8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z17test_sparse_fill_8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (dereferenceable load (p0), align 4)
    ; CHECK-NEXT: [[VLDB_SPARSE_FILL_8_:%[0-9]+]]:ep = VLDB_SPARSE_FILL_8 [[LDA_dms_lda_idx_imm]], implicit-def $srsparse_of, implicit $dp
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = COPY [[VLDB_SPARSE_FILL_8_]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY1]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr
  %0:ptrregbank(p0) = COPY $p0
  %1:ptrregbank(p0) = G_LOAD %0:ptrregbank(p0) :: (dereferenceable load (p0), align 4)
  %2:ptrregbank(p0) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.fill.8), %1:ptrregbank(p0)
  G_STORE %2:ptrregbank(p0), %0:ptrregbank(p0) :: (store (p0), align 4)
  PseudoRET implicit $lr
...


---
name:            _Z22test_sparse_pop_set_lo_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: _Z22test_sparse_pop_set_lo_4
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_4_set_low:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_POP_4_set_low1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_4_set_low [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_4_set_low1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_4_set_low1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_4_set_low]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<16 x s32>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<16 x s32>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.4.set.lo), %7:vregbank(<16 x s32>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<16 x s32>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z31test_sparse_pop_and_get_pointer_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z31test_sparse_pop_and_get_pointer_4
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_4_and_get_pointer:%[0-9]+]]:edn0, [[PSEUDO_VLD_SPARSE_POP_4_and_get_pointer1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_4_and_get_pointer [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_4_and_get_pointer1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_4_and_get_pointer1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_4_and_get_pointer]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<16 x s32>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<16 x s32>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.4.and.get.pointer), %7:vregbank(<16 x s32>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<16 x s32>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z25test_sparse_pop_insert_hi_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-LABEL: name: _Z25test_sparse_pop_insert_hi_4
    ; CHECK: liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY $q1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY2]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY]], %subreg.sub_sparse_x, [[COPY1]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_POP_4_insert_hi:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_POP_4_insert_hi1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_POP_4_insert_hi [[LDA_dms_lda_idx_imm]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_POP_4_insert_hi1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_POP_4_insert_hi1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_POP_4_insert_hi]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY5]], [[COPY2]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY3]]
    ; CHECK-NEXT: $q0 = COPY [[COPY4]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %4:vregbank(<16 x s32>) = COPY $x1
  %5:vregbank(s128) = COPY $q1
  %6:ptrregbank(p0) = COPY $p0
  %11:vregbank(<16 x s32>) = G_IMPLICIT_DEF
  %12:vregbank(s128) = G_IMPLICIT_DEF
  %7:ptrregbank(p0) = G_LOAD %6:ptrregbank(p0) :: (load (p0), align 4)
  %8:ptrregbank(p0), %9:vregbank(<16 x s32>), %10:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.pop.4.insert.hi), %11:vregbank(<16 x s32>), %12:vregbank(s128), %4:vregbank(<16 x s32>), %5:vregbank(s128), %7:ptrregbank(p0)
  G_STORE %8:ptrregbank(p0), %6:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %9:vregbank(<16 x s32>)
  $q0 = COPY %10:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z22test_sparse_peek_set_lo_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: _Z22test_sparse_peek_set_lo_4
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_4_set_low:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_PEEK_4_set_low1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_4_set_low [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_set_low1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_set_low1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_set_low]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<16 x s32>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<16 x s32>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.4.set.lo), %7:vregbank(<16 x s32>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<16 x s32>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z31test_sparse_peek_and_get_pointer_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z31test_sparse_peek_and_get_pointer_4
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_4_and_get_pointer:%[0-9]+]]:edn0, [[PSEUDO_VLD_SPARSE_PEEK_4_and_get_pointer1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_4_and_get_pointer [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_and_get_pointer1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_and_get_pointer1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_and_get_pointer]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY3]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: $q0 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %2:ptrregbank(p0) = COPY $p0
  %7:vregbank(<16 x s32>) = G_IMPLICIT_DEF
  %8:vregbank(s128) = G_IMPLICIT_DEF
  %3:ptrregbank(p0) = G_LOAD %2:ptrregbank(p0) :: (load (p0), align 4)
  %4:ptrregbank(p0), %5:vregbank(<16 x s32>), %6:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.4.and.get.pointer), %7:vregbank(<16 x s32>), %8:vregbank(s128), %3:ptrregbank(p0)
  G_STORE %4:ptrregbank(p0), %2:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %5:vregbank(<16 x s32>)
  $q0 = COPY %6:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...

---
name:            _Z25test_sparse_peek_insert_hi_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-LABEL: name: _Z25test_sparse_peek_insert_hi_4
    ; CHECK: liveins: $p0, $q1, $q2, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY $q1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY2]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY]], %subreg.sub_sparse_x, [[COPY1]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[PSEUDO_VLD_SPARSE_PEEK_4_insert_hi:%[0-9]+]]:ep, [[PSEUDO_VLD_SPARSE_PEEK_4_insert_hi1:%[0-9]+]]:sparsevec640 = PSEUDO_VLD_SPARSE_PEEK_4_insert_hi [[LDA_dms_lda_idx_imm]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_insert_hi1]].sub_sparse_x
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec128 = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_insert_hi1]].sub_sparse_q
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:ep_as_32bit = COPY [[PSEUDO_VLD_SPARSE_PEEK_4_insert_hi]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY5]], [[COPY2]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: $x0 = COPY [[COPY3]]
    ; CHECK-NEXT: $q0 = COPY [[COPY4]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0, implicit $q0
  %4:vregbank(<16 x s32>) = COPY $x1
  %5:vregbank(s128) = COPY $q1
  %6:ptrregbank(p0) = COPY $p0
  %11:vregbank(<16 x s32>) = G_IMPLICIT_DEF
  %12:vregbank(s128) = G_IMPLICIT_DEF
  %7:ptrregbank(p0) = G_LOAD %6:ptrregbank(p0) :: (load (p0), align 4)
  %8:ptrregbank(p0), %9:vregbank(<16 x s32>), %10:vregbank(s128) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.peek.4.insert.hi), %11:vregbank(<16 x s32>), %12:vregbank(s128), %4:vregbank(<16 x s32>), %5:vregbank(s128), %7:ptrregbank(p0)
  G_STORE %8:ptrregbank(p0), %6:ptrregbank(p0) :: (store (p0), align 4)
  $x0 = COPY %9:vregbank(<16 x s32>)
  $q0 = COPY %10:vregbank(s128)
  PseudoRET implicit $lr, implicit $x0, implicit $q0
...


---
name:            _Z17test_sparse_reset_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z17test_sparse_reset_4
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (dereferenceable load (p0), align 4)
    ; CHECK-NEXT: [[VLDB_SPARSE_RESET_4_:%[0-9]+]]:ep = VLDB_SPARSE_RESET_4 [[LDA_dms_lda_idx_imm]], implicit-def $srsparse_of, implicit-def $dp, implicit $dp
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = COPY [[VLDB_SPARSE_RESET_4_]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY1]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr
  %0:ptrregbank(p0) = COPY $p0
  %1:ptrregbank(p0) = G_LOAD %0:ptrregbank(p0) :: (dereferenceable load (p0), align 4)
  %2:ptrregbank(p0) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.reset.4), %1:ptrregbank(p0)
  G_STORE %2:ptrregbank(p0), %0:ptrregbank(p0) :: (store (p0), align 4)
  PseudoRET implicit $lr
...

---
name:            _Z17test_sparse_fill_4
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $p0
    ; CHECK-LABEL: name: _Z17test_sparse_fill_4
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (dereferenceable load (p0), align 4)
    ; CHECK-NEXT: [[VLDB_SPARSE_FILL_4_:%[0-9]+]]:ep = VLDB_SPARSE_FILL_4 [[LDA_dms_lda_idx_imm]], implicit-def $srsparse_of, implicit $dp
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = COPY [[VLDB_SPARSE_FILL_4_]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY1]], [[COPY]], 0 :: (store (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr
  %0:ptrregbank(p0) = COPY $p0
  %1:ptrregbank(p0) = G_LOAD %0:ptrregbank(p0) :: (dereferenceable load (p0), align 4)
  %2:ptrregbank(p0) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.sparse.fill.4), %1:ptrregbank(p0)
  G_STORE %2:ptrregbank(p0), %0:ptrregbank(p0) :: (store (p0), align 4)
  PseudoRET implicit $lr
...

