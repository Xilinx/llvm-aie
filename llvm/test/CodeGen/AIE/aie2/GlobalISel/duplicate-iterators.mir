# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=aie-post-select-optimize %s -o - | FileCheck %s
# RUN: llc -mtriple aie2 -start-before=aie-post-select-optimize -stop-after=register-coalescer \
# RUN:      %s -o - | FileCheck %s -check-prefix=POST-COALESCER
# RUN: llc -mtriple aie2 -start-after=aie-post-select-optimize -stop-after=register-coalescer \
# RUN:      %s -o - | FileCheck %s -check-prefix=COALESCER

# POST-COALESCER represents the case where we apply the post-select optimization and we
# stop after the coalescer. This case shows the optimized version.
# COALESCER represents the case where we don't apply the post-select optimization and we
# stop after the coalescer. 

---
name:            two2d_descriptors
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: two2d_descriptors
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 10
  ; CHECK-NEXT:   [[PseudoMove:%[0-9]+]]:em = PseudoMove [[MOV_PD_imm10_pseudo]]
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 12
  ; CHECK-NEXT:   [[PseudoMove1:%[0-9]+]]:edn = PseudoMove [[MOV_PD_imm10_pseudo1]]
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 14
  ; CHECK-NEXT:   [[PseudoMove2:%[0-9]+]]:edj = PseudoMove [[MOV_PD_imm10_pseudo2]]
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 0
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 0
  ; CHECK-NEXT:   LoopStart [[COPY2]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:edc = PHI [[MOV_PD_imm10_pseudo3]], %bb.0, %9, %bb.1
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:edc = PHI [[MOV_PD_imm10_pseudo4]], %bb.0, %11, %bb.1
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:ep = PHI [[COPY]], %bb.0, %13, %bb.1
  ; CHECK-NEXT:   [[PHI3:%[0-9]+]]:ep = PHI [[COPY1]], %bb.0, %15, %bb.1
  ; CHECK-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[PseudoMove]], %subreg.sub_mod, [[PseudoMove1]], %subreg.sub_dim_size, [[PseudoMove2]], %subreg.sub_dim_stride, [[PHI]], %subreg.sub_dim_count
  ; CHECK-NEXT:   [[VLDA_2D_dmw_lda_w:%[0-9]+]]:ewl, [[VLDA_2D_dmw_lda_w1:%[0-9]+]]:ep, [[VLDA_2D_dmw_lda_w2:%[0-9]+]]:edc = VLDA_2D_dmw_lda_w [[PHI2]], [[REG_SEQUENCE]]
  ; CHECK-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_stride, [[PHI1]], %subreg.sub_dim_count
  ; CHECK-NEXT:   [[VST_2D_dmw_sts_w:%[0-9]+]]:ep, [[VST_2D_dmw_sts_w1:%[0-9]+]]:edc = VST_2D_dmw_sts_w [[VLDA_2D_dmw_lda_w]], [[PHI3]], [[REG_SEQUENCE1]]
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ;
  ; POST-COALESCER-LABEL: name: two2d_descriptors
  ; POST-COALESCER: bb.0.entry:
  ; POST-COALESCER-NEXT:   successors: %bb.1(0x80000000)
  ; POST-COALESCER-NEXT:   liveins: $p0, $p1, $r0
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT:   [[COPY:%[0-9]+]]:ep_as_32bit = COPY $p0
  ; POST-COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit = COPY $p1
  ; POST-COALESCER-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; POST-COALESCER-NEXT:   undef [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_mod:ed = MOV_PD_imm10_pseudo 10
  ; POST-COALESCER-NEXT:   undef [[PseudoMove:%[0-9]+]].sub_mod:ed = PseudoMove [[MOV_PD_imm10_pseudo]].sub_mod
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_size:ed = MOV_PD_imm10_pseudo 12
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_dim_size:ed = PseudoMove [[MOV_PD_imm10_pseudo]].sub_dim_size
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_stride:ed = MOV_PD_imm10_pseudo 14
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_dim_stride:ed = PseudoMove [[MOV_PD_imm10_pseudo]].sub_dim_stride
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_dim_count:ed = MOV_PD_imm10_pseudo 0
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:ed = MOV_PD_imm10_pseudo 0
  ; POST-COALESCER-NEXT:   LoopStart [[COPY2]]
  ; POST-COALESCER-NEXT:   PseudoJ_jump_imm %bb.1
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT: bb.1:
  ; POST-COALESCER-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT:   [[VLDA_2D_dmw_lda_w:%[0-9]+]]:ewl, [[COPY:%[0-9]+]]:ep_as_32bit, [[PseudoMove:%[0-9]+]].sub_dim_count:ed = VLDA_2D_dmw_lda_w [[COPY]], [[PseudoMove]]
  ; POST-COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit, [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:ed = VST_2D_dmw_sts_w [[VLDA_2D_dmw_lda_w]], [[COPY1]], [[MOV_PD_imm10_pseudo]]
  ; POST-COALESCER-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
  ; POST-COALESCER-NEXT:   PseudoJ_jump_imm %bb.2
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT: bb.2:
  ; POST-COALESCER-NEXT:   PseudoRET implicit $lr
  ;
  ; COALESCER-LABEL: name: two2d_descriptors
  ; COALESCER: bb.0.entry:
  ; COALESCER-NEXT:   successors: %bb.1(0x80000000)
  ; COALESCER-NEXT:   liveins: $p0, $p1, $r0
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT:   [[COPY:%[0-9]+]]:ep_as_32bit = COPY $p0
  ; COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit = COPY $p1
  ; COALESCER-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; COALESCER-NEXT:   undef [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_mod:ed = MOV_PD_imm10_pseudo 10
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_size:ed = MOV_PD_imm10_pseudo 12
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_stride:ed = MOV_PD_imm10_pseudo 14
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:ed = MOV_PD_imm10_pseudo 0
  ; COALESCER-NEXT:   undef [[MOV_PD_imm10_pseudo1:%[0-9]+]].sub_dim_count:ed = MOV_PD_imm10_pseudo 0
  ; COALESCER-NEXT:   LoopStart [[COPY2]]
  ; COALESCER-NEXT:   PseudoJ_jump_imm %bb.1
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT: bb.1:
  ; COALESCER-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT:   [[VLDA_2D_dmw_lda_w:%[0-9]+]]:ewl, [[COPY:%[0-9]+]]:ep_as_32bit, [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:ed = VLDA_2D_dmw_lda_w [[COPY]], [[MOV_PD_imm10_pseudo]]
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo1:%[0-9]+]].sub_mod:ed = COPY [[MOV_PD_imm10_pseudo]].sub_mod
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo1:%[0-9]+]].sub_dim_size:ed = COPY [[MOV_PD_imm10_pseudo]].sub_dim_size
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo1:%[0-9]+]].sub_dim_stride:ed = COPY [[MOV_PD_imm10_pseudo]].sub_dim_stride
  ; COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit, [[MOV_PD_imm10_pseudo1:%[0-9]+]].sub_dim_count:ed = VST_2D_dmw_sts_w [[VLDA_2D_dmw_lda_w]], [[COPY1]], [[MOV_PD_imm10_pseudo1]]
  ; COALESCER-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
  ; COALESCER-NEXT:   PseudoJ_jump_imm %bb.2
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT: bb.2:
  ; COALESCER-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1(0x30000000)
  liveins: $p0, $p1, $r0
    %0:ep = COPY $p0
    %1:ep = COPY $p1
    %14:er = COPY $r0
    %2:em = MOV_PD_imm10_pseudo 10
    %3:edn = MOV_PD_imm10_pseudo 12
    %4:edj = MOV_PD_imm10_pseudo 14
    %5:edc = MOV_PD_imm10_pseudo 0
    %6:edc = MOV_PD_imm10_pseudo 0
    LoopStart %14
    PseudoJ_jump_imm %bb.1

  bb.1:
  successors: %bb.1(0x30000000), %bb.2(0x50000000)
    %15:edc = PHI %5, %bb.0, %10, %bb.1
    %16:edc = PHI %6, %bb.0, %13, %bb.1
    %17:ep = PHI %0, %bb.0, %9, %bb.1
    %18:ep = PHI %1, %bb.0, %12, %bb.1
    %7:ed = REG_SEQUENCE %2, %subreg.sub_mod, %3, %subreg.sub_dim_size, %4, %subreg.sub_dim_stride, %15, %subreg.sub_dim_count
    %8:ewl, %9:ep, %10:edc = VLDA_2D_dmw_lda_w %17, %7
    %11:ed = REG_SEQUENCE %2, %subreg.sub_mod, %3, %subreg.sub_dim_size, %4, %subreg.sub_dim_stride, %16, %subreg.sub_dim_count
    %12:ep, %13:edc = VST_2D_dmw_sts_w %8, %18, %11
    PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
    PseudoJ_jump_imm %bb.2

  bb.2:
    PseudoRET implicit $lr
...

---
name:            two3d_descriptors
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: two3d_descriptors
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 10
  ; CHECK-NEXT:   [[PseudoMove:%[0-9]+]]:em = PseudoMove [[MOV_PD_imm10_pseudo]]
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 12
  ; CHECK-NEXT:   [[PseudoMove1:%[0-9]+]]:edn = PseudoMove [[MOV_PD_imm10_pseudo1]]
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 14
  ; CHECK-NEXT:   [[PseudoMove2:%[0-9]+]]:edj = PseudoMove [[MOV_PD_imm10_pseudo2]]
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 0
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 0
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 0
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 0
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo7:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 16
  ; CHECK-NEXT:   [[PseudoMove3:%[0-9]+]]:edn = PseudoMove [[MOV_PD_imm10_pseudo7]]
  ; CHECK-NEXT:   [[MOV_PD_imm10_pseudo8:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 18
  ; CHECK-NEXT:   [[PseudoMove4:%[0-9]+]]:edj = PseudoMove [[MOV_PD_imm10_pseudo8]]
  ; CHECK-NEXT:   LoopStart [[COPY2]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:edc = PHI [[MOV_PD_imm10_pseudo3]], %bb.0, %13, %bb.1
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:edc = PHI [[MOV_PD_imm10_pseudo4]], %bb.0, %15, %bb.1
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:edc = PHI [[MOV_PD_imm10_pseudo5]], %bb.0, %VAL, %bb.1
  ; CHECK-NEXT:   [[PHI3:%[0-9]+]]:edc = PHI [[MOV_PD_imm10_pseudo6]], %bb.0, %VAL2, %bb.1
  ; CHECK-NEXT:   [[PHI4:%[0-9]+]]:ep = PHI [[COPY]], %bb.0, %21, %bb.1
  ; CHECK-NEXT:   [[PHI5:%[0-9]+]]:ep = PHI [[COPY1]], %bb.0, %23, %bb.1
  ; CHECK-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[PseudoMove]], %subreg.sub_mod, [[PseudoMove1]], %subreg.sub_dim_size, [[PseudoMove2]], %subreg.sub_dim_stride, [[PHI]], %subreg.sub_dim_count, [[PseudoMove3]], %subreg.sub_hi_dim_then_sub_dim_size, [[PseudoMove4]], %subreg.sub_hi_dim_then_sub_dim_stride, [[PHI1]], %subreg.sub_hi_dim_then_sub_dim_count
  ; CHECK-NEXT:   %25:ewl, %21:ep, %13:edc, %VAL:edc = VLDA_3D_dmw_lda_w [[PHI4]], [[REG_SEQUENCE]]
  ; CHECK-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_stride, [[PHI2]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo7]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo8]], %subreg.sub_hi_dim_then_sub_dim_stride, [[PHI3]], %subreg.sub_hi_dim_then_sub_dim_count
  ; CHECK-NEXT:   %23:ep, %15:edc, %VAL2:edc = VST_3D_dmw_sts_w %25, [[PHI5]], [[REG_SEQUENCE1]]
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ;
  ; POST-COALESCER-LABEL: name: two3d_descriptors
  ; POST-COALESCER: bb.0.entry:
  ; POST-COALESCER-NEXT:   successors: %bb.1(0x80000000)
  ; POST-COALESCER-NEXT:   liveins: $p0, $p1, $r0
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT:   [[COPY:%[0-9]+]]:ep_as_32bit = COPY $p0
  ; POST-COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit = COPY $p1
  ; POST-COALESCER-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; POST-COALESCER-NEXT:   undef [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_mod:eds = MOV_PD_imm10_pseudo 10
  ; POST-COALESCER-NEXT:   undef [[PseudoMove:%[0-9]+]].sub_mod:eds = PseudoMove [[MOV_PD_imm10_pseudo]].sub_mod
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_size:eds = MOV_PD_imm10_pseudo 12
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_dim_size:eds = PseudoMove [[MOV_PD_imm10_pseudo]].sub_dim_size
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_stride:eds = MOV_PD_imm10_pseudo 14
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_dim_stride:eds = PseudoMove [[MOV_PD_imm10_pseudo]].sub_dim_stride
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_dim_count:eds = MOV_PD_imm10_pseudo 0
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = MOV_PD_imm10_pseudo 0
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:eds = MOV_PD_imm10_pseudo 0
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = MOV_PD_imm10_pseudo 0
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_size:eds = MOV_PD_imm10_pseudo 16
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_hi_dim_then_sub_dim_size:eds = PseudoMove [[MOV_PD_imm10_pseudo]].sub_hi_dim_then_sub_dim_size
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_stride:eds = MOV_PD_imm10_pseudo 18
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_hi_dim_then_sub_dim_stride:eds = PseudoMove [[MOV_PD_imm10_pseudo]].sub_hi_dim_then_sub_dim_stride
  ; POST-COALESCER-NEXT:   LoopStart [[COPY2]]
  ; POST-COALESCER-NEXT:   PseudoJ_jump_imm %bb.1
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT: bb.1:
  ; POST-COALESCER-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT:   [[COPY3:%[0-9]+]]:eds = COPY [[PseudoMove]]
  ; POST-COALESCER-NEXT:   [[VLDA_3D_dmw_lda_w:%[0-9]+]]:ewl, [[COPY:%[0-9]+]]:ep_as_32bit, [[COPY3:%[0-9]+]].sub_dim_count:eds, [[COPY3:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w [[COPY]], [[COPY3]]
  ; POST-COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit, [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:eds, [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_dmw_sts_w [[VLDA_3D_dmw_lda_w]], [[COPY1]], [[MOV_PD_imm10_pseudo]]
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_dim_count:eds = COPY [[COPY3]].sub_dim_count
  ; POST-COALESCER-NEXT:   [[PseudoMove:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = COPY [[MOV_PD_imm10_pseudo]].sub_dim_count
  ; POST-COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:eds = COPY [[COPY3]].sub_hi_dim_then_sub_dim_count
  ; POST-COALESCER-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
  ; POST-COALESCER-NEXT:   PseudoJ_jump_imm %bb.2
  ; POST-COALESCER-NEXT: {{  $}}
  ; POST-COALESCER-NEXT: bb.2:
  ; POST-COALESCER-NEXT:   PseudoRET implicit $lr
  ;
  ; COALESCER-LABEL: name: two3d_descriptors
  ; COALESCER: bb.0.entry:
  ; COALESCER-NEXT:   successors: %bb.1(0x80000000)
  ; COALESCER-NEXT:   liveins: $p0, $p1, $r0
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT:   [[COPY:%[0-9]+]]:ep_as_32bit = COPY $p0
  ; COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit = COPY $p1
  ; COALESCER-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; COALESCER-NEXT:   undef [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_mod:eds = MOV_PD_imm10_pseudo 10
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_size:eds = MOV_PD_imm10_pseudo 12
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_stride:eds = MOV_PD_imm10_pseudo 14
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:eds = MOV_PD_imm10_pseudo 0
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = MOV_PD_imm10_pseudo 0
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edc_as_32bit = MOV_PD_imm10_pseudo 0
  ; COALESCER-NEXT:   undef [[MOV_PD_imm10_pseudo2:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = MOV_PD_imm10_pseudo 0
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_size:eds = MOV_PD_imm10_pseudo 16
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_stride:eds = MOV_PD_imm10_pseudo 18
  ; COALESCER-NEXT:   LoopStart [[COPY2]]
  ; COALESCER-NEXT:   PseudoJ_jump_imm %bb.1
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT: bb.1:
  ; COALESCER-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT:   [[COPY3:%[0-9]+]]:eds = COPY [[MOV_PD_imm10_pseudo]]
  ; COALESCER-NEXT:   [[VLDA_3D_dmw_lda_w:%[0-9]+]]:ewl, [[COPY:%[0-9]+]]:ep_as_32bit, [[COPY3:%[0-9]+]].sub_dim_count:eds, [[COPY3:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_dmw_lda_w [[COPY]], [[COPY3]]
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:eds = COPY [[MOV_PD_imm10_pseudo1]]
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = COPY [[MOV_PD_imm10_pseudo2]].sub_hi_dim_then_sub_dim_count
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo2:%[0-9]+]]:eds = COPY [[MOV_PD_imm10_pseudo]]
  ; COALESCER-NEXT:   [[COPY1:%[0-9]+]]:ep_as_32bit, [[MOV_PD_imm10_pseudo2:%[0-9]+]].sub_dim_count:eds, [[MOV_PD_imm10_pseudo2:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VST_3D_dmw_sts_w [[VLDA_3D_dmw_lda_w]], [[COPY1]], [[MOV_PD_imm10_pseudo2]]
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_dim_count:eds = COPY [[COPY3]].sub_dim_count
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = COPY [[MOV_PD_imm10_pseudo2]].sub_dim_count
  ; COALESCER-NEXT:   [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edc_as_32bit = COPY [[COPY3]].sub_hi_dim_then_sub_dim_count
  ; COALESCER-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
  ; COALESCER-NEXT:   PseudoJ_jump_imm %bb.2
  ; COALESCER-NEXT: {{  $}}
  ; COALESCER-NEXT: bb.2:
  ; COALESCER-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
  successors: %bb.1(0x30000000)
  liveins: $p0, $p1, $r0
    %0:ep = COPY $p0
    %1:ep = COPY $p1
    %18:er = COPY $r0
    %2:em = MOV_PD_imm10_pseudo 10
    %3:edn = MOV_PD_imm10_pseudo 12
    %4:edj = MOV_PD_imm10_pseudo 14
    %5:edc = MOV_PD_imm10_pseudo 0
    %6:edc = MOV_PD_imm10_pseudo 0
    %14:edc = MOV_PD_imm10_pseudo 0
    %15:edc = MOV_PD_imm10_pseudo 0
    %16:edn = MOV_PD_imm10_pseudo 16
    %17:edj = MOV_PD_imm10_pseudo 18
    LoopStart %18
    PseudoJ_jump_imm %bb.1

  bb.1:
  successors: %bb.1(0x30000000), %bb.2(0x50000000)
    %19:edc = PHI %5, %bb.0, %10, %bb.1
    %20:edc = PHI %6, %bb.0, %13, %bb.1
    %21:edc = PHI %14, %bb.0, %VAL, %bb.1
    %22:edc = PHI %15, %bb.0, %VAL2, %bb.1
    %23:ep = PHI %0, %bb.0, %9, %bb.1
    %24:ep = PHI %1, %bb.0, %12, %bb.1
    %7:eds = REG_SEQUENCE %2, %subreg.sub_mod, %3, %subreg.sub_dim_size, %4, %subreg.sub_dim_stride, %19, %subreg.sub_dim_count, %16, %subreg.sub_hi_dim_then_sub_dim_size, %17, %subreg.sub_hi_dim_then_sub_dim_stride, %20, %subreg.sub_hi_dim_then_sub_dim_count
    %8:ewl, %9:ep, %10:edc, %VAL:edc = VLDA_3D_dmw_lda_w %23, %7
    %11:eds = REG_SEQUENCE %2, %subreg.sub_mod, %3, %subreg.sub_dim_size, %4, %subreg.sub_dim_stride, %21, %subreg.sub_dim_count, %16, %subreg.sub_hi_dim_then_sub_dim_size, %17, %subreg.sub_hi_dim_then_sub_dim_stride, %22, %subreg.sub_hi_dim_then_sub_dim_count
    %12:ep, %13:edc, %VAL2:edc = VST_3D_dmw_sts_w %8, %24, %11

    PseudoLoopEnd <mcsymbol .L_LEnd11>, %bb.1
    PseudoJ_jump_imm %bb.2

  bb.2:
    PseudoRET implicit $lr
...
