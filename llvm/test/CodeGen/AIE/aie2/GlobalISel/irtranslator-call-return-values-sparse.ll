; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

%struct.v128int8_sparse = type <{ <64 x i8>, i128 }>
%struct.v128uint8_sparse = type <{ <64 x i8>, i128 }>
%struct.v64int16_sparse = type <{ <32 x i16>, i128 }>
%struct.v64uint16_sparse = type <{ <32 x i16>, i128 }>
%struct.v256int4_sparse = type <{ <64 x i8>, i128 }>
%struct.v256uint4_sparse = type <{ <64 x i8>, i128 }>
%struct.v64bfloat16_sparse = type <{ <32 x bfloat>, i128 }>

declare %struct.v128int8_sparse @callee_v128int8_sparse()
define void @call_v128int8_sparse() {
  ; CHECK-LABEL: name: call_v128int8_sparse
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoJL @callee_v128int8_sparse, csr_aie2, implicit-def $lr, implicit-def $x0, implicit-def $q0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call %struct.v128int8_sparse @callee_v128int8_sparse()
  ret void
}

declare %struct.v128uint8_sparse @callee_v128uint8_sparse()
define void @call_v128uint8_sparse() {
  ; CHECK-LABEL: name: call_v128uint8_sparse
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoJL @callee_v128uint8_sparse, csr_aie2, implicit-def $lr, implicit-def $x0, implicit-def $q0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call %struct.v128uint8_sparse @callee_v128uint8_sparse()
  ret void
}

declare %struct.v64int16_sparse @callee_v64int16_sparse()
define void @call_v64int16_sparse() {
  ; CHECK-LABEL: name: call_v64int16_sparse
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoJL @callee_v64int16_sparse, csr_aie2, implicit-def $lr, implicit-def $x0, implicit-def $q0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call %struct.v64int16_sparse @callee_v64int16_sparse()
  ret void
}

declare %struct.v64uint16_sparse @callee_v64uint16_sparse()
define void @call_v64uint16_sparse() {
  ; CHECK-LABEL: name: call_v64uint16_sparse
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoJL @callee_v64uint16_sparse, csr_aie2, implicit-def $lr, implicit-def $x0, implicit-def $q0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call %struct.v64uint16_sparse @callee_v64uint16_sparse()
  ret void
}

declare %struct.v256int4_sparse @callee_v256int4_sparse()
define void @call_v256int4_sparse() {
  ; CHECK-LABEL: name: call_v256int4_sparse
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoJL @callee_v256int4_sparse, csr_aie2, implicit-def $lr, implicit-def $x0, implicit-def $q0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call %struct.v256int4_sparse @callee_v256int4_sparse()
  ret void
}

declare %struct.v256uint4_sparse @callee_v256uint4_sparse()
define void @call_v256uint4_sparse() {
  ; CHECK-LABEL: name: call_v256uint4_sparse
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoJL @callee_v256uint4_sparse, csr_aie2, implicit-def $lr, implicit-def $x0, implicit-def $q0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call %struct.v256uint4_sparse @callee_v256uint4_sparse()
  ret void
}

declare %struct.v64bfloat16_sparse @callee_v64bfloat16_sparse()
define void @call_v64bfloat16_sparse() {
  ; CHECK-LABEL: name: call_v64bfloat16_sparse
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoJL @callee_v64bfloat16_sparse, csr_aie2, implicit-def $lr, implicit-def $x0, implicit-def $q0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call %struct.v64bfloat16_sparse @callee_v64bfloat16_sparse()
  ret void
}
