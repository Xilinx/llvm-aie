# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select -o - -verify-machineinstrs %s | FileCheck %s

---
name: post-inc-3d-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda:%[0-9]+]]:er, [[LDA_3D_dms_lda1:%[0-9]+]]:ep, [[LDA_3D_dms_lda2:%[0-9]+]]:edc, [[LDA_3D_dms_lda3:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s32))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_3D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(s32), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s32))
    PseudoRET implicit $lr, implicit %8
...

---
name: post-inc-3d-load-ext-s8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load-ext-s8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_S8_dmhb_lda:%[0-9]+]]:er, [[LDA_3D_S8_dmhb_lda1:%[0-9]+]]:ep, [[LDA_3D_S8_dmhb_lda2:%[0-9]+]]:edc, [[LDA_3D_S8_dmhb_lda3:%[0-9]+]]:edc = LDA_3D_S8_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s8))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_3D_S8_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(s32), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s8), align 1)
    PseudoRET implicit $lr, implicit %8
...

---
name: post-inc-3d-load-ext-s16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load-ext-s16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_S16_dmhb_lda:%[0-9]+]]:er, [[LDA_3D_S16_dmhb_lda1:%[0-9]+]]:ep, [[LDA_3D_S16_dmhb_lda2:%[0-9]+]]:edc, [[LDA_3D_S16_dmhb_lda3:%[0-9]+]]:edc = LDA_3D_S16_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s16), align 1)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_3D_S16_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(s32), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s16), align 1)
    PseudoRET implicit $lr, implicit %8
...

---
name: post-inc-3d-hbsext-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-hbsext-load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo3]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count, [[COPY4]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY1]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_S16_dmhb_lda:%[0-9]+]]:er, [[LDA_3D_S16_dmhb_lda1:%[0-9]+]]:ep, [[LDA_3D_S16_dmhb_lda2:%[0-9]+]]:edc, [[LDA_3D_S16_dmhb_lda3:%[0-9]+]]:edc = LDA_3D_S16_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s16))
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo2]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo3]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY6]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY7]], %subreg.sub_dim_count, [[COPY8]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY5]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_S8_dmhb_lda:%[0-9]+]]:er, [[LDA_3D_S8_dmhb_lda1:%[0-9]+]]:ep, [[LDA_3D_S8_dmhb_lda2:%[0-9]+]]:edc, [[LDA_3D_S8_dmhb_lda3:%[0-9]+]]:edc = LDA_3D_S8_dmhb_lda [[COPY]], [[REG_SEQUENCE1]] :: (load (s8))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_3D_S16_dmhb_lda]], implicit [[LDA_3D_S8_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(s32), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_SEXTLOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s16))
    %12:gprregbank(s32), %13:ptrregbank(p0), %14:modregbank(s20), %15:modregbank(s20) = G_AIE_POSTINC_3D_SEXTLOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s8))
    PseudoRET implicit $lr, implicit %8, implicit %12
...

---
name: post-inc-3d-hbzext-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-hbzext-load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo3]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count, [[COPY4]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY1]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_U16_dmhb_lda:%[0-9]+]]:er, [[LDA_3D_U16_dmhb_lda1:%[0-9]+]]:ep, [[LDA_3D_U16_dmhb_lda2:%[0-9]+]]:edc, [[LDA_3D_U16_dmhb_lda3:%[0-9]+]]:edc = LDA_3D_U16_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s16))
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo2]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo3]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY6]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY7]], %subreg.sub_dim_count, [[COPY8]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY5]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_U8_dmhb_lda:%[0-9]+]]:er, [[LDA_3D_U8_dmhb_lda1:%[0-9]+]]:ep, [[LDA_3D_U8_dmhb_lda2:%[0-9]+]]:edc, [[LDA_3D_U8_dmhb_lda3:%[0-9]+]]:edc = LDA_3D_U8_dmhb_lda [[COPY]], [[REG_SEQUENCE1]] :: (load (s8))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_3D_U16_dmhb_lda]], implicit [[LDA_3D_U8_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(s32), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_ZEXTLOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s16))
    %12:gprregbank(s32), %13:ptrregbank(p0), %14:modregbank(s20), %15:modregbank(s20) = G_AIE_POSTINC_3D_ZEXTLOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s8))
    PseudoRET implicit $lr, implicit %8, implicit %12
...

---
name: post-inc-3d-load-p0-ptr
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load-p0-ptr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda:%[0-9]+]]:ep_as_32bit, [[LDA_3D_dms_lda1:%[0-9]+]]:ep, [[LDA_3D_dms_lda2:%[0-9]+]]:edc, [[LDA_3D_dms_lda3:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_3D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:ptrregbank(p0), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (p0), align 4)
    $p0 = COPY %8
...

---
name: post-inc-3d-load-p0-as-32bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load-p0-as-32bits
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda:%[0-9]+]]:ep_as_32bit, [[LDA_3D_dms_lda1:%[0-9]+]]:ep, [[LDA_3D_dms_lda2:%[0-9]+]]:edc, [[LDA_3D_dms_lda3:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_3D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:ep_as_32bit(p0), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (p0), align 4)
    $p0 = COPY %8
...
---
name: post-inc-3d-load-p0-gpr
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load-p0-gpr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda:%[0-9]+]]:er, [[LDA_3D_dms_lda1:%[0-9]+]]:ep, [[LDA_3D_dms_lda2:%[0-9]+]]:edc, [[LDA_3D_dms_lda3:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_3D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(p0), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (p0), align 4)
    $p0 = COPY %8
...
---
name: post-inc-3d-load-s20-gpr
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load-s20-gpr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda:%[0-9]+]]:er, [[LDA_3D_dms_lda1:%[0-9]+]]:ep, [[LDA_3D_dms_lda2:%[0-9]+]]:edc, [[LDA_3D_dms_lda3:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s20), align 4)
    ; CHECK-NEXT: $m0 = COPY [[LDA_3D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(s20), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s20), align 4)
    $m0 = COPY %8
...

---
name: post-inc-3d-load-s20
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-load-s20
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY1]], %subreg.sub_dim_count, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda:%[0-9]+]]:mdm_as_32bit, [[LDA_3D_dms_lda1:%[0-9]+]]:ep, [[LDA_3D_dms_lda2:%[0-9]+]]:edc, [[LDA_3D_dms_lda3:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s20), align 4)
    ; CHECK-NEXT: $m0 = COPY [[LDA_3D_dms_lda]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count, [[COPY4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda4:%[0-9]+]]:edc_as_32bit, [[LDA_3D_dms_lda5:%[0-9]+]]:ep, [[LDA_3D_dms_lda6:%[0-9]+]]:edc, [[LDA_3D_dms_lda7:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE1]] :: (load (s20), align 4)
    ; CHECK-NEXT: $dc0 = COPY [[LDA_3D_dms_lda4]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE2:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY5]], %subreg.sub_dim_count, [[COPY6]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda8:%[0-9]+]]:edj_as_32bit, [[LDA_3D_dms_lda9:%[0-9]+]]:ep, [[LDA_3D_dms_lda10:%[0-9]+]]:edc, [[LDA_3D_dms_lda11:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE2]] :: (load (s20), align 4)
    ; CHECK-NEXT: $dj0 = COPY [[LDA_3D_dms_lda8]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE3:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY7]], %subreg.sub_dim_count, [[COPY8]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda12:%[0-9]+]]:edn_as_32bit, [[LDA_3D_dms_lda13:%[0-9]+]]:ep, [[LDA_3D_dms_lda14:%[0-9]+]]:edc, [[LDA_3D_dms_lda15:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE3]] :: (load (s20), align 4)
    ; CHECK-NEXT: $dn0 = COPY [[LDA_3D_dms_lda12]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo4]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo5]]
    ; CHECK-NEXT: [[REG_SEQUENCE4:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[COPY9]], %subreg.sub_dim_count, [[COPY10]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[LDA_3D_dms_lda16:%[0-9]+]]:em_as_32bit, [[LDA_3D_dms_lda17:%[0-9]+]]:ep, [[LDA_3D_dms_lda18:%[0-9]+]]:edc, [[LDA_3D_dms_lda19:%[0-9]+]]:edc = LDA_3D_dms_lda [[COPY]], [[REG_SEQUENCE4]] :: (load (s20), align 4)
    ; CHECK-NEXT: $m0 = COPY [[LDA_3D_dms_lda16]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:modregbank(s20), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s20), align 4)
    $m0 = COPY %8
    %80:edc(s20), %90:ptrregbank(p0), %100:modregbank(s20), %110:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s20), align 4)
    $dc0 = COPY %80
    %81:edj(s20), %91:ptrregbank(p0), %101:modregbank(s20), %111:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s20), align 4)
    $dj0 = COPY %81
    %82:edn(s20), %92:ptrregbank(p0), %102:modregbank(s20), %112:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s20), align 4)
    $dn0 = COPY %82
    %83:em(s20), %93:ptrregbank(p0), %103:modregbank(s20), %113:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %5, %6, %7 :: (load (s20), align 4)
    $m0 = COPY %83
...
