# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select -o - -verify-machineinstrs %s | FileCheck %s

---
name: post-inc-vector-load-w
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-load-w
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], 0 :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_pstm_pseudo2:%[0-9]+]]:vec256, [[VLD_pstm_pseudo3:%[0-9]+]]:ep = VLD_pstm_pseudo [[VLD_pstm_imm_4x32_pseudo1]], [[MOV_PD_imm10_pseudo]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLD_pstm_pseudo3]], -2048 :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm2:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm3:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1]], 2016 :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_pstm_pseudo4:%[0-9]+]]:vec256, [[VLD_pstm_pseudo5:%[0-9]+]]:ep = VLD_pstm_pseudo [[VLDA_dmw_lda_w_ag_pstm_nrm_imm3]], [[MOVXM_lng_cg]] :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLD_pstm_pseudo4]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s16>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s16>))
    %15:vregbank(<16 x s16>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<16 x s16>))
    %16:vregbank(<16 x s16>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<16 x s16>))
    %17:vregbank(<16 x s16>), %23:ptrregbank(p0) = G_AIE_POSTINC_LOAD %22, %11 :: (load (<16 x s16>))
    %18:vregbank(<16 x s16>), %24:ptrregbank(p0) = G_AIE_POSTINC_LOAD %23, %12 :: (load (<16 x s16>))
    PseudoRET implicit $lr, implicit %18
...

---
name: post-inc-vector-256-load-w_overMaxOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-256-load-w_overMaxOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLD_pstm_pseudo1]], 256 :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_dmw_lda_w_ag_pstm_nrm_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 256
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s16>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s16>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-256-load-w_belowMinOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-256-load-w_belowMinOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLD_pstm_pseudo1]], -288 :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_dmw_lda_w_ag_pstm_nrm_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 -288
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s16>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s16>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-256-load-w_atMaxOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-256-load-w_atMaxOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], 224 :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLD_pstm_imm_4x32_pseudo]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 224
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s16>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s16>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-256-load-w_atMinOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-256-load-w_atMinOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], -256 :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLD_pstm_imm_4x32_pseudo]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 -256
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s16>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s16>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-512-load-w_overMaxOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-512-load-w_overMaxOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo1]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLD_pstm_pseudo1]], 256 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_pstm_nrm_imm]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 256
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s32>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-512-load-w_belowMinOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-512-load-w_belowMinOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo1]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLD_pstm_pseudo1]], -288 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_pstm_nrm_imm]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 -288
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s32>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-512-load-w_atMaxOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-512-load-w_atMaxOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo1]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], 224 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_imm_4x32_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 224
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s32>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-512-load-w_atMinOffset_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-512-load-w_atMinOffset_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo1]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], -256 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_imm_4x32_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 -256
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s32>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-512-load-w_MaxOffset-32_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-512-load-w_MaxOffset-32_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo1]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], 192 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_imm_4x32_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 192
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s32>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-512-load-w_MinOffset-add-32_slotB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-512-load-w_MinOffset-add-32_slotB
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo1]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], -224 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_imm_4x32_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 -224
    %13:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    %14:vregbank(<16 x s32>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %14
...

---
name: post-inc-vector-load-am
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-load-am
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm1:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm [[COPY]], [[COPY2]] :: (load (<4 x s64>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm_imm:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm_imm [[VLDA_dmw_lda_am_ag_pstm_nrm1]], 0 :: (load (<4 x s64>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm2:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm3:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm1]], [[MOV_PD_imm10_pseudo]] :: (load (<4 x s64>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm_imm2:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm_imm3:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm_imm [[VLDA_dmw_lda_am_ag_pstm_nrm3]], -2048 :: (load (<4 x s64>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm_imm4:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm_imm5:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm_imm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm3]], 2016 :: (load (<4 x s64>))
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm4:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm5:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm5]], [[MOVXM_lng_cg]] :: (load (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_dmw_lda_am_ag_pstm_nrm4]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:accregbank(<4 x s64>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<4 x s64>))
    %14:accregbank(<4 x s64>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<4 x s64>))
    %15:accregbank(<4 x s64>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<4 x s64>))
    %16:accregbank(<4 x s64>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<4 x s64>))
    %17:accregbank(<4 x s64>), %23:ptrregbank(p0) = G_AIE_POSTINC_LOAD %22, %11 :: (load (<4 x s64>))
    %18:accregbank(<4 x s64>), %24:ptrregbank(p0) = G_AIE_POSTINC_LOAD %23, %12 :: (load (<4 x s64>))
    PseudoRET implicit $lr, implicit %18
...

---
name: post-inc-vector-store-w
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $wl0
    ; CHECK-LABEL: name: post-inc-vector-store-w
    ; CHECK: liveins: $p0, $r0, $r1, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm [[COPY3]], [[COPY]], [[COPY2]] :: (store (<8 x s32>))
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm_imm [[COPY3]], [[VST_dmw_sts_w_ag_pstm_nrm]], 0 :: (store (<8 x s32>))
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm1:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm [[COPY3]], [[VST_dmw_sts_w_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]] :: (store (<8 x s32>))
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm_imm [[COPY3]], [[VST_dmw_sts_w_ag_pstm_nrm1]], -2048 :: (store (<8 x s32>))
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm_imm [[COPY3]], [[VST_dmw_sts_w_ag_pstm_nrm_imm1]], 2016 :: (store (<8 x s32>))
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm2:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm [[COPY3]], [[VST_dmw_sts_w_ag_pstm_nrm_imm2]], [[MOVXM_lng_cg]] :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VST_dmw_sts_w_ag_pstm_nrm2]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:vregbank(<8 x s32>) = COPY $wl0
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %0, %7 :: (store (<8 x s32>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %19, %8 :: (store (<8 x s32>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %20, %9 :: (store (<8 x s32>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %21, %10 :: (store (<8 x s32>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %22, %11 :: (store (<8 x s32>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %23, %12 :: (store (<8 x s32>))
    PseudoRET implicit $lr, implicit %24
...

---
name: post-inc-vector-store-am
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: post-inc-vector-store-am
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm [[COPY3]], [[COPY]], [[COPY2]] :: (store (<4 x s64>))
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm_imm [[COPY3]], [[VST_dmw_sts_am_ag_pstm_nrm]], 0 :: (store (<4 x s64>))
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm1:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm [[COPY3]], [[VST_dmw_sts_am_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]] :: (store (<4 x s64>))
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm_imm [[COPY3]], [[VST_dmw_sts_am_ag_pstm_nrm1]], -2048 :: (store (<4 x s64>))
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm_imm [[COPY3]], [[VST_dmw_sts_am_ag_pstm_nrm_imm1]], 2016 :: (store (<4 x s64>))
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm2:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm [[COPY3]], [[VST_dmw_sts_am_ag_pstm_nrm_imm2]], [[MOVXM_lng_cg]] :: (store (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VST_dmw_sts_am_ag_pstm_nrm2]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:accregbank(<4 x s64>) = COPY $amll0
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %0, %7 :: (store (<4 x s64>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %19, %8 :: (store (<4 x s64>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %20, %9 :: (store (<4 x s64>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %21, %10 :: (store (<4 x s64>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %22, %11 :: (store (<4 x s64>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %23, %12 :: (store (<4 x s64>))
    PseudoRET implicit $lr, implicit %24
...

---
name: post-inc-vector-load-w-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-load-w-512
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], 32 :: (load (<8 x s32>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLD_pstm_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_pseudo1:%[0-9]+]]:ep = VLD_pstm_pseudo [[COPY]], [[COPY2]] :: (load (<8 x s32>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo1:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo1]], 32 :: (load (<8 x s32>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLD_pstm_imm_4x32_pseudo:%[0-9]+]]:vec256, [[VLD_pstm_imm_4x32_pseudo1:%[0-9]+]]:ep = VLD_pstm_imm_4x32_pseudo [[VLD_pstm_pseudo1]], 0 :: (load (<8 x s32>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_imm_4x32_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo1]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo2:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_imm_4x32_pseudo1]], 32 :: (load (<8 x s32>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLD_pstm_pseudo2:%[0-9]+]]:vec256, [[VLD_pstm_pseudo3:%[0-9]+]]:ep = VLD_pstm_pseudo [[VLD_pstm_imm_4x32_pseudo1]], [[MOV_PD_imm10_pseudo]] :: (load (<8 x s32>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE2:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_pseudo2]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo2]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo3:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLD_pstm_pseudo3]], 32 :: (load (<8 x s32>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLD_pstm_pseudo3]], -2048 :: (load (<8 x s32>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE3:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_pstm_nrm_imm]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo3]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo4:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1]], 32 :: (load (<8 x s32>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm_imm2:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm_imm3:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm_imm [[VLDA_dmw_lda_w_ag_pstm_nrm_imm1]], 2016 :: (load (<8 x s32>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE4:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_pstm_nrm_imm2]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo4]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo5:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[VLDA_dmw_lda_w_ag_pstm_nrm_imm3]], 32 :: (load (<8 x s32>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLD_pstm_pseudo4:%[0-9]+]]:vec256, [[VLD_pstm_pseudo5:%[0-9]+]]:ep = VLD_pstm_pseudo [[VLDA_dmw_lda_w_ag_pstm_nrm_imm3]], [[MOVXM_lng_cg]] :: (load (<8 x s32>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE5:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_pstm_pseudo4]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo5]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE5]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:vregbank(<16 x s32>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s32>) from stack - 64)
    %14:vregbank(<16 x s32>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<16 x s32>) from stack - 64)
    %15:vregbank(<16 x s32>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<16 x s32>) from stack - 64)
    %16:vregbank(<16 x s32>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<16 x s32>) from stack - 64)
    %17:vregbank(<16 x s32>), %23:ptrregbank(p0) = G_AIE_POSTINC_LOAD %22, %11 :: (load (<16 x s32>) from stack - 64)
    %18:vregbank(<16 x s32>), %24:ptrregbank(p0) = G_AIE_POSTINC_LOAD %23, %12 :: (load (<16 x s32>) from stack - 64)
    PseudoRET implicit $lr, implicit %18
...

---
name: post-inc-2d-vector-load-w
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-vector-load-w
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLD_2D_pseudo:%[0-9]+]]:vec256, [[VLD_2D_pseudo1:%[0-9]+]]:ep, [[VLD_2D_pseudo2:%[0-9]+]]:edc = VLD_2D_pseudo [[COPY]], [[REG_SEQUENCE]] :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLD_2D_pseudo]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:vregbank(<8 x s32>), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<8 x s32>))
    PseudoRET implicit $lr, implicit %5
...

---
name: post-inc-2d-vector-load-w-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-vector-load-w-512
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_2D_pseudo:%[0-9]+]]:vec256, [[VLD_2D_pseudo1:%[0-9]+]]:ep, [[VLD_2D_pseudo2:%[0-9]+]]:edc = VLD_2D_pseudo [[COPY]], [[REG_SEQUENCE]] :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_2D_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:vregbank(<16 x s32>), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %5
...

---
name: post-inc-vector-load-am-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: post-inc-vector-load-am-512
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 32 :: (load (<4 x s64>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm1:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm [[COPY]], [[COPY2]] :: (load (<4 x s64>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_pstm_nrm]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm1:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[VLDA_dmw_lda_am_ag_pstm_nrm1]], 32 :: (load (<4 x s64>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm_imm:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm_imm [[VLDA_dmw_lda_am_ag_pstm_nrm1]], 0 :: (load (<4 x s64>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_pstm_nrm_imm]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm1]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm2:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm1]], 32 :: (load (<4 x s64>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm2:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm3:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm1]], [[MOV_PD_imm10_pseudo]] :: (load (<4 x s64>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE2:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_pstm_nrm2]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm2]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm3:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[VLDA_dmw_lda_am_ag_pstm_nrm3]], 32 :: (load (<4 x s64>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm_imm2:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm_imm3:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm_imm [[VLDA_dmw_lda_am_ag_pstm_nrm3]], -2048 :: (load (<4 x s64>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE3:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_pstm_nrm_imm2]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm3]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm4:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm3]], 32 :: (load (<4 x s64>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm_imm4:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm_imm5:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm_imm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm3]], 2016 :: (load (<4 x s64>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE4:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_pstm_nrm_imm4]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm4]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm5:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm5]], 32 :: (load (<4 x s64>) from stack - 32, basealign 64)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_pstm_nrm4:%[0-9]+]]:acc256, [[VLDA_dmw_lda_am_ag_pstm_nrm5:%[0-9]+]]:ep = VLDA_dmw_lda_am_ag_pstm_nrm [[VLDA_dmw_lda_am_ag_pstm_nrm_imm5]], [[MOVXM_lng_cg]] :: (load (<4 x s64>) from stack - 64, align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE5:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_pstm_nrm4]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm5]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE5]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:accregbank(<8 x s64>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<8 x s64>) from stack - 64)
    %14:accregbank(<8 x s64>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<8 x s64>) from stack - 64)
    %15:accregbank(<8 x s64>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<8 x s64>) from stack - 64)
    %16:accregbank(<8 x s64>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<8 x s64>) from stack - 64)
    %17:accregbank(<8 x s64>), %23:ptrregbank(p0) = G_AIE_POSTINC_LOAD %22, %11 :: (load (<8 x s64>) from stack - 64)
    %18:accregbank(<8 x s64>), %24:ptrregbank(p0) = G_AIE_POSTINC_LOAD %23, %12 :: (load (<8 x s64>) from stack - 64)
    PseudoRET implicit $lr, implicit %18
...

---
name: post-inc-2d-vector-load-am
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-vector-load-am
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLDA_2D_dmw_lda_am:%[0-9]+]]:acc256, [[VLDA_2D_dmw_lda_am1:%[0-9]+]]:ep, [[VLDA_2D_dmw_lda_am2:%[0-9]+]]:edc = VLDA_2D_dmw_lda_am [[COPY]], [[REG_SEQUENCE]] :: (load (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_2D_dmw_lda_am]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:accregbank(<4 x s64>), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<4 x s64>))
    PseudoRET implicit $lr, implicit %5
...

---
name: post-inc-2d-vector-load-am-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-vector-load-am-512
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 32 :: (load (<4 x s64>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_2D_dmw_lda_am:%[0-9]+]]:acc256, [[VLDA_2D_dmw_lda_am1:%[0-9]+]]:ep, [[VLDA_2D_dmw_lda_am2:%[0-9]+]]:edc = VLDA_2D_dmw_lda_am [[COPY]], [[REG_SEQUENCE]] :: (load (<4 x s64>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_2D_dmw_lda_am]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:accregbank(<8 x s64>), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<8 x s64>))
    PseudoRET implicit $lr, implicit %5
...

---
name: post-inc-vector-store-w-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $x0
    ; CHECK-LABEL: name: post-inc-vector-store-w-512
    ; CHECK: liveins: $p0, $r0, $r1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY5]], [[COPY]], 32 :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm [[COPY4]], [[COPY]], [[COPY2]] :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY7]], [[VST_dmw_sts_w_ag_pstm_nrm]], 32 :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm_imm [[COPY6]], [[VST_dmw_sts_w_ag_pstm_nrm]], 0 :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY9]], [[VST_dmw_sts_w_ag_pstm_nrm_imm]], 32 :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm1:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm [[COPY8]], [[VST_dmw_sts_w_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]] :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY11]], [[VST_dmw_sts_w_ag_pstm_nrm1]], 32 :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm_imm [[COPY10]], [[VST_dmw_sts_w_ag_pstm_nrm1]], -2048 :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY13]], [[VST_dmw_sts_w_ag_pstm_nrm_imm1]], 32 :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm_imm [[COPY12]], [[VST_dmw_sts_w_ag_pstm_nrm_imm1]], 2016 :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY15]], [[VST_dmw_sts_w_ag_pstm_nrm_imm2]], 32 :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_w_ag_pstm_nrm2:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm [[COPY14]], [[VST_dmw_sts_w_ag_pstm_nrm_imm2]], [[MOVXM_lng_cg]] :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VST_dmw_sts_w_ag_pstm_nrm2]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:vregbank(<16 x s32>) = COPY $x0
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %0, %7 :: (store (<16 x s32>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %19, %8 :: (store (<16 x s32>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %20, %9 :: (store (<16 x s32>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %21, %10 :: (store (<16 x s32>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %22, %11 :: (store (<16 x s32>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %23, %12 :: (store (<16 x s32>) into stack - 64)
    PseudoRET implicit $lr, implicit %24
...

---
name: post-inc-2d-vector-store-w
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: post-inc-2d-vector-store-w
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_2D_dmw_sts_w:%[0-9]+]]:ep, [[VST_2D_dmw_sts_w1:%[0-9]+]]:edc = VST_2D_dmw_sts_w [[COPY1]], [[COPY]], [[REG_SEQUENCE]] :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:vregbank(<8 x s32>) = COPY $wl0
    %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %5, %0, %1, %2, %3, %4 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name: post-inc-2d-vector-store-w-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: post-inc-2d-vector-store-w-512
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[VST_2D_dmw_sts_w:%[0-9]+]]:ep, [[VST_2D_dmw_sts_w1:%[0-9]+]]:edc = VST_2D_dmw_sts_w [[COPY2]], [[COPY]], [[REG_SEQUENCE]] :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:vregbank(<16 x s32>) = COPY $x0
    %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %5, %0, %1, %2, %3, %4 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...

---
name: post-inc-vector-store-am-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $bml0
    ; CHECK-LABEL: name: post-inc-vector-store-am-512
    ; CHECK: liveins: $p0, $r0, $r1, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 2048
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY5]], [[COPY]], 32 :: (store (<4 x s64>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm [[COPY4]], [[COPY]], [[COPY2]] :: (store (<4 x s64>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY7]], [[VST_dmw_sts_am_ag_pstm_nrm]], 32 :: (store (<4 x s64>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm_imm [[COPY6]], [[VST_dmw_sts_am_ag_pstm_nrm]], 0 :: (store (<4 x s64>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY9]], [[VST_dmw_sts_am_ag_pstm_nrm_imm]], 32 :: (store (<4 x s64>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm1:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm [[COPY8]], [[VST_dmw_sts_am_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]] :: (store (<4 x s64>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY11]], [[VST_dmw_sts_am_ag_pstm_nrm1]], 32 :: (store (<4 x s64>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm_imm [[COPY10]], [[VST_dmw_sts_am_ag_pstm_nrm1]], -2048 :: (store (<4 x s64>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY13]], [[VST_dmw_sts_am_ag_pstm_nrm_imm1]], 32 :: (store (<4 x s64>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm_imm [[COPY12]], [[VST_dmw_sts_am_ag_pstm_nrm_imm1]], 2016 :: (store (<4 x s64>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY15]], [[VST_dmw_sts_am_ag_pstm_nrm_imm2]], 32 :: (store (<4 x s64>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm2:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm [[COPY14]], [[VST_dmw_sts_am_ag_pstm_nrm_imm2]], [[MOVXM_lng_cg]] :: (store (<4 x s64>) into stack - 64, align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VST_dmw_sts_am_ag_pstm_nrm2]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -2048
    %11:modregbank(s20) = G_CONSTANT i20 2016
    %12:modregbank(s20) = G_CONSTANT i20 2048
    %13:accregbank(<8 x s64>) = COPY $bml0
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %0, %7 :: (store (<8 x s64>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %19, %8 :: (store (<8 x s64>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %20, %9 :: (store (<8 x s64>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %21, %10 :: (store (<8 x s64>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %22, %11 :: (store (<8 x s64>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %13, %23, %12 :: (store (<8 x s64>) into stack - 64)
    PseudoRET implicit $lr, implicit %24
...

---
name: post-inc-2d-vector-store-am
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $amll0
    ; CHECK-LABEL: name: post-inc-2d-vector-store-am
    ; CHECK: liveins: $p0, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_2D_dmw_sts_am:%[0-9]+]]:ep, [[VST_2D_dmw_sts_am1:%[0-9]+]]:edc = VST_2D_dmw_sts_am [[COPY1]], [[COPY]], [[REG_SEQUENCE]] :: (store (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:accregbank(<4 x s64>) = COPY $amll0
    %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %5, %0, %1, %2, %3, %4 :: (store (<4 x s64>))
    PseudoRET implicit $lr
...

---
name: post-inc-2d-vector-store-am-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0
    ; CHECK-LABEL: name: post-inc-2d-vector-store-am-512
    ; CHECK: liveins: $p0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: [[VST_2D_dmw_sts_am:%[0-9]+]]:ep, [[VST_2D_dmw_sts_am1:%[0-9]+]]:edc = VST_2D_dmw_sts_am [[COPY2]], [[COPY]], [[REG_SEQUENCE]] :: (store (<4 x s64>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:accregbank(<8 x s64>) = COPY $bml0
    %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %5, %0, %1, %2, %3, %4 :: (store (<8 x s64>))
    PseudoRET implicit $lr
...

---
name: post-inc-3d-vector-load-w
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-vector-load-w
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VLD_3D_pseudo:%[0-9]+]]:vec256, [[VLD_3D_pseudo1:%[0-9]+]]:ep, [[VLD_3D_pseudo2:%[0-9]+]]:edc, [[VLD_3D_pseudo3:%[0-9]+]]:edc = VLD_3D_pseudo [[COPY]], [[REG_SEQUENCE]] :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLD_3D_pseudo]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:vregbank(<8 x s32>), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s32>))
    PseudoRET implicit $lr, implicit %8
...

---
name: post-inc-3d-vector-load-w-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-vector-load-w-512
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_3D_pseudo:%[0-9]+]]:vec256, [[VLD_3D_pseudo1:%[0-9]+]]:ep, [[VLD_3D_pseudo2:%[0-9]+]]:edc, [[VLD_3D_pseudo3:%[0-9]+]]:edc = VLD_3D_pseudo [[COPY]], [[REG_SEQUENCE]] :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_3D_pseudo]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:vregbank(<16 x s32>), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s32>))
    PseudoRET implicit $lr, implicit %8
...

---
name: post-inc-3d-vector-load-am
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-vector-load-am
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VLDA_3D_dmw_lda_am:%[0-9]+]]:acc256, [[VLDA_3D_dmw_lda_am1:%[0-9]+]]:ep, [[VLDA_3D_dmw_lda_am2:%[0-9]+]]:edc, [[VLDA_3D_dmw_lda_am3:%[0-9]+]]:edc = VLDA_3D_dmw_lda_am [[COPY]], [[REG_SEQUENCE]] :: (load (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_dmw_lda_am]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:accregbank(<4 x s64>), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<4 x s64>))
    PseudoRET implicit $lr, implicit %8
...

---
name: post-inc-3d-vector-load-am-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-3d-vector-load-am-512
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 32 :: (load (<4 x s64>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_3D_dmw_lda_am:%[0-9]+]]:acc256, [[VLDA_3D_dmw_lda_am1:%[0-9]+]]:ep, [[VLDA_3D_dmw_lda_am2:%[0-9]+]]:edc, [[VLDA_3D_dmw_lda_am3:%[0-9]+]]:edc = VLDA_3D_dmw_lda_am [[COPY]], [[REG_SEQUENCE]] :: (load (<4 x s64>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_3D_dmw_lda_am]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:accregbank(<8 x s64>), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s64>))
    PseudoRET implicit $lr, implicit %8
...

---
name: post-inc-3d-vector-store-w
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: post-inc-3d-vector-store-w
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VST_3D_dmw_sts_w:%[0-9]+]]:ep, [[VST_3D_dmw_sts_w1:%[0-9]+]]:edc, [[VST_3D_dmw_sts_w2:%[0-9]+]]:edc = VST_3D_dmw_sts_w [[COPY1]], [[COPY]], [[REG_SEQUENCE]] :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:vregbank(<8 x s32>) = COPY $wl0
    %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name: post-inc-3d-vector-store-w-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: post-inc-3d-vector-store-w-512
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[VST_3D_dmw_sts_w:%[0-9]+]]:ep, [[VST_3D_dmw_sts_w1:%[0-9]+]]:edc, [[VST_3D_dmw_sts_w2:%[0-9]+]]:edc = VST_3D_dmw_sts_w [[COPY2]], [[COPY]], [[REG_SEQUENCE]] :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:vregbank(<16 x s32>) = COPY $x0
    %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...

---
name: post-inc-3d-vector-store-am
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $amll0
    ; CHECK-LABEL: name: post-inc-3d-vector-store-am
    ; CHECK: liveins: $p0, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VST_3D_dmw_sts_am:%[0-9]+]]:ep, [[VST_3D_dmw_sts_am1:%[0-9]+]]:edc, [[VST_3D_dmw_sts_am2:%[0-9]+]]:edc = VST_3D_dmw_sts_am [[COPY1]], [[COPY]], [[REG_SEQUENCE]] :: (store (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:accregbank(<4 x s64>) = COPY $amll0
    %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<4 x s64>))
    PseudoRET implicit $lr
...

---
name: post-inc-3d-vector-store-am-512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0
    ; CHECK-LABEL: name: post-inc-3d-vector-store-am-512
    ; CHECK: liveins: $p0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: [[VST_3D_dmw_sts_am:%[0-9]+]]:ep, [[VST_3D_dmw_sts_am1:%[0-9]+]]:edc, [[VST_3D_dmw_sts_am2:%[0-9]+]]:edc = VST_3D_dmw_sts_am [[COPY2]], [[COPY]], [[REG_SEQUENCE]] :: (store (<4 x s64>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:accregbank(<8 x s64>) = COPY $bml0
    %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<8 x s64>))
    PseudoRET implicit $lr
...

---
name: post-inc-2d-store-regclass
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $amll0
    ; CHECK-LABEL: name: post-inc-2d-store-regclass
    ; CHECK: liveins: $p0, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY3]], %subreg.sub_dim_size, [[COPY2]], %subreg.sub_dim_stride, [[COPY4]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_2D_dmw_sts_am:%[0-9]+]]:ep, [[VST_2D_dmw_sts_am1:%[0-9]+]]:edc = VST_2D_dmw_sts_am [[COPY1]], [[COPY]], [[REG_SEQUENCE]] :: (store (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = G_CONSTANT i20 1
    %8:accregbank(<4 x s64>) = COPY $amll0
    %9:ptrregbank(p0), %10:modregbank(s20) = G_AIE_POSTINC_2D_STORE %8, %0, %1, %1, %1, %1 :: (store (<4 x s64>))
    PseudoRET implicit $lr
...

---
name: post-inc-3d-store-regclass
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $amll0
    ; CHECK-LABEL: name: post-inc-3d-store-regclass
    ; CHECK: liveins: $p0, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY4]], %subreg.sub_dim_size, [[COPY2]], %subreg.sub_dim_stride, [[COPY5]], %subreg.sub_dim_count, [[COPY6]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY3]], %subreg.sub_hi_dim_then_sub_dim_stride, [[COPY7]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VST_3D_dmw_sts_am:%[0-9]+]]:ep, [[VST_3D_dmw_sts_am1:%[0-9]+]]:edc, [[VST_3D_dmw_sts_am2:%[0-9]+]]:edc = VST_3D_dmw_sts_am [[COPY1]], [[COPY]], [[REG_SEQUENCE]] :: (store (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = G_CONSTANT i20 1
    %8:accregbank(<4 x s64>) = COPY $amll0
    %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %1, %1, %1, %1, %1, %1 :: (store (<4 x s64>))
    PseudoRET implicit $lr
...

---
name: post-inc-2d-load-regclass
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $amll0
    ; CHECK-LABEL: name: post-inc-2d-load-regclass
    ; CHECK: liveins: $p0, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY2]], %subreg.sub_dim_size, [[COPY1]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLDA_2D_dmw_lda_am:%[0-9]+]]:acc256, [[VLDA_2D_dmw_lda_am1:%[0-9]+]]:ep, [[VLDA_2D_dmw_lda_am2:%[0-9]+]]:edc = VLDA_2D_dmw_lda_am [[COPY]], [[REG_SEQUENCE]] :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[VLDA_2D_dmw_lda_am]]
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = G_CONSTANT i20 1
    %8:accregbank(<4 x s64>), %9:ptrregbank(p0), %10:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %1, %1, %1 :: (load (<4 x s64>))
    $amll0 = COPY %8
    PseudoRET implicit $lr
...

---
name: post-inc-3d-load-regclass
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $amll0
    ; CHECK-LABEL: name: post-inc-3d-load-regclass
    ; CHECK: liveins: $p0, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY3]], %subreg.sub_dim_size, [[COPY1]], %subreg.sub_dim_stride, [[COPY4]], %subreg.sub_dim_count, [[COPY5]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[COPY6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VLDA_3D_dmw_lda_am:%[0-9]+]]:acc256, [[VLDA_3D_dmw_lda_am1:%[0-9]+]]:ep, [[VLDA_3D_dmw_lda_am2:%[0-9]+]]:edc, [[VLDA_3D_dmw_lda_am3:%[0-9]+]]:edc = VLDA_3D_dmw_lda_am [[COPY]], [[REG_SEQUENCE]] :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[VLDA_3D_dmw_lda_am]]
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = G_CONSTANT i20 1
    %8:accregbank(<4 x s64>), %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %1, %1, %1, %1, %1, %1 :: (load (<4 x s64>))
    $amll0 = COPY %8
    PseudoRET implicit $lr
...
