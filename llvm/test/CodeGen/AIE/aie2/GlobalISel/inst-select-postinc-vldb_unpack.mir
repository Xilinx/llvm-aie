# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VLDB_POSTINC_UNPACK_S8_S4
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDB_POSTINC_UNPACK_S8_S4
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo -256
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:em = MOV_PD_imm10_pseudo 224
    ; CHECK-NEXT: [[VLDB_UNPACK_S8_S4_ag_pstm_nrm:%[0-9]+]]:vec512, [[VLDB_UNPACK_S8_S4_ag_pstm_nrm1:%[0-9]+]]:ep = VLDB_UNPACK_S8_S4_ag_pstm_nrm [[COPY]], [[COPY2]] :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_S8_S4_ag_pstm_nrm2:%[0-9]+]]:vec512, [[VLDB_UNPACK_S8_S4_ag_pstm_nrm3:%[0-9]+]]:ep = VLDB_UNPACK_S8_S4_ag_pstm_nrm [[VLDB_UNPACK_S8_S4_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]] :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_S8_S4_ag_pstm_nrm4:%[0-9]+]]:vec512, [[VLDB_UNPACK_S8_S4_ag_pstm_nrm5:%[0-9]+]]:ep = VLDB_UNPACK_S8_S4_ag_pstm_nrm [[VLDB_UNPACK_S8_S4_ag_pstm_nrm3]], [[MOV_PD_imm10_pseudo1]] :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_S8_S4_ag_pstm_nrm6:%[0-9]+]]:vec512, [[VLDB_UNPACK_S8_S4_ag_pstm_nrm7:%[0-9]+]]:ep = VLDB_UNPACK_S8_S4_ag_pstm_nrm [[VLDB_UNPACK_S8_S4_ag_pstm_nrm5]], [[MOV_PD_imm10_pseudo2]] :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_UNPACK_S8_S4_ag_pstm_nrm]], implicit [[VLDB_UNPACK_S8_S4_ag_pstm_nrm2]], implicit [[VLDB_UNPACK_S8_S4_ag_pstm_nrm4]], implicit [[VLDB_UNPACK_S8_S4_ag_pstm_nrm6]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 -256
    %10:modregbank(s20) = G_CONSTANT i20 224
    %25:vregbank(<32 x s8>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<32 x s8>))
    %26:vregbank(<32 x s8>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<32 x s8>))
    %27:vregbank(<32 x s8>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<32 x s8>))
    %28:vregbank(<32 x s8>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %26:vregbank(<32 x s8>), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %27:vregbank(<32 x s8>), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %28:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103, implicit %104, implicit %105, implicit %106
...

---
name:            VLDB_POSTINC_UNPACK_D8_D4
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDB_POSTINC_UNPACK_D8_D4
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo -256
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:em = MOV_PD_imm10_pseudo 224
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm1:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[COPY]], [[COPY2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm2:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm3:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[VLDB_UNPACK_D8_D4_pstm_nrm1]], [[MOV_PD_imm10_pseudo]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm4:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm5:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[VLDB_UNPACK_D8_D4_pstm_nrm3]], [[MOV_PD_imm10_pseudo1]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm6:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm7:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[VLDB_UNPACK_D8_D4_pstm_nrm5]], [[MOV_PD_imm10_pseudo2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_UNPACK_D8_D4_pstm_nrm]], implicit [[VLDB_UNPACK_D8_D4_pstm_nrm2]], implicit [[VLDB_UNPACK_D8_D4_pstm_nrm4]], implicit [[VLDB_UNPACK_D8_D4_pstm_nrm6]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 -256
    %10:modregbank(s20) = G_CONSTANT i20 224
    %25:vregbank(<32 x s8>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<32 x s8>))
    %26:vregbank(<32 x s8>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<32 x s8>))
    %27:vregbank(<32 x s8>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<32 x s8>))
    %28:vregbank(<32 x s8>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %26:vregbank(<32 x s8>), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %27:vregbank(<32 x s8>), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %28:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103, implicit %104, implicit %105, implicit %106
...

---
name:            VLDB_POSTINC_UNPACK_D8_D4_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $r2
    ; CHECK-LABEL: name: VLDB_POSTINC_UNPACK_D8_D4_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo -256
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:em = MOV_PD_imm10_pseudo 224
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm1:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[COPY]], [[COPY2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm2:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm3:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[VLDB_UNPACK_D8_D4_pstm_nrm1]], [[MOV_PD_imm10_pseudo]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm4:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm5:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[VLDB_UNPACK_D8_D4_pstm_nrm3]], [[MOV_PD_imm10_pseudo1]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D8_D4_pstm_nrm6:%[0-9]+]]:vec512, [[VLDB_UNPACK_D8_D4_pstm_nrm7:%[0-9]+]]:ep = VLDB_UNPACK_D8_D4_pstm_nrm [[VLDB_UNPACK_D8_D4_pstm_nrm5]], [[MOV_PD_imm10_pseudo2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_UNPACK_D8_D4_pstm_nrm]], implicit [[VLDB_UNPACK_D8_D4_pstm_nrm2]], implicit [[VLDB_UNPACK_D8_D4_pstm_nrm4]], implicit [[VLDB_UNPACK_D8_D4_pstm_nrm6]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 -256
    %10:modregbank(s20) = G_CONSTANT i20 224
    %25:vregbank(<32 x s8>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<32 x s8>))
    %26:vregbank(<32 x s8>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<32 x s8>))
    %27:vregbank(<32 x s8>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<32 x s8>))
    %28:vregbank(<32 x s8>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<32 x s8>))
    %102:gprregbank(s32) = COPY $r2
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %26:vregbank(<32 x s8>), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %27:vregbank(<32 x s8>), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %28:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103, implicit %104, implicit %105, implicit %106
...


---
name:            VLDB_POSTINC_UNPACK_S16_S8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDB_POSTINC_UNPACK_S16_S8
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo -256
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:em = MOV_PD_imm10_pseudo 224
    ; CHECK-NEXT: [[VLDB_UNPACK_S16_S8_ag_pstm_nrm:%[0-9]+]]:vec512, [[VLDB_UNPACK_S16_S8_ag_pstm_nrm1:%[0-9]+]]:ep = VLDB_UNPACK_S16_S8_ag_pstm_nrm [[COPY]], [[COPY2]] :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_S16_S8_ag_pstm_nrm2:%[0-9]+]]:vec512, [[VLDB_UNPACK_S16_S8_ag_pstm_nrm3:%[0-9]+]]:ep = VLDB_UNPACK_S16_S8_ag_pstm_nrm [[VLDB_UNPACK_S16_S8_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]] :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_S16_S8_ag_pstm_nrm4:%[0-9]+]]:vec512, [[VLDB_UNPACK_S16_S8_ag_pstm_nrm5:%[0-9]+]]:ep = VLDB_UNPACK_S16_S8_ag_pstm_nrm [[VLDB_UNPACK_S16_S8_ag_pstm_nrm3]], [[MOV_PD_imm10_pseudo1]] :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_S16_S8_ag_pstm_nrm6:%[0-9]+]]:vec512, [[VLDB_UNPACK_S16_S8_ag_pstm_nrm7:%[0-9]+]]:ep = VLDB_UNPACK_S16_S8_ag_pstm_nrm [[VLDB_UNPACK_S16_S8_ag_pstm_nrm5]], [[MOV_PD_imm10_pseudo2]] :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_UNPACK_S16_S8_ag_pstm_nrm]], implicit [[VLDB_UNPACK_S16_S8_ag_pstm_nrm2]], implicit [[VLDB_UNPACK_S16_S8_ag_pstm_nrm4]], implicit [[VLDB_UNPACK_S16_S8_ag_pstm_nrm6]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 -256
    %10:modregbank(s20) = G_CONSTANT i20 224
    %25:vregbank(<32 x s8>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<32 x s8>))
    %26:vregbank(<32 x s8>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<32 x s8>))
    %27:vregbank(<32 x s8>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<32 x s8>))
    %28:vregbank(<32 x s8>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %26:vregbank(<32 x s8>), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %27:vregbank(<32 x s8>), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %28:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103, implicit %104, implicit %105, implicit %106
...

---
name:            VLDB_POSTINC_UNPACK_D16_D8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: VLDB_POSTINC_UNPACK_D16_D8
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo -256
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:em = MOV_PD_imm10_pseudo 224
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm1:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[COPY]], [[COPY2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm2:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm3:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[VLDB_UNPACK_D16_D8_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm4:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm5:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[VLDB_UNPACK_D16_D8_ag_pstm_nrm3]], [[MOV_PD_imm10_pseudo1]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm6:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm7:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[VLDB_UNPACK_D16_D8_ag_pstm_nrm5]], [[MOV_PD_imm10_pseudo2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm]], implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm2]], implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm4]], implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm6]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 -256
    %10:modregbank(s20) = G_CONSTANT i20 224
    %25:vregbank(<32 x s8>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<32 x s8>))
    %26:vregbank(<32 x s8>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<32 x s8>))
    %27:vregbank(<32 x s8>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<32 x s8>))
    %28:vregbank(<32 x s8>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %26:vregbank(<32 x s8>), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %27:vregbank(<32 x s8>), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %28:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103, implicit %104, implicit %105, implicit %106
...

---
name:            VLDB_POSTINC_UNPACK_D16_D8_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $r2
    ; CHECK-LABEL: name: VLDB_POSTINC_UNPACK_D16_D8_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo -256
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:em = MOV_PD_imm10_pseudo 224
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm1:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[COPY]], [[COPY2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm2:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm3:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[VLDB_UNPACK_D16_D8_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm4:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm5:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[VLDB_UNPACK_D16_D8_ag_pstm_nrm3]], [[MOV_PD_imm10_pseudo1]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY3]]
    ; CHECK-NEXT: [[VLDB_UNPACK_D16_D8_ag_pstm_nrm6:%[0-9]+]]:vec512, [[VLDB_UNPACK_D16_D8_ag_pstm_nrm7:%[0-9]+]]:ep = VLDB_UNPACK_D16_D8_ag_pstm_nrm [[VLDB_UNPACK_D16_D8_ag_pstm_nrm5]], [[MOV_PD_imm10_pseudo2]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm]], implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm2]], implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm4]], implicit [[VLDB_UNPACK_D16_D8_ag_pstm_nrm6]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 -256
    %10:modregbank(s20) = G_CONSTANT i20 224
    %25:vregbank(<32 x s8>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<32 x s8>))
    %26:vregbank(<32 x s8>), %20:ptrregbank(p0) = G_AIE_POSTINC_LOAD %19, %8 :: (load (<32 x s8>))
    %27:vregbank(<32 x s8>), %21:ptrregbank(p0) = G_AIE_POSTINC_LOAD %20, %9 :: (load (<32 x s8>))
    %28:vregbank(<32 x s8>), %22:ptrregbank(p0) = G_AIE_POSTINC_LOAD %21, %10 :: (load (<32 x s8>))
    %102:gprregbank(s32) = COPY $r2
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %26:vregbank(<32 x s8>), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %27:vregbank(<32 x s8>), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %28:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103, implicit %104, implicit %105, implicit %106
...
