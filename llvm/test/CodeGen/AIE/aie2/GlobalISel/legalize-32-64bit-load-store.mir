# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name:            store_v4s8
body:             |
  bb.1.entry:
    liveins: $p0, $r0
    ; CHECK-LABEL: name: store_v4s8
    ; CHECK: liveins: $p0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<4 x s8>) = COPY $r0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(s32) = G_BITCAST [[COPY1]](<4 x s8>)
    ; CHECK-NEXT: G_STORE [[BITCAST]](s32), [[COPY]](p0) :: (store (s32))
    %0:_(p0) = COPY $p0
    %1:_(<4 x s8>) = COPY $r0
    G_STORE %1(<4 x s8>), %0(p0) :: (store (<4 x s8>))
...

---
name:            load_v4s8
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: load_v4s8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[LOAD]](s32)
    ; CHECK-NEXT: $r0 = COPY [[BITCAST]](<4 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:_(p0) = COPY $p0
    %0:_(<4 x s8>) = G_LOAD %1(p0) :: (load (<4 x s8>))
    $r0 = COPY %0(<4 x s8>)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            store_v2s32
body:             |
  bb.1.entry:
    liveins: $p0, $l0
    ; CHECK-LABEL: name: store_v2s32
    ; CHECK: liveins: $p0, $l0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<2 x s32>) = COPY $l0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(s64) = G_BITCAST [[COPY1]](<2 x s32>)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[BITCAST]](s64)
    ; CHECK-NEXT: G_STORE [[UV]](s32), [[COPY]](p0) :: (store (s32), align 8)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: G_STORE [[UV1]](s32), [[PTR_ADD]](p0) :: (store (s32) into unknown-address + 4)
    %0:_(p0) = COPY $p0
    %1:_(<2 x s32>) = COPY $l0
    G_STORE %1(<2 x s32>), %0(p0) :: (store (<2 x s32>))
...

---
name:            load_v2s32
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: load_v2s32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s32), align 8)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s20) = G_CONSTANT i20 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s20)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s32) from unknown-address + 4)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[LOAD]](s32), [[LOAD1]](s32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x s32>) = G_BITCAST [[MV]](s64)
    ; CHECK-NEXT: $l0 = COPY [[BITCAST]](<2 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $l0
    %1:_(p0) = COPY $p0
    %0:_(<2 x s32>) = G_LOAD %1(p0) :: (load (<2 x s32>))
    $l0 = COPY %0(<2 x s32>)
    PseudoRET implicit $lr, implicit $l0
...
