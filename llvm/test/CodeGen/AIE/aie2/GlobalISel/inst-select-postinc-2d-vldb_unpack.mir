# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VLDB_2D_UNPACK_S8_S4
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDB_2D_UNPACK_S8_S4
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLDB_2D_UNPACK_S8_S4_:%[0-9]+]]:vec512, [[VLDB_2D_UNPACK_S8_S4_1:%[0-9]+]]:ep, [[VLDB_2D_UNPACK_S8_S4_2:%[0-9]+]]:edc = VLDB_2D_UNPACK_S8_S4 [[COPY]], [[REG_SEQUENCE]] :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_2D_UNPACK_S8_S4_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %25:vregbank(<32 x s8>), %5:ptrregbank(p0), %6:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDB_2D_UNPACK_D8_D4
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDB_2D_UNPACK_D8_D4
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLDB_2D_UNPACK_D8_D4_:%[0-9]+]]:vec512, [[VLDB_2D_UNPACK_D8_D4_1:%[0-9]+]]:ep, [[VLDB_2D_UNPACK_D8_D4_2:%[0-9]+]]:edc = VLDB_2D_UNPACK_D8_D4 [[COPY]], [[REG_SEQUENCE]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_2D_UNPACK_D8_D4_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %25:vregbank(<32 x s8>), %5:ptrregbank(p0), %6:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDB_2D_UNPACK_D8_D4_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $r2
    ; CHECK-LABEL: name: VLDB_2D_UNPACK_D8_D4_dyn
    ; CHECK: liveins: $p0, $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDB_2D_UNPACK_D8_D4_:%[0-9]+]]:vec512, [[VLDB_2D_UNPACK_D8_D4_1:%[0-9]+]]:ep, [[VLDB_2D_UNPACK_D8_D4_2:%[0-9]+]]:edc = VLDB_2D_UNPACK_D8_D4 [[COPY]], [[REG_SEQUENCE]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_2D_UNPACK_D8_D4_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %25:vregbank(<32 x s8>), %5:ptrregbank(p0), %6:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<32 x s8>))
    %102:gprregbank(s32) = COPY $r2
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDB_2D_UNPACK_S16_S8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDB_2D_UNPACK_S16_S8
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLDB_2D_UNPACK_S16_S8_:%[0-9]+]]:vec512, [[VLDB_2D_UNPACK_S16_S8_1:%[0-9]+]]:ep, [[VLDB_2D_UNPACK_S16_S8_2:%[0-9]+]]:edc = VLDB_2D_UNPACK_S16_S8 [[COPY]], [[REG_SEQUENCE]] :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_2D_UNPACK_S16_S8_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %25:vregbank(<32 x s8>), %5:ptrregbank(p0), %6:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDB_2D_UNPACK_D16_D8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDB_2D_UNPACK_D16_D8
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VLDB_2D_UNPACK_D16_D8_:%[0-9]+]]:vec512, [[VLDB_2D_UNPACK_D16_D8_1:%[0-9]+]]:ep, [[VLDB_2D_UNPACK_D16_D8_2:%[0-9]+]]:edc = VLDB_2D_UNPACK_D16_D8 [[COPY]], [[REG_SEQUENCE]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_2D_UNPACK_D16_D8_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %25:vregbank(<32 x s8>), %5:ptrregbank(p0), %6:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<32 x s8>))
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDB_2D_UNPACK_D16_D8_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $r2
    ; CHECK-LABEL: name: VLDB_2D_UNPACK_D16_D8_dyn
    ; CHECK: liveins: $p0, $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDB_2D_UNPACK_D16_D8_:%[0-9]+]]:vec512, [[VLDB_2D_UNPACK_D16_D8_1:%[0-9]+]]:ep, [[VLDB_2D_UNPACK_D16_D8_2:%[0-9]+]]:edc = VLDB_2D_UNPACK_D16_D8 [[COPY]], [[REG_SEQUENCE]], implicit $crunpacksign :: (load (<32 x s8>))
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDB_2D_UNPACK_D16_D8_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %25:vregbank(<32 x s8>), %5:ptrregbank(p0), %6:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (<32 x s8>))
    %102:gprregbank(s32) = COPY $r2
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %25:vregbank(<32 x s8>), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...
