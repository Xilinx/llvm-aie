# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-prelegalizer-combiner --aie-s20-narrowing=true %s -verify-machineinstrs -o - | FileCheck %s


# Simple case where a 128-bit vector is "unpadded" from a 256-bit vector
---
name: unpad_256_bits
body:             |
  bb.1:
    ; CHECK-LABEL: name: unpad_256_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wh0
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $q0 = COPY [[AIE_UNPAD_VECTOR]](<4 x s32>)
      %10:_(<8 x s32>) = COPY $wh0
      %0:_(<4 x s32>), %1:_(<4 x s32>) = G_UNMERGE_VALUES %10
      $q0 = COPY %0
...

# Simple case where a 128-bit vector is "unpadded" from a 512-bit vector
---
name: unpad_512_bits
body:             |
  bb.1:
    ; CHECK-LABEL: name: unpad_512_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY]](<16 x s32>)
    ; CHECK-NEXT: $q0 = COPY [[AIE_UNPAD_VECTOR]](<4 x s32>)
      %10:_(<16 x s32>) = COPY $x0
      %0:_(<4 x s32>), %1:_(<4 x s32>), %2:_(<4 x s32>), %3:_(<4 x s32>) = G_UNMERGE_VALUES %10
      $q0 = COPY %0
...

# Cannot combine: more than one sub-vector is live
---
name: no_combine_multiple_live_subvecs
body:             |
  bb.1:
    ; CHECK-LABEL: name: no_combine_multiple_live_subvecs
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<4 x s32>), [[UV1:%[0-9]+]]:_(<4 x s32>), [[UV2:%[0-9]+]]:_(<4 x s32>), [[UV3:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: $q0 = COPY [[UV]](<4 x s32>)
    ; CHECK-NEXT: $q1 = COPY [[UV3]](<4 x s32>)
      %10:_(<16 x s32>) = COPY $x0
      %0:_(<4 x s32>), %1:_(<4 x s32>), %2:_(<4 x s32>), %3:_(<4 x s32>) = G_UNMERGE_VALUES %10
      $q0 = COPY %0
      $q1 = COPY %3
...

# Cannot combine: first sub-vector isn't live
---
name: no_combine_first_subvec_not_live
body:             |
  bb.1:
    ; CHECK-LABEL: name: no_combine_first_subvec_not_live
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<4 x s32>), [[UV1:%[0-9]+]]:_(<4 x s32>), [[UV2:%[0-9]+]]:_(<4 x s32>), [[UV3:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: $q0 = COPY [[UV1]](<4 x s32>)
      %10:_(<16 x s32>) = COPY $x0
      %0:_(<4 x s32>), %1:_(<4 x s32>), %2:_(<4 x s32>), %3:_(<4 x s32>) = G_UNMERGE_VALUES %10
      $q0 = COPY %1
...

# Cannot combine: first sub-vector isn't 128-bit
---
name: no_combine_first_subvec_not_128_bits
body:             |
  bb.1:
    ; CHECK-LABEL: name: no_combine_first_subvec_not_128_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: $wh0 = COPY [[UV]](<8 x s32>)
      %10:_(<16 x s32>) = COPY $x0
      %0:_(<8 x s32>), %1:_(<8 x s32>) = G_UNMERGE_VALUES %10
      $wh0 = COPY %0
...
