; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --print-fixed-stack
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; 256-bit vector types

define void @callee_v8int32(<8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
  ; CHECK-LABEL: name: callee_v8int32
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -32, size: 32, alignment: 32, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.61):
  ; CHECK-NEXT:   liveins: $amhh0, $amhh1, $amhh2, $amhh3, $amhh4, $amhh5, $amhh6, $amhh7, $amhh8, $amhl0, $amhl1, $amhl2, $amhl3, $amhl4, $amhl5, $amhl6, $amhl7, $amhl8, $amlh0, $amlh1, $amlh2, $amlh3, $amlh4, $amlh5, $amlh6, $amlh7, $amlh8, $amll0, $amll1, $amll2, $amll3, $amll4, $amll5, $amll6, $amll7, $amll8, $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<8 x s32>) = COPY $wl6
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<8 x s32>) = COPY $wl8
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<8 x s32>) = COPY $wl10
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<8 x s32>) = COPY $wl3
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<8 x s32>) = COPY $wl5
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<8 x s32>) = COPY $wl7
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<8 x s32>) = COPY $wl9
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<8 x s32>) = COPY $wl11
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<8 x s32>) = COPY $wh0
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<8 x s32>) = COPY $wh2
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<8 x s32>) = COPY $wh4
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<8 x s32>) = COPY $wh6
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<8 x s32>) = COPY $wh8
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<8 x s32>) = COPY $wh10
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<8 x s32>) = COPY $wh1
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<8 x s32>) = COPY $wh3
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<8 x s32>) = COPY $wh5
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<8 x s32>) = COPY $wh7
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<8 x s32>) = COPY $wh9
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<8 x s32>) = COPY $wh11
  ; CHECK-NEXT:   [[COPY24:%[0-9]+]]:_(<8 x s32>) = COPY $amll0
  ; CHECK-NEXT:   [[COPY25:%[0-9]+]]:_(<8 x s32>) = COPY $amll1
  ; CHECK-NEXT:   [[COPY26:%[0-9]+]]:_(<8 x s32>) = COPY $amll2
  ; CHECK-NEXT:   [[COPY27:%[0-9]+]]:_(<8 x s32>) = COPY $amll3
  ; CHECK-NEXT:   [[COPY28:%[0-9]+]]:_(<8 x s32>) = COPY $amll4
  ; CHECK-NEXT:   [[COPY29:%[0-9]+]]:_(<8 x s32>) = COPY $amll5
  ; CHECK-NEXT:   [[COPY30:%[0-9]+]]:_(<8 x s32>) = COPY $amll6
  ; CHECK-NEXT:   [[COPY31:%[0-9]+]]:_(<8 x s32>) = COPY $amll7
  ; CHECK-NEXT:   [[COPY32:%[0-9]+]]:_(<8 x s32>) = COPY $amll8
  ; CHECK-NEXT:   [[COPY33:%[0-9]+]]:_(<8 x s32>) = COPY $amhl0
  ; CHECK-NEXT:   [[COPY34:%[0-9]+]]:_(<8 x s32>) = COPY $amhl1
  ; CHECK-NEXT:   [[COPY35:%[0-9]+]]:_(<8 x s32>) = COPY $amhl2
  ; CHECK-NEXT:   [[COPY36:%[0-9]+]]:_(<8 x s32>) = COPY $amhl3
  ; CHECK-NEXT:   [[COPY37:%[0-9]+]]:_(<8 x s32>) = COPY $amhl4
  ; CHECK-NEXT:   [[COPY38:%[0-9]+]]:_(<8 x s32>) = COPY $amhl5
  ; CHECK-NEXT:   [[COPY39:%[0-9]+]]:_(<8 x s32>) = COPY $amhl6
  ; CHECK-NEXT:   [[COPY40:%[0-9]+]]:_(<8 x s32>) = COPY $amhl7
  ; CHECK-NEXT:   [[COPY41:%[0-9]+]]:_(<8 x s32>) = COPY $amhl8
  ; CHECK-NEXT:   [[COPY42:%[0-9]+]]:_(<8 x s32>) = COPY $amlh0
  ; CHECK-NEXT:   [[COPY43:%[0-9]+]]:_(<8 x s32>) = COPY $amlh1
  ; CHECK-NEXT:   [[COPY44:%[0-9]+]]:_(<8 x s32>) = COPY $amlh2
  ; CHECK-NEXT:   [[COPY45:%[0-9]+]]:_(<8 x s32>) = COPY $amlh3
  ; CHECK-NEXT:   [[COPY46:%[0-9]+]]:_(<8 x s32>) = COPY $amlh4
  ; CHECK-NEXT:   [[COPY47:%[0-9]+]]:_(<8 x s32>) = COPY $amlh5
  ; CHECK-NEXT:   [[COPY48:%[0-9]+]]:_(<8 x s32>) = COPY $amlh6
  ; CHECK-NEXT:   [[COPY49:%[0-9]+]]:_(<8 x s32>) = COPY $amlh7
  ; CHECK-NEXT:   [[COPY50:%[0-9]+]]:_(<8 x s32>) = COPY $amlh8
  ; CHECK-NEXT:   [[COPY51:%[0-9]+]]:_(<8 x s32>) = COPY $amhh0
  ; CHECK-NEXT:   [[COPY52:%[0-9]+]]:_(<8 x s32>) = COPY $amhh1
  ; CHECK-NEXT:   [[COPY53:%[0-9]+]]:_(<8 x s32>) = COPY $amhh2
  ; CHECK-NEXT:   [[COPY54:%[0-9]+]]:_(<8 x s32>) = COPY $amhh3
  ; CHECK-NEXT:   [[COPY55:%[0-9]+]]:_(<8 x s32>) = COPY $amhh4
  ; CHECK-NEXT:   [[COPY56:%[0-9]+]]:_(<8 x s32>) = COPY $amhh5
  ; CHECK-NEXT:   [[COPY57:%[0-9]+]]:_(<8 x s32>) = COPY $amhh6
  ; CHECK-NEXT:   [[COPY58:%[0-9]+]]:_(<8 x s32>) = COPY $amhh7
  ; CHECK-NEXT:   [[COPY59:%[0-9]+]]:_(<8 x s32>) = COPY $amhh8
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<8 x s32>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<8 x s32>) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
                             <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
                             <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
                             <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
                             <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
                             <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
                             <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>, <8 x i32>,
                             <8 x i32>) {
  ret void
}

define void @callee_v16int16(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
  ; CHECK-LABEL: name: callee_v16int16
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -32, size: 32, alignment: 32, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.61):
  ; CHECK-NEXT:   liveins: $amhh0, $amhh1, $amhh2, $amhh3, $amhh4, $amhh5, $amhh6, $amhh7, $amhh8, $amhl0, $amhl1, $amhl2, $amhl3, $amhl4, $amhl5, $amhl6, $amhl7, $amhl8, $amlh0, $amlh1, $amlh2, $amlh3, $amlh4, $amlh5, $amlh6, $amlh7, $amlh8, $amll0, $amll1, $amll2, $amll3, $amll4, $amll5, $amll6, $amll7, $amll8, $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<16 x s16>) = COPY $wl2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<16 x s16>) = COPY $wl4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<16 x s16>) = COPY $wl6
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<16 x s16>) = COPY $wl8
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<16 x s16>) = COPY $wl10
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<16 x s16>) = COPY $wl1
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<16 x s16>) = COPY $wl3
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<16 x s16>) = COPY $wl5
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<16 x s16>) = COPY $wl7
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<16 x s16>) = COPY $wl9
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<16 x s16>) = COPY $wl11
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<16 x s16>) = COPY $wh0
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<16 x s16>) = COPY $wh2
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<16 x s16>) = COPY $wh4
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<16 x s16>) = COPY $wh6
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<16 x s16>) = COPY $wh8
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<16 x s16>) = COPY $wh10
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<16 x s16>) = COPY $wh1
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<16 x s16>) = COPY $wh3
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<16 x s16>) = COPY $wh5
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<16 x s16>) = COPY $wh7
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<16 x s16>) = COPY $wh9
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<16 x s16>) = COPY $wh11
  ; CHECK-NEXT:   [[COPY24:%[0-9]+]]:_(<16 x s16>) = COPY $amll0
  ; CHECK-NEXT:   [[COPY25:%[0-9]+]]:_(<16 x s16>) = COPY $amll1
  ; CHECK-NEXT:   [[COPY26:%[0-9]+]]:_(<16 x s16>) = COPY $amll2
  ; CHECK-NEXT:   [[COPY27:%[0-9]+]]:_(<16 x s16>) = COPY $amll3
  ; CHECK-NEXT:   [[COPY28:%[0-9]+]]:_(<16 x s16>) = COPY $amll4
  ; CHECK-NEXT:   [[COPY29:%[0-9]+]]:_(<16 x s16>) = COPY $amll5
  ; CHECK-NEXT:   [[COPY30:%[0-9]+]]:_(<16 x s16>) = COPY $amll6
  ; CHECK-NEXT:   [[COPY31:%[0-9]+]]:_(<16 x s16>) = COPY $amll7
  ; CHECK-NEXT:   [[COPY32:%[0-9]+]]:_(<16 x s16>) = COPY $amll8
  ; CHECK-NEXT:   [[COPY33:%[0-9]+]]:_(<16 x s16>) = COPY $amhl0
  ; CHECK-NEXT:   [[COPY34:%[0-9]+]]:_(<16 x s16>) = COPY $amhl1
  ; CHECK-NEXT:   [[COPY35:%[0-9]+]]:_(<16 x s16>) = COPY $amhl2
  ; CHECK-NEXT:   [[COPY36:%[0-9]+]]:_(<16 x s16>) = COPY $amhl3
  ; CHECK-NEXT:   [[COPY37:%[0-9]+]]:_(<16 x s16>) = COPY $amhl4
  ; CHECK-NEXT:   [[COPY38:%[0-9]+]]:_(<16 x s16>) = COPY $amhl5
  ; CHECK-NEXT:   [[COPY39:%[0-9]+]]:_(<16 x s16>) = COPY $amhl6
  ; CHECK-NEXT:   [[COPY40:%[0-9]+]]:_(<16 x s16>) = COPY $amhl7
  ; CHECK-NEXT:   [[COPY41:%[0-9]+]]:_(<16 x s16>) = COPY $amhl8
  ; CHECK-NEXT:   [[COPY42:%[0-9]+]]:_(<16 x s16>) = COPY $amlh0
  ; CHECK-NEXT:   [[COPY43:%[0-9]+]]:_(<16 x s16>) = COPY $amlh1
  ; CHECK-NEXT:   [[COPY44:%[0-9]+]]:_(<16 x s16>) = COPY $amlh2
  ; CHECK-NEXT:   [[COPY45:%[0-9]+]]:_(<16 x s16>) = COPY $amlh3
  ; CHECK-NEXT:   [[COPY46:%[0-9]+]]:_(<16 x s16>) = COPY $amlh4
  ; CHECK-NEXT:   [[COPY47:%[0-9]+]]:_(<16 x s16>) = COPY $amlh5
  ; CHECK-NEXT:   [[COPY48:%[0-9]+]]:_(<16 x s16>) = COPY $amlh6
  ; CHECK-NEXT:   [[COPY49:%[0-9]+]]:_(<16 x s16>) = COPY $amlh7
  ; CHECK-NEXT:   [[COPY50:%[0-9]+]]:_(<16 x s16>) = COPY $amlh8
  ; CHECK-NEXT:   [[COPY51:%[0-9]+]]:_(<16 x s16>) = COPY $amhh0
  ; CHECK-NEXT:   [[COPY52:%[0-9]+]]:_(<16 x s16>) = COPY $amhh1
  ; CHECK-NEXT:   [[COPY53:%[0-9]+]]:_(<16 x s16>) = COPY $amhh2
  ; CHECK-NEXT:   [[COPY54:%[0-9]+]]:_(<16 x s16>) = COPY $amhh3
  ; CHECK-NEXT:   [[COPY55:%[0-9]+]]:_(<16 x s16>) = COPY $amhh4
  ; CHECK-NEXT:   [[COPY56:%[0-9]+]]:_(<16 x s16>) = COPY $amhh5
  ; CHECK-NEXT:   [[COPY57:%[0-9]+]]:_(<16 x s16>) = COPY $amhh6
  ; CHECK-NEXT:   [[COPY58:%[0-9]+]]:_(<16 x s16>) = COPY $amhh7
  ; CHECK-NEXT:   [[COPY59:%[0-9]+]]:_(<16 x s16>) = COPY $amhh8
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<16 x s16>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<16 x s16>) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                              <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
                              <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
                              <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
                              <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
                              <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
                              <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
                              <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>,
                              <16 x i16>) {
  ret void
}

define void @callee_v32int8(<32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
  ; CHECK-LABEL: name: callee_v32int8
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -32, size: 32, alignment: 32, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.61):
  ; CHECK-NEXT:   liveins: $amhh0, $amhh1, $amhh2, $amhh3, $amhh4, $amhh5, $amhh6, $amhh7, $amhh8, $amhl0, $amhl1, $amhl2, $amhl3, $amhl4, $amhl5, $amhl6, $amhl7, $amhl8, $amlh0, $amlh1, $amlh2, $amlh3, $amlh4, $amlh5, $amlh6, $amlh7, $amlh8, $amll0, $amll1, $amll2, $amll3, $amll4, $amll5, $amll6, $amll7, $amll8, $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<32 x s8>) = COPY $wl2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<32 x s8>) = COPY $wl4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<32 x s8>) = COPY $wl6
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<32 x s8>) = COPY $wl8
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<32 x s8>) = COPY $wl10
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<32 x s8>) = COPY $wl1
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<32 x s8>) = COPY $wl3
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<32 x s8>) = COPY $wl5
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<32 x s8>) = COPY $wl7
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<32 x s8>) = COPY $wl9
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<32 x s8>) = COPY $wl11
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<32 x s8>) = COPY $wh0
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<32 x s8>) = COPY $wh2
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<32 x s8>) = COPY $wh4
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<32 x s8>) = COPY $wh6
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<32 x s8>) = COPY $wh8
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<32 x s8>) = COPY $wh10
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<32 x s8>) = COPY $wh1
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<32 x s8>) = COPY $wh3
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<32 x s8>) = COPY $wh5
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<32 x s8>) = COPY $wh7
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<32 x s8>) = COPY $wh9
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<32 x s8>) = COPY $wh11
  ; CHECK-NEXT:   [[COPY24:%[0-9]+]]:_(<32 x s8>) = COPY $amll0
  ; CHECK-NEXT:   [[COPY25:%[0-9]+]]:_(<32 x s8>) = COPY $amll1
  ; CHECK-NEXT:   [[COPY26:%[0-9]+]]:_(<32 x s8>) = COPY $amll2
  ; CHECK-NEXT:   [[COPY27:%[0-9]+]]:_(<32 x s8>) = COPY $amll3
  ; CHECK-NEXT:   [[COPY28:%[0-9]+]]:_(<32 x s8>) = COPY $amll4
  ; CHECK-NEXT:   [[COPY29:%[0-9]+]]:_(<32 x s8>) = COPY $amll5
  ; CHECK-NEXT:   [[COPY30:%[0-9]+]]:_(<32 x s8>) = COPY $amll6
  ; CHECK-NEXT:   [[COPY31:%[0-9]+]]:_(<32 x s8>) = COPY $amll7
  ; CHECK-NEXT:   [[COPY32:%[0-9]+]]:_(<32 x s8>) = COPY $amll8
  ; CHECK-NEXT:   [[COPY33:%[0-9]+]]:_(<32 x s8>) = COPY $amhl0
  ; CHECK-NEXT:   [[COPY34:%[0-9]+]]:_(<32 x s8>) = COPY $amhl1
  ; CHECK-NEXT:   [[COPY35:%[0-9]+]]:_(<32 x s8>) = COPY $amhl2
  ; CHECK-NEXT:   [[COPY36:%[0-9]+]]:_(<32 x s8>) = COPY $amhl3
  ; CHECK-NEXT:   [[COPY37:%[0-9]+]]:_(<32 x s8>) = COPY $amhl4
  ; CHECK-NEXT:   [[COPY38:%[0-9]+]]:_(<32 x s8>) = COPY $amhl5
  ; CHECK-NEXT:   [[COPY39:%[0-9]+]]:_(<32 x s8>) = COPY $amhl6
  ; CHECK-NEXT:   [[COPY40:%[0-9]+]]:_(<32 x s8>) = COPY $amhl7
  ; CHECK-NEXT:   [[COPY41:%[0-9]+]]:_(<32 x s8>) = COPY $amhl8
  ; CHECK-NEXT:   [[COPY42:%[0-9]+]]:_(<32 x s8>) = COPY $amlh0
  ; CHECK-NEXT:   [[COPY43:%[0-9]+]]:_(<32 x s8>) = COPY $amlh1
  ; CHECK-NEXT:   [[COPY44:%[0-9]+]]:_(<32 x s8>) = COPY $amlh2
  ; CHECK-NEXT:   [[COPY45:%[0-9]+]]:_(<32 x s8>) = COPY $amlh3
  ; CHECK-NEXT:   [[COPY46:%[0-9]+]]:_(<32 x s8>) = COPY $amlh4
  ; CHECK-NEXT:   [[COPY47:%[0-9]+]]:_(<32 x s8>) = COPY $amlh5
  ; CHECK-NEXT:   [[COPY48:%[0-9]+]]:_(<32 x s8>) = COPY $amlh6
  ; CHECK-NEXT:   [[COPY49:%[0-9]+]]:_(<32 x s8>) = COPY $amlh7
  ; CHECK-NEXT:   [[COPY50:%[0-9]+]]:_(<32 x s8>) = COPY $amlh8
  ; CHECK-NEXT:   [[COPY51:%[0-9]+]]:_(<32 x s8>) = COPY $amhh0
  ; CHECK-NEXT:   [[COPY52:%[0-9]+]]:_(<32 x s8>) = COPY $amhh1
  ; CHECK-NEXT:   [[COPY53:%[0-9]+]]:_(<32 x s8>) = COPY $amhh2
  ; CHECK-NEXT:   [[COPY54:%[0-9]+]]:_(<32 x s8>) = COPY $amhh3
  ; CHECK-NEXT:   [[COPY55:%[0-9]+]]:_(<32 x s8>) = COPY $amhh4
  ; CHECK-NEXT:   [[COPY56:%[0-9]+]]:_(<32 x s8>) = COPY $amhh5
  ; CHECK-NEXT:   [[COPY57:%[0-9]+]]:_(<32 x s8>) = COPY $amhh6
  ; CHECK-NEXT:   [[COPY58:%[0-9]+]]:_(<32 x s8>) = COPY $amhh7
  ; CHECK-NEXT:   [[COPY59:%[0-9]+]]:_(<32 x s8>) = COPY $amhh8
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s8>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<32 x s8>) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                            <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
                            <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
                            <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
                            <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
                            <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
                            <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
                            <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>,
                            <32 x i8>) {
  ret void
}

define void @callee_v8float(<8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
  ; CHECK-LABEL: name: callee_v8float
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -32, size: 32, alignment: 32, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.61):
  ; CHECK-NEXT:   liveins: $amhh0, $amhh1, $amhh2, $amhh3, $amhh4, $amhh5, $amhh6, $amhh7, $amhh8, $amhl0, $amhl1, $amhl2, $amhl3, $amhl4, $amhl5, $amhl6, $amhl7, $amhl8, $amlh0, $amlh1, $amlh2, $amlh3, $amlh4, $amlh5, $amlh6, $amlh7, $amlh8, $amll0, $amll1, $amll2, $amll3, $amll4, $amll5, $amll6, $amll7, $amll8, $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<8 x s32>) = COPY $wl6
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<8 x s32>) = COPY $wl8
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<8 x s32>) = COPY $wl10
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<8 x s32>) = COPY $wl3
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<8 x s32>) = COPY $wl5
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<8 x s32>) = COPY $wl7
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<8 x s32>) = COPY $wl9
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<8 x s32>) = COPY $wl11
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<8 x s32>) = COPY $wh0
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<8 x s32>) = COPY $wh2
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<8 x s32>) = COPY $wh4
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<8 x s32>) = COPY $wh6
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<8 x s32>) = COPY $wh8
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<8 x s32>) = COPY $wh10
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<8 x s32>) = COPY $wh1
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<8 x s32>) = COPY $wh3
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<8 x s32>) = COPY $wh5
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<8 x s32>) = COPY $wh7
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<8 x s32>) = COPY $wh9
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<8 x s32>) = COPY $wh11
  ; CHECK-NEXT:   [[COPY24:%[0-9]+]]:_(<8 x s32>) = COPY $amll0
  ; CHECK-NEXT:   [[COPY25:%[0-9]+]]:_(<8 x s32>) = COPY $amll1
  ; CHECK-NEXT:   [[COPY26:%[0-9]+]]:_(<8 x s32>) = COPY $amll2
  ; CHECK-NEXT:   [[COPY27:%[0-9]+]]:_(<8 x s32>) = COPY $amll3
  ; CHECK-NEXT:   [[COPY28:%[0-9]+]]:_(<8 x s32>) = COPY $amll4
  ; CHECK-NEXT:   [[COPY29:%[0-9]+]]:_(<8 x s32>) = COPY $amll5
  ; CHECK-NEXT:   [[COPY30:%[0-9]+]]:_(<8 x s32>) = COPY $amll6
  ; CHECK-NEXT:   [[COPY31:%[0-9]+]]:_(<8 x s32>) = COPY $amll7
  ; CHECK-NEXT:   [[COPY32:%[0-9]+]]:_(<8 x s32>) = COPY $amll8
  ; CHECK-NEXT:   [[COPY33:%[0-9]+]]:_(<8 x s32>) = COPY $amhl0
  ; CHECK-NEXT:   [[COPY34:%[0-9]+]]:_(<8 x s32>) = COPY $amhl1
  ; CHECK-NEXT:   [[COPY35:%[0-9]+]]:_(<8 x s32>) = COPY $amhl2
  ; CHECK-NEXT:   [[COPY36:%[0-9]+]]:_(<8 x s32>) = COPY $amhl3
  ; CHECK-NEXT:   [[COPY37:%[0-9]+]]:_(<8 x s32>) = COPY $amhl4
  ; CHECK-NEXT:   [[COPY38:%[0-9]+]]:_(<8 x s32>) = COPY $amhl5
  ; CHECK-NEXT:   [[COPY39:%[0-9]+]]:_(<8 x s32>) = COPY $amhl6
  ; CHECK-NEXT:   [[COPY40:%[0-9]+]]:_(<8 x s32>) = COPY $amhl7
  ; CHECK-NEXT:   [[COPY41:%[0-9]+]]:_(<8 x s32>) = COPY $amhl8
  ; CHECK-NEXT:   [[COPY42:%[0-9]+]]:_(<8 x s32>) = COPY $amlh0
  ; CHECK-NEXT:   [[COPY43:%[0-9]+]]:_(<8 x s32>) = COPY $amlh1
  ; CHECK-NEXT:   [[COPY44:%[0-9]+]]:_(<8 x s32>) = COPY $amlh2
  ; CHECK-NEXT:   [[COPY45:%[0-9]+]]:_(<8 x s32>) = COPY $amlh3
  ; CHECK-NEXT:   [[COPY46:%[0-9]+]]:_(<8 x s32>) = COPY $amlh4
  ; CHECK-NEXT:   [[COPY47:%[0-9]+]]:_(<8 x s32>) = COPY $amlh5
  ; CHECK-NEXT:   [[COPY48:%[0-9]+]]:_(<8 x s32>) = COPY $amlh6
  ; CHECK-NEXT:   [[COPY49:%[0-9]+]]:_(<8 x s32>) = COPY $amlh7
  ; CHECK-NEXT:   [[COPY50:%[0-9]+]]:_(<8 x s32>) = COPY $amlh8
  ; CHECK-NEXT:   [[COPY51:%[0-9]+]]:_(<8 x s32>) = COPY $amhh0
  ; CHECK-NEXT:   [[COPY52:%[0-9]+]]:_(<8 x s32>) = COPY $amhh1
  ; CHECK-NEXT:   [[COPY53:%[0-9]+]]:_(<8 x s32>) = COPY $amhh2
  ; CHECK-NEXT:   [[COPY54:%[0-9]+]]:_(<8 x s32>) = COPY $amhh3
  ; CHECK-NEXT:   [[COPY55:%[0-9]+]]:_(<8 x s32>) = COPY $amhh4
  ; CHECK-NEXT:   [[COPY56:%[0-9]+]]:_(<8 x s32>) = COPY $amhh5
  ; CHECK-NEXT:   [[COPY57:%[0-9]+]]:_(<8 x s32>) = COPY $amhh6
  ; CHECK-NEXT:   [[COPY58:%[0-9]+]]:_(<8 x s32>) = COPY $amhh7
  ; CHECK-NEXT:   [[COPY59:%[0-9]+]]:_(<8 x s32>) = COPY $amhh8
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<8 x s32>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<8 x s32>) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                            <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
                            <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
                            <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
                            <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
                            <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
                            <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
                            <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>,
                            <8 x float>) {
  ret void
}
