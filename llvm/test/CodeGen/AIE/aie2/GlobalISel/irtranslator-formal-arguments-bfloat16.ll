; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --print-fixed-stack
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

%class.bfloat16 = type { bfloat }
define void @callee_bfloat16(%class.bfloat16){
  ; CHECK-LABEL: name: callee_bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
   ret void
}

define void @callee_v8bfloat16(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>, <8 x bfloat>, <8 x bfloat>, <8 x bfloat>,
  ; CHECK-LABEL: name: callee_v8bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.10):
  ; CHECK-NEXT:   liveins: $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(<8 x s16>), [[UV1:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<16 x s16>) = COPY $wl2
  ; CHECK-NEXT:   [[UV2:%[0-9]+]]:_(<8 x s16>), [[UV3:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY1]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<16 x s16>) = COPY $wl4
  ; CHECK-NEXT:   [[UV4:%[0-9]+]]:_(<8 x s16>), [[UV5:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY2]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<16 x s16>) = COPY $wl6
  ; CHECK-NEXT:   [[UV6:%[0-9]+]]:_(<8 x s16>), [[UV7:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY3]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<16 x s16>) = COPY $wl8
  ; CHECK-NEXT:   [[UV8:%[0-9]+]]:_(<8 x s16>), [[UV9:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY4]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<16 x s16>) = COPY $wl10
  ; CHECK-NEXT:   [[UV10:%[0-9]+]]:_(<8 x s16>), [[UV11:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY5]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<16 x s16>) = COPY $wl1
  ; CHECK-NEXT:   [[UV12:%[0-9]+]]:_(<8 x s16>), [[UV13:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY6]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<16 x s16>) = COPY $wl3
  ; CHECK-NEXT:   [[UV14:%[0-9]+]]:_(<8 x s16>), [[UV15:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY7]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<16 x s16>) = COPY $wl5
  ; CHECK-NEXT:   [[UV16:%[0-9]+]]:_(<8 x s16>), [[UV17:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY8]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<16 x s16>) = COPY $wl7
  ; CHECK-NEXT:   [[UV18:%[0-9]+]]:_(<8 x s16>), [[UV19:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY9]](<16 x s16>)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <8 x bfloat>, <8 x bfloat>, <8 x bfloat>,
                             <8 x bfloat>) {
  ret void
}

define void @callee_v16bfloat16(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>, <16 x bfloat>, <16 x bfloat>, <16 x bfloat>,
  ; CHECK-LABEL: name: callee_v16bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.10):
  ; CHECK-NEXT:   liveins: $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<16 x s16>) = COPY $wl2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<16 x s16>) = COPY $wl4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<16 x s16>) = COPY $wl6
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<16 x s16>) = COPY $wl8
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<16 x s16>) = COPY $wl10
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<16 x s16>) = COPY $wl1
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<16 x s16>) = COPY $wl3
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<16 x s16>) = COPY $wl5
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<16 x s16>) = COPY $wl7
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <16 x bfloat>, <16 x bfloat>, <16 x bfloat>,
                             <16 x bfloat>) {
  ret void
}

define void @callee_v32bfloat16(<32 x bfloat>, <32 x bfloat>, <32 x bfloat>, <32 x bfloat>, <32 x bfloat>, <32 x bfloat>,
  ; CHECK-LABEL: name: callee_v32bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.10):
  ; CHECK-NEXT:   liveins: $x0, $x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<32 x s16>) = COPY $x2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<32 x s16>) = COPY $x4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<32 x s16>) = COPY $x6
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<32 x s16>) = COPY $x8
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<32 x s16>) = COPY $x10
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<32 x s16>) = COPY $x1
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<32 x s16>) = COPY $x3
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<32 x s16>) = COPY $x5
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<32 x s16>) = COPY $x7
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <32 x bfloat>, <32 x bfloat>, <32 x bfloat>,
                             <32 x bfloat>) {
  ret void
}

define void @callee_v64bfloat16(<64 x bfloat>, <64 x bfloat>, <64 x bfloat>, <64 x bfloat>,
  ; CHECK-LABEL: name: callee_v64bfloat16
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -512, size: 128, alignment: 32, stack-id: default,
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -384, size: 128, alignment: 32, stack-id: default,
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 2, type: default, offset: -256, size: 128, alignment: 32, stack-id: default,
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 3, type: default, offset: -128, size: 128, alignment: 32, stack-id: default,
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.8):
  ; CHECK-NEXT:   liveins: $y2, $y3, $y4, $y5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<64 x s16>) = COPY $y3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<64 x s16>) = COPY $y4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<64 x s16>) = COPY $y5
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.3
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<64 x s16>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<64 x s16>) from %fixed-stack.3, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.2
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<64 x s16>) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (<64 x s16>) from %fixed-stack.2, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX2:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(<64 x s16>) = G_LOAD [[FRAME_INDEX2]](p0) :: (invariant load (<64 x s16>) from %fixed-stack.1, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX3:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD3:%[0-9]+]]:_(<64 x s16>) = G_LOAD [[FRAME_INDEX3]](p0) :: (invariant load (<64 x s16>) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <64 x bfloat>, <64 x bfloat>, <64 x bfloat>,
                             <64 x bfloat>) {
  ret void
}


define dso_local void @pass_bfloat16(%class.bfloat16 %in.coerce) #0 {
  ; CHECK-LABEL: name: pass_bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0.in
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.1.pass
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s16), [[FRAME_INDEX]](p0) :: (store (s16) into %ir.in)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  %in = alloca %class.bfloat16, align 2
  %pass = alloca %class.bfloat16, align 2
  store %class.bfloat16 %in.coerce, ptr %in, align 2
  ret void
}

define dso_local void @_Z15test_v2bfloat16Dv2_u6__bf16(<2 x bfloat> noundef %b) local_unnamed_addr #2 {
  ; CHECK-LABEL: name: _Z15test_v2bfloat16Dv2_u6__bf16
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<2 x s16>) = COPY $r0
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0.t
  ; CHECK-NEXT:   G_STORE [[COPY]](<2 x s16>), [[FRAME_INDEX]](p0) :: (volatile store (<2 x s16>) into %ir.t)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  %t = alloca <2 x bfloat>, align 4
  store volatile <2 x bfloat> %b, ptr %t, align 4
  ret void
}

define dso_local void @_Z15test_v4bfloat16Dv4_u6__bf16(<4 x bfloat> noundef %b) local_unnamed_addr #2 {
  ; CHECK-LABEL: name: _Z15test_v4bfloat16Dv4_u6__bf16
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $l0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<4 x s16>) = COPY $l0
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0.t
  ; CHECK-NEXT:   G_STORE [[COPY]](<4 x s16>), [[FRAME_INDEX]](p0) :: (volatile store (<4 x s16>) into %ir.t)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  %t = alloca <4 x bfloat>, align 8
  store volatile <4 x bfloat> %b, ptr %t, align 8
  ret void
}

define dso_local void @pass_v8bfloat16(<8 x bfloat> noundef %0) #0 {
  ; CHECK-LABEL: name: pass_v8bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $wl0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(<8 x s16>), [[UV1:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY]](<16 x s16>)
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0..addr
  ; CHECK-NEXT:   G_STORE [[UV]](<8 x s16>), [[FRAME_INDEX]](p0) :: (store (<8 x s16>) into %ir..addr)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  %.addr = alloca <8 x bfloat>, align 16
  store <8 x bfloat> %0, ptr %.addr, align 16
  ret void
}

define dso_local void @pass_v16bfloat16(<16 x bfloat> noundef %0) #0 {
  ; CHECK-LABEL: name: pass_v16bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $wl0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0..addr
  ; CHECK-NEXT:   G_STORE [[COPY]](<16 x s16>), [[FRAME_INDEX]](p0) :: (store (<16 x s16>) into %ir..addr)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  %.addr = alloca <16 x bfloat>, align 32
  store <16 x bfloat> %0, ptr %.addr, align 32
  ret void
}

define dso_local void @pass_v32bfloat16(<32 x bfloat> noundef %0) #0 {
  ; CHECK-LABEL: name: pass_v32bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0..addr
  ; CHECK-NEXT:   G_STORE [[COPY]](<32 x s16>), [[FRAME_INDEX]](p0) :: (store (<32 x s16>) into %ir..addr)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  %.addr = alloca <32 x bfloat>, align 64
  store <32 x bfloat> %0, ptr %.addr, align 64
  ret void
}

define dso_local void @pass_v64bfloat16(<64 x bfloat> noundef %0) #0 {
  ; CHECK-LABEL: name: pass_v64bfloat16
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $y2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s16>) = COPY $y2
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0..addr
  ; CHECK-NEXT:   G_STORE [[COPY]](<64 x s16>), [[FRAME_INDEX]](p0) :: (store (<64 x s16>) into %ir..addr)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  %.addr = alloca <64 x bfloat>, align 128
  store <64 x bfloat> %0, ptr %.addr, align 128
  ret void
}
