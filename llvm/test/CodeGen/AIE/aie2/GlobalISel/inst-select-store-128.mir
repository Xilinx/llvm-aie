# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name: maskreg_spill
legalized:       true
regBankSelected: true
stack:
  - { id: 0, name: "", offset: 0, size: 16, alignment: 16}
body:             |
  bb.0.entry:
    liveins: $wl2, $p0, $q0

    ; CHECK-LABEL: name: maskreg_spill
    ; CHECK: liveins: $wl2, $p0, $q0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: ST_dmv_sts_q_ag_spill [[COPY]], %stack.0, implicit $sp :: (volatile store (<4 x s32>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_spill [[COPY1]], %stack.0, implicit $sp :: (volatile store (<16 x s8>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_spill [[COPY2]], %stack.0, implicit $sp :: (volatile store (<8 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<4 x s32>) = COPY $q0
    %2:vregbank(<16 x s8>) = COPY $q0
    %3:vregbank(<8 x s16>) = COPY $q0
    %4:ptrregbank(p0) = G_FRAME_INDEX %stack.0
    G_STORE %1(<4 x s32>), %4(p0) :: (volatile store (<4 x s32>))
    G_STORE %2(<16 x s8>), %4(p0) :: (volatile store (<16 x s8>))
    G_STORE %3(<8 x s16>), %4(p0) :: (volatile store (<8 x s16>))
    PseudoRET implicit $lr, implicit $wl0
...

---
name:            post_inc_vector_v4s32_store_q
legalized:       true
regBankSelected: true
body:             |
  bb.0:
    liveins: $p0, $q0, $r0, $r1, $wl0

    ; CHECK-LABEL: name: post_inc_vector_v4s32_store_q
    ; CHECK: liveins: $p0, $q0, $r0, $r1, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 8
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[COPY]], [[COPY1]] :: (store (<4 x s32>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm]], 0 :: (store (<4 x s32>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm1:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]] :: (store (<4 x s32>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm1:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm1]], -1024 :: (store (<4 x s32>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm2:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm1]], 1008 :: (store (<4 x s32>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm2:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm2]], [[MOVXM_lng_cg]] :: (store (<4 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[ST_dmv_sts_q_ag_pstm_nrm2]]
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = COPY $m0
    %2:modregbank(s20) = G_CONSTANT i20 0
    %3:modregbank(s20) = G_CONSTANT i20 8
    %4:modregbank(s20) = G_CONSTANT i20 -1024
    %5:modregbank(s20) = G_CONSTANT i20 1008
    %6:modregbank(s20) = G_CONSTANT i20 1024
    %7:ptrregbank(p0) = COPY $p0
    %8:vregbank(<4 x s32>) = COPY $q0
    %9:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<4 x s32>), %0, %1(s20) :: (store (<4 x s32>))
    %10:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<4 x s32>), %9, %2(s20) :: (store (<4 x s32>))
    %11:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<4 x s32>), %10, %3(s20) :: (store (<4 x s32>))
    %12:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<4 x s32>), %11, %4(s20) :: (store (<4 x s32>))
    %13:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<4 x s32>), %12, %5(s20) :: (store (<4 x s32>))
    %14:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<4 x s32>), %13, %6(s20) :: (store (<4 x s32>))
    PseudoRET implicit $lr, implicit %14(p0)

...

---
name:            post_inc_vector_v16s8_store_q
legalized:       true
regBankSelected: true
body:             |
  bb.0:
    liveins: $p0, $q0, $r0, $r1, $wl0

    ; CHECK-LABEL: name: post_inc_vector_v16s8_store_q
    ; CHECK: liveins: $p0, $q0, $r0, $r1, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 8
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[COPY]], [[COPY1]] :: (store (<16 x s8>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm]], 0 :: (store (<16 x s8>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm1:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]] :: (store (<16 x s8>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm1:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm1]], -1024 :: (store (<16 x s8>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm2:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm1]], 1008 :: (store (<16 x s8>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm2:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm2]], [[MOVXM_lng_cg]] :: (store (<16 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[ST_dmv_sts_q_ag_pstm_nrm2]]
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = COPY $m0
    %2:modregbank(s20) = G_CONSTANT i20 0
    %3:modregbank(s20) = G_CONSTANT i20 8
    %4:modregbank(s20) = G_CONSTANT i20 -1024
    %5:modregbank(s20) = G_CONSTANT i20 1008
    %6:modregbank(s20) = G_CONSTANT i20 1024
    %7:ptrregbank(p0) = COPY $p0
    %8:vregbank(<16 x s8>) = COPY $q0
    %9:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<16 x s8>), %0, %1(s20) :: (store (<16 x s8>))
    %10:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<16 x s8>), %9, %2(s20) :: (store (<16 x s8>))
    %11:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<16 x s8>), %10, %3(s20) :: (store (<16 x s8>))
    %12:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<16 x s8>), %11, %4(s20) :: (store (<16 x s8>))
    %13:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<16 x s8>), %12, %5(s20) :: (store (<16 x s8>))
    %14:ptrregbank(p0) = G_AIE_POSTINC_STORE %8(<16 x s8>), %13, %6(s20) :: (store (<16 x s8>))
    PseudoRET implicit $lr, implicit %14(p0)
...

---
name:            post_inc_vector_v8s16_store_q
legalized:       true
regBankSelected: true
body:             |
  bb.0:
    liveins: $p0, $q0, $r0, $r1, $wl0

    ; CHECK-LABEL: name: post_inc_vector_v8s16_store_q
    ; CHECK: liveins: $p0, $q0, $r0, $r1, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 8
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[COPY]], [[COPY1]] :: (store (<8 x s16>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm]], 0 :: (store (<8 x s16>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm1:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]] :: (store (<8 x s16>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm1:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm1]], -1024 :: (store (<8 x s16>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm_imm2:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm_imm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm1]], 1008 :: (store (<8 x s16>))
    ; CHECK-NEXT: [[ST_dmv_sts_q_ag_pstm_nrm2:%[0-9]+]]:ep = ST_dmv_sts_q_ag_pstm_nrm [[COPY2]], [[ST_dmv_sts_q_ag_pstm_nrm_imm2]], [[MOVXM_lng_cg]] :: (store (<8 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[ST_dmv_sts_q_ag_pstm_nrm2]]
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = COPY $m0
    %2:modregbank(s20) = G_CONSTANT i20 0
    %3:modregbank(s20) = G_CONSTANT i20 8
    %4:modregbank(s20) = G_CONSTANT i20 -1024
    %5:modregbank(s20) = G_CONSTANT i20 1008
    %6:modregbank(s20) = G_CONSTANT i20 1024
    %7:vregbank(<8 x s16>) = COPY $q0
    %8:ptrregbank(p0) = G_AIE_POSTINC_STORE %7(<8 x s16>), %0, %1(s20) :: (store (<8 x s16>))
    %9:ptrregbank(p0) = G_AIE_POSTINC_STORE %7(<8 x s16>), %8, %2(s20) :: (store (<8 x s16>))
    %10:ptrregbank(p0) = G_AIE_POSTINC_STORE %7(<8 x s16>), %9, %3(s20) :: (store (<8 x s16>))
    %11:ptrregbank(p0) = G_AIE_POSTINC_STORE %7(<8 x s16>), %10, %4(s20) :: (store (<8 x s16>))
    %12:ptrregbank(p0) = G_AIE_POSTINC_STORE %7(<8 x s16>), %11, %5(s20) :: (store (<8 x s16>))
    %13:ptrregbank(p0) = G_AIE_POSTINC_STORE %7(<8 x s16>), %12, %6(s20) :: (store (<8 x s16>))
    PseudoRET implicit $lr, implicit %13(p0)
...

---
name: maskreg_store_idx_v4s32
legalized:       true
regBankSelected: true
body:             |
  bb.0.entry:
    liveins: $p0, $q0

    ; CHECK-LABEL: name: maskreg_store_idx_v4s32
    ; CHECK: liveins: $p0, $q0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo:%[0-9]+]]:edj = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 0 :: (store (<4 x s32>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 32 :: (store (<4 x s32>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 496 :: (store (<4 x s32>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], -512 :: (store (<4 x s32>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx [[COPY]], [[COPY1]], [[MOV_PD_imm11_pseudo]] :: (store (<4 x s32>))
    %0:vregbank(<4 x s32>) = COPY $q0
    %3:ptrregbank(p0) = COPY $p0
    %4:modregbank(s20) = G_CONSTANT i20 0
    %6:modregbank(s20) = G_CONSTANT i20 32
    %8:modregbank(s20) = G_CONSTANT i20 496
    %10:modregbank(s20) = G_CONSTANT i20 -512
    %12:modregbank(s20) = G_CONSTANT i20 512
    G_AIE_OFFSET_STORE %0:vregbank(<4 x s32>), %3(p0), %4(s20) :: (store (<4 x s32>))
    G_AIE_OFFSET_STORE %0:vregbank(<4 x s32>), %3(p0), %6(s20) :: (store (<4 x s32>))
    G_AIE_OFFSET_STORE %0:vregbank(<4 x s32>), %3(p0), %8(s20) :: (store (<4 x s32>))
    G_AIE_OFFSET_STORE %0:vregbank(<4 x s32>), %3(p0), %10(s20) :: (store (<4 x s32>))
    G_AIE_OFFSET_STORE %0:vregbank(<4 x s32>), %3(p0), %12(s20) :: (store (<4 x s32>))
...

---
name: maskreg_store_idx_v8s16
legalized:       true
regBankSelected: true
body:             |
  bb.0.entry:
    liveins: $p0

    ; CHECK-LABEL: name: maskreg_store_idx_v8s16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo:%[0-9]+]]:edj = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 0 :: (store (<8 x s16>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 32 :: (store (<8 x s16>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 496 :: (store (<8 x s16>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], -512 :: (store (<8 x s16>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx [[COPY]], [[COPY1]], [[MOV_PD_imm11_pseudo]] :: (store (<8 x s16>))
    %1:vregbank(<8 x s16>) = COPY $q0
    %3:ptrregbank(p0) = COPY $p0
    %4:modregbank(s20) = G_CONSTANT i20 0
    %6:modregbank(s20) = G_CONSTANT i20 32
    %8:modregbank(s20) = G_CONSTANT i20 496
    %10:modregbank(s20) = G_CONSTANT i20 -512
    %12:modregbank(s20) = G_CONSTANT i20 512
    G_AIE_OFFSET_STORE %1:vregbank(<8 x s16>), %3(p0), %4(s20) :: (store (<8 x s16>))
    G_AIE_OFFSET_STORE %1:vregbank(<8 x s16>), %3(p0), %6(s20) :: (store (<8 x s16>))
    G_AIE_OFFSET_STORE %1:vregbank(<8 x s16>), %3(p0), %8(s20) :: (store (<8 x s16>))
    G_AIE_OFFSET_STORE %1:vregbank(<8 x s16>), %3(p0), %10(s20) :: (store (<8 x s16>))
    G_AIE_OFFSET_STORE %1:vregbank(<8 x s16>), %3(p0), %12(s20) :: (store (<8 x s16>))
...

---
name: maskreg_store_idx_v16i8
legalized:       true
regBankSelected: true
body:             |
  bb.0.entry:
    liveins: $p0

    ; CHECK-LABEL: name: maskreg_store_idx_v16i8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo:%[0-9]+]]:edj = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 0 :: (store (<16 x s8>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 32 :: (store (<16 x s8>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], 496 :: (store (<16 x s8>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm [[COPY]], [[COPY1]], -512 :: (store (<16 x s8>))
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx [[COPY]], [[COPY1]], [[MOV_PD_imm11_pseudo]] :: (store (<16 x s8>))
    %2:vregbank(<16 x s8>) = COPY $q0
    %3:ptrregbank(p0) = COPY $p0
    %4:modregbank(s20) = G_CONSTANT i20 0
    %6:modregbank(s20) = G_CONSTANT i20 32
    %8:modregbank(s20) = G_CONSTANT i20 496
    %10:modregbank(s20) = G_CONSTANT i20 -512
    %12:modregbank(s20) = G_CONSTANT i20 512
    G_AIE_OFFSET_STORE %2:vregbank(<16 x s8>), %3(p0), %4(s20) :: (store (<16 x s8>))
    G_AIE_OFFSET_STORE %2:vregbank(<16 x s8>), %3(p0), %6(s20) :: (store (<16 x s8>))
    G_AIE_OFFSET_STORE %2:vregbank(<16 x s8>), %3(p0), %8(s20) :: (store (<16 x s8>))
    G_AIE_OFFSET_STORE %2:vregbank(<16 x s8>), %3(p0), %10(s20) :: (store (<16 x s8>))
    G_AIE_OFFSET_STORE %2:vregbank(<16 x s8>), %3(p0), %12(s20) :: (store (<16 x s8>))
...
