# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VST_CONV_across_BB
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: VST_CONV_across_BB
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $bml0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
  ; CHECK-NEXT:   [[VCONV_BF16_FP32_:%[0-9]+]]:vec256 = VCONV_BF16_FP32 [[COPY1]], implicit-def dead $srf2fflags, implicit $crf2fmask, implicit $crrnd
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   [[VST_dmw_sts_w_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_dmw_sts_w_ag_pstm_nrm_imm [[VCONV_BF16_FP32_]], [[COPY]], 32 :: (store (<16 x s16>))
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0:
    liveins: $p0, $bml0
    %0:ptrregbank(p0) = COPY $p0
    %8:modregbank(s20) = G_CONSTANT i20 32
    %100:accregbank(<8 x s64>) = COPY $bml0
    %104:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)

  bb.1:
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %0, %8 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

# Combining pointer adds and load and stores is no longer done in ISel.
# Combining addressing modes is done in the post-legalizer combiner.
---
name:            Indexed_Load_Combine
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: Indexed_Load_Combine
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[PADD_imm_pseudo:%[0-9]+]]:ep = PADD_imm_pseudo [[COPY]], 992
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[PADD_imm_pseudo]], 0 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLDA_dmw_lda_w_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 992
    %3:ptrregbank(p0) = G_PTR_ADD %1:ptrregbank, %2:modregbank(s20)
    %0:vregbank(<8 x s32>) = G_LOAD %3:ptrregbank(p0) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            Indexed_Store_Combine
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: Indexed_Store_Combine
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[PADD_imm_pseudo:%[0-9]+]]:ep = PADD_imm_pseudo [[COPY1]], 992
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY]], [[PADD_imm_pseudo]], 0 :: (store (<8 x s32>))
    %0:vregbank(<8 x s32>) = COPY $wl0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 992
    %3:ptrregbank(p0) = G_PTR_ADD %1:ptrregbank, %2:modregbank(s20)
    G_STORE %0:vregbank(<8 x s32>), %3:ptrregbank(p0) :: (store (<8 x s32>))
...
