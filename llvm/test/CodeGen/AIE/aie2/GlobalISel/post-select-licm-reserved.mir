# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=reserved-reg-licm %s -verify-machineinstrs -o - \
# RUN:    | FileCheck %s


---
name:            pack_dyn_sign_loop
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: pack_dyn_sign_loop
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vec512 = COPY $x0
  ; CHECK-NEXT:   $crpacksign = COPY [[COPY2]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   $crpacksign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.0:
    successors: %bb.2(0x80000000)
    liveins: $p0, $r0, $r1, $x0
    %0:er = COPY $r0
    %1:ep = COPY $p0
    %2:er = COPY $r1
    %3:vec512 = COPY $x0
    PseudoJ_jump_imm %bb.2

  bb.1:
    PseudoRET implicit $lr

  bb.2:
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
    $crpacksign = COPY %2
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    PseudoJNZ %0, %bb.2
    PseudoJ_jump_imm %bb.1
...

# Similar to above, but the loop has not dedicated exit.
# A dedicated exit block should be created.
---
name:            pack_dyn_sign_loop_no_dedicated_exit
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: pack_dyn_sign_loop_no_dedicated_exit
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vec512 = COPY $x0
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crpacksign = COPY [[COPY2]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.3(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crpacksign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.0:
    successors: %bb.3, %bb.1
    liveins: $p0, $r0, $r1, $x0
    %0:er = COPY $r0
    %1:ep = COPY $p0
    %2:er = COPY $r1
    %3:vec512 = COPY $x0
    PseudoJNZ %0, %bb.3

  bb.1:
    PseudoRET implicit $lr

  bb.3:
    successors: %bb.2

  bb.2:
    successors: %bb.2, %bb.1
    $crpacksign = COPY %2
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    PseudoJNZ %0, %bb.2
    PseudoJ_jump_imm %bb.1
...

---
name:            pack_dyn_sign_nested_loop
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: pack_dyn_sign_nested_loop
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vec512 = COPY $x0
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crpacksign = COPY [[COPY2]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crpacksign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0:
    liveins: $p0, $r0, $r1, $x0
    %0:er = COPY $r0
    %1:ep = COPY $p0
    %2:er = COPY $r1
    %3:vec512 = COPY $x0
    PseudoJ_jump_imm %bb.1

  bb.1:
    PseudoJ_jump_imm %bb.2

  bb.2:
    $crpacksign = COPY %2
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    PseudoJNZ %0, %bb.2
    PseudoJ_jump_imm %bb.3

  bb.3:
    PseudoJNZ %0, %bb.1
    PseudoJ_jump_imm %bb.4

  bb.4:
    PseudoRET implicit $lr

...

# CustomRegMask clobers $crpacksign. Make sure no assignments to it are hoisted.
---
name:            pack_dyn_sign_loop_clobber
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: pack_dyn_sign_loop_clobber
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vec512 = COPY $x0
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crpacksign = COPY [[COPY2]]
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   $crpacksign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJL 32, CustomRegMask($lr,$p0,$r0,$r1,$r2,$r3), implicit-def $lr
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.0:
    successors: %bb.2(0x80000000)
    liveins: $p0, $r0, $r1, $x0
    %0:er = COPY $r0
    %1:ep = COPY $p0
    %2:er = COPY $r1
    %3:vec512 = COPY $x0
    PseudoJ_jump_imm %bb.2

  bb.1:
    PseudoRET implicit $lr

  bb.2:
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
    $crpacksign = COPY %2
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    PseudoJL 32, CustomRegMask($lr,$p0,$r0,$r1,$r2,$r3), implicit-def $lr
    PseudoJNZ %0, %bb.2
    PseudoJ_jump_imm %bb.1
...

# $crpacksign has different live values within the loop, no hoisting
---
name:            pack_dyn_sign_different_assign
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: pack_dyn_sign_different_assign
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vec512 = COPY $x0
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crpacksign = COPY [[COPY2]]
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   $crpacksign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.0:
    successors: %bb.2(0x80000000)
    liveins: $p0, $r0, $r1, $x0
    %0:er = COPY $r0
    %1:ep = COPY $p0
    %2:er = COPY $r1
    %3:vec512 = COPY $x0
    PseudoJ_jump_imm %bb.2

  bb.1:
    PseudoRET implicit $lr

  bb.2:
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
    $crpacksign = COPY %2
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    PseudoJNZ %0, %bb.2
    PseudoJ_jump_imm %bb.1
...

# $crpacksign is defined through a non-loop-invariant register, make sure
# the assignment is not hoisted.
---
name:            pack_dyn_sign_assign_from_variable_reg
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: pack_dyn_sign_assign_from_variable_reg
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vec512 = COPY $x0
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:ers4 = COPY [[COPY2]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   $crpacksign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[VEXTRACT_S32_:%[0-9]+]]:er = VEXTRACT_S32 [[COPY3]], [[COPY4]]
  ; CHECK-NEXT:   $crpacksign = COPY [[VEXTRACT_S32_]]
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1

  bb.0:
    successors: %bb.2(0x80000000)
    liveins: $p0, $r0, $r1, $x0
    %0:er = COPY $r0
    %1:ep = COPY $p0
    %2:er = COPY $r1
    %3:vec512 = COPY $x0
    %4:ers4 = COPY %2
    PseudoJ_jump_imm %bb.2

  bb.1:
    PseudoRET implicit $lr

  bb.2:
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
    %10:er = VEXTRACT_S32 %3, %4
    $crpacksign = COPY %10
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    PseudoJNZ %0, %bb.2
    PseudoJ_jump_imm %bb.1
...

# $crpacksign = MOV_scalar_imm10_pseudo 0 cannot be moved to the exit block
# because its value is livein back into the loop.
---
name:            pack_dyn_sign_livein
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: pack_dyn_sign_livein
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vec512 = COPY $x0
  ; CHECK-NEXT:   $crpacksign = COPY [[COPY2]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   VST_PACK_D8_D16_ag_idx_imm [[COPY1]], 0, [[COPY3]], implicit $crsat, implicit $crpacksign
  ; CHECK-NEXT:   $crpacksign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJNZ [[COPY]], %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  bb.0:
    successors: %bb.2(0x80000000)
    liveins: $p0, $r0, $r1, $x0
    %0:er = COPY $r0
    %1:ep = COPY $p0
    %2:er = COPY $r1
    %3:vec512 = COPY $x0
    $crpacksign = COPY %2
    PseudoJ_jump_imm %bb.2

  bb.1:
    PseudoRET implicit $lr

  bb.2:
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
    liveins: $p0, $r0, $r1, $r2, $x0
    VST_PACK_D8_D16_ag_idx_imm %1, 0, %3, implicit $crsat, implicit $crpacksign
    $crpacksign = MOV_scalar_imm10_pseudo 0
    PseudoJNZ %0, %bb.2
    PseudoJ_jump_imm %bb.1
...
