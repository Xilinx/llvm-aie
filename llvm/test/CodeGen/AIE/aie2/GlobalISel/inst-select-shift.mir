# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s


---
name:            select_vshift_align_with_shift_in_sReg
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $r1, $x2, $x4
    ; CHECK-LABEL: name: select_vshift_align_with_shift_in_sReg
    ; CHECK: liveins: $r0, $r1, $x2, $x4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VSHIFT_ALIGN:%[0-9]+]]:vec512 = VSHIFT_ALIGN [[COPY]], [[COPY4]], [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $x0 = COPY [[VSHIFT_ALIGN]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<16 x s32>) = COPY $x2
    %2:vregbank(<16 x s32>) = COPY $x4
    %3:gprregbank(s32) = COPY $r0
    %4:gprregbank(s32) = COPY $r1
    %5:mss(s32) = COPY %3
    %0:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vshift.I512.I512), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %5:mss(s32), %4:gprregbank(s32)
    $x0 = COPY %0:vregbank(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...



---
name:            select_vshift_align
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $r1, $x2, $x4
    ; CHECK-LABEL: name: select_vshift_align
    ; CHECK: liveins: $r0, $r1, $x2, $x4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VSHIFT_ALIGN:%[0-9]+]]:vec512 = VSHIFT_ALIGN [[COPY]], [[COPY4]], [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $x0 = COPY [[VSHIFT_ALIGN]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<16 x s32>) = COPY $x2
    %2:vregbank(<16 x s32>) = COPY $x4
    %3:gprregbank(s32) = COPY $r0
    %4:gprregbank(s32) = COPY $r1
    %0:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vshift.I512.I512), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %3:gprregbank(s32), %4:gprregbank(s32)
    $x0 = COPY %0:vregbank(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...


---
name:            select_vshift
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $x2, $x4
    ; CHECK-LABEL: name: select_vshift
    ; CHECK: liveins: $r0, $x2, $x4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[VSHIFT:%[0-9]+]]:vec512 = VSHIFT [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $x0 = COPY [[VSHIFT]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<64 x s8>) = COPY $x2
    %2:vregbank(<64 x s8>) = COPY $x4
    %3:gprregbank(s32) = COPY $r0
    %7:gprregbank(s32) = G_CONSTANT i32 0
    %4:vregbank(<16 x s32>) = G_BITCAST %1:vregbank(<64 x s8>)
    %5:vregbank(<16 x s32>) = G_BITCAST %2:vregbank(<64 x s8>)
    %6:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vshift.I512.I512), %4:vregbank(<16 x s32>), %5:vregbank(<16 x s32>), %7:gprregbank(s32), %3:gprregbank(s32)
    %0:vregbank(<64 x s8>) = G_BITCAST %6:vregbank(<16 x s32>)
    $x0 = COPY %0:vregbank(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0
...


---
name:            select_vshift_bf512
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $r1, $x2, $x4
    ; CHECK-LABEL: name: select_vshift_bf512
    ; CHECK: liveins: $r0, $r1, $x2, $x4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VSHIFT_ALIGN:%[0-9]+]]:vec512 = VSHIFT_ALIGN [[COPY]], [[COPY4]], [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $x0 = COPY [[VSHIFT_ALIGN]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s16>) = COPY $x2
    %2:vregbank(<32 x s16>) = COPY $x4
    %3:gprregbank(s32) = COPY $r0
    %4:gprregbank(s32) = COPY $r1
    %0:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.vshift.bf512.bf512), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>), %3:gprregbank(s32), %4:gprregbank(s32)
    $x0 = COPY %0:vregbank(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0
...
