# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=regbankselect -regbankselect-fast %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=regbankselect -regbankselect-greedy %s -verify-machineinstrs -o - | FileCheck %s

---
name:            test_v32int8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0

    ; CHECK-LABEL: name: test_v32int8
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: G_STORE [[COPY1]](<32 x s8>), [[COPY]](p0) :: (store (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<32 x s8>) = COPY $wl0
    G_STORE %1(<32 x s8>), %0(p0) :: (store (<32 x s8>))
    PseudoRET implicit $lr

...
---
name:            test_v32uint8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0

    ; CHECK-LABEL: name: test_v32uint8
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: G_STORE [[COPY1]](<32 x s8>), [[COPY]](p0) :: (store (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<32 x s8>) = COPY $wl0
    G_STORE %1(<32 x s8>), %0(p0) :: (store (<32 x s8>))
    PseudoRET implicit $lr

...
---
name:            test_v16int16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0

    ; CHECK-LABEL: name: test_v16int16
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: G_STORE [[COPY1]](<16 x s16>), [[COPY]](p0) :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<16 x s16>) = COPY $wl0
    G_STORE %1(<16 x s16>), %0(p0) :: (store (<16 x s16>))
    PseudoRET implicit $lr

...
---
name:            test_v16uint16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0

    ; CHECK-LABEL: name: test_v16uint16
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: G_STORE [[COPY1]](<16 x s16>), [[COPY]](p0) :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<16 x s16>) = COPY $wl0
    G_STORE %1(<16 x s16>), %0(p0) :: (store (<16 x s16>))
    PseudoRET implicit $lr

...
---
name:            test_v8int32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0

    ; CHECK-LABEL: name: test_v8int32
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<8 x s32>) = COPY $wl0
    ; CHECK-NEXT: G_STORE [[COPY1]](<8 x s32>), [[COPY]](p0) :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<8 x s32>) = COPY $wl0
    G_STORE %1(<8 x s32>), %0(p0) :: (store (<8 x s32>))
    PseudoRET implicit $lr

...
---
name:            test_v8uint32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0

    ; CHECK-LABEL: name: test_v8uint32
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<8 x s32>) = COPY $wl0
    ; CHECK-NEXT: G_STORE [[COPY1]](<8 x s32>), [[COPY]](p0) :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<8 x s32>) = COPY $wl0
    G_STORE %1(<8 x s32>), %0(p0) :: (store (<8 x s32>))
    PseudoRET implicit $lr

...
---
name:            test_v8acc32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0

    ; CHECK-LABEL: name: test_v8acc32
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:accregbank(<4 x s64>) = COPY $amll0
    ; CHECK-NEXT: G_STORE [[COPY1]](<4 x s64>), [[COPY]](p0) :: (store (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<4 x s64>) = COPY $amll0
    G_STORE %1(<4 x s64>), %0(p0) :: (store (<4 x s64>))
    PseudoRET implicit $lr

...
---
name:            test_v4acc64
legalized:       true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0

    ; CHECK-LABEL: name: test_v4acc64
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:accregbank(<4 x s64>) = COPY $amll0
    ; CHECK-NEXT: G_STORE [[COPY1]](<4 x s64>), [[COPY]](p0) :: (store (<4 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<4 x s64>) = COPY $amll0
    G_STORE %1(<4 x s64>), %0(p0) :: (store (<4 x s64>))
    PseudoRET implicit $lr

...
---
name:            test_v64int8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $x0

    ; CHECK-LABEL: name: test_v64int8
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: G_STORE [[COPY1]](<64 x s8>), [[COPY]](p0) :: (store (<64 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<64 x s8>) = COPY $x0
    G_STORE %1(<64 x s8>), %0(p0) :: (store (<64 x s8>))
    PseudoRET implicit $lr

...
---
name:            test_v64uint8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $x0

    ; CHECK-LABEL: name: test_v64uint8
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: G_STORE [[COPY1]](<64 x s8>), [[COPY]](p0) :: (store (<64 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<64 x s8>) = COPY $x0
    G_STORE %1(<64 x s8>), %0(p0) :: (store (<64 x s8>))
    PseudoRET implicit $lr

...
---
name:            test_v32int16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $x0

    ; CHECK-LABEL: name: test_v32int16
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: G_STORE [[COPY1]](<32 x s16>), [[COPY]](p0) :: (store (<32 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<32 x s16>) = COPY $x0
    G_STORE %1(<32 x s16>), %0(p0) :: (store (<32 x s16>))
    PseudoRET implicit $lr

...
---
name:            test_v32uint16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $x0

    ; CHECK-LABEL: name: test_v32uint16
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: G_STORE [[COPY1]](<32 x s16>), [[COPY]](p0) :: (store (<32 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<32 x s16>) = COPY $x0
    G_STORE %1(<32 x s16>), %0(p0) :: (store (<32 x s16>))
    PseudoRET implicit $lr

...
---
name:            test_v16int32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $x0

    ; CHECK-LABEL: name: test_v16int32
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: G_STORE [[COPY1]](<16 x s32>), [[COPY]](p0) :: (store (<16 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<16 x s32>) = COPY $x0
    G_STORE %1(<16 x s32>), %0(p0) :: (store (<16 x s32>))
    PseudoRET implicit $lr

...
---
name:            test_v16uint32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $x0

    ; CHECK-LABEL: name: test_v16uint32
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: G_STORE [[COPY1]](<16 x s32>), [[COPY]](p0) :: (store (<16 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<16 x s32>) = COPY $x0
    G_STORE %1(<16 x s32>), %0(p0) :: (store (<16 x s32>))
    PseudoRET implicit $lr

...
---
name:            test_v16acc32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0

    ; CHECK-LABEL: name: test_v16acc32
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:accregbank(<8 x s64>) = COPY $bml0
    ; CHECK-NEXT: G_STORE [[COPY1]](<8 x s64>), [[COPY]](p0) :: (store (<8 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<8 x s64>) = COPY $bml0
    G_STORE %1(<8 x s64>), %0(p0) :: (store (<8 x s64>))
    PseudoRET implicit $lr

...
---
name:            test_v8acc64
legalized:       true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0

    ; CHECK-LABEL: name: test_v8acc64
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:accregbank(<8 x s64>) = COPY $bml0
    ; CHECK-NEXT: G_STORE [[COPY1]](<8 x s64>), [[COPY]](p0) :: (store (<8 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<8 x s64>) = COPY $bml0
    G_STORE %1(<8 x s64>), %0(p0) :: (store (<8 x s64>))
    PseudoRET implicit $lr

...
---
name:            test_v128int8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $y2

    ; CHECK-LABEL: name: test_v128int8
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: G_STORE [[COPY1]](<128 x s8>), [[COPY]](p0) :: (store (<128 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<128 x s8>) = COPY $y2
    G_STORE %1(<128 x s8>), %0(p0) :: (store (<128 x s8>))
    PseudoRET implicit $lr

...
---
name:            test_v128uint8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $y2

    ; CHECK-LABEL: name: test_v128uint8
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: G_STORE [[COPY1]](<128 x s8>), [[COPY]](p0) :: (store (<128 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<128 x s8>) = COPY $y2
    G_STORE %1(<128 x s8>), %0(p0) :: (store (<128 x s8>))
    PseudoRET implicit $lr

...
---
name:            test_v64int16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $y2

    ; CHECK-LABEL: name: test_v64int16
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: G_STORE [[COPY1]](<64 x s16>), [[COPY]](p0) :: (store (<64 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<64 x s16>) = COPY $y2
    G_STORE %1(<64 x s16>), %0(p0) :: (store (<64 x s16>))
    PseudoRET implicit $lr

...
---
name:            test_v64uint16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $y2

    ; CHECK-LABEL: name: test_v64uint16
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: G_STORE [[COPY1]](<64 x s16>), [[COPY]](p0) :: (store (<64 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<64 x s16>) = COPY $y2
    G_STORE %1(<64 x s16>), %0(p0) :: (store (<64 x s16>))
    PseudoRET implicit $lr

...
---
name:            test_v32int32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $y2

    ; CHECK-LABEL: name: test_v32int32
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<32 x s32>) = COPY $y2
    ; CHECK-NEXT: G_STORE [[COPY1]](<32 x s32>), [[COPY]](p0) :: (store (<32 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<32 x s32>) = COPY $y2
    G_STORE %1(<32 x s32>), %0(p0) :: (store (<32 x s32>))
    PseudoRET implicit $lr

...
---
name:            test_v32uint32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0, $y2

    ; CHECK-LABEL: name: test_v32uint32
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vregbank(<32 x s32>) = COPY $y2
    ; CHECK-NEXT: G_STORE [[COPY1]](<32 x s32>), [[COPY]](p0) :: (store (<32 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<32 x s32>) = COPY $y2
    G_STORE %1(<32 x s32>), %0(p0) :: (store (<32 x s32>))
    PseudoRET implicit $lr

...
---
name:            test_v32acc32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0

    ; CHECK-LABEL: name: test_v32acc32
    ; CHECK: liveins: $cm0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:accregbank(<16 x s64>) = COPY $cm0
    ; CHECK-NEXT: G_STORE [[COPY1]](<16 x s64>), [[COPY]](p0) :: (store (<16 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<16 x s64>) = COPY $cm0
    G_STORE %1(<16 x s64>), %0(p0) :: (store (<16 x s64>))
    PseudoRET implicit $lr

...
---
name:            test_v16acc64
legalized:       true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0

    ; CHECK-LABEL: name: test_v16acc64
    ; CHECK: liveins: $cm0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:accregbank(<16 x s64>) = COPY $cm0
    ; CHECK-NEXT: G_STORE [[COPY1]](<16 x s64>), [[COPY]](p0) :: (store (<16 x s64>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:_(p0) = COPY $p0
    %1:_(<16 x s64>) = COPY $cm0
    G_STORE %1(<16 x s64>), %0(p0) :: (store (<16 x s64>))
    PseudoRET implicit $lr

...
