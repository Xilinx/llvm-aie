# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
#
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            vpush_int32_512
alignment:       16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
stack:
  - { id: 0, name: "", size: 64, alignment: 32 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: vpush_int32_512
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 12
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec512 = IMPLICIT_DEF
    ; CHECK-NEXT: [[VPUSH_HI_32_:%[0-9]+]]:vec512 = VPUSH_HI_32 [[DEF]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VPUSH_HI_32_]]
    %0:gprregbank(s32) = G_CONSTANT i32 12
    %1:vregbank(<16 x s32>) = G_IMPLICIT_DEF
    %2:vregbank(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI %1, %0(s32)
    PseudoRET implicit $lr, implicit %2
...


---
name:            vpush_int16_512
legalized: true
regBankSelected: true
stack:
  - { id: 0, name: "", size: 64, alignment: 32}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: vpush_int16_512
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 12
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec512 = IMPLICIT_DEF
    ; CHECK-NEXT: [[VPUSH_HI_16_:%[0-9]+]]:vec512 = VPUSH_HI_16 [[DEF]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VPUSH_HI_16_]]
    %0:gprregbank(s32) = G_CONSTANT i32 12
    %1:vregbank(<32 x s16>) = G_IMPLICIT_DEF
    %2:vregbank(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI %1, %0(s32)
    PseudoRET implicit $lr, implicit %2
...

---
name:            vpush_int8_512
legalized:       true
regBankSelected: true
tracksRegLiveness: true
stack:
  - { id: 0, name: "", size: 64, alignment: 32}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: vpush_int8_512
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 12
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec512 = IMPLICIT_DEF
    ; CHECK-NEXT: [[VPUSH_HI_8_:%[0-9]+]]:vec512 = VPUSH_HI_8 [[DEF]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VPUSH_HI_8_]]
    %0:gprregbank(s32) = G_CONSTANT i32 12
    %1:vregbank(<64 x s8>) = G_IMPLICIT_DEF
    %2:vregbank(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI %1, %0(s32)
    PseudoRET implicit $lr, implicit %2
...

---
name:            vpush_int32_256
legalized:       true
regBankSelected: true
tracksRegLiveness: true
stack:
  - { id: 0, name: "", size: 32, alignment: 32 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: vpush_int32_256
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec512 = IMPLICIT_DEF
    ; CHECK-NEXT: [[VPUSH_HI_32_:%[0-9]+]]:vec512 = VPUSH_HI_32 [[DEF]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY [[VPUSH_HI_32_]].sub_256_lo
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY [[VPUSH_HI_32_]].sub_256_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:gprregbank(s32) = G_CONSTANT i32 0
    %1:vregbank(<16 x s32>) = G_IMPLICIT_DEF
    %2:vregbank(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI %1, %0(s32)
    %3:vregbank(<8 x s32>), %4:vregbank(<8 x s32>) = G_UNMERGE_VALUES %2(<16 x s32>)
    PseudoRET implicit $lr, implicit %3
