# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            256bit_const_idx
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $wl0, $r0
    ; CHECK-LABEL: name: 256bit_const_idx
    ; CHECK: liveins: $wl0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er29 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo
    ; CHECK-NEXT: [[VINSERT_32_:%[0-9]+]]:vec512 = VINSERT_32 [[REG_SEQUENCE]], [[MOV_RLC_imm10_pseudo]], [[COPY1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[VINSERT_32_]].sub_256_lo
    ; CHECK-NEXT: $wl7 = COPY [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl7
    %0:vregbank(<8 x s32>) = COPY $wl0
    %1:gprregbank(s32) = COPY $r0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:vregbank(<8 x s32>) = G_AIE_INSERT_VECTOR_ELT %0:vregbank, %1:gprregbank(s32), %2:gprregbank(s32)
    $wl7 = COPY %3:vregbank(<8 x s32>)
    PseudoRET implicit $lr, implicit $wl7
...

---
name:            256bit_dyn_idx
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $wl0, $r0, $r1
    ; CHECK-LABEL: name: 256bit_dyn_idx
    ; CHECK: liveins: $wl0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er29 = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo
    ; CHECK-NEXT: [[VINSERT_16_:%[0-9]+]]:vec512 = VINSERT_16 [[REG_SEQUENCE]], [[COPY2]], [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[VINSERT_16_]].sub_256_lo
    ; CHECK-NEXT: $wl7 = COPY [[COPY3]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl7
    %0:vregbank(<16 x s16>) = COPY $wl0
    %1:gprregbank(s32) = COPY $r0
    %2:gprregbank(s32) = COPY $r1
    %3:vregbank(<16 x s16>) = G_AIE_INSERT_VECTOR_ELT %0:vregbank, %1:gprregbank(s32), %2:gprregbank(s32)
    $wl7 = COPY %3:vregbank(<16 x s16>)
    PseudoRET implicit $lr, implicit $wl7
...

---
name:            512bit_const_idx
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0, $r0
    ; CHECK-LABEL: name: 512bit_const_idx
    ; CHECK: liveins: $x0, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er29 = MOV_RLC_imm10_pseudo 8
    ; CHECK-NEXT: [[VINSERT_32_:%[0-9]+]]:vec512 = VINSERT_32 [[COPY]], [[MOV_RLC_imm10_pseudo]], [[COPY1]]
    ; CHECK-NEXT: $x3 = COPY [[VINSERT_32_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x3
    %0:vregbank(<16 x s32>) = COPY $x0
    %1:gprregbank(s32) = COPY $r0
    %2:gprregbank(s32) = G_CONSTANT i32 8
    %3:vregbank(<16 x s32>) = G_AIE_INSERT_VECTOR_ELT %0:vregbank, %1:gprregbank(s32), %2:gprregbank(s32)
    $x3 = COPY %3:vregbank(<16 x s32>)
    PseudoRET implicit $lr, implicit $x3
...

---
name:            512bit_dyn_idx
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0, $r0, $r1
    ; CHECK-LABEL: name: 512bit_dyn_idx
    ; CHECK: liveins: $x0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er29 = COPY $r1
    ; CHECK-NEXT: [[VINSERT_8_:%[0-9]+]]:vec512 = VINSERT_8 [[COPY]], [[COPY2]], [[COPY1]]
    ; CHECK-NEXT: $x3 = COPY [[VINSERT_8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x3
    %0:vregbank(<64 x s8>) = COPY $x0
    %1:gprregbank(s32) = COPY $r0
    %2:gprregbank(s32) = COPY $r1
    %3:vregbank(<64 x s8>) = G_AIE_INSERT_VECTOR_ELT %0:vregbank, %1:gprregbank(s32), %2:gprregbank(s32)
    $x3 = COPY %3:vregbank(<64 x s8>)
    PseudoRET implicit $lr, implicit $x3
...

---
name:            1024bit_const_idx_lo
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2, $r0
    ; CHECK-LABEL: name: 1024bit_const_idx_lo
    ; CHECK: liveins: $y2, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er29 = MOV_RLC_imm10_pseudo 8
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[VINSERT_32_:%[0-9]+]]:vec512 = VINSERT_32 [[COPY2]], [[MOV_RLC_imm10_pseudo]], [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[VINSERT_32_]], %subreg.sub_512_lo, [[COPY3]], %subreg.sub_512_hi
    ; CHECK-NEXT: $y5 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y5
    %0:vregbank(<32 x s32>) = COPY $y2
    %1:gprregbank(s32) = COPY $r0
    %2:gprregbank(s32) = G_CONSTANT i32 8
    %3:vregbank(<32 x s32>) = G_AIE_INSERT_VECTOR_ELT %0:vregbank, %1:gprregbank(s32), %2:gprregbank(s32)
    $y5 = COPY %3:vregbank(<32 x s32>)
    PseudoRET implicit $lr, implicit $y5
...

---
name:            1024bit_const_idx_hi
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y3, $r0
    ; CHECK-LABEL: name: 1024bit_const_idx_hi
    ; CHECK: liveins: $y3, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y3
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er29 = MOV_RLC_imm10_pseudo 13
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[VINSERT_16_:%[0-9]+]]:vec512 = VINSERT_16 [[COPY2]], [[MOV_RLC_imm10_pseudo]], [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec1024 = REG_SEQUENCE [[COPY3]], %subreg.sub_512_lo, [[VINSERT_16_]], %subreg.sub_512_hi
    ; CHECK-NEXT: $y5 = COPY [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y5
    %0:vregbank(<64 x s16>) = COPY $y3
    %1:gprregbank(s32) = COPY $r0
    %2:gprregbank(s32) = G_CONSTANT i32 45
    %3:vregbank(<64 x s16>) = G_AIE_INSERT_VECTOR_ELT %0:vregbank, %1:gprregbank(s32), %2:gprregbank(s32)
    $y5 = COPY %3:vregbank(<64 x s16>)
    PseudoRET implicit $lr, implicit $y5
...

---
name:            1024bit_dyn_idx
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y4, $r0, $r1
    ; CHECK-LABEL: name: 1024bit_dyn_idx
    ; CHECK: liveins: $y4, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 64
    ; CHECK-NEXT: [[LT:%[0-9]+]]:er27 = LT [[COPY2]], [[MOV_RLC_imm10_pseudo1]]
    ; CHECK-NEXT: [[SELNEZ:%[0-9]+]]:er = SELNEZ [[MOV_RLC_imm10_pseudo]], [[MOV_RLC_imm10_pseudo1]], [[LT]]
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:er29 = SUB [[COPY2]], [[SELNEZ]], implicit-def $srcarry
    ; CHECK-NEXT: [[ADD_add_r_ri:%[0-9]+]]:er = ADD_add_r_ri [[LT]], -1, implicit-def $srcarry
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:el = REG_SEQUENCE [[ADD_add_r_ri]], %subreg.sub_l_even, [[ADD_add_r_ri]], %subreg.sub_l_odd
    ; CHECK-NEXT: [[VSEL_8_:%[0-9]+]]:vec512 = VSEL_8 [[COPY3]], [[COPY4]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[VINSERT_8_:%[0-9]+]]:vec512 = VINSERT_8 [[VSEL_8_]], [[SUB]], [[COPY1]]
    ; CHECK-NEXT: [[VSEL_8_1:%[0-9]+]]:vec512 = VSEL_8 [[VINSERT_8_]], [[COPY3]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[VSEL_8_2:%[0-9]+]]:vec512 = VSEL_8 [[COPY4]], [[VINSERT_8_]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:vec1024 = REG_SEQUENCE [[VSEL_8_1]], %subreg.sub_512_lo, [[VSEL_8_2]], %subreg.sub_512_hi
    ; CHECK-NEXT: $y5 = COPY [[REG_SEQUENCE1]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y5
    %0:vregbank(<128 x s8>) = COPY $y4
    %1:gprregbank(s32) = COPY $r0
    %2:gprregbank(s32) = COPY $r1
    %3:vregbank(<128 x s8>) = G_AIE_INSERT_VECTOR_ELT %0:vregbank, %1:gprregbank(s32), %2:gprregbank(s32)
    $y5 = COPY %3:vregbank(<128 x s8>)
    PseudoRET implicit $lr, implicit $y5
...
