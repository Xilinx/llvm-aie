; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --print-fixed-stack
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; 64-bit vector types

define void @callee_v2int32(<2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>,
  ; CHECK-LABEL: name: callee_v2int32
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -8, size: 8, alignment: 8, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.9):
  ; CHECK-NEXT:   liveins: $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $l0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<2 x s32>) = COPY $l1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<2 x s32>) = COPY $l2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<2 x s32>) = COPY $l3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<2 x s32>) = COPY $l4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<2 x s32>) = COPY $l5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<2 x s32>) = COPY $l6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<2 x s32>) = COPY $l7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<2 x s32>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<2 x s32>) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <2 x i32>) {
  ret void
}

define void @callee_v4int16(<4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>,
  ; CHECK-LABEL: name: callee_v4int16
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -8, size: 8, alignment: 8, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.9):
  ; CHECK-NEXT:   liveins: $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<4 x s16>) = COPY $l0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<4 x s16>) = COPY $l1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<4 x s16>) = COPY $l2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<4 x s16>) = COPY $l3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<4 x s16>) = COPY $l4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<4 x s16>) = COPY $l5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<4 x s16>) = COPY $l6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<4 x s16>) = COPY $l7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<4 x s16>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<4 x s16>) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <4 x i16>) {
  ret void
}

define void @callee_v8int8(<8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>,
  ; CHECK-LABEL: name: callee_v8int8
  ; CHECK: fixedStack:
  ; CHECK:   - { id: 0, type: default, offset: -8, size: 8, alignment: 8, stack-id: default,
  ; CHECK:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
  ; CHECK:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.9):
  ; CHECK-NEXT:   liveins: $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s8>) = COPY $l0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<8 x s8>) = COPY $l1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<8 x s8>) = COPY $l2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<8 x s8>) = COPY $l3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<8 x s8>) = COPY $l4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<8 x s8>) = COPY $l5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<8 x s8>) = COPY $l6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<8 x s8>) = COPY $l7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<8 x s8>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<8 x s8>) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                            <8 x i8>) {
  ret void
}
