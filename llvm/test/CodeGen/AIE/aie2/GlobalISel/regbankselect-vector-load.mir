# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=regbankselect -regbankselect-fast %s -verify-machineinstrs -o - | FileCheck %s
# RUN: llc -mtriple aie2 -run-pass=regbankselect -regbankselect-greedy %s -verify-machineinstrs -o - | FileCheck %s

---
name:            test_v32int8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v32int8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<32 x s8>) = G_LOAD [[COPY]](p0) :: (load (<32 x s8>))
    ; CHECK-NEXT: $wl0 = COPY [[LOAD]](<32 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:_(p0) = COPY $p0
    %0:_(<32 x s8>) = G_LOAD %1(p0) :: (load (<32 x s8>))
    $wl0 = COPY %0(<32 x s8>)
    PseudoRET implicit $lr, implicit $wl0

...
---
name:            test_v32uint8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v32uint8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<32 x s8>) = G_LOAD [[COPY]](p0) :: (load (<32 x s8>))
    ; CHECK-NEXT: $wl0 = COPY [[LOAD]](<32 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:_(p0) = COPY $p0
    %0:_(<32 x s8>) = G_LOAD %1(p0) :: (load (<32 x s8>))
    $wl0 = COPY %0(<32 x s8>)
    PseudoRET implicit $lr, implicit $wl0

...
---
name:            test_v16int16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v16int16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<16 x s16>) = G_LOAD [[COPY]](p0) :: (load (<16 x s16>))
    ; CHECK-NEXT: $wl0 = COPY [[LOAD]](<16 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:_(p0) = COPY $p0
    %0:_(<16 x s16>) = G_LOAD %1(p0) :: (load (<16 x s16>))
    $wl0 = COPY %0(<16 x s16>)
    PseudoRET implicit $lr, implicit $wl0

...
---
name:            test_v16uint16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v16uint16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<16 x s16>) = G_LOAD [[COPY]](p0) :: (load (<16 x s16>))
    ; CHECK-NEXT: $wl0 = COPY [[LOAD]](<16 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:_(p0) = COPY $p0
    %0:_(<16 x s16>) = G_LOAD %1(p0) :: (load (<16 x s16>))
    $wl0 = COPY %0(<16 x s16>)
    PseudoRET implicit $lr, implicit $wl0

...
---
name:            test_v8int32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v8int32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<8 x s32>) = G_LOAD [[COPY]](p0) :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[LOAD]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:_(p0) = COPY $p0
    %0:_(<8 x s32>) = G_LOAD %1(p0) :: (load (<8 x s32>))
    $wl0 = COPY %0(<8 x s32>)
    PseudoRET implicit $lr, implicit $wl0

...
---
name:            test_v8uint32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v8uint32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<8 x s32>) = G_LOAD [[COPY]](p0) :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[LOAD]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:_(p0) = COPY $p0
    %0:_(<8 x s32>) = G_LOAD %1(p0) :: (load (<8 x s32>))
    $wl0 = COPY %0(<8 x s32>)
    PseudoRET implicit $lr, implicit $wl0

...
---
name:            test_v8acc32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v8acc32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:accregbank(<4 x s64>) = G_LOAD [[COPY]](p0) :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[LOAD]](<4 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $amll0
    %1:_(p0) = COPY $p0
    %0:_(<4 x s64>) = G_LOAD %1(p0) :: (load (<4 x s64>))
    $amll0 = COPY %0(<4 x s64>)
    PseudoRET implicit $lr, implicit $amll0

...
---
name:            test_v4acc64
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v4acc64
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:accregbank(<4 x s64>) = G_LOAD [[COPY]](p0) :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[LOAD]](<4 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $amll0
    %1:_(p0) = COPY $p0
    %0:_(<4 x s64>) = G_LOAD %1(p0) :: (load (<4 x s64>))
    $amll0 = COPY %0(<4 x s64>)
    PseudoRET implicit $lr, implicit $amll0

...
---
name:            test_v64int8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v64int8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<64 x s8>) = G_LOAD [[COPY]](p0) :: (load (<64 x s8>))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](<64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(p0) = COPY $p0
    %0:_(<64 x s8>) = G_LOAD %1(p0) :: (load (<64 x s8>))
    $x0 = COPY %0(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0

...
---
name:            test_v64uint8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v64uint8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<64 x s8>) = G_LOAD [[COPY]](p0) :: (load (<64 x s8>))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](<64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(p0) = COPY $p0
    %0:_(<64 x s8>) = G_LOAD %1(p0) :: (load (<64 x s8>))
    $x0 = COPY %0(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0

...
---
name:            test_v32int16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v32int16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<32 x s16>) = G_LOAD [[COPY]](p0) :: (load (<32 x s16>))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](<32 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(p0) = COPY $p0
    %0:_(<32 x s16>) = G_LOAD %1(p0) :: (load (<32 x s16>))
    $x0 = COPY %0(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0

...
---
name:            test_v32uint16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v32uint16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<32 x s16>) = G_LOAD [[COPY]](p0) :: (load (<32 x s16>))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](<32 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(p0) = COPY $p0
    %0:_(<32 x s16>) = G_LOAD %1(p0) :: (load (<32 x s16>))
    $x0 = COPY %0(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0

...
---
name:            test_v16int32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v16int32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<16 x s32>) = G_LOAD [[COPY]](p0) :: (load (<16 x s32>))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(p0) = COPY $p0
    %0:_(<16 x s32>) = G_LOAD %1(p0) :: (load (<16 x s32>))
    $x0 = COPY %0(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0

...
---
name:            test_v16uint32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v16uint32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<16 x s32>) = G_LOAD [[COPY]](p0) :: (load (<16 x s32>))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(p0) = COPY $p0
    %0:_(<16 x s32>) = G_LOAD %1(p0) :: (load (<16 x s32>))
    $x0 = COPY %0(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0

...
---
name:            test_v16acc32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v16acc32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:accregbank(<8 x s64>) = G_LOAD [[COPY]](p0) :: (load (<8 x s64>))
    ; CHECK-NEXT: $bml0 = COPY [[LOAD]](<8 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $bml0
    %1:_(p0) = COPY $p0
    %0:_(<8 x s64>) = G_LOAD %1(p0) :: (load (<8 x s64>))
    $bml0 = COPY %0(<8 x s64>)
    PseudoRET implicit $lr, implicit $bml0

...
---
name:            test_v8acc64
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v8acc64
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:accregbank(<8 x s64>) = G_LOAD [[COPY]](p0) :: (load (<8 x s64>))
    ; CHECK-NEXT: $bml0 = COPY [[LOAD]](<8 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $bml0
    %1:_(p0) = COPY $p0
    %0:_(<8 x s64>) = G_LOAD %1(p0) :: (load (<8 x s64>))
    $bml0 = COPY %0(<8 x s64>)
    PseudoRET implicit $lr, implicit $bml0

...
---
name:            test_v128int8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v128int8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<128 x s8>) = G_LOAD [[COPY]](p0) :: (load (<128 x s8>))
    ; CHECK-NEXT: $y2 = COPY [[LOAD]](<128 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:_(p0) = COPY $p0
    %0:_(<128 x s8>) = G_LOAD %1(p0) :: (load (<128 x s8>))
    $y2 = COPY %0(<128 x s8>)
    PseudoRET implicit $lr, implicit $y2

...
---
name:            test_v128uint8
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v128uint8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<128 x s8>) = G_LOAD [[COPY]](p0) :: (load (<128 x s8>))
    ; CHECK-NEXT: $y2 = COPY [[LOAD]](<128 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:_(p0) = COPY $p0
    %0:_(<128 x s8>) = G_LOAD %1(p0) :: (load (<128 x s8>))
    $y2 = COPY %0(<128 x s8>)
    PseudoRET implicit $lr, implicit $y2

...
---
name:            test_v64int16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v64int16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<64 x s16>) = G_LOAD [[COPY]](p0) :: (load (<64 x s16>))
    ; CHECK-NEXT: $y2 = COPY [[LOAD]](<64 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:_(p0) = COPY $p0
    %0:_(<64 x s16>) = G_LOAD %1(p0) :: (load (<64 x s16>))
    $y2 = COPY %0(<64 x s16>)
    PseudoRET implicit $lr, implicit $y2

...
---
name:            test_v64uint16
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v64uint16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<64 x s16>) = G_LOAD [[COPY]](p0) :: (load (<64 x s16>))
    ; CHECK-NEXT: $y2 = COPY [[LOAD]](<64 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:_(p0) = COPY $p0
    %0:_(<64 x s16>) = G_LOAD %1(p0) :: (load (<64 x s16>))
    $y2 = COPY %0(<64 x s16>)
    PseudoRET implicit $lr, implicit $y2

...
---
name:            test_v32int32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v32int32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<32 x s32>) = G_LOAD [[COPY]](p0) :: (load (<32 x s32>))
    ; CHECK-NEXT: $y2 = COPY [[LOAD]](<32 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:_(p0) = COPY $p0
    %0:_(<32 x s32>) = G_LOAD %1(p0) :: (load (<32 x s32>))
    $y2 = COPY %0(<32 x s32>)
    PseudoRET implicit $lr, implicit $y2

...
---
name:            test_v32uint32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v32uint32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:vregbank(<32 x s32>) = G_LOAD [[COPY]](p0) :: (load (<32 x s32>))
    ; CHECK-NEXT: $y2 = COPY [[LOAD]](<32 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:_(p0) = COPY $p0
    %0:_(<32 x s32>) = G_LOAD %1(p0) :: (load (<32 x s32>))
    $y2 = COPY %0(<32 x s32>)
    PseudoRET implicit $lr, implicit $y2

...
---
name:            test_v32acc32
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v32acc32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:accregbank(<16 x s64>) = G_LOAD [[COPY]](p0) :: (load (<16 x s64>))
    ; CHECK-NEXT: $cm0 = COPY [[LOAD]](<16 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:_(p0) = COPY $p0
    %0:_(<16 x s64>) = G_LOAD %1(p0) :: (load (<16 x s64>))
    $cm0 = COPY %0(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0

...
---
name:            test_v16acc64
legalized:       true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: test_v16acc64
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ptrregbank(p0) = COPY $p0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:accregbank(<16 x s64>) = G_LOAD [[COPY]](p0) :: (load (<16 x s64>))
    ; CHECK-NEXT: $cm0 = COPY [[LOAD]](<16 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:_(p0) = COPY $p0
    %0:_(<16 x s64>) = G_LOAD %1(p0) :: (load (<16 x s64>))
    $cm0 = COPY %0(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0

...
