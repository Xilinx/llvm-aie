; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; The Y2 reg is used by the result type, and it overlaps with wl4 and wl5 regs.
; Therefore, %a2 cannot be passed in vl0
define <32 x i32> @retcc_reserved_wl(<8 x i32> %a0, <8 x i32> %a1, <8 x i32> %a2) {
  ; CHECK-LABEL: name: retcc_reserved_wl
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $wl0, $wl2, $wl6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<8 x s32>) = COPY $wl6
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<32 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   $y2 = COPY [[BUILD_VECTOR]](<32 x s32>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $y2
  ret <32 x i32> zeroinitializer
}

; The Y2 reg is used by the result type, and it overlaps with the x4 and x5 regs.
; Therefore, %a2 cannot be passed in x4.
define <32 x i32> @retcc_reserved_x(<16 x i32> %a0, <16 x i32> %a1, <16 x i32> %a2) {
  ; CHECK-LABEL: name: retcc_reserved_x
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $x0, $x2, $x6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<16 x s32>) = COPY $x2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<16 x s32>) = COPY $x6
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<32 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   $y2 = COPY [[BUILD_VECTOR]](<32 x s32>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $y2
  ret <32 x i32> zeroinitializer
}

; The Y2 reg is used by the result type, and it overlaps with the Y regs
; Therefore, %a1 cannot be passed in y2.
define <32 x i32> @retcc_reserved_y(<32 x i32> %a1) {
  ; CHECK-LABEL: name: retcc_reserved_y
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $y3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y3
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<32 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   $y2 = COPY [[BUILD_VECTOR]](<32 x s32>)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $y2
  ret <32 x i32> zeroinitializer
}
