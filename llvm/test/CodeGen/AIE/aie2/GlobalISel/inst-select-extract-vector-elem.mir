# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s
---
name:            _256bit_extract_16bit_zext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: _256bit_extract_16bit_zext
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec256 = IMPLICIT_DEF
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[DEF]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VEXTRACT_D16_:%[0-9]+]]:er = VEXTRACT_D16 [[REG_SEQUENCE]], [[MOV_RLC_imm10_pseudo]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_D16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<16 x s16>) = COPY $wl0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %1(<16 x s16>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _256bit_extract_16bit_sext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: _256bit_extract_16bit_sext
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec256 = IMPLICIT_DEF
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[DEF]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VEXTRACT_S16_:%[0-9]+]]:er = VEXTRACT_S16 [[REG_SEQUENCE]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<16 x s16>) = COPY $wl0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<16 x s16>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _256bit_extract_8bit_sext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: _256bit_extract_8bit_sext
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec256 = IMPLICIT_DEF
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[DEF]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VEXTRACT_S8_:%[0-9]+]]:er = VEXTRACT_S8 [[REG_SEQUENCE]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s8>) = COPY $wl0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<32 x s8>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _256bit_extract_8bit_zext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: _256bit_extract_8bit_zext
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec256 = IMPLICIT_DEF
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[DEF]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VEXTRACT_D8_:%[0-9]+]]:er = VEXTRACT_D8 [[REG_SEQUENCE]], [[MOV_RLC_imm10_pseudo]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_D8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s8>) = COPY $wl0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %1(<32 x s8>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _256bit_extract_32bit
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $wl0

    ; CHECK-LABEL: name: _256bit_extract_32bit
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:vec256 = IMPLICIT_DEF
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[COPY]], %subreg.sub_256_lo, [[DEF]], %subreg.sub_256_hi
    ; CHECK-NEXT: [[VEXTRACT_S32_:%[0-9]+]]:er = VEXTRACT_S32 [[REG_SEQUENCE]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S32_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<8 x s32>) = COPY $wl0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %0:gprregbank(s32) = G_EXTRACT_VECTOR_ELT %1(<8 x s32>), %2(s32)
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _512bit_extract_16bit_zext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: _512bit_extract_16bit_zext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[VEXTRACT_D16_:%[0-9]+]]:er = VEXTRACT_D16 [[COPY]], [[MOV_RLC_imm10_pseudo]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_D16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %1(<32 x s16>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _512bit_extract_16bit_sext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: _512bit_extract_16bit_sext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[VEXTRACT_S16_:%[0-9]+]]:er = VEXTRACT_S16 [[COPY]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<32 x s16>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _512bit_extract_8bit_sext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: _512bit_extract_8bit_sext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[VEXTRACT_S8_:%[0-9]+]]:er = VEXTRACT_S8 [[COPY]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<64 x s8>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _512bit_extract_8bit_zext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: _512bit_extract_8bit_zext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[VEXTRACT_D8_:%[0-9]+]]:er = VEXTRACT_D8 [[COPY]], [[MOV_RLC_imm10_pseudo]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_D8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %1(<64 x s8>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _512bit_extract_32bit
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: _512bit_extract_32bit
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[VEXTRACT_S32_:%[0-9]+]]:er = VEXTRACT_S32 [[COPY]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S32_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<16 x s32>) = COPY $x0
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %0:gprregbank(s32) = G_EXTRACT_VECTOR_ELT %1(<16 x s32>), %2(s32)
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0
...
---
name:   _1024bit_extract_16bit_zext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extract_16bit_zext
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[VEXTRACT_D16_:%[0-9]+]]:er = VEXTRACT_D16 [[COPY1]], [[MOV_RLC_imm10_pseudo]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_D16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<64 x s16>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %1(<64 x s16>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_extract_16bit_sext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extract_16bit_sext
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[VEXTRACT_S16_:%[0-9]+]]:er = VEXTRACT_S16 [[COPY1]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<64 x s16>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<64 x s16>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_extract_8bit_sext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extract_8bit_sext
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[VEXTRACT_S8_:%[0-9]+]]:er = VEXTRACT_S8 [[COPY1]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<128 x s8>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<128 x s8>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_extract_8bit_zext
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extract_8bit_zext
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[VEXTRACT_D8_:%[0-9]+]]:er = VEXTRACT_D8 [[COPY1]], [[MOV_RLC_imm10_pseudo]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_D8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<128 x s8>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %1(<128 x s8>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_extract_32bit
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extract_32bit
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[VEXTRACT_S32_:%[0-9]+]]:er = VEXTRACT_S32 [[COPY1]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S32_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s32>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %0:gprregbank(s32) = G_EXTRACT_VECTOR_ELT %1(<32 x s32>), %2(s32)
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _512bit_extract_and_extend
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $x0

    ; CHECK-LABEL: name: _512bit_extract_and_extend
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 17
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[VEXTRACT_S16_:%[0-9]+]]:er = VEXTRACT_S16 [[COPY]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: [[VEXTRACT_S16_1:%[0-9]+]]:er = VEXTRACT_S16 [[COPY]], [[MOV_RLC_imm10_pseudo1]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:er = ADD [[VEXTRACT_S16_1]], [[VEXTRACT_S16_]], implicit-def dead $srcarry
    ; CHECK-NEXT: [[EXTENDs16_:%[0-9]+]]:er = EXTENDs16 [[ADD]]
    ; CHECK-NEXT: $r0 = COPY [[EXTENDs16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s16>) = COPY $x0
    %3:gprregbank(s32) = G_CONSTANT i32 17
    %5:gprregbank(s32) = G_CONSTANT i32 0
    %2:gprregbank(s16) = G_EXTRACT_VECTOR_ELT %1(<32 x s16>), %3(s32)
    %4:gprregbank(s16) = G_EXTRACT_VECTOR_ELT %1(<32 x s16>), %5(s32)
    %7:gprregbank(s32) = G_ANYEXT %4(s16)
    %8:gprregbank(s32) = G_ANYEXT %2(s16)
    %9:gprregbank(s32) = G_ADD %7, %8
    %6:gprregbank(s32) = G_SEXT_INREG %9, 16
    $r0 = COPY %6(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_extractelt_and_use
legalized:       true
regBankSelected: true
selected:        false
stack:
  - { id: 0, name: "", type: default, offset: 0, size: 4, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extractelt_and_use
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[PseudoFI:%[0-9]+]]:ep = PseudoFI %stack.0, implicit $sp
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 15
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[VEXTRACT_S32_:%[0-9]+]]:er = VEXTRACT_S32 [[COPY1]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: LIFETIME_START %stack.0
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[VEXTRACT_S32_]], [[PseudoFI]], 0 :: (volatile store (s32))
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[PseudoFI]], 0 :: (volatile dereferenceable load (s32))
    ; CHECK-NEXT: LIFETIME_END %stack.0
    ; CHECK-NEXT: $r0 = COPY [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s32>) = COPY $y2
    %4:gprregbank(s32) = G_CONSTANT i32 31
    %2:ptrregbank(p0) = G_FRAME_INDEX %stack.0
    %3:gprregbank(s32) = G_EXTRACT_VECTOR_ELT %1(<32 x s32>), %4(s32)
    LIFETIME_START %stack.0
    G_STORE %3(s32), %2(p0) :: (volatile store (s32))
    %0:gprregbank(s32) = G_LOAD %2(p0) :: (volatile dereferenceable load (s32))
    LIFETIME_END %stack.0
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0
...

...
---
name:            extract_32bit_v2int32
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $l0

    ; CHECK-LABEL: name: extract_32bit_v2int32
    ; CHECK: liveins: $l0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:el = COPY $l0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY [[COPY]].sub_l_even
    ; CHECK-NEXT: $r0 = COPY [[COPY1]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:gprregbank(<2 x s32>) = COPY $l0
    %5:gprregbank(s64) = G_BITCAST %1(<2 x s32>)
    %3:gprregbank(s32) = G_TRUNC %5(s64)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...

...
---
name:            _1024bit_extractelt_s16_high
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extractelt_s16_high
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 31
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[VEXTRACT_D16_:%[0-9]+]]:er = VEXTRACT_D16 [[COPY1]], [[MOV_RLC_imm10_pseudo]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_D16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<64 x s16>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 63
    %3:gprregbank(s32) = G_AIE_ZEXT_EXTRACT_VECTOR_ELT %1(<64 x s16>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_extractelt_s8_high
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extractelt_s8_high
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 63
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[VEXTRACT_S8_:%[0-9]+]]:er = VEXTRACT_S8 [[COPY1]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<128 x s8>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 127
    %3:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<128 x s8>), %2(s32)
    $r0 = COPY %3(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_extractelt_s32_low
legalized:       true
regBankSelected: true
selected:        false
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_extractelt_s32_low
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:ers4 = MOV_RLC_imm10_pseudo 15
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[VEXTRACT_S32_:%[0-9]+]]:er = VEXTRACT_S32 [[COPY1]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S32_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s32>) = COPY $y2
    %2:gprregbank(s32) = G_CONSTANT i32 15
    %0:gprregbank(s32) = G_EXTRACT_VECTOR_ELT %1(<32 x s32>), %2(s32)
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_s8_elt_dynamic_idx
legalized:       true
regBankSelected: true
stack:
  - { id: 0, name: "", type: default, offset: 0, size: 4, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_s8_elt_dynamic_idx
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[PseudoFI:%[0-9]+]]:ep = PseudoFI %stack.0, implicit $sp
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[PseudoFI]], 0 :: (volatile dereferenceable load (s32))
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 64
    ; CHECK-NEXT: [[LT:%[0-9]+]]:er27 = LT [[LDA_dms_lda_idx_imm]], [[MOV_RLC_imm10_pseudo1]]
    ; CHECK-NEXT: [[SELNEZ:%[0-9]+]]:er = SELNEZ [[MOV_RLC_imm10_pseudo]], [[MOV_RLC_imm10_pseudo1]], [[LT]]
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:ers4 = SUB [[LDA_dms_lda_idx_imm]], [[SELNEZ]], implicit-def $srcarry
    ; CHECK-NEXT: [[ADD_add_r_ri:%[0-9]+]]:er = ADD_add_r_ri [[LT]], -1, implicit-def $srcarry
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:el = REG_SEQUENCE [[ADD_add_r_ri]], %subreg.sub_l_even, [[ADD_add_r_ri]], %subreg.sub_l_odd
    ; CHECK-NEXT: [[VSEL_8_:%[0-9]+]]:vec512 = VSEL_8 [[COPY1]], [[COPY2]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[VEXTRACT_S8_:%[0-9]+]]:er = VEXTRACT_S8 [[VSEL_8_]], [[SUB]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<128 x s8>) = COPY $y2
    %2:ptrregbank(p0) = G_FRAME_INDEX %stack.0
    %3:gprregbank(s32) = G_LOAD %2(p0) :: (volatile dereferenceable load (s32))
    %4:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<128 x s8>), %3(s32)
    $r0 = COPY %4(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_s16_elt_dynamic
legalized:       true
regBankSelected: true
stack:
  - { id: 0, name: "", type: default, offset: 0, size: 4, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_s16_elt_dynamic
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[PseudoFI:%[0-9]+]]:ep = PseudoFI %stack.0, implicit $sp
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[PseudoFI]], 0 :: (volatile dereferenceable load (s32))
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 32
    ; CHECK-NEXT: [[LT:%[0-9]+]]:er27 = LT [[LDA_dms_lda_idx_imm]], [[MOV_RLC_imm10_pseudo1]]
    ; CHECK-NEXT: [[SELNEZ:%[0-9]+]]:er = SELNEZ [[MOV_RLC_imm10_pseudo]], [[MOV_RLC_imm10_pseudo1]], [[LT]]
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:ers4 = SUB [[LDA_dms_lda_idx_imm]], [[SELNEZ]], implicit-def $srcarry
    ; CHECK-NEXT: [[ADD_add_r_ri:%[0-9]+]]:ers8 = ADD_add_r_ri [[LT]], -1, implicit-def $srcarry
    ; CHECK-NEXT: [[VSEL_16_:%[0-9]+]]:vec512 = VSEL_16 [[COPY1]], [[COPY2]], [[ADD_add_r_ri]]
    ; CHECK-NEXT: [[VEXTRACT_S16_:%[0-9]+]]:er = VEXTRACT_S16 [[VSEL_16_]], [[SUB]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S16_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<64 x s16>) = COPY $y2
    %2:ptrregbank(p0) = G_FRAME_INDEX %stack.0
    %3:gprregbank(s32) = G_LOAD %2(p0) :: (volatile dereferenceable load (s32))
    %4:gprregbank(s32) = G_AIE_SEXT_EXTRACT_VECTOR_ELT %1(<64 x s16>), %3(s32)
    $r0 = COPY %4(s32)
    PseudoRET implicit $lr, implicit $r0

...
---
name:            _1024bit_s32_elt_dynamic_idx
legalized:       true
regBankSelected: true
stack:
  - { id: 0, name: "", type: default, offset: 0, size: 4, alignment: 4}
body:             |
  bb.1.entry:
    liveins: $y2

    ; CHECK-LABEL: name: _1024bit_s32_elt_dynamic_idx
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[PseudoFI:%[0-9]+]]:ep = PseudoFI %stack.0, implicit $sp
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[PseudoFI]], 0 :: (volatile dereferenceable load (s32))
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_lo
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY]].sub_512_hi
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 16
    ; CHECK-NEXT: [[LT:%[0-9]+]]:er27 = LT [[LDA_dms_lda_idx_imm]], [[MOV_RLC_imm10_pseudo1]]
    ; CHECK-NEXT: [[SELNEZ:%[0-9]+]]:er = SELNEZ [[MOV_RLC_imm10_pseudo]], [[MOV_RLC_imm10_pseudo1]], [[LT]]
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:ers4 = SUB [[LDA_dms_lda_idx_imm]], [[SELNEZ]], implicit-def $srcarry
    ; CHECK-NEXT: [[ADD_add_r_ri:%[0-9]+]]:ers8 = ADD_add_r_ri [[LT]], -1, implicit-def $srcarry
    ; CHECK-NEXT: [[VSEL_32_:%[0-9]+]]:vec512 = VSEL_32 [[COPY1]], [[COPY2]], [[ADD_add_r_ri]]
    ; CHECK-NEXT: [[VEXTRACT_S32_:%[0-9]+]]:er = VEXTRACT_S32 [[VSEL_32_]], [[SUB]]
    ; CHECK-NEXT: $r0 = COPY [[VEXTRACT_S32_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %1:vregbank(<32 x s32>) = COPY $y2
    %2:ptrregbank(p0) = G_FRAME_INDEX %stack.0
    %3:gprregbank(s32) = G_LOAD %2(p0) :: (volatile dereferenceable load (s32))
    %0:gprregbank(s32) = G_EXTRACT_VECTOR_ELT %1(<32 x s32>), %3(s32)
    $r0 = COPY %0(s32)
    PseudoRET implicit $lr, implicit $r0

...
