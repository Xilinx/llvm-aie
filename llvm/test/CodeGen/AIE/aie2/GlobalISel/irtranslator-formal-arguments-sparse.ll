; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --print-fixed-stack
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

%struct.v128int8_sparse = type <{ <64 x i8>, i128 }>
%struct.v128uint8_sparse = type <{ <64 x i8>, i128 }>
%struct.v64int16_sparse = type <{ <32 x i16>, i128 }>
%struct.v64uint16_sparse = type <{ <32 x i16>, i128 }>
%struct.v256int4_sparse = type <{ <64 x i8>, i128 }>
%struct.v256uint4_sparse = type <{ <64 x i8>, i128 }>
%struct.v64bfloat16_sparse = type <{ <32 x bfloat>, i128 }>

define void @pass_sparse_with_vectors(<64 x i8> %x, <16 x i32> %y, %struct.v128int8_sparse alignstack(32) %a, %struct.v64int16_sparse alignstack(32) %b) {
  ; CHECK-LABEL: name: pass_sparse_with_vectors
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q1, $q3, $x0, $x1, $x2, $x3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<16 x s32>) = COPY $x2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<64 x s8>) = COPY $x1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s128) = COPY $q1
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<32 x s16>) = COPY $x3
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s128) = COPY $q3
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

define void @pass_sparse_with_masks(%struct.v128int8_sparse alignstack(32) %s1, i128 %m1, i128 %m2, %struct.v64int16_sparse alignstack(32) %s2) {
  ; CHECK-LABEL: name: pass_sparse_with_masks
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $q1, $q2, $q3, $x0, $x3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s128) = COPY $q2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s128) = COPY $q1
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<32 x s16>) = COPY $x3
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s128) = COPY $q3
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}


define void @pass_sparse_with_vectors_stack(<64 x i8> %x, <16 x i32> %y, %struct.v128int8_sparse alignstack(32) %a, %struct.v64int16_sparse alignstack(32) %b, %struct.v256uint4_sparse alignstack(32) %c) {
  ; CHECK-LABEL: name: pass_sparse_with_vectors_stack
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -96, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -64, size: 64, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q1, $q3, $x0, $x1, $x2, $x3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<16 x s32>) = COPY $x2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<64 x s8>) = COPY $x1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s128) = COPY $q1
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<32 x s16>) = COPY $x3
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s128) = COPY $q3
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<64 x s8>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<64 x s8>) from %fixed-stack.1, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s128) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s128) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

define void @pass_sparse_with_masks_stack(%struct.v128int8_sparse alignstack(32) %s1, i128 %m1, i128 %m2, i128 %m3, %struct.v64int16_sparse alignstack(32) %s2) {
  ; CHECK-LABEL: name: pass_sparse_with_masks_stack
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -96, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -64, size: 64, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $q1, $q2, $q3, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s128) = COPY $q2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s128) = COPY $q1
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s128) = COPY $q3
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s16>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<32 x s16>) from %fixed-stack.1, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s128) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s128) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

define void @pass_sparse_stack(%struct.v128int8_sparse alignstack(32) %reg1, %struct.v128int8_sparse alignstack(32) %reg2, %struct.v64bfloat16_sparse alignstack(32) %reg3, %struct.v128int8_sparse alignstack(32) %reg4, %struct.v64bfloat16_sparse alignstack(32) %stack1, %struct.v64bfloat16_sparse alignstack(32) %stack2) {
  ; CHECK-LABEL: name: pass_sparse_stack
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -192, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -160, size: 64, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 2, type: default, offset: -96, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 3, type: default, offset: -64, size: 64, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $q1, $q2, $q3, $x0, $x1, $x2, $x3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<64 x s8>) = COPY $x2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s128) = COPY $q2
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<32 x s16>) = COPY $x1
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s128) = COPY $q1
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<64 x s8>) = COPY $x3
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s128) = COPY $q3
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.3
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<32 x s16>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<32 x s16>) from %fixed-stack.3, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.2
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s128) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s128) from %fixed-stack.2, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX2:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(<32 x s16>) = G_LOAD [[FRAME_INDEX2]](p0) :: (invariant load (<32 x s16>) from %fixed-stack.1, align 32)
  ; CHECK-NEXT:   [[FRAME_INDEX3:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD3:%[0-9]+]]:_(s128) = G_LOAD [[FRAME_INDEX3]](p0) :: (invariant load (s128) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

; Unit test for type: v128int8_sparse
define void @_Z11sparse_pass15v128int8_sparse(%struct.v128int8_sparse alignstack(32) %a) {
  ; CHECK-LABEL: name: _Z11sparse_pass15v128int8_sparse
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

; Unit test for type: v128uint8_sparse
define void @_Z11sparse_pass15v128uint8_sparse(%struct.v128uint8_sparse alignstack(32) %a) {
  ; CHECK-LABEL: name: _Z11sparse_pass15v128uint8_sparse
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

; Unit test for type: v64int16_sparse
define void @_Z11sparse_pass15v64int16_sparse(%struct.v64int16_sparse alignstack(32) %a) {
  ; CHECK-LABEL: name: _Z11sparse_pass15v64int16_sparse
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

; Unit test for type: v64uint16_sparse
define void @_Z11sparse_pass15v64uint16_sparse(%struct.v64uint16_sparse alignstack(32) %a) {
  ; CHECK-LABEL: name: _Z11sparse_pass15v64uint16_sparse
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

; Unit test for type: v256int4_sparse
define void @_Z11sparse_pass15v256int4_sparse(%struct.v256int4_sparse alignstack(32) %a) {
  ; CHECK-LABEL: name: _Z11sparse_pass15v256int4_sparse
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

; Unit test for type: v256uint4_sparse
define void @_Z11sparse_pass15v256uint4_sparse(%struct.v256uint4_sparse alignstack(32) %a) {
  ; CHECK-LABEL: name: _Z11sparse_pass15v256uint4_sparse
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}

; Unit test for type: v64bfloat16_sparse
define void @_Z11sparse_pass18v64bfloat16_sparse(%struct.v64bfloat16_sparse alignstack(32) %a) {
  ; CHECK-LABEL: name: _Z11sparse_pass18v64bfloat16_sparse
  ; CHECK: fixedStack:
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $q0, $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   PseudoRET implicit $lr
entry:
  ret void
}



