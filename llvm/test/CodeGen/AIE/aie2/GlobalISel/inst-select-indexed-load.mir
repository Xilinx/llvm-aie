# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=instruction-select -o - -verify-machineinstrs %s | FileCheck %s

---
name: pre-inc-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $p1, $m0
    ; CHECK-LABEL: name: pre-inc-load
    ; CHECK: liveins: $p0, $p1, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_dms_lda_idx:%[0-9]+]]:er = LDA_dms_lda_idx [[COPY]], [[COPY1]] :: (load (s32))
    ; CHECK-NEXT: [[LDA_dms_lda_idx1:%[0-9]+]]:er = LDA_dms_lda_idx [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s32))
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY]], 16 :: (load (s32))
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm1:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 16 :: (load (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_dms_lda_idx]], implicit [[LDA_dms_lda_idx1]], implicit [[LDA_dms_lda_idx_imm]], implicit [[LDA_dms_lda_idx_imm1]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 16
    %8:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %5 :: (load (s32))
    %9:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %6 :: (load (s32))
    %10:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %7 :: (load (s32))
    %11:ptrregbank(p0) = G_AIE_OFFSET_LOAD %0, %7 :: (load (p0))
    PseudoRET implicit $lr, implicit %8, implicit %9, implicit %10, implicit %11
...



---
name: pre-inc-hb-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0
    ; CHECK-LABEL: name: pre-inc-hb-load
    ; CHECK: liveins: $p0, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_S8_ag_idx:%[0-9]+]]:er = LDA_S8_ag_idx [[COPY]], [[COPY1]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S8_ag_idx1:%[0-9]+]]:er = LDA_S8_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S8_ag_idx_imm:%[0-9]+]]:er = LDA_S8_ag_idx_imm [[COPY]], -3 :: (load (s8))
    ; CHECK-NEXT: [[LDA_S16_ag_idx:%[0-9]+]]:er = LDA_S16_ag_idx [[COPY]], [[COPY1]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_S16_ag_idx1:%[0-9]+]]:er = LDA_S16_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_S16_ag_idx_imm:%[0-9]+]]:er = LDA_S16_ag_idx_imm [[COPY]], -3 :: (load (s16))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_S8_ag_idx]], implicit [[LDA_S8_ag_idx1]], implicit [[LDA_S8_ag_idx_imm]], implicit [[LDA_S16_ag_idx]], implicit [[LDA_S16_ag_idx1]], implicit [[LDA_S16_ag_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 -3
    %8:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %5 :: (load (s8))
    %9:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %6 :: (load (s8))
    %10:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %7 :: (load (s8))
    %11:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %5 :: (load (s16))
    %12:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %6 :: (load (s16))
    %13:gprregbank(s32) = G_AIE_OFFSET_LOAD %0, %7 :: (load (s16))
    PseudoRET implicit $lr, implicit %8, implicit %9, implicit %10, implicit %11, implicit %12, implicit %13
...



---
name: pre-inc-hb-sextload
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0
    ; CHECK-LABEL: name: pre-inc-hb-sextload
    ; CHECK: liveins: $p0, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_S8_ag_idx:%[0-9]+]]:er = LDA_S8_ag_idx [[COPY]], [[COPY1]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S8_ag_idx1:%[0-9]+]]:er = LDA_S8_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S8_ag_idx_imm:%[0-9]+]]:er = LDA_S8_ag_idx_imm [[COPY]], -3 :: (load (s8))
    ; CHECK-NEXT: [[LDA_S16_ag_idx:%[0-9]+]]:er = LDA_S16_ag_idx [[COPY]], [[COPY1]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_S16_ag_idx1:%[0-9]+]]:er = LDA_S16_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_S16_ag_idx_imm:%[0-9]+]]:er = LDA_S16_ag_idx_imm [[COPY]], -3 :: (load (s16))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_S8_ag_idx]], implicit [[LDA_S8_ag_idx1]], implicit [[LDA_S8_ag_idx_imm]], implicit [[LDA_S16_ag_idx]], implicit [[LDA_S16_ag_idx1]], implicit [[LDA_S16_ag_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 -3
    %81:gprregbank(s32) = G_AIE_OFFSET_SEXTLOAD %0, %5 :: (load (s8))
    %91:gprregbank(s32) = G_AIE_OFFSET_SEXTLOAD %0, %6 :: (load (s8))
    %101:gprregbank(s32) = G_AIE_OFFSET_SEXTLOAD %0, %7 :: (load (s8))
    %111:gprregbank(s32) = G_AIE_OFFSET_SEXTLOAD %0, %5 :: (load (s16))
    %121:gprregbank(s32) = G_AIE_OFFSET_SEXTLOAD %0, %6 :: (load (s16))
    %131:gprregbank(s32) = G_AIE_OFFSET_SEXTLOAD %0, %7 :: (load (s16))
    PseudoRET implicit $lr, implicit %81, implicit %91, implicit %101, implicit %111, implicit %121, implicit %131
...

---
name: pre-inc-hb-zextload
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0
    ; CHECK-LABEL: name: pre-inc-hb-zextload
    ; CHECK: liveins: $p0, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_U8_ag_idx:%[0-9]+]]:er = LDA_U8_ag_idx [[COPY]], [[COPY1]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_U8_ag_idx1:%[0-9]+]]:er = LDA_U8_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_U8_ag_idx_imm:%[0-9]+]]:er = LDA_U8_ag_idx_imm [[COPY]], -3 :: (load (s8))
    ; CHECK-NEXT: [[LDA_U16_ag_idx:%[0-9]+]]:er = LDA_U16_ag_idx [[COPY]], [[COPY1]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_U16_ag_idx1:%[0-9]+]]:er = LDA_U16_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_U16_ag_idx_imm:%[0-9]+]]:er = LDA_U16_ag_idx_imm [[COPY]], -3 :: (load (s16))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_U8_ag_idx]], implicit [[LDA_U8_ag_idx1]], implicit [[LDA_U8_ag_idx_imm]], implicit [[LDA_U16_ag_idx]], implicit [[LDA_U16_ag_idx1]], implicit [[LDA_U16_ag_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 -3
    %80:gprregbank(s32) = G_AIE_OFFSET_ZEXTLOAD %0, %5 :: (load (s8))
    %90:gprregbank(s32) = G_AIE_OFFSET_ZEXTLOAD %0, %6 :: (load (s8))
    %100:gprregbank(s32) = G_AIE_OFFSET_ZEXTLOAD %0, %7 :: (load (s8))
    %110:gprregbank(s32) = G_AIE_OFFSET_ZEXTLOAD %0, %5 :: (load (s16))
    %120:gprregbank(s32) = G_AIE_OFFSET_ZEXTLOAD %0, %6 :: (load (s16))
    %130:gprregbank(s32) = G_AIE_OFFSET_ZEXTLOAD %0, %7 :: (load (s16))
    PseudoRET implicit $lr, implicit %80, implicit %90, implicit %100, implicit %110, implicit %120, implicit %130
...
