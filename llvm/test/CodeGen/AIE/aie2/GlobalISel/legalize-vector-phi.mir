# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name:            v8s32
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v8s32
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<8 x s32>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<8 x s32>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<8 x s32>) = G_PHI %val_2(<8 x s32>), %bb.1, %val_1(<8 x s32>), %bb.0
  ; CHECK-NEXT:   $wl0 = COPY %phi(<8 x s32>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<8 x s32>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<8 x s32>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<8 x s32>) = G_PHI %val_2(<8 x s32>), %bb.1, %val_1(<8 x s32>), %bb.0
    $wl0 = COPY %phi
...

---
name:            v16s16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v16s16
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<16 x s16>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<16 x s16>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<16 x s16>) = G_PHI %val_2(<16 x s16>), %bb.1, %val_1(<16 x s16>), %bb.0
  ; CHECK-NEXT:   $wl0 = COPY %phi(<16 x s16>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<16 x s16>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<16 x s16>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<16 x s16>) = G_PHI %val_2(<16 x s16>), %bb.1, %val_1(<16 x s16>), %bb.0
    $wl0 = COPY %phi
...

---
name:            v32s8
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v32s8
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<32 x s8>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<32 x s8>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<32 x s8>) = G_PHI %val_2(<32 x s8>), %bb.1, %val_1(<32 x s8>), %bb.0
  ; CHECK-NEXT:   $wl0 = COPY %phi(<32 x s8>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<32 x s8>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<32 x s8>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<32 x s8>) = G_PHI %val_2(<32 x s8>), %bb.1, %val_1(<32 x s8>), %bb.0
    $wl0 = COPY %phi
...

---
name:            acc256
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: acc256
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<4 x s64>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<4 x s64>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<4 x s64>) = G_PHI %val_2(<4 x s64>), %bb.1, %val_1(<4 x s64>), %bb.0
  ; CHECK-NEXT:   $wl0 = COPY %phi(<4 x s64>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<4 x s64>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<4 x s64>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<4 x s64>) = G_PHI %val_2(<4 x s64>), %bb.1, %val_1(<4 x s64>), %bb.0
    $wl0 = COPY %phi
...

---
name:            v16s32
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v16s32
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<16 x s32>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<16 x s32>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<16 x s32>) = G_PHI %val_2(<16 x s32>), %bb.1, %val_1(<16 x s32>), %bb.0
  ; CHECK-NEXT:   $x0 = COPY %phi(<16 x s32>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<16 x s32>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<16 x s32>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<16 x s32>) = G_PHI %val_2(<16 x s32>), %bb.1, %val_1(<16 x s32>), %bb.0
    $x0 = COPY %phi
...

---
name:            v32s16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v32s16
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<32 x s16>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<32 x s16>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<32 x s16>) = G_PHI %val_2(<32 x s16>), %bb.1, %val_1(<32 x s16>), %bb.0
  ; CHECK-NEXT:   $x0 = COPY %phi(<32 x s16>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<32 x s16>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<32 x s16>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<32 x s16>) = G_PHI %val_2(<32 x s16>), %bb.1, %val_1(<32 x s16>), %bb.0
    $x0 = COPY %phi
...

---
name:            v64s8
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v64s8
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<64 x s8>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<64 x s8>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<64 x s8>) = G_PHI %val_2(<64 x s8>), %bb.1, %val_1(<64 x s8>), %bb.0
  ; CHECK-NEXT:   $x0 = COPY %phi(<64 x s8>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<64 x s8>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<64 x s8>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<64 x s8>) = G_PHI %val_2(<64 x s8>), %bb.1, %val_1(<64 x s8>), %bb.0
    $x0 = COPY %phi
...

---
name:            acc512
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: acc512
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<8 x s64>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<8 x s64>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<8 x s64>) = G_PHI %val_2(<8 x s64>), %bb.1, %val_1(<8 x s64>), %bb.0
  ; CHECK-NEXT:   $x0 = COPY %phi(<8 x s64>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<8 x s64>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<8 x s64>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<8 x s64>) = G_PHI %val_2(<8 x s64>), %bb.1, %val_1(<8 x s64>), %bb.0
    $x0 = COPY %phi
...

---
name:            v32s32
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v32s32
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<32 x s32>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<32 x s32>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<32 x s32>) = G_PHI %val_2(<32 x s32>), %bb.1, %val_1(<32 x s32>), %bb.0
  ; CHECK-NEXT:   $y2 = COPY %phi(<32 x s32>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<32 x s32>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<32 x s32>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<32 x s32>) = G_PHI %val_2(<32 x s32>), %bb.1, %val_1(<32 x s32>), %bb.0
    $y2 = COPY %phi
...

---
name:            v64s16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v64s16
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<64 x s16>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<64 x s16>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<64 x s16>) = G_PHI %val_2(<64 x s16>), %bb.1, %val_1(<64 x s16>), %bb.0
  ; CHECK-NEXT:   $y2 = COPY %phi(<64 x s16>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<64 x s16>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<64 x s16>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<64 x s16>) = G_PHI %val_2(<64 x s16>), %bb.1, %val_1(<64 x s16>), %bb.0
    $y2 = COPY %phi
...

---
name:            v128s8
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: v128s8
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<128 x s8>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<128 x s8>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<128 x s8>) = G_PHI %val_2(<128 x s8>), %bb.1, %val_1(<128 x s8>), %bb.0
  ; CHECK-NEXT:   $y2 = COPY %phi(<128 x s8>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<128 x s8>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<128 x s8>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<128 x s8>) = G_PHI %val_2(<128 x s8>), %bb.1, %val_1(<128 x s8>), %bb.0
    $y2 = COPY %phi
...

---
name:            acc1024
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: acc1024
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   %val_1:_(<16 x s64>) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %val_2:_(<16 x s64>) = G_IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   %phi:_(<16 x s64>) = G_PHI %val_2(<16 x s64>), %bb.1, %val_1(<16 x s64>), %bb.0
  ; CHECK-NEXT:   $y2 = COPY %phi(<16 x s64>)
  bb.0:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $r0
    %cond:_(s1) = G_IMPLICIT_DEF
    %val_1:_(<16 x s64>) = G_IMPLICIT_DEF
    G_BRCOND %cond(s1), %bb.2
    G_BR %bb.1
  bb.1:
    %val_2:_(<16 x s64>) = G_IMPLICIT_DEF
  bb.2:
    %phi:_(<16 x s64>) = G_PHI %val_2(<16 x s64>), %bb.1, %val_1(<16 x s64>), %bb.0
    $y2 = COPY %phi
...
