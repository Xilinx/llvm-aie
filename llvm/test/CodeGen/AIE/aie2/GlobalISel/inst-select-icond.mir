# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --mtriple=aie2 --run-pass=instruction-select %s -o -  | FileCheck %s

---
name:            shouldMatch
alignment:       16
legalized:       true
regBankSelected: true
selected:        false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: shouldMatch
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er27 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 2
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 3
  ; CHECK-NEXT:   PseudoJZ [[COPY]], %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJNZ [[COPY1]], %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[SELEQZ:%[0-9]+]]:er = SELEQZ [[MOV_RLC_imm10_pseudo]], [[MOV_RLC_imm10_pseudo1]], [[COPY]]
  ; CHECK-NEXT:   [[SELNEZ:%[0-9]+]]:er = SELNEZ [[MOV_RLC_imm10_pseudo1]], [[MOV_RLC_imm10_pseudo]], [[COPY]]
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[SELEQZ]], implicit [[SELNEZ]]
  bb.1.entry:
    liveins: $r0, $r1

    %0:gprregbank(s32) = COPY $r0
    %1:gprregbank(s32) = COPY $r1
    %2:gprregbank(s32) = G_CONSTANT i32 0
    %6:gprregbank(s32) = G_CONSTANT i32 2
    %9:gprregbank(s32) = G_CONSTANT i32 3
    %22:gprregbank(s32) = G_ICMP intpred(eq), %0(s32), %2
    G_BRCOND %22(s32), %bb.3

  bb.2:
    %20:gprregbank(s32) = G_ICMP intpred(ne), %1(s32), %2
    G_BRCOND %20(s32), %bb.3

  bb.3:
    %18:gprregbank(s32) = G_ICMP intpred(eq), %0(s32), %2
    %8:gprregbank(s32) = G_SELECT %18(s32), %6, %9
    %16:gprregbank(s32) = G_ICMP intpred(ne), %0(s32), %2
    %11:gprregbank(s32) = G_SELECT %16(s32), %9, %6
    PseudoRET implicit $lr, implicit %8, implicit %11
...
---
name:            shouldNotMatch
alignment:       16
legalized:       true
regBankSelected: true
selected:        false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: shouldNotMatch
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 2
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo2:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 3
  ; CHECK-NEXT:   [[EQ:%[0-9]+]]:er = EQ [[COPY]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   PseudoJNZ [[EQ]], %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[NE:%[0-9]+]]:er = NE [[COPY1]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   PseudoJNZ [[NE]], %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[EQ1:%[0-9]+]]:er27 = EQ [[COPY]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   [[SELNEZ:%[0-9]+]]:er = SELNEZ [[MOV_RLC_imm10_pseudo1]], [[MOV_RLC_imm10_pseudo2]], [[EQ1]]
  ; CHECK-NEXT:   [[NE1:%[0-9]+]]:er27 = NE [[COPY]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   [[SELNEZ1:%[0-9]+]]:er = SELNEZ [[MOV_RLC_imm10_pseudo2]], [[MOV_RLC_imm10_pseudo1]], [[NE1]]
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[SELNEZ]], implicit [[SELNEZ1]]
  bb.1.entry:
    liveins: $r0, $r1

    %0:gprregbank(s32) = COPY $r0
    %1:gprregbank(s32) = COPY $r1
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %6:gprregbank(s32) = G_CONSTANT i32 2
    %9:gprregbank(s32) = G_CONSTANT i32 3
    %22:gprregbank(s32) = G_ICMP intpred(eq), %0(s32), %2
    G_BRCOND %22(s32), %bb.3

  bb.2:
    %20:gprregbank(s32) = G_ICMP intpred(ne), %1(s32), %2
    G_BRCOND %20(s32), %bb.3

  bb.3:
    %18:gprregbank(s32) = G_ICMP intpred(eq), %0(s32), %2
    %8:gprregbank(s32) = G_SELECT %18(s32), %6, %9
    %16:gprregbank(s32) = G_ICMP intpred(ne), %0(s32), %2
    %11:gprregbank(s32) = G_SELECT %16(s32), %9, %6
    PseudoRET implicit $lr, implicit %8, implicit %11
...
