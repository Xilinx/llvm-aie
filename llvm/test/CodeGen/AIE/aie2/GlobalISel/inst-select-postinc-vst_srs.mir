# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VST_SRS_S16_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S16_S32
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm_imm [[VST_SRS_S16_S32_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm [[VST_SRS_S16_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm_imm [[VST_SRS_S16_S32_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm_imm [[VST_SRS_S16_S32_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm [[VST_SRS_S16_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s16>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s16>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s16>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s16>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s16>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S8_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S8_S32
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S8_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_S8_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S8_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_S8_S32_ag_pstm_nrm_imm [[VST_SRS_S8_S32_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S8_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_S8_S32_ag_pstm_nrm [[VST_SRS_S8_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S8_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_S8_S32_ag_pstm_nrm_imm [[VST_SRS_S8_S32_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S8_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_S8_S32_ag_pstm_nrm_imm [[VST_SRS_S8_S32_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S8_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_S8_S32_ag_pstm_nrm [[VST_SRS_S8_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<32 x s8>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<32 x s8>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<32 x s8>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<32 x s8>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<32 x s8>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<32 x s8>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S32_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S32_S64
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm_imm [[VST_SRS_S32_S64_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm [[VST_SRS_S32_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm_imm [[VST_SRS_S32_S64_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm_imm [[VST_SRS_S32_S64_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm [[VST_SRS_S32_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<8 x s32>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<8 x s32>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<8 x s32>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<8 x s32>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<8 x s32>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S16_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S16_S64
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_S16_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_S16_S64_ag_pstm_nrm_imm [[VST_SRS_S16_S64_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_S16_S64_ag_pstm_nrm [[VST_SRS_S16_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_S16_S64_ag_pstm_nrm_imm [[VST_SRS_S16_S64_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_S16_S64_ag_pstm_nrm_imm [[VST_SRS_S16_S64_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_S16_S64_ag_pstm_nrm [[VST_SRS_S16_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s16>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s16>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s16>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s16>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s16>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s16>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s16>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s16>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s16>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s16>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D8_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D8_S32
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm_imm [[VST_SRS_D8_S32_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm [[VST_SRS_D8_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm_imm [[VST_SRS_D8_S32_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm_imm [[VST_SRS_D8_S32_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm [[VST_SRS_D8_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<32 x s8>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<32 x s8>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<32 x s8>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<32 x s8>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<32 x s8>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<32 x s8>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<8 x s32>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<8 x s32>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<8 x s32>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<8 x s32>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<8 x s32>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S64
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm_imm [[VST_SRS_D16_S64_ag_pstm_nrm]], 0, [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm [[VST_SRS_D16_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm_imm [[VST_SRS_D16_S64_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm_imm [[VST_SRS_D16_S64_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm [[VST_SRS_D16_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s16>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s16>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s16>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s16>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s16>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm]], 0, [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s16>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s16>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s16>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s16>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s16>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D8_S32_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D8_S32_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm_imm [[VST_SRS_D8_S32_ag_pstm_nrm]], 0, [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm [[VST_SRS_D8_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm_imm [[VST_SRS_D8_S32_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm_imm [[VST_SRS_D8_S32_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D8_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D8_S32_ag_pstm_nrm [[VST_SRS_D8_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<32 x s8>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<32 x s8>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<32 x s8>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<32 x s8>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<32 x s8>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<32 x s8>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm]], 0, [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<8 x s32>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<8 x s32>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<8 x s32>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<8 x s32>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<8 x s32>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S64_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S64_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm_imm [[VST_SRS_D16_S64_ag_pstm_nrm]], 0, [[COPY3]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm [[VST_SRS_D16_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm_imm [[VST_SRS_D16_S64_ag_pstm_nrm1]], -256, [[COPY3]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm_imm [[VST_SRS_D16_S64_ag_pstm_nrm_imm1]], 224, [[COPY3]], [[COPY10]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D16_S64_ag_pstm_nrm [[VST_SRS_D16_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s16>))
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s16>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s16>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s16>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s16>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S16_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S16_S32_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[COPY]], 32, [[COPY6]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY5]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[VST_SRS_S16_S32_ag_pstm_nrm]], 32, [[COPY10]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm_imm [[VST_SRS_S16_S32_ag_pstm_nrm]], 0, [[COPY9]], [[COPY12]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[VST_SRS_S16_S32_ag_pstm_nrm_imm]], 32, [[COPY14]], [[COPY15]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm [[VST_SRS_S16_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY13]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[VST_SRS_S16_S32_ag_pstm_nrm1]], 32, [[COPY18]], [[COPY19]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm_imm [[VST_SRS_S16_S32_ag_pstm_nrm1]], -256, [[COPY17]], [[COPY20]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[VST_SRS_S16_S32_ag_pstm_nrm_imm1]], 32, [[COPY22]], [[COPY23]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm_imm [[VST_SRS_S16_S32_ag_pstm_nrm_imm1]], 224, [[COPY21]], [[COPY24]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[VST_SRS_S16_S32_ag_pstm_nrm_imm2]], 32, [[COPY26]], [[COPY27]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S16_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_S16_S32_ag_pstm_nrm [[VST_SRS_S16_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY25]], [[COPY28]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<32 x s16>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<32 x s16>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<32 x s16>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<32 x s16>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<32 x s16>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<32 x s16>) into stack - 64)
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S32_S64_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S32_S64_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY]], 32, [[COPY6]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY5]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[VST_SRS_S32_S64_ag_pstm_nrm]], 32, [[COPY10]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm_imm [[VST_SRS_S32_S64_ag_pstm_nrm]], 0, [[COPY9]], [[COPY12]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[VST_SRS_S32_S64_ag_pstm_nrm_imm]], 32, [[COPY14]], [[COPY15]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm [[VST_SRS_S32_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY13]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[VST_SRS_S32_S64_ag_pstm_nrm1]], 32, [[COPY18]], [[COPY19]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm_imm [[VST_SRS_S32_S64_ag_pstm_nrm1]], -256, [[COPY17]], [[COPY20]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[VST_SRS_S32_S64_ag_pstm_nrm_imm1]], 32, [[COPY22]], [[COPY23]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm_imm [[VST_SRS_S32_S64_ag_pstm_nrm_imm1]], 224, [[COPY21]], [[COPY24]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[VST_SRS_S32_S64_ag_pstm_nrm_imm2]], 32, [[COPY26]], [[COPY27]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_S32_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_S32_S64_ag_pstm_nrm [[VST_SRS_S32_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY25]], [[COPY28]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s32>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s32>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s32>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s32>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s32>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s32>) into stack - 64)
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY]], 32, [[COPY6]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY5]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm]], 32, [[COPY10]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm]], 0, [[COPY9]], [[COPY12]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm]], 32, [[COPY14]], [[COPY15]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY13]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm1]], 32, [[COPY18]], [[COPY19]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm1]], -256, [[COPY17]], [[COPY20]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm1]], 32, [[COPY22]], [[COPY23]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm1]], 224, [[COPY21]], [[COPY24]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm2]], 32, [[COPY26]], [[COPY27]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY25]], [[COPY28]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<32 x s16>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<32 x s16>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<32 x s16>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<32 x s16>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<32 x s16>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<32 x s16>) into stack - 64)
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_512_bits
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY]], 32, [[COPY6]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY5]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm]], 32, [[COPY10]], [[COPY11]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm]], 0, [[COPY9]], [[COPY12]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm]], 32, [[COPY14]], [[COPY15]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY13]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm1]], 32, [[COPY18]], [[COPY19]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm1]], -256, [[COPY17]], [[COPY20]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm1]], 32, [[COPY22]], [[COPY23]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm1]], 224, [[COPY21]], [[COPY24]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm2]], 32, [[COPY26]], [[COPY27]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY25]], [[COPY28]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s32>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s32>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s32>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s32>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s32>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s32>) into stack - 64)
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_512_bits_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY]], 32, [[COPY7]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY6]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm]], 32, [[COPY11]], [[COPY12]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm]], 0, [[COPY10]], [[COPY13]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm]], 32, [[COPY15]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY14]], [[COPY17]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm1]], 32, [[COPY19]], [[COPY20]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm1]], -256, [[COPY18]], [[COPY21]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm1]], 32, [[COPY23]], [[COPY24]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm1]], 224, [[COPY22]], [[COPY25]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[VST_SRS_D16_S32_ag_pstm_nrm_imm2]], 32, [[COPY27]], [[COPY28]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY29:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D16_S32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D16_S32_ag_pstm_nrm [[VST_SRS_D16_S32_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY26]], [[COPY29]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<32 x s16>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<32 x s16>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<32 x s16>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<32 x s16>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<32 x s16>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<32 x s16>) into stack - 64)
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_512_bits_dyn
    ; CHECK: liveins: $p0, $r0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY]], 32, [[COPY7]], [[COPY8]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY6]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm]], 32, [[COPY11]], [[COPY12]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm]], 0, [[COPY10]], [[COPY13]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm]], 32, [[COPY15]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm]], [[MOV_PD_imm10_pseudo]], [[COPY14]], [[COPY17]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm1]], 32, [[COPY19]], [[COPY20]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm1]], -256, [[COPY18]], [[COPY21]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm1]], 32, [[COPY23]], [[COPY24]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm1]], 224, [[COPY22]], [[COPY25]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_lo
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:acc512 = COPY [[COPY3]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY5]]
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[VST_SRS_D32_S64_ag_pstm_nrm_imm2]], 32, [[COPY27]], [[COPY28]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32, basealign 64)
    ; CHECK-NEXT: [[COPY29:%[0-9]+]]:mss = COPY [[COPY4]]
    ; CHECK-NEXT: [[VST_SRS_D32_S64_ag_pstm_nrm2:%[0-9]+]]:ep = VST_SRS_D32_S64_ag_pstm_nrm [[VST_SRS_D32_S64_ag_pstm_nrm_imm2]], [[MOV_PD_imm10_pseudo1]], [[COPY26]], [[COPY29]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 64, align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %8:modregbank(s20) = G_CONSTANT i20 0
    %9:modregbank(s20) = G_CONSTANT i20 16
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %104:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %105:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %106:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %107:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %108:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s32>) into stack - 64)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %19, %8 :: (store (<16 x s32>) into stack - 64)
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %20, %9 :: (store (<16 x s32>) into stack - 64)
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %21, %10 :: (store (<16 x s32>) into stack - 64)
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s32>) into stack - 64)
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %23, %12 :: (store (<16 x s32>) into stack - 64)
    PseudoRET implicit $lr
...
