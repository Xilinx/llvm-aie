# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VST_SRS_S16_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S16_S32
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S16_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_S16_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_S16_S32_2:%[0-9]+]]:edc = VST_3D_SRS_S16_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S8_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S8_S32
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S8_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_S8_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_S8_S32_2:%[0-9]+]]:edc = VST_3D_SRS_S8_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<32 x s8>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S32_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S32_S64
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S32_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_S32_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_S32_S64_2:%[0-9]+]]:edc = VST_3D_SRS_S32_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S16_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_S16_S64
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S16_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_S16_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_S16_S64_2:%[0-9]+]]:edc = VST_3D_SRS_S16_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S16_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_S16_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_S16_S32_2:%[0-9]+]]:edc = VST_3D_SRS_S16_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D8_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D8_S32
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S8_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_S8_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_S8_S32_2:%[0-9]+]]:edc = VST_3D_SRS_S8_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<32 x s8>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S32_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_S32_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_S32_S64_2:%[0-9]+]]:edc = VST_3D_SRS_S32_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S64
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S16_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_S16_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_S16_S64_2:%[0-9]+]]:edc = VST_3D_SRS_S16_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY3]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D16_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_D16_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_D16_S32_2:%[0-9]+]]:edc = VST_3D_SRS_D16_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D8_S32_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D8_S32_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D8_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_D8_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_D8_S32_2:%[0-9]+]]:edc = VST_3D_SRS_D8_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<32 x s8>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<32 x s8>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D32_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_D32_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_D32_S64_2:%[0-9]+]]:edc = VST_3D_SRS_D32_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<8 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v8.acc64.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<8 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S64_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VST_SRS_D16_S64_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D16_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_D16_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_D16_S64_2:%[0-9]+]]:edc = VST_3D_SRS_D16_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY4]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            postinc-3d-regclass
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: postinc-3d-regclass
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY5]], %subreg.sub_dim_size, [[COPY3]], %subreg.sub_dim_stride, [[COPY6]], %subreg.sub_dim_count, [[COPY7]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY4]], %subreg.sub_hi_dim_then_sub_dim_stride, [[COPY8]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S16_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_S16_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_S16_S32_2:%[0-9]+]]:edc = VST_3D_SRS_S16_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], [[COPY9]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = G_CONSTANT i20 1
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.I256.v16.acc32.srs), %100:accregbank(<8 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %1, %1, %1, %1, %1, %1 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S16_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $cm0
    ; CHECK-LABEL: name: VST_SRS_S16_S32_512_bits
    ; CHECK: liveins: $p0, $r1, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: VST_SRS_S16_S32_ag_idx_imm [[COPY]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S16_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_S16_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_S16_S32_2:%[0-9]+]]:edc = VST_3D_SRS_S16_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_S32_S64_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $cm0
    ; CHECK-LABEL: name: VST_SRS_S32_S64_512_bits
    ; CHECK: liveins: $p0, $r1, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: VST_SRS_S32_S64_ag_idx_imm [[COPY]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_S32_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_S32_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_S32_S64_2:%[0-9]+]]:edc = VST_3D_SRS_S32_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $cm0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_512_bits
    ; CHECK: liveins: $p0, $r1, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D16_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_D16_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_D16_S32_2:%[0-9]+]]:edc = VST_3D_SRS_D16_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $cm0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_512_bits
    ; CHECK: liveins: $p0, $r1, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY]], 32, [[COPY4]], [[COPY5]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D32_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_D32_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_D32_S64_2:%[0-9]+]]:edc = VST_3D_SRS_D32_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY3]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D16_S32_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $cm0
    ; CHECK-LABEL: name: VST_SRS_D16_S32_512_bits_dyn
    ; CHECK: liveins: $p0, $r1, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY]], 32, [[COPY5]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D16_S32_:%[0-9]+]]:ep, [[VST_3D_SRS_D16_S32_1:%[0-9]+]]:edc, [[VST_3D_SRS_D16_S32_2:%[0-9]+]]:edc = VST_3D_SRS_D16_S32 [[COPY]], [[REG_SEQUENCE]], [[COPY4]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v32.acc32.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...

---
name:            VST_SRS_D32_S64_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $cm0
    ; CHECK-LABEL: name: VST_SRS_D32_S64_512_bits_dyn
    ; CHECK: liveins: $p0, $r1, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: $crsrssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: VST_SRS_D32_S64_ag_idx_imm [[COPY]], 32, [[COPY5]], [[COPY6]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:mss = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_3D_SRS_D32_S64_:%[0-9]+]]:ep, [[VST_3D_SRS_D32_S64_1:%[0-9]+]]:edc, [[VST_3D_SRS_D32_S64_2:%[0-9]+]]:edc = VST_3D_SRS_D32_S64 [[COPY]], [[REG_SEQUENCE]], [[COPY4]], [[COPY7]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>), align 64)
    ; CHECK-NEXT: $crsrssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<16 x s64>) = COPY $cm0
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.v16.acc64.srs), %100:accregbank(<16 x s64>), %101:gprregbank(s32), %102:gprregbank(s32)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s32>))
    PseudoRET implicit $lr
...
