; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

define void @test_ret_void() {
  ; CHECK-LABEL: name: test_ret_void
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

define i32 @test_unreachable() {
  ; CHECK-LABEL: name: test_unreachable
  ; CHECK: bb.1 (%ir-block.0):
  unreachable
}

define i32 @test_ret_i32() {
  ; CHECK-LABEL: name: test_ret_i32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   $r0 = COPY [[C]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i32 0
}

define i64 @test_ret_i64() {
  ; CHECK-LABEL: name: test_ret_i64
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
  ; CHECK-NEXT:   $r0 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r1 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0, implicit $r1
  ret i64 0
}

define i128 @test_ret_i128() {
  ; CHECK-LABEL: name: test_ret_i128
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s128) = G_CONSTANT i128 0
  ; CHECK-NEXT:   $q0 = COPY [[C]](s128)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $q0
  ret i128 0
}

define i1 @test_ret_i1() {
  ; CHECK-LABEL: name: test_ret_i1
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[C]](s1)
  ; CHECK-NEXT:   $r0 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i1 -1
}

define signext i1 @test_ret_i1_sext() {
  ; CHECK-LABEL: name: test_ret_i1_sext
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
  ; CHECK-NEXT:   [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[C]](s1)
  ; CHECK-NEXT:   $r0 = COPY [[SEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i1 -1
}

define zeroext i1 @test_ret_i1_zext() {
  ; CHECK-LABEL: name: test_ret_i1_zext
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[C]](s1)
  ; CHECK-NEXT:   $r0 = COPY [[ZEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i1 0
}

define i8 @test_ret_i8() {
  ; CHECK-LABEL: name: test_ret_i8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[C]](s8)
  ; CHECK-NEXT:   $r0 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i8 -1
}

define signext i8 @test_ret_i8_sext() {
  ; CHECK-LABEL: name: test_ret_i8_sext
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
  ; CHECK-NEXT:   [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[C]](s8)
  ; CHECK-NEXT:   $r0 = COPY [[SEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i8 -1
}

define zeroext i8 @test_ret_i8_zext() {
  ; CHECK-LABEL: name: test_ret_i8_zext
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[C]](s8)
  ; CHECK-NEXT:   $r0 = COPY [[ZEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i8 0
}

define i16 @test_ret_i16() {
  ; CHECK-LABEL: name: test_ret_i16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 -1
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[C]](s16)
  ; CHECK-NEXT:   $r0 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i16 -1
}

define signext i16 @test_ret_i16_sext() {
  ; CHECK-LABEL: name: test_ret_i16_sext
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 -1
  ; CHECK-NEXT:   [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[C]](s16)
  ; CHECK-NEXT:   $r0 = COPY [[SEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i16 -1
}

define zeroext i16 @test_ret_i16_zext() {
  ; CHECK-LABEL: name: test_ret_i16_zext
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[C]](s16)
  ; CHECK-NEXT:   $r0 = COPY [[ZEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret i16 0
}

define i8* @test_ret_vptr() {
  ; CHECK-LABEL: name: test_ret_vptr
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(p0) = G_CONSTANT i20 0
  ; CHECK-NEXT:   $p0 = COPY [[C]](p0)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $p0
  ret i8* null
}

define float @test_ret_float() {
  ; CHECK-LABEL: name: test_ret_float
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 0.000000e+00
  ; CHECK-NEXT:   $r0 = COPY [[C]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0
  ret float 0.0
}

define double @test_ret_double() {
  ; CHECK-LABEL: name: test_ret_double
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_FCONSTANT double 0.000000e+00
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
  ; CHECK-NEXT:   $r0 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r1 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0, implicit $r1
  ret double 0.0
}
