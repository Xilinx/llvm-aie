# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VLDA_UPS_S32_S16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_S16
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_S16_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S32_S16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_S16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_S16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_S16 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S32_S16_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v16.I256.ups), %25:vregbank(<16 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_S16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_S16
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_S16_:%[0-9]+]]:acc1024, [[VLDA_3D_UPS_S64_S16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_S16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_S16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_S16 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S64_S16_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I256.ups), %25:vregbank(<16 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_S8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_S8
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_S8_:%[0-9]+]]:acc1024, [[VLDA_3D_UPS_S32_S8_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_S8_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_S8_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_S8 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S32_S8_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<8 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I256.ups), %25:vregbank(<8 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_S32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_S32
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_S32_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S64_S32_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_S32_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_S32_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_S32 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S64_S32_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<8 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v8.I256.ups), %25:vregbank(<8 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_D16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_D16_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S32_D16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_D16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_D16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_D16 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S32_D16_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v16.I256.ups), %25:vregbank(<16 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_D16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D16
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_D16_:%[0-9]+]]:acc1024, [[VLDA_3D_UPS_S64_D16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_D16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_D16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_D16 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S64_D16_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I256.ups), %25:vregbank(<16 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_D8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D8
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_D8_:%[0-9]+]]:acc1024, [[VLDA_3D_UPS_S32_D8_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_D8_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_D8_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_D8 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S32_D8_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<8 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I256.ups), %25:vregbank(<8 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_D32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_D32_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S64_D32_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_D32_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_D32_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_D32 [[COPY2]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S64_D32_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<8 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v8.I256.ups), %25:vregbank(<8 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_D16_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_D16_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S32_D16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_D16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_D16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_D16 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S32_D16_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v16.I256.ups), %25:vregbank(<16 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_D16_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D16_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_D16_:%[0-9]+]]:acc1024, [[VLDA_3D_UPS_S64_D16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_D16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_D16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_D16 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S64_D16_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I256.ups), %25:vregbank(<16 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_D8_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S32_D8_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_D8_:%[0-9]+]]:acc1024, [[VLDA_3D_UPS_S32_D8_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_D8_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_D8_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_D8 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S32_D8_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<8 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I256.ups), %25:vregbank(<8 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_D32_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32_dyn
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_D32_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S64_D32_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_D32_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_D32_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_D32 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>))
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S64_D32_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<8 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<8 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v8.I256.ups), %25:vregbank(<8 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_S16_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S32_S16_512_bits
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_S16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_S16_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_S16_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S32_S16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_S16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_S16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_S16 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_3D_UPS_S32_S16_]], %subreg.sub_512_lo, [[VLDA_UPS_S32_S16_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<32 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<32 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I512.ups), %25:vregbank(<32 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_S32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S64_S32_512_bits
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_S32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_S32_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_S32_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S64_S32_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_S32_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_S32_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_S32 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_3D_UPS_S64_S32_]], %subreg.sub_512_lo, [[VLDA_UPS_S64_S32_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), %25:vregbank(<16 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_D16_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16_512_bits
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_D16_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S32_D16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_D16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_D16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_D16 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_3D_UPS_S32_D16_]], %subreg.sub_512_lo, [[VLDA_UPS_S32_D16_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<32 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<32 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I512.ups), %25:vregbank(<32 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_D32_512_bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32_512_bits
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY2]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_D32_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S64_D32_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_D32_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_D32_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_D32 [[COPY3]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_3D_UPS_S64_D32_]], %subreg.sub_512_lo, [[VLDA_UPS_S64_D32_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 0
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), %25:vregbank(<16 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S32_D16_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S32_D16_512_bits_dyn
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D16_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S32_D16_ag_idx_imm [[COPY3]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_D16_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S32_D16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_D16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_D16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_D16 [[COPY4]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<16 x s16>), align 64)
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_3D_UPS_S32_D16_]], %subreg.sub_512_lo, [[VLDA_UPS_S32_D16_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<32 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<32 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v32.I512.ups), %25:vregbank(<32 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            VLDA_UPS_S64_D32_512_bits_dyn
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1
    ; CHECK-LABEL: name: VLDA_UPS_S64_D32_512_bits_dyn
    ; CHECK: liveins: $p0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: $crupssign = COPY [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_UPS_S64_D32_ag_idx_imm:%[0-9]+]]:acc512 = VLDA_UPS_S64_D32_ag_idx_imm [[COPY3]], [[COPY]], 32, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S64_D32_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S64_D32_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S64_D32_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S64_D32_3:%[0-9]+]]:edc = VLDA_3D_UPS_S64_D32 [[COPY4]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:acc1024 = REG_SEQUENCE [[VLDA_3D_UPS_S64_D32_]], %subreg.sub_512_lo, [[VLDA_UPS_S64_D32_ag_idx_imm]], %subreg.sub_512_hi
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[REG_SEQUENCE1]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %25:vregbank(<16 x s32>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %2, %3, %4, %6, %5, %7 :: (load (<16 x s32>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = COPY $r1
    %103:accregbank(<16 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I512.ups), %25:vregbank(<16 x s32>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...

---
name:            postinc-3d-regclass
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r1, $amll0
    ; CHECK-LABEL: name: postinc-3d-regclass
    ; CHECK: liveins: $p0, $r1, $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY4]], %subreg.sub_dim_size, [[COPY2]], %subreg.sub_dim_stride, [[COPY5]], %subreg.sub_dim_count, [[COPY6]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY3]], %subreg.sub_hi_dim_then_sub_dim_stride, [[COPY7]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:mss = COPY [[COPY1]]
    ; CHECK-NEXT: [[VLDA_3D_UPS_S32_S16_:%[0-9]+]]:acc512, [[VLDA_3D_UPS_S32_S16_1:%[0-9]+]]:ep, [[VLDA_3D_UPS_S32_S16_2:%[0-9]+]]:edc, [[VLDA_3D_UPS_S32_S16_3:%[0-9]+]]:edc = VLDA_3D_UPS_S32_S16 [[COPY8]], [[COPY]], [[REG_SEQUENCE]], implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLDA_3D_UPS_S32_S16_]]
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = G_CONSTANT i20 1
    %25:vregbank(<16 x s16>), %8:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20) = G_AIE_POSTINC_3D_LOAD %0, %1, %1, %1, %1, %1, %1, %1 :: (load (<16 x s16>))
    %101:gprregbank(s32) = COPY $r1
    %102:gprregbank(s32) = G_CONSTANT i32 1
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc32.v16.I256.ups), %25:vregbank(<16 x s16>), %101:gprregbank(s32), %102:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...
