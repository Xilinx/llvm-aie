# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name: load_s32
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_s32
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s32))
    ; CHECK-NEXT: $r0 = COPY [[LDA_dms_lda_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = G_LOAD %0 :: (load (s32), align 4)
    $r0 = COPY %1
...

---
name: load_ext_s8
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_ext_s8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_S8_ag_idx_imm:%[0-9]+]]:er = LDA_S8_ag_idx_imm [[COPY]], 0 :: (load (s8))
    ; CHECK-NEXT: $r0 = COPY [[LDA_S8_ag_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = G_LOAD %0 :: (load (s8), align 1)
    $r0 = COPY %1
...

---
name: load_ext_s16
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_ext_s16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_S16_ag_idx_imm:%[0-9]+]]:er = LDA_S16_ag_idx_imm [[COPY]], 0 :: (load (s16))
    ; CHECK-NEXT: $r0 = COPY [[LDA_S16_ag_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = G_LOAD %0 :: (load (s16), align 2)
    $r0 = COPY %1
...

---
name: load_p0_ptr
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_p0_ptr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_dms_lda_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:ptrregbank(p0) = G_LOAD %0 :: (load (p0), align 4)
    $p0 = COPY %1
...

---
name: load_p0_ptr_as_32bits
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_p0_ptr_as_32bits
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep_as_32bit = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_dms_lda_idx_imm]]
    %0:ep_as_32bit(p0) = COPY $p0
    %1:ptrregbank(p0) = G_LOAD %0 :: (load (p0), align 4)
    $p0 = COPY %1
...

---
name: load_p0_gpr
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_p0_gpr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_dms_lda_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(p0) = G_LOAD %0 :: (load (p0), align 4)
    $p0 = COPY %1
...

---
name: load_s20
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: load_s20
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:mdm_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s20), align 4)
    ; CHECK-NEXT: $m1 = COPY [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm1:%[0-9]+]]:edc_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s20), align 4)
    ; CHECK-NEXT: $dc0 = COPY [[LDA_dms_lda_idx_imm1]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm2:%[0-9]+]]:edj_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s20), align 4)
    ; CHECK-NEXT: $dj1 = COPY [[LDA_dms_lda_idx_imm2]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm3:%[0-9]+]]:edn_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s20), align 4)
    ; CHECK-NEXT: $dn2 = COPY [[LDA_dms_lda_idx_imm3]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm4:%[0-9]+]]:em_as_32bit = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s20), align 4)
    ; CHECK-NEXT: $m0 = COPY [[LDA_dms_lda_idx_imm4]]
    %0:ptrregbank(p0) = COPY $p0
    %1:modregbank(s20) = G_LOAD %0 :: (load (s20), align 4)
    $m1 = COPY %1
    %2:edc(s20) = G_LOAD %0 :: (load (s20), align 4)
    $dc0 = COPY %2
    %3:edj(s20) = G_LOAD %0 :: (load (s20), align 4)
    $dj1 = COPY %3
    %4:edn(s20) = G_LOAD %0 :: (load (s20), align 4)
    $dn2 = COPY %4
    %5:em(s20) = G_LOAD %0 :: (load (s20), align 4)
    $m0 = COPY %5
...

---
name: load_s20_gpr
legalized: true
regBankSelected: true

body: |
  bb.0:
    liveins: $m0
    ; CHECK-LABEL: name: load_s20_gpr
    ; CHECK: liveins: $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY]], 0 :: (load (s20), align 4)
    ; CHECK-NEXT: $m0 = COPY [[LDA_dms_lda_idx_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s20) = G_LOAD %0 :: (load (s20), align 4)
    $m0 = COPY %1
...
