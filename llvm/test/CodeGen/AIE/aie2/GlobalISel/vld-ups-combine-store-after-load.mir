# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select -verify-machineinstrs -o - %s | FileCheck %s

# This tests that we don't combine if a store is in between the load and VUPS instruction
---
name:            VLD_UPS_store
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0, $m1, $m2, $r0, $amll0, $p1
    ; CHECK-LABEL: name: VLD_UPS_store
    ; CHECK: liveins: $p0, $m0, $m1, $m2, $r0, $amll0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec256 = COPY $amll0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_pstm_nrm:%[0-9]+]]:vec256, [[VLDA_dmw_lda_w_ag_pstm_nrm1:%[0-9]+]]:ep = VLDA_dmw_lda_w_ag_pstm_nrm [[COPY]], [[COPY2]] :: (load (<16 x s16>))
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY4]], [[COPY1]], 0 :: (store (<16 x s16>))
    ; CHECK-NEXT: $crupssign = COPY [[COPY3]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:mss = COPY [[COPY3]]
    ; CHECK-NEXT: [[VUPS_S64_D16_mv_ups_w2c:%[0-9]+]]:mcms = VUPS_S64_D16_mv_ups_w2c [[VLDA_dmw_lda_w_ag_pstm_nrm]], [[COPY5]], implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VUPS_S64_D16_mv_ups_w2c]]
    %0:ptrregbank(p0) = COPY $p0
    %20:ptrregbank(p0) = COPY $p1
    %7:modregbank(s20) = COPY $m0
    %70:gprregbank(s32) = COPY $r0
    %80:vregbank(<16 x s16>) = COPY $amll0
    %25:vregbank(<16 x s16>), %19:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (<16 x s16>))
    G_STORE %80:vregbank(<16 x s16>), %20:ptrregbank(p0) :: (store (<16 x s16>))
    %103:accregbank(<8 x s64>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.acc64.v16.I256.ups), %25:vregbank(<16 x s16>),  %70:gprregbank(s32),  %70:gprregbank(s32)
    PseudoRET implicit $lr, implicit %103
...
