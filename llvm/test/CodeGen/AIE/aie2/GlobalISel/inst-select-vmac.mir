# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s
---
name:            _Z16test_mac_4x2_2x8Dv32_tS_Dv16_u7__acc64
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm1, $x0, $x2

    ; CHECK-LABEL: name: _Z16test_mac_4x2_2x8Dv32_tS_Dv16_u7__acc64
    ; CHECK: liveins: $cm1, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc1024 = COPY $cm1
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 24
    ; CHECK-NEXT: [[VMAC_vmac_cm_core_dense:%[0-9]+]]:acc1024 = VMAC_vmac_cm_core_dense [[COPY2]], [[COPY]], [[COPY1]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $cm0 = COPY [[VMAC_vmac_cm_core_dense]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %3:accregbank(<16 x s64>) = COPY $cm1
    %6:gprregbank(s32) = G_CONSTANT i32 24
    %4:vregbank(<64 x s8>) = G_BITCAST %1(<32 x s16>)
    %5:vregbank(<16 x s32>) = G_BITCAST %2(<32 x s16>)
    %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.I512.ACC1024.acc32.mac.conf), %4(<64 x s8>), %5(<16 x s32>), %3(<16 x s64>), %6(s32)
    $cm0 = COPY %0(<16 x s64>)
    PseudoRET implicit $lr, implicit $cm0

...

---
name:            vmac_sparse_wide
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $cm1, $q0, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $x0, $y2
    ; CHECK-LABEL: name: vmac_sparse_wide
    ; CHECK: liveins: $cm1, $q0, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $x0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY $q0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm1
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 32
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:mxw = COPY [[COPY1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY4]], %subreg.sub_sparse_x, [[COPY2]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[VMAC_vmac_cm_core_sparse_wide:%[0-9]+]]:acc1024 = VMAC_vmac_cm_core_sparse_wide [[COPY3]], [[COPY]], [[REG_SEQUENCE]], [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: $cm0 = COPY [[VMAC_vmac_cm_core_sparse_wide]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
  %1:vregbank(<128 x s8>) = COPY $y2
  %2:vregbank(<64 x s8>) = COPY $x0
  %3:vregbank(s128) = COPY $q0
  %20:accregbank(<16 x s64>) = COPY $cm1
  %46:gprregbank(s32) = G_CONSTANT i32 32
  %45:vregbank(<16 x s32>) = G_BITCAST %2:vregbank(<64 x s8>)
  %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.I1024.I1024.ACC1024.acc32.mac.conf), %1:vregbank(<128 x s8>), %45:vregbank(<16 x s32>), %3:vregbank(s128), %20:accregbank(<16 x s64>), %46:gprregbank(s32)
  $cm0 = COPY %0:accregbank(<16 x s64>)
  PseudoRET implicit $lr, implicit $cm0
...

---
name:            vmac_sparse_narrow
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
  liveins: $cm1, $q2, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $x0, $x2
    ; CHECK-LABEL: name: vmac_sparse_narrow
    ; CHECK: liveins: $cm1, $q2, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:mxw = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec128 = COPY $q2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc1024 = COPY $cm1
    ; CHECK-NEXT: [[MOV_RLC_imm11_pseudo:%[0-9]+]]:er = MOV_RLC_imm11_pseudo 936
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sparsevec640 = REG_SEQUENCE [[COPY1]], %subreg.sub_sparse_x, [[COPY2]], %subreg.sub_sparse_q
    ; CHECK-NEXT: [[VMAC_vmac_cm_core_sparse_narrow:%[0-9]+]]:acc1024 = VMAC_vmac_cm_core_sparse_narrow [[COPY3]], [[COPY]], [[REG_SEQUENCE]], [[MOV_RLC_imm11_pseudo]]
    ; CHECK-NEXT: $cm0 = COPY [[VMAC_vmac_cm_core_sparse_narrow]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $cm0
  %1:vregbank(<64 x s8>) = COPY $x0
  %2:vregbank(<64 x s8>) = COPY $x2
  %3:vregbank(s128) = COPY $q2
  %20:accregbank(<16 x s64>) = COPY $cm1
  %45:gprregbank(s32) = G_CONSTANT i32 936
  %0:accregbank(<16 x s64>) = G_INTRINSIC intrinsic(@llvm.aie2.I512.I1024.ACC1024.acc32.mac.conf), %1:vregbank(<64 x s8>), %2:vregbank(<64 x s8>), %3:vregbank(s128), %20:accregbank(<16 x s64>), %45:gprregbank(s32)
  $cm0 = COPY %0:accregbank(<16 x s64>)
  PseudoRET implicit $lr, implicit $cm0
...
