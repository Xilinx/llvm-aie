; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --print-fixed-stack
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; 128-bit vector types

define void @callee_v4int32(<4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>,
  ; CHECK-LABEL: name: callee_v4int32
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -32, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -16, size: 16, alignment: 16, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.26):
  ; CHECK-NEXT:   liveins: $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(<4 x s32>), [[UV1:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
  ; CHECK-NEXT:   [[UV2:%[0-9]+]]:_(<4 x s32>), [[UV3:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY1]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
  ; CHECK-NEXT:   [[UV4:%[0-9]+]]:_(<4 x s32>), [[UV5:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY2]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<8 x s32>) = COPY $wl6
  ; CHECK-NEXT:   [[UV6:%[0-9]+]]:_(<4 x s32>), [[UV7:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY3]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<8 x s32>) = COPY $wl8
  ; CHECK-NEXT:   [[UV8:%[0-9]+]]:_(<4 x s32>), [[UV9:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY4]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<8 x s32>) = COPY $wl10
  ; CHECK-NEXT:   [[UV10:%[0-9]+]]:_(<4 x s32>), [[UV11:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY5]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
  ; CHECK-NEXT:   [[UV12:%[0-9]+]]:_(<4 x s32>), [[UV13:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY6]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<8 x s32>) = COPY $wl3
  ; CHECK-NEXT:   [[UV14:%[0-9]+]]:_(<4 x s32>), [[UV15:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY7]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<8 x s32>) = COPY $wl5
  ; CHECK-NEXT:   [[UV16:%[0-9]+]]:_(<4 x s32>), [[UV17:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY8]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<8 x s32>) = COPY $wl7
  ; CHECK-NEXT:   [[UV18:%[0-9]+]]:_(<4 x s32>), [[UV19:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY9]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<8 x s32>) = COPY $wl9
  ; CHECK-NEXT:   [[UV20:%[0-9]+]]:_(<4 x s32>), [[UV21:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY10]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<8 x s32>) = COPY $wl11
  ; CHECK-NEXT:   [[UV22:%[0-9]+]]:_(<4 x s32>), [[UV23:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY11]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<8 x s32>) = COPY $wh0
  ; CHECK-NEXT:   [[UV24:%[0-9]+]]:_(<4 x s32>), [[UV25:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY12]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<8 x s32>) = COPY $wh2
  ; CHECK-NEXT:   [[UV26:%[0-9]+]]:_(<4 x s32>), [[UV27:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY13]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<8 x s32>) = COPY $wh4
  ; CHECK-NEXT:   [[UV28:%[0-9]+]]:_(<4 x s32>), [[UV29:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY14]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<8 x s32>) = COPY $wh6
  ; CHECK-NEXT:   [[UV30:%[0-9]+]]:_(<4 x s32>), [[UV31:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY15]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<8 x s32>) = COPY $wh8
  ; CHECK-NEXT:   [[UV32:%[0-9]+]]:_(<4 x s32>), [[UV33:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY16]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<8 x s32>) = COPY $wh10
  ; CHECK-NEXT:   [[UV34:%[0-9]+]]:_(<4 x s32>), [[UV35:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY17]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<8 x s32>) = COPY $wh1
  ; CHECK-NEXT:   [[UV36:%[0-9]+]]:_(<4 x s32>), [[UV37:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY18]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<8 x s32>) = COPY $wh3
  ; CHECK-NEXT:   [[UV38:%[0-9]+]]:_(<4 x s32>), [[UV39:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY19]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<8 x s32>) = COPY $wh5
  ; CHECK-NEXT:   [[UV40:%[0-9]+]]:_(<4 x s32>), [[UV41:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY20]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<8 x s32>) = COPY $wh7
  ; CHECK-NEXT:   [[UV42:%[0-9]+]]:_(<4 x s32>), [[UV43:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY21]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<8 x s32>) = COPY $wh9
  ; CHECK-NEXT:   [[UV44:%[0-9]+]]:_(<4 x s32>), [[UV45:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY22]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<8 x s32>) = COPY $wh11
  ; CHECK-NEXT:   [[UV46:%[0-9]+]]:_(<4 x s32>), [[UV47:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY23]](<8 x s32>)
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<4 x s32>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<4 x s32>) from %fixed-stack.1)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<4 x s32>) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (<4 x s32>) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>,
                             <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>,
                             <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>,
                             <4 x i32>, <4 x i32>) {
  ret void
}

define void @callee_v8int16(<8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>,
  ; CHECK-LABEL: name: callee_v8int16
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -32, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -16, size: 16, alignment: 16, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.26):
  ; CHECK-NEXT:   liveins: $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(<8 x s16>), [[UV1:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<16 x s16>) = COPY $wl2
  ; CHECK-NEXT:   [[UV2:%[0-9]+]]:_(<8 x s16>), [[UV3:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY1]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<16 x s16>) = COPY $wl4
  ; CHECK-NEXT:   [[UV4:%[0-9]+]]:_(<8 x s16>), [[UV5:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY2]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<16 x s16>) = COPY $wl6
  ; CHECK-NEXT:   [[UV6:%[0-9]+]]:_(<8 x s16>), [[UV7:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY3]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<16 x s16>) = COPY $wl8
  ; CHECK-NEXT:   [[UV8:%[0-9]+]]:_(<8 x s16>), [[UV9:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY4]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<16 x s16>) = COPY $wl10
  ; CHECK-NEXT:   [[UV10:%[0-9]+]]:_(<8 x s16>), [[UV11:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY5]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<16 x s16>) = COPY $wl1
  ; CHECK-NEXT:   [[UV12:%[0-9]+]]:_(<8 x s16>), [[UV13:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY6]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<16 x s16>) = COPY $wl3
  ; CHECK-NEXT:   [[UV14:%[0-9]+]]:_(<8 x s16>), [[UV15:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY7]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<16 x s16>) = COPY $wl5
  ; CHECK-NEXT:   [[UV16:%[0-9]+]]:_(<8 x s16>), [[UV17:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY8]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<16 x s16>) = COPY $wl7
  ; CHECK-NEXT:   [[UV18:%[0-9]+]]:_(<8 x s16>), [[UV19:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY9]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<16 x s16>) = COPY $wl9
  ; CHECK-NEXT:   [[UV20:%[0-9]+]]:_(<8 x s16>), [[UV21:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY10]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<16 x s16>) = COPY $wl11
  ; CHECK-NEXT:   [[UV22:%[0-9]+]]:_(<8 x s16>), [[UV23:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY11]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<16 x s16>) = COPY $wh0
  ; CHECK-NEXT:   [[UV24:%[0-9]+]]:_(<8 x s16>), [[UV25:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY12]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<16 x s16>) = COPY $wh2
  ; CHECK-NEXT:   [[UV26:%[0-9]+]]:_(<8 x s16>), [[UV27:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY13]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<16 x s16>) = COPY $wh4
  ; CHECK-NEXT:   [[UV28:%[0-9]+]]:_(<8 x s16>), [[UV29:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY14]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<16 x s16>) = COPY $wh6
  ; CHECK-NEXT:   [[UV30:%[0-9]+]]:_(<8 x s16>), [[UV31:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY15]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<16 x s16>) = COPY $wh8
  ; CHECK-NEXT:   [[UV32:%[0-9]+]]:_(<8 x s16>), [[UV33:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY16]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<16 x s16>) = COPY $wh10
  ; CHECK-NEXT:   [[UV34:%[0-9]+]]:_(<8 x s16>), [[UV35:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY17]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<16 x s16>) = COPY $wh1
  ; CHECK-NEXT:   [[UV36:%[0-9]+]]:_(<8 x s16>), [[UV37:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY18]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<16 x s16>) = COPY $wh3
  ; CHECK-NEXT:   [[UV38:%[0-9]+]]:_(<8 x s16>), [[UV39:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY19]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<16 x s16>) = COPY $wh5
  ; CHECK-NEXT:   [[UV40:%[0-9]+]]:_(<8 x s16>), [[UV41:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY20]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<16 x s16>) = COPY $wh7
  ; CHECK-NEXT:   [[UV42:%[0-9]+]]:_(<8 x s16>), [[UV43:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY21]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<16 x s16>) = COPY $wh9
  ; CHECK-NEXT:   [[UV44:%[0-9]+]]:_(<8 x s16>), [[UV45:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY22]](<16 x s16>)
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<16 x s16>) = COPY $wh11
  ; CHECK-NEXT:   [[UV46:%[0-9]+]]:_(<8 x s16>), [[UV47:%[0-9]+]]:_(<8 x s16>) = G_UNMERGE_VALUES [[COPY23]](<16 x s16>)
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<8 x s16>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<8 x s16>) from %fixed-stack.1)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<8 x s16>) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (<8 x s16>) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>,
                             <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>,
                             <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>,
                             <8 x i16>, <8 x i16>) {
  ret void
}

define void @callee_v16int8(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>,
  ; CHECK-LABEL: name: callee_v16int8
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -32, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -16, size: 16, alignment: 16, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.26):
  ; CHECK-NEXT:   liveins: $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(<16 x s8>), [[UV1:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<32 x s8>) = COPY $wl2
  ; CHECK-NEXT:   [[UV2:%[0-9]+]]:_(<16 x s8>), [[UV3:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY1]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<32 x s8>) = COPY $wl4
  ; CHECK-NEXT:   [[UV4:%[0-9]+]]:_(<16 x s8>), [[UV5:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY2]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<32 x s8>) = COPY $wl6
  ; CHECK-NEXT:   [[UV6:%[0-9]+]]:_(<16 x s8>), [[UV7:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY3]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<32 x s8>) = COPY $wl8
  ; CHECK-NEXT:   [[UV8:%[0-9]+]]:_(<16 x s8>), [[UV9:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY4]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<32 x s8>) = COPY $wl10
  ; CHECK-NEXT:   [[UV10:%[0-9]+]]:_(<16 x s8>), [[UV11:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY5]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<32 x s8>) = COPY $wl1
  ; CHECK-NEXT:   [[UV12:%[0-9]+]]:_(<16 x s8>), [[UV13:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY6]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<32 x s8>) = COPY $wl3
  ; CHECK-NEXT:   [[UV14:%[0-9]+]]:_(<16 x s8>), [[UV15:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY7]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<32 x s8>) = COPY $wl5
  ; CHECK-NEXT:   [[UV16:%[0-9]+]]:_(<16 x s8>), [[UV17:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY8]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<32 x s8>) = COPY $wl7
  ; CHECK-NEXT:   [[UV18:%[0-9]+]]:_(<16 x s8>), [[UV19:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY9]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<32 x s8>) = COPY $wl9
  ; CHECK-NEXT:   [[UV20:%[0-9]+]]:_(<16 x s8>), [[UV21:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY10]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<32 x s8>) = COPY $wl11
  ; CHECK-NEXT:   [[UV22:%[0-9]+]]:_(<16 x s8>), [[UV23:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY11]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<32 x s8>) = COPY $wh0
  ; CHECK-NEXT:   [[UV24:%[0-9]+]]:_(<16 x s8>), [[UV25:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY12]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<32 x s8>) = COPY $wh2
  ; CHECK-NEXT:   [[UV26:%[0-9]+]]:_(<16 x s8>), [[UV27:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY13]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<32 x s8>) = COPY $wh4
  ; CHECK-NEXT:   [[UV28:%[0-9]+]]:_(<16 x s8>), [[UV29:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY14]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<32 x s8>) = COPY $wh6
  ; CHECK-NEXT:   [[UV30:%[0-9]+]]:_(<16 x s8>), [[UV31:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY15]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<32 x s8>) = COPY $wh8
  ; CHECK-NEXT:   [[UV32:%[0-9]+]]:_(<16 x s8>), [[UV33:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY16]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<32 x s8>) = COPY $wh10
  ; CHECK-NEXT:   [[UV34:%[0-9]+]]:_(<16 x s8>), [[UV35:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY17]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<32 x s8>) = COPY $wh1
  ; CHECK-NEXT:   [[UV36:%[0-9]+]]:_(<16 x s8>), [[UV37:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY18]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<32 x s8>) = COPY $wh3
  ; CHECK-NEXT:   [[UV38:%[0-9]+]]:_(<16 x s8>), [[UV39:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY19]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<32 x s8>) = COPY $wh5
  ; CHECK-NEXT:   [[UV40:%[0-9]+]]:_(<16 x s8>), [[UV41:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY20]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<32 x s8>) = COPY $wh7
  ; CHECK-NEXT:   [[UV42:%[0-9]+]]:_(<16 x s8>), [[UV43:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY21]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<32 x s8>) = COPY $wh9
  ; CHECK-NEXT:   [[UV44:%[0-9]+]]:_(<16 x s8>), [[UV45:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY22]](<32 x s8>)
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<32 x s8>) = COPY $wh11
  ; CHECK-NEXT:   [[UV46:%[0-9]+]]:_(<16 x s8>), [[UV47:%[0-9]+]]:_(<16 x s8>) = G_UNMERGE_VALUES [[COPY23]](<32 x s8>)
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<16 x s8>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<16 x s8>) from %fixed-stack.1)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<16 x s8>) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (<16 x s8>) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>,
                             <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>,
                             <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>,
                             <16 x i8>, <16 x i8>) {
  ret void
}

define void @callee_v4float(<4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>,
  ; CHECK-LABEL: name: callee_v4float
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -32, size: 16, alignment: 32, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -16, size: 16, alignment: 16, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.26):
  ; CHECK-NEXT:   liveins: $wh0, $wh1, $wh2, $wh3, $wh4, $wh5, $wh6, $wh7, $wh8, $wh9, $wh10, $wh11, $wl0, $wl1, $wl2, $wl3, $wl4, $wl5, $wl6, $wl7, $wl8, $wl9, $wl10, $wl11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(<4 x s32>), [[UV1:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
  ; CHECK-NEXT:   [[UV2:%[0-9]+]]:_(<4 x s32>), [[UV3:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY1]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
  ; CHECK-NEXT:   [[UV4:%[0-9]+]]:_(<4 x s32>), [[UV5:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY2]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(<8 x s32>) = COPY $wl6
  ; CHECK-NEXT:   [[UV6:%[0-9]+]]:_(<4 x s32>), [[UV7:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY3]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(<8 x s32>) = COPY $wl8
  ; CHECK-NEXT:   [[UV8:%[0-9]+]]:_(<4 x s32>), [[UV9:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY4]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(<8 x s32>) = COPY $wl10
  ; CHECK-NEXT:   [[UV10:%[0-9]+]]:_(<4 x s32>), [[UV11:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY5]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
  ; CHECK-NEXT:   [[UV12:%[0-9]+]]:_(<4 x s32>), [[UV13:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY6]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(<8 x s32>) = COPY $wl3
  ; CHECK-NEXT:   [[UV14:%[0-9]+]]:_(<4 x s32>), [[UV15:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY7]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(<8 x s32>) = COPY $wl5
  ; CHECK-NEXT:   [[UV16:%[0-9]+]]:_(<4 x s32>), [[UV17:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY8]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(<8 x s32>) = COPY $wl7
  ; CHECK-NEXT:   [[UV18:%[0-9]+]]:_(<4 x s32>), [[UV19:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY9]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(<8 x s32>) = COPY $wl9
  ; CHECK-NEXT:   [[UV20:%[0-9]+]]:_(<4 x s32>), [[UV21:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY10]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(<8 x s32>) = COPY $wl11
  ; CHECK-NEXT:   [[UV22:%[0-9]+]]:_(<4 x s32>), [[UV23:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY11]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(<8 x s32>) = COPY $wh0
  ; CHECK-NEXT:   [[UV24:%[0-9]+]]:_(<4 x s32>), [[UV25:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY12]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(<8 x s32>) = COPY $wh2
  ; CHECK-NEXT:   [[UV26:%[0-9]+]]:_(<4 x s32>), [[UV27:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY13]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:_(<8 x s32>) = COPY $wh4
  ; CHECK-NEXT:   [[UV28:%[0-9]+]]:_(<4 x s32>), [[UV29:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY14]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:_(<8 x s32>) = COPY $wh6
  ; CHECK-NEXT:   [[UV30:%[0-9]+]]:_(<4 x s32>), [[UV31:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY15]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:_(<8 x s32>) = COPY $wh8
  ; CHECK-NEXT:   [[UV32:%[0-9]+]]:_(<4 x s32>), [[UV33:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY16]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:_(<8 x s32>) = COPY $wh10
  ; CHECK-NEXT:   [[UV34:%[0-9]+]]:_(<4 x s32>), [[UV35:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY17]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:_(<8 x s32>) = COPY $wh1
  ; CHECK-NEXT:   [[UV36:%[0-9]+]]:_(<4 x s32>), [[UV37:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY18]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:_(<8 x s32>) = COPY $wh3
  ; CHECK-NEXT:   [[UV38:%[0-9]+]]:_(<4 x s32>), [[UV39:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY19]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:_(<8 x s32>) = COPY $wh5
  ; CHECK-NEXT:   [[UV40:%[0-9]+]]:_(<4 x s32>), [[UV41:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY20]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:_(<8 x s32>) = COPY $wh7
  ; CHECK-NEXT:   [[UV42:%[0-9]+]]:_(<4 x s32>), [[UV43:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY21]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:_(<8 x s32>) = COPY $wh9
  ; CHECK-NEXT:   [[UV44:%[0-9]+]]:_(<4 x s32>), [[UV45:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY22]](<8 x s32>)
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:_(<8 x s32>) = COPY $wh11
  ; CHECK-NEXT:   [[UV46:%[0-9]+]]:_(<4 x s32>), [[UV47:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY23]](<8 x s32>)
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(<4 x s32>) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (<4 x s32>) from %fixed-stack.1)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(<4 x s32>) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (<4 x s32>) from %fixed-stack.0, align 32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
                             <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>,
                             <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>,
                             <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>,
                             <4 x float>, <4 x float>) {
  ret void
}
