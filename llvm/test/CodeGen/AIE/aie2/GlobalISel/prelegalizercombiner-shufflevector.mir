# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-prelegalizer-combiner %s -verify-machineinstrs -o - | FileCheck %s

---
name:            concat_vector_32_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_1024
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: concat_vector_32_1024
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<16 x s32>) = COPY $x1
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<32 x s32>) = G_CONCAT_VECTORS [[COPY]](<16 x s32>), [[COPY1]](<16 x s32>)
    ; CHECK-NEXT: $y2 = COPY [[CONCAT_VECTORS]](<32 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $y2
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<16 x s32>) = COPY $x1
    %0:_(<32 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)
    $y2 = COPY %0:_(<32 x s32>)
    PseudoRET implicit $lr, implicit $y2
...

---
name:            concat_vector_32_256
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl0
    ; CHECK-LABEL: name: concat_vector_32_256
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<4 x s32>), [[UV1:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY]](<8 x s32>)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<8 x s32>) = G_CONCAT_VECTORS [[UV1]](<4 x s32>), [[UV]](<4 x s32>)
    ; CHECK-NEXT: $wl0 = COPY [[CONCAT_VECTORS]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $wl0
    %1:_(<8 x s32>) = COPY $wl0
    %2:_(<4 x s32>), %3:_(<4 x s32>) = G_UNMERGE_VALUES %1:_(<8 x s32>)
    %0:_(<8 x s32>) = G_SHUFFLE_VECTOR %3:_(<4 x s32>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7)
    $wl0 = COPY %0:_(<8 x s32>)
    PseudoRET implicit $lr, implicit $wl0
...

---
name:            concat_vector_16_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_16_512
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<16 x s16>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<32 x s16>) = G_CONCAT_VECTORS [[COPY]](<16 x s16>), [[COPY1]](<16 x s16>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<32 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<16 x s16>) = COPY $wl2
    %2:_(<16 x s16>) = COPY $wl4
    %0:_(<32 x s16>) = G_SHUFFLE_VECTOR %1:_(<16 x s16>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)
    $x0 = COPY %0:_(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_8_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_8_512
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<32 x s8>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<64 x s8>) = G_CONCAT_VECTORS [[COPY]](<32 x s8>), [[COPY1]](<32 x s8>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<32 x s8>) = COPY $wl2
    %2:_(<32 x s8>) = COPY $wl4
    %0:_(<64 x s8>) = G_SHUFFLE_VECTOR %1:_(<32 x s8>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63)
    $x0 = COPY %0:_(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_512_second_end
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512_second_end
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1, -1, -1)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            extract_vector_1024_to_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2
    ; CHECK-LABEL: name: extract_vector_1024_to_512
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<16 x s32>), [[UV1:%[0-9]+]]:_(<16 x s32>) = G_UNMERGE_VALUES [[COPY]](<32 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[UV]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<32 x s32>) = COPY $y2
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<32 x s32>), %1:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_512_first_start
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512_first_start
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(-1, -1, -1, -1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            extract_vector_1024_to_256
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2
    ; CHECK-LABEL: name: extract_vector_1024_to_256
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<16 x s32>), [[UV1:%[0-9]+]]:_(<16 x s32>) = G_UNMERGE_VALUES [[COPY]](<32 x s32>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<8 x s32>), [[UV3:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[UV]](<16 x s32>)
    ; CHECK-NEXT: $wl0 = COPY [[UV2]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<32 x s32>) = COPY $y2
    %0:_(<8 x s32>) = G_SHUFFLE_VECTOR %1:_(<32 x s32>), %1:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7)
    $wl0 = COPY %0:_(<8 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_512_first_end
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512_first_end
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(0, 1, 2, 3, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_512_second_start
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512_second_start
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, 12, 13, 14, 15)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_512_first_block
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512_first_block
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[DEF]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(-1, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_512_second_block
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512_second_block
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[DEF]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_32_512_random
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_32_512_random
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(0, -1, 2, -1, 4, -1, -1, 7, 8, 9, -1, 11, 12, -1, 14, -1)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            extract_vector_1024_to_128
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2
    ; CHECK-LABEL: name: extract_vector_1024_to_128
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<16 x s32>), [[UV1:%[0-9]+]]:_(<16 x s32>) = G_UNMERGE_VALUES [[COPY]](<32 x s32>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<8 x s32>), [[UV3:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[UV]](<16 x s32>)
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[UV2]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[AIE_UNPAD_VECTOR]](<4 x s32>)
    %1:_(<32 x s32>) = COPY $y2
    %0:_(<4 x s32>) = G_SHUFFLE_VECTOR %1:_(<32 x s32>), %1:_, shufflemask(0, 1, 2, 3)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_1024_to_32
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2
    ; CHECK-LABEL: name: extract_vector_1024_to_32
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<64 x s8>), [[UV1:%[0-9]+]]:_(<64 x s8>) = G_UNMERGE_VALUES [[COPY]](<128 x s8>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<32 x s8>), [[UV3:%[0-9]+]]:_(<32 x s8>) = G_UNMERGE_VALUES [[UV]](<64 x s8>)
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<16 x s8>) = G_AIE_UNPAD_VECTOR [[UV2]](<32 x s8>)
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:_(<8 x s8>), [[UV5:%[0-9]+]]:_(<8 x s8>) = G_UNMERGE_VALUES [[AIE_UNPAD_VECTOR]](<16 x s8>)
    ; CHECK-NEXT: [[UV6:%[0-9]+]]:_(<4 x s8>), [[UV7:%[0-9]+]]:_(<4 x s8>) = G_UNMERGE_VALUES [[UV4]](<8 x s8>)
    ; CHECK-NEXT: [[UV8:%[0-9]+]]:_(<2 x s8>), [[UV9:%[0-9]+]]:_(<2 x s8>) = G_UNMERGE_VALUES [[UV6]](<4 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV8]](<2 x s8>)
    %1:_(<128 x s8>) = COPY $y2
    %0:_(<2 x s8>) = G_SHUFFLE_VECTOR %1:_(<128 x s8>), %1:_, shufflemask(0, 1)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_second_half_512_to_256
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: extract_vector_second_half_512_to_256
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV1]](<8 x s32>)
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<8 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %1:_(<16 x s32>), shufflemask(8, 9, 10, 11, 12, 13, 14, 15)
    PseudoRET implicit $lr, implicit %2
...

---
name:            extract_vector_second_half_512_to_128
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: extract_vector_second_half_512_to_128
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<4 x s32>), [[UV3:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[UV]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV3]](<4 x s32>)
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<4 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %1:_(<16 x s32>), shufflemask(4, 5, 6, 7)
    PseudoRET implicit $lr, implicit %2
...

---
name:            extract_vector_second_half_1024_to_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2, $y3
    ; CHECK-LABEL: name: extract_vector_second_half_1024_to_512
    ; CHECK: liveins: $y2, $y3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<64 x s8>), [[UV1:%[0-9]+]]:_(<64 x s8>) = G_UNMERGE_VALUES [[COPY]](<128 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV1]](<64 x s8>)
    %1:_(<128 x s8>) = COPY $y2
    %2:_(<64 x s8>) = G_SHUFFLE_VECTOR %1:_(<128 x s8>), %1:_(<128 x s8>), shufflemask(64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127)
    PseudoRET implicit $lr, implicit %2
...

---
name:            extract_vector_second_half_1024_to_32
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2, $y3
    ; CHECK-LABEL: name: extract_vector_second_half_1024_to_32
    ; CHECK: liveins: $y2, $y3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<64 x s8>), [[UV1:%[0-9]+]]:_(<64 x s8>) = G_UNMERGE_VALUES [[COPY]](<128 x s8>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<32 x s8>), [[UV3:%[0-9]+]]:_(<32 x s8>) = G_UNMERGE_VALUES [[UV]](<64 x s8>)
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<16 x s8>) = G_AIE_UNPAD_VECTOR [[UV2]](<32 x s8>)
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:_(<8 x s8>), [[UV5:%[0-9]+]]:_(<8 x s8>) = G_UNMERGE_VALUES [[AIE_UNPAD_VECTOR]](<16 x s8>)
    ; CHECK-NEXT: [[UV6:%[0-9]+]]:_(<4 x s8>), [[UV7:%[0-9]+]]:_(<4 x s8>) = G_UNMERGE_VALUES [[UV4]](<8 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV7]](<4 x s8>)
    %1:_(<128 x s8>) = COPY $y2
    %2:_(<4 x s8>) = G_SHUFFLE_VECTOR %1:_(<128 x s8>), %1:_(<128 x s8>), shufflemask(4, 5, 6, 7)
    PseudoRET implicit $lr, implicit %2
...

---
name:            extract_vector_third_half_1024
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2, $y3
    ; CHECK-LABEL: name: extract_vector_third_half_1024
    ; CHECK: liveins: $y2, $y3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<16 x s32>), [[UV1:%[0-9]+]]:_(<16 x s32>) = G_UNMERGE_VALUES [[COPY]](<32 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV]](<16 x s32>)
    %1:_(<32 x s32>) = COPY $y2
    %2:_(<32 x s32>) = COPY $y3
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<32 x s32>), %2:_, shufflemask(32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_third_half_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: extract_vector_third_half_512
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV]](<8 x s32>)
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<16 x s32>) = COPY $x1
    %0:_(<8 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %2:_, shufflemask(16, 17, 18, 19, 20, 21, 22, 23)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_third_half_256
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl0, $wl1
    ; CHECK-LABEL: name: extract_vector_third_half_256
    ; CHECK: liveins: $wl0, $wl1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[AIE_UNPAD_VECTOR]](<4 x s32>)
    %1:_(<8 x s32>) = COPY $wl0
    %2:_(<8 x s32>) = COPY $wl1
    %0:_(<4 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(8, 9, 10, 11)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_third_half_128
legalized:       false
body:             |
  bb.1.entry:
    liveins: $q0, $q1
    ; CHECK-LABEL: name: extract_vector_third_half_128
    ; CHECK: liveins: $q0, $q1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x s32>), [[UV1:%[0-9]+]]:_(<2 x s32>) = G_UNMERGE_VALUES [[COPY]](<4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV]](<2 x s32>)
    %1:_(<4 x s32>) = COPY $q0
    %2:_(<4 x s32>) = COPY $q1
    %0:_(<2 x s32>) = G_SHUFFLE_VECTOR %1:_(<4 x s32>), %2:_, shufflemask(4, 5)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_fourth_half_1024
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2, $y3
    ; CHECK-LABEL: name: extract_vector_fourth_half_1024
    ; CHECK: liveins: $y2, $y3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<16 x s32>), [[UV1:%[0-9]+]]:_(<16 x s32>) = G_UNMERGE_VALUES [[COPY]](<32 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV1]](<16 x s32>)
    %1:_(<32 x s32>) = COPY $y2
    %2:_(<32 x s32>) = COPY $y3
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<32 x s32>), %2:_, shufflemask(48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_fourth_half_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: extract_vector_fourth_half_512
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV1]](<8 x s32>)
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<16 x s32>) = COPY $x1
    %0:_(<8 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %2:_, shufflemask(24,25,26,27,28,29,30,31)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_fourth_half_256
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl0, $wl1
    ; CHECK-LABEL: name: extract_vector_fourth_half_256
    ; CHECK: liveins: $wl0, $wl1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<4 x s32>), [[UV1:%[0-9]+]]:_(<4 x s32>) = G_UNMERGE_VALUES [[COPY]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV1]](<4 x s32>)
    %1:_(<8 x s32>) = COPY $wl0
    %2:_(<8 x s32>) = COPY $wl1
    %0:_(<4 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(12,13,14,15)
    PseudoRET implicit $lr, implicit %0
...

---
name:            extract_vector_fourth_half_128
legalized:       false
body:             |
  bb.1.entry:
    liveins: $q0, $q1
    ; CHECK-LABEL: name: extract_vector_fourth_half_128
    ; CHECK: liveins: $q0, $q1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x s32>), [[UV1:%[0-9]+]]:_(<2 x s32>) = G_UNMERGE_VALUES [[COPY]](<4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV1]](<2 x s32>)
    %1:_(<4 x s32>) = COPY $q0
    %2:_(<4 x s32>) = COPY $q1
    %0:_(<2 x s32>) = G_SHUFFLE_VECTOR %1:_(<4 x s32>), %2:_, shufflemask(6,7)
    PseudoRET implicit $lr, implicit %0
...

---
name:            insert_vector_16_elements
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: insert_vector_16_elements
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<16 x s32>) = COPY $x1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<8 x s32>), [[UV3:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY1]](<16 x s32>)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[UV]](<8 x s32>), [[UV2]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[CONCAT_VECTORS]](<16 x s32>)
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<16 x s32>) = COPY $x1
    %3:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %2:_(<16 x s32>), shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23)
    PseudoRET implicit $lr, implicit %3
...

---
name:            insert_vector_8_elements
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl0, $wl1
    ; CHECK-LABEL: name: insert_vector_8_elements
    ; CHECK: liveins: $wl0, $wl1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY]](<8 x s32>)
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR1:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<8 x s32>) = G_CONCAT_VECTORS [[AIE_UNPAD_VECTOR]](<4 x s32>), [[AIE_UNPAD_VECTOR1]](<4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[CONCAT_VECTORS]](<8 x s32>)
    %1:_(<8 x s32>) = COPY $wl0
    %2:_(<8 x s32>) = COPY $wl1
    %3:_(<8 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_(<8 x s32>), shufflemask(0, 1, 2, 3, 8, 9, 10, 11)
    PseudoRET implicit $lr, implicit %3
...

---
name:            insert_vector_128_elements
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2, $y3
    ; CHECK-LABEL: name: insert_vector_128_elements
    ; CHECK: liveins: $y2, $y3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<128 x s8>) = COPY $y3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<64 x s8>), [[UV1:%[0-9]+]]:_(<64 x s8>) = G_UNMERGE_VALUES [[COPY]](<128 x s8>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<64 x s8>), [[UV3:%[0-9]+]]:_(<64 x s8>) = G_UNMERGE_VALUES [[COPY1]](<128 x s8>)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<128 x s8>) = G_CONCAT_VECTORS [[UV]](<64 x s8>), [[UV2]](<64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[CONCAT_VECTORS]](<128 x s8>)
    %1:_(<128 x s8>) = COPY $y2
    %2:_(<128 x s8>) = COPY $y3
    %3:_(<128 x s8>) = G_SHUFFLE_VECTOR %1:_(<128 x s8>), %2:_(<128 x s8>), shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191)
    PseudoRET implicit $lr, implicit %3
...

---
name:            insert_vector_16_elements_reverse
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: insert_vector_16_elements_reverse
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<16 x s32>) = COPY $x1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY]](<16 x s32>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<8 x s32>), [[UV3:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[COPY1]](<16 x s32>)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[UV2]](<8 x s32>), [[UV]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[CONCAT_VECTORS]](<16 x s32>)
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<16 x s32>) = COPY $x1
    %3:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %2:_(<16 x s32>), shufflemask(16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7)
    PseudoRET implicit $lr, implicit %3
...

---
name:            insert_vector_8_elements_reverse
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl0, $wl1
    ; CHECK-LABEL: name: insert_vector_8_elements_reverse
    ; CHECK: liveins: $wl0, $wl1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl1
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY]](<8 x s32>)
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR1:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY1]](<8 x s32>)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<8 x s32>) = G_CONCAT_VECTORS [[AIE_UNPAD_VECTOR1]](<4 x s32>), [[AIE_UNPAD_VECTOR]](<4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[CONCAT_VECTORS]](<8 x s32>)
    %1:_(<8 x s32>) = COPY $wl0
    %2:_(<8 x s32>) = COPY $wl1
    %3:_(<8 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_(<8 x s32>), shufflemask(8, 9, 10, 11, 0, 1, 2, 3)
    PseudoRET implicit $lr, implicit %3
...

---
name:            insert_vector_128_elements_reverse
legalized:       false
body:             |
  bb.1.entry:
    liveins: $y2, $y3
    ; CHECK-LABEL: name: insert_vector_128_elements_reverse
    ; CHECK: liveins: $y2, $y3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<128 x s8>) = COPY $y2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<128 x s8>) = COPY $y3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<64 x s8>), [[UV1:%[0-9]+]]:_(<64 x s8>) = G_UNMERGE_VALUES [[COPY]](<128 x s8>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(<64 x s8>), [[UV3:%[0-9]+]]:_(<64 x s8>) = G_UNMERGE_VALUES [[COPY1]](<128 x s8>)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<128 x s8>) = G_CONCAT_VECTORS [[UV2]](<64 x s8>), [[UV]](<64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[CONCAT_VECTORS]](<128 x s8>)
    %1:_(<128 x s8>) = COPY $y2
    %2:_(<128 x s8>) = COPY $y3
    %3:_(<128 x s8>) = G_SHUFFLE_VECTOR %1:_(<128 x s8>), %2:_(<128 x s8>), shufflemask(128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63)
    PseudoRET implicit $lr, implicit %3
...

---
name:            concat_vector_reverse_32_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY1]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_reverse_32_512_undef_start_first
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512_undef_start_first
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY1]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(-1, -1, -1, -1, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_reverse_32_512_start_end
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512_start_end
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY1]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(8, 9, 10, 11, 12, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_reverse_32_512_end_start
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512_end_start
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY1]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, 4, 5, 6, 7)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_reverse_32_512_end_end
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512_end_end
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY1]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, -1, -1, -1, -1)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_reverse_32_512_first_block
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512_first_block
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[DEF]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(-1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_reverse_32_512_second_block
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512_second_block
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY]](<8 x s32>), [[DEF]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            concat_vector_reverse_32_512_random
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: concat_vector_reverse_32_512_random
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x s32>) = G_CONCAT_VECTORS [[COPY1]](<8 x s32>), [[COPY]](<8 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[CONCAT_VECTORS]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(8, 9, -1, 11, 12, 13, -1, 15, 0, 1, -1, 3, 4, 5, -1, 7)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            shuffle_vector_32_4x4
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: shuffle_vector_32_4x4
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<16 x s32>) = COPY $x1
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[COPY]](<16 x s32>), [[COPY1]], shufflemask(0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15)
    ; CHECK-NEXT: $x2 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x2
    %1:_(<16 x s32>) = COPY $x0
    %2:_(<16 x s32>) = COPY $x1
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<16 x s32>), %2:_, shufflemask(0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15)
    $x2 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x2
...

---
name:            shuffle_vector_16_4x4
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: shuffle_vector_16_4x4
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<32 x s16>) = COPY $x1
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<32 x s16>) = G_SHUFFLE_VECTOR [[COPY]](<32 x s16>), [[COPY1]], shufflemask(0, 8, 16, 24, 1, 9, 17, 25, 2, 10, 18, 26, 3, 11, 19, 27, 4, 12, 20, 28, 5, 13, 21, 29, 6, 14, 22, 30, 7, 15, 23, 31)
    ; CHECK-NEXT: $x2 = COPY [[SHUF]](<32 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x2
    %1:_(<32 x s16>) = COPY $x0
    %2:_(<32 x s16>) = COPY $x1
    %0:_(<32 x s16>) = G_SHUFFLE_VECTOR %1:_(<32 x s16>), %2:_, shufflemask(0, 8, 16, 24, 1, 9, 17, 25, 2, 10, 18, 26, 3, 11, 19, 27, 4, 12, 20, 28, 5, 13, 21, 29, 6, 14, 22, 30, 7, 15, 23, 31)
    $x2 = COPY %0:_(<32 x s16>)
    PseudoRET implicit $lr, implicit $x2
...

---
name:            shuffle_vector_8_512
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl0, $wl1
    ; CHECK-LABEL: name: shuffle_vector_8_512
    ; CHECK: liveins: $wl0, $wl1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 35
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<64 x s8>) = G_CONCAT_VECTORS [[COPY]](<32 x s8>), [[DEF]](<32 x s8>)
    ; CHECK-NEXT: [[AIE_VSHUFFLE:%[0-9]+]]:_(<64 x s8>) = G_AIE_VSHUFFLE [[CONCAT_VECTORS]], [[CONCAT_VECTORS]], [[C]](s32)
    ; CHECK-NEXT: $x2 = COPY [[AIE_VSHUFFLE]](<64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x2
    %1:_(<32 x s8>) = COPY $wl0
    %2:_(<32 x s8>) = G_IMPLICIT_DEF
    %0:_(<64 x s8>) = G_SHUFFLE_VECTOR %1:_(<32 x s8>), %2:_, shufflemask(0, 16, 32, 48, 1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 4, 20, 36, 52, 5, 21, 37, 53, 6, 22, 38, 54, 7, 23, 39, 55, 8, 24, 40, 56, 9, 25, 41, 57, 10, 26, 42, 58, 11, 27, 43, 59, 12, 28, 44, 60, 13, 29, 45, 61, 14, 30, 46, 62, 15, 31, 47, 63)
    $x2 = COPY %0:_(<64 x s8>)
    PseudoRET implicit $lr, implicit $x2
...


---
name:            shuffle_vector_8_1024
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: shuffle_vector_8_1024
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<64 x s8>) = COPY $x1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 35
    ; CHECK-NEXT: [[AIE_VSHUFFLE:%[0-9]+]]:_(<64 x s8>) = G_AIE_VSHUFFLE [[COPY]], [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: $x2 = COPY [[AIE_VSHUFFLE]](<64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x2
    %1:_(<64 x s8>) = COPY $x0
    %2:_(<64 x s8>) = COPY $x1
    %0:_(<64 x s8>) = G_SHUFFLE_VECTOR %1:_(<64 x s8>), %2:_, shufflemask(0, 16, 32, 48, 1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 4, 20, 36, 52, 5, 21, 37, 53, 6, 22, 38, 54, 7, 23, 39, 55, 8, 24, 40, 56, 9, 25, 41, 57, 10, 26, 42, 58, 11, 27, 43, 59, 12, 28, 44, 60, 13, 29, 45, 61, 14, 30, 46, 62, 15, 31, 47, 63)
    $x2 = COPY %0:_(<64 x s8>)
    PseudoRET implicit $lr, implicit $x2
...

---
name:            shuffle_vector_1024_4x8
legalized:       false
body:             |
  bb.1.entry:
    liveins: $x0, $x1
    ; CHECK-LABEL: name: shuffle_vector_1024_4x8
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x s16>) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<32 x s16>) = COPY $x1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 29
    ; CHECK-NEXT: [[AIE_VSHUFFLE:%[0-9]+]]:_(<32 x s16>) = G_AIE_VSHUFFLE [[COPY]], [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: $x2 = COPY [[AIE_VSHUFFLE]](<32 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x2
    %1:_(<32 x s16>) = COPY $x0
    %2:_(<32 x s16>) = COPY $x1
    %0:_(<32 x s16>) = G_SHUFFLE_VECTOR %1:_(<32 x s16>), %2:_, shufflemask(0, 1, 8, 9, 16, 17, 24, 25, 2, 3, 10, 11, 18, 19, 26, 27, 4, 5, 12, 13, 20, 21, 28, 29, 6, 7, 14, 15, 22, 23, 30, 31)
    $x2 = COPY %0:_(<32 x s16>)
    PseudoRET implicit $lr, implicit $x2
...

---
name:            shuffle_vector_512_4x8
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl0, $wl1
    ; CHECK-LABEL: name: shuffle_vector_512_4x8
    ; CHECK: liveins: $wl0, $wl1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<16 x s16>) = COPY $wl1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 29
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<32 x s16>) = G_CONCAT_VECTORS [[COPY]](<16 x s16>), [[COPY1]](<16 x s16>)
    ; CHECK-NEXT: [[AIE_VSHUFFLE:%[0-9]+]]:_(<32 x s16>) = G_AIE_VSHUFFLE [[CONCAT_VECTORS]], [[CONCAT_VECTORS]], [[C]](s32)
    ; CHECK-NEXT: $x2 = COPY [[AIE_VSHUFFLE]](<32 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x2
    %1:_(<16 x s16>) = COPY $wl0
    %2:_(<16 x s16>) = COPY $wl1
    %0:_(<32 x s16>) = G_SHUFFLE_VECTOR %1:_(<16 x s16>), %2:_, shufflemask(0, 1, 8, 9, 16, 17, 24, 25, 2, 3, 10, 11, 18, 19, 26, 27, 4, 5, 12, 13, 20, 21, 28, 29, 6, 7, 14, 15, 22, 23, 30, 31)
    $x2 = COPY %0:_(<32 x s16>)
    PseudoRET implicit $lr, implicit $x2
...
