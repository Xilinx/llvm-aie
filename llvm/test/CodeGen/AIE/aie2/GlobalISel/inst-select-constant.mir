# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s


---
name: constant_s32_gpr
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_s32_gpr
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_RLC_imm10_pseudo]]
    %0:er(s32) = G_CONSTANT i32 0
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_s32_gpr_class_min_signed_10_bits
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_s32_gpr_class_min_signed_10_bits
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo -512
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_RLC_imm10_pseudo]]
    %0:er(s32) = G_CONSTANT i32 -512
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_s32_gpr_class_max_signed_10_bits
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_s32_gpr_class_max_signed_10_bits
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 511
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_RLC_imm10_pseudo]]
    %0:er(s32) = G_CONSTANT i32 511
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_s32_gpr_class_min_signed_11_bits_minus_one
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_s32_gpr_class_min_signed_11_bits_minus_one
    ; CHECK: [[MOVXM_lng_cg:%[0-9]+]]:er = MOVXM_lng_cg -1025
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOVXM_lng_cg]]
    %0:er(s32) = G_CONSTANT i32 -1025
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_s32_gpr_class_min_signed_11_bits
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_s32_gpr_class_min_signed_11_bits
    ; CHECK: [[MOV_RLC_imm11_pseudo:%[0-9]+]]:er = MOV_RLC_imm11_pseudo -1024
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_RLC_imm11_pseudo]]
    %0:er(s32) = G_CONSTANT i32 -1024
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_s32_gpr_class_max_signed_11_bits
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_s32_gpr_class_max_signed_11_bits
    ; CHECK: [[MOV_RLC_imm11_pseudo:%[0-9]+]]:er = MOV_RLC_imm11_pseudo 1023
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_RLC_imm11_pseudo]]
    %0:er(s32) = G_CONSTANT i32 1023
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_s32_gpr_class_max_signed_11_bits_plus_one
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_s32_gpr_class_max_signed_11_bits_plus_one
    ; CHECK: [[MOVXM_lng_cg:%[0-9]+]]:er = MOVXM_lng_cg 1024
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOVXM_lng_cg]]
    %0:er(s32) = G_CONSTANT i32 1024
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_p0_ptr
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_p0_ptr
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:ep = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]]
    %0:ptrregbank(p0) = G_CONSTANT i20 0
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_p0_ptr_class
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_p0_ptr_class
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:ep = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]]
    %0:ep(p0) = G_CONSTANT i20 0
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_p0_ptr_class_as_32bit
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_p0_ptr_class_as_32bit
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:ep_as_32bit = MOV_PD_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]]
    %0:ep_as_32bit(p0) = G_CONSTANT i20 0
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_p0_ptr_class_max_signed_10_bits_plus_one
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_p0_ptr_class_max_signed_10_bits_plus_one
    ; CHECK: [[MOV_PD_imm11_pseudo:%[0-9]+]]:ep = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm11_pseudo]]
    %0:ep(p0) = G_CONSTANT i20 512
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_p0_ptr_class_max_signed_11_bits_plus_one
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_p0_ptr_class_max_signed_11_bits_plus_one
    ; CHECK: [[MOVXM_lng_cg:%[0-9]+]]:ep_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOVXM_lng_cg]]
    %0:ep(p0) = G_CONSTANT i20 1024
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_p0_gpr
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_p0_gpr
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_RLC_imm10_pseudo]]
    %0:gprregbank(p0) = G_CONSTANT i20 0
    PseudoRET implicit $lr, implicit %0
...

---
name: constant_p0_gpr_class
legalized: true
regBankSelected: true

body: |
  bb.0:
    ; CHECK-LABEL: name: constant_p0_gpr_class
    ; CHECK: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_RLC_imm10_pseudo]]
    %0:er(p0) = G_CONSTANT i20 0
    PseudoRET implicit $lr, implicit %0
...

---
name: test_constant_s20
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_s20
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:mdm = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:mdm_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]], implicit [[MOVXM_lng_cg]]
    %0:modregbank(s20) = G_CONSTANT i20 5
    %1:modregbank(s20) = G_CONSTANT i20 1024
    PseudoRET implicit $lr, implicit %0, implicit %1
...

---
name: test_constant_i20_to_p0
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_p0
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:ep = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]]
    %0:ptrregbank(s20) = G_CONSTANT i20 5
    PseudoRET implicit $lr, implicit %0
...

---
name: test_constant_i20_to_mod_regs
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_mod_regs
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:em = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]], implicit [[MOV_PD_imm10_pseudo1]], implicit [[MOV_PD_imm10_pseudo2]], implicit [[MOV_PD_imm10_pseudo3]]
    %0:edc(s20) = G_CONSTANT i20 5
    %1:edj(s20) = G_CONSTANT i20 5
    %2:edn(s20) = G_CONSTANT i20 5
    %3:em(s20) = G_CONSTANT i20 5
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...

---
name: test_constant_i20_to_mod_regs_as_32bit
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_mod_regs_as_32bit
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edc_as_32bit = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj_as_32bit = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn_as_32bit = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:em_as_32bit = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]], implicit [[MOV_PD_imm10_pseudo1]], implicit [[MOV_PD_imm10_pseudo2]], implicit [[MOV_PD_imm10_pseudo3]]
    %0:edc_as_32bit(s20) = G_CONSTANT i20 5
    %1:edj_as_32bit(s20) = G_CONSTANT i20 5
    %2:edn_as_32bit(s20) = G_CONSTANT i20 5
    %3:em_as_32bit(s20) = G_CONSTANT i20 5
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...

---
name: test_constant_i20_to_D_max_sign_10_bit
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_max_sign_10_bit
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 511
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 511
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 511
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:em = MOV_PD_imm10_pseudo 511
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]], implicit [[MOV_PD_imm10_pseudo1]], implicit [[MOV_PD_imm10_pseudo2]], implicit [[MOV_PD_imm10_pseudo3]]
    %0:edc(s20) = G_CONSTANT i20 511
    %1:edj(s20) = G_CONSTANT i20 511
    %2:edn(s20) = G_CONSTANT i20 511
    %3:em(s20) = G_CONSTANT i20 511
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...

---
name: test_constant_i20_to_D_mix_sign_10_bit
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_mix_sign_10_bit
    ; CHECK: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edc = MOV_PD_imm10_pseudo -512
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo -512
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo -512
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:em = MOV_PD_imm10_pseudo -512
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm10_pseudo]], implicit [[MOV_PD_imm10_pseudo1]], implicit [[MOV_PD_imm10_pseudo2]], implicit [[MOV_PD_imm10_pseudo3]]
    %0:edc(s20) = G_CONSTANT i20 -512
    %1:edj(s20) = G_CONSTANT i20 -512
    %2:edn(s20) = G_CONSTANT i20 -512
    %3:em(s20) = G_CONSTANT i20 -512
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...

---
name: test_constant_i20_to_D_max_sign_10_bit_plus_1
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_max_sign_10_bit_plus_1
    ; CHECK: [[MOV_PD_imm11_pseudo:%[0-9]+]]:edc = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo1:%[0-9]+]]:edj = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo2:%[0-9]+]]:edn = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo3:%[0-9]+]]:em = MOV_PD_imm11_pseudo 512
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm11_pseudo]], implicit [[MOV_PD_imm11_pseudo1]], implicit [[MOV_PD_imm11_pseudo2]], implicit [[MOV_PD_imm11_pseudo3]]
    %0:edc(s20) = G_CONSTANT i20 512
    %1:edj(s20) = G_CONSTANT i20 512
    %2:edn(s20) = G_CONSTANT i20 512
    %3:em(s20) = G_CONSTANT i20 512
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...


---
name: test_constant_i20_to_D_min_sign_10_bit_minus_1
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_min_sign_10_bit_minus_1
    ; CHECK: [[MOV_PD_imm11_pseudo:%[0-9]+]]:edc = MOV_PD_imm11_pseudo -513
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo1:%[0-9]+]]:edj = MOV_PD_imm11_pseudo -513
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo2:%[0-9]+]]:edn = MOV_PD_imm11_pseudo -513
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo3:%[0-9]+]]:em = MOV_PD_imm11_pseudo -513
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm11_pseudo]], implicit [[MOV_PD_imm11_pseudo1]], implicit [[MOV_PD_imm11_pseudo2]], implicit [[MOV_PD_imm11_pseudo3]]
    %0:edc(s20) = G_CONSTANT i20 -513
    %1:edj(s20) = G_CONSTANT i20 -513
    %2:edn(s20) = G_CONSTANT i20 -513
    %3:em(s20) = G_CONSTANT i20 -513
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...

---
name: test_constant_i20_to_D_max_sign_11_bit
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_max_sign_11_bit
    ; CHECK: [[MOV_PD_imm11_pseudo:%[0-9]+]]:edc = MOV_PD_imm11_pseudo 1023
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo1:%[0-9]+]]:edj = MOV_PD_imm11_pseudo 1023
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo2:%[0-9]+]]:edn = MOV_PD_imm11_pseudo 1023
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo3:%[0-9]+]]:em = MOV_PD_imm11_pseudo 1023
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm11_pseudo]], implicit [[MOV_PD_imm11_pseudo1]], implicit [[MOV_PD_imm11_pseudo2]], implicit [[MOV_PD_imm11_pseudo3]]
    %0:edc(s20) = G_CONSTANT i20 1023
    %1:edj(s20) = G_CONSTANT i20 1023
    %2:edn(s20) = G_CONSTANT i20 1023
    %3:em(s20) = G_CONSTANT i20 1023
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...

---
name: test_constant_i20_to_D_mix_sign_11_bit
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_mix_sign_11_bit
    ; CHECK: [[MOV_PD_imm11_pseudo:%[0-9]+]]:edc = MOV_PD_imm11_pseudo -1024
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo1:%[0-9]+]]:edj = MOV_PD_imm11_pseudo -1024
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo2:%[0-9]+]]:edn = MOV_PD_imm11_pseudo -1024
    ; CHECK-NEXT: [[MOV_PD_imm11_pseudo3:%[0-9]+]]:em = MOV_PD_imm11_pseudo -1024
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOV_PD_imm11_pseudo]], implicit [[MOV_PD_imm11_pseudo1]], implicit [[MOV_PD_imm11_pseudo2]], implicit [[MOV_PD_imm11_pseudo3]]
    %0:edc(s20) = G_CONSTANT i20 -1024
    %1:edj(s20) = G_CONSTANT i20 -1024
    %2:edn(s20) = G_CONSTANT i20 -1024
    %3:em(s20) = G_CONSTANT i20 -1024
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...

---
name: test_constant_i20_to_D_max_sign_11_bit_plus_1
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_max_sign_11_bit_plus_1
    ; CHECK: [[MOVXM_lng_cg:%[0-9]+]]:edc_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[MOVXM_lng_cg1:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[MOVXM_lng_cg2:%[0-9]+]]:edn_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[MOVXM_lng_cg3:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOVXM_lng_cg]], implicit [[MOVXM_lng_cg1]], implicit [[MOVXM_lng_cg2]], implicit [[MOVXM_lng_cg3]]
    %0:edc(s20) = G_CONSTANT i20 1024
    %1:edj(s20) = G_CONSTANT i20 1024
    %2:edn(s20) = G_CONSTANT i20 1024
    %3:em(s20) = G_CONSTANT i20 1024
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...


---
name: test_constant_i20_to_D_min_sign_11_bit_minus_1
legalized: true
regBankSelected: true
body: |
  bb.0:
    ; CHECK-LABEL: name: test_constant_i20_to_D_min_sign_11_bit_minus_1
    ; CHECK: [[MOVXM_lng_cg:%[0-9]+]]:edc_as_32bit = MOVXM_lng_cg -1025
    ; CHECK-NEXT: [[MOVXM_lng_cg1:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg -1025
    ; CHECK-NEXT: [[MOVXM_lng_cg2:%[0-9]+]]:edn_as_32bit = MOVXM_lng_cg -1025
    ; CHECK-NEXT: [[MOVXM_lng_cg3:%[0-9]+]]:em_as_32bit = MOVXM_lng_cg -1025
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[MOVXM_lng_cg]], implicit [[MOVXM_lng_cg1]], implicit [[MOVXM_lng_cg2]], implicit [[MOVXM_lng_cg3]]
    %0:edc(s20) = G_CONSTANT i20 -1025
    %1:edj(s20) = G_CONSTANT i20 -1025
    %2:edn(s20) = G_CONSTANT i20 -1025
    %3:em(s20) = G_CONSTANT i20 -1025
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2, implicit %3
...
