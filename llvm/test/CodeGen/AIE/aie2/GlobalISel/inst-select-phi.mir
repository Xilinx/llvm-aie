# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name: phi_s32
legalized: true
regBankSelected: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s32
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:er = COPY $r7
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r8
  ; CHECK-NEXT:   [[EQZ:%[0-9]+]]:er = EQZ [[COPY2]]
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:er = AND [[EQZ]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   PseudoJNZ [[AND]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:er = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK-NEXT:   $r0 = COPY [[PHI]]
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r6, $r7, $r8
    %0:gprregbank(s32) = COPY $r6
    %1:gprregbank(s32) = COPY $r7
    %2:gprregbank(s32) = COPY $r8
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %4:gprregbank(s32) = G_ICMP intpred(eq), %2, %3
    %5:gprregbank(s32) = G_CONSTANT i32 1
    %6:gprregbank(s32) = G_AND %4, %5
    G_BRCOND %6, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %7:gprregbank(s32) = COPY %1
    G_BR %bb.2

  bb.2:
    %8:gprregbank(s32) = G_PHI %0, %bb.0, %7, %bb.1
    $r0 = COPY %8
...

---
name: phi_p0
legalized: true
regBankSelected: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_p0
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r6
  ; CHECK-NEXT:   [[EQZ:%[0-9]+]]:er = EQZ [[COPY2]]
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:er = AND [[EQZ]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   PseudoJNZ [[AND]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:ep = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK-NEXT:   $p0 = COPY [[PHI]]
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $p0, $p1, $r6

    %0:ptrregbank(p0) = COPY $p0
    %1:ptrregbank(p0) = COPY $p1
    %2:gprregbank(s32) = COPY $r6
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %4:gprregbank(s32) = G_ICMP intpred(eq), %2, %3
    %5:gprregbank(s32) = G_CONSTANT i32 1
    %6:gprregbank(s32) = G_AND %4, %5
    G_BRCOND %6, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %7:ptrregbank(p0) = COPY %1
    G_BR %bb.2

  bb.2:
    %8:ptrregbank(p0) = G_PHI %0, %bb.0, %7, %bb.1
    $p0 = COPY %8
...

---
name: phi_s20
legalized: true
regBankSelected: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s20
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $m1, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:mdm = COPY [[COPY]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:mdm = COPY $m1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:er = COPY $r8
  ; CHECK-NEXT:   [[EQZ:%[0-9]+]]:er = EQZ [[COPY3]]
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:er = AND [[EQZ]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   PseudoJNZ [[AND]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:mdm = PHI [[COPY1]], %bb.0, [[COPY2]], %bb.1
  ; CHECK-NEXT:   $m2 = COPY [[PHI]]
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r0, $m1, $r8
    %9:gprregbank(s32) = COPY $r0
    %0:modregbank(s20) = G_TRUNC %9
    %1:modregbank(s20) = COPY $m1
    %2:gprregbank(s32) = COPY $r8
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %4:gprregbank(s32) = G_ICMP intpred(eq), %2, %3
    %5:gprregbank(s32) = G_CONSTANT i32 1
    %6:gprregbank(s32) = G_AND %4, %5
    G_BRCOND %6, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %7:modregbank(s20) = COPY %1
    G_BR %bb.2

  bb.2:
    %8:modregbank(s20) = G_PHI %0:modregbank(s20), %bb.0, %7:modregbank(s20), %bb.1
    $m2 = COPY %8
...

---
name: phi_s20_gpr
legalized: true
regBankSelected: true
tracksRegLiveness: true

body: |
  ; CHECK-LABEL: name: phi_s20_gpr
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $m1, $r8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:mdm = COPY $m1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r8
  ; CHECK-NEXT:   [[EQZ:%[0-9]+]]:er = EQZ [[COPY2]]
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:er = AND [[EQZ]], [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   PseudoJNZ [[AND]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:mdm = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK-NEXT:   $m2 = COPY [[PHI]]
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $r0, $m1, $r8
    %9:gprregbank(s32) = COPY $r0
    %0:gprregbank(s20) = G_TRUNC %9
    %1:modregbank(s20) = COPY $m1
    %2:gprregbank(s32) = COPY $r8
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %4:gprregbank(s32) = G_ICMP intpred(eq), %2, %3
    %5:gprregbank(s32) = G_CONSTANT i32 1
    %6:gprregbank(s32) = G_AND %4, %5
    G_BRCOND %6, %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

    %7:modregbank(s20) = COPY %1
    G_BR %bb.2

  bb.2:
    %8:modregbank(s20) = G_PHI %0:gprregbank(s20), %bb.0, %7:modregbank(s20), %bb.1
    $m2 = COPY %8
...
