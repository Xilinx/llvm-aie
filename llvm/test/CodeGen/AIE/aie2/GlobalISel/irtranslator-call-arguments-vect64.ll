; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; 64-bit vector types

declare void @callee_v2int32(<2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>,
                             <2 x i32>)
define void @call_v2int32() {
  ; CHECK-LABEL: name: call_v2int32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKUP 8, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $sp
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 -8
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s20)
  ; CHECK-NEXT:   G_STORE [[BUILD_VECTOR]](<2 x s32>), [[PTR_ADD]](p0) :: (store (<2 x s32>) into stack - 8, basealign 32)
  ; CHECK-NEXT:   $l0 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l1 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l2 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l3 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l4 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l5 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l6 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   $l7 = COPY [[BUILD_VECTOR]](<2 x s32>)
  ; CHECK-NEXT:   PseudoJL @callee_v2int32, CustomRegMask($lr,$p6,$p7), implicit-def $lr, implicit $l0, implicit $l1, implicit $l2, implicit $l3, implicit $l4, implicit $l5, implicit $l6, implicit $l7
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 8, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  call void @callee_v2int32(<2 x i32> zeroinitializer, <2 x i32> zeroinitializer, <2 x i32> zeroinitializer, <2 x i32> zeroinitializer, <2 x i32> zeroinitializer, <2 x i32> zeroinitializer, <2 x i32> zeroinitializer, <2 x i32> zeroinitializer,
                            <2 x i32> zeroinitializer)
  ret void
}

declare void @callee_v4int16(<4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>, <4 x i16>,
                             <4 x i16>)
define void @call_v4int16() {
  ; CHECK-LABEL: name: call_v4int16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s16>) = G_BUILD_VECTOR [[C]](s16), [[C]](s16), [[C]](s16), [[C]](s16)
  ; CHECK-NEXT:   ADJCALLSTACKUP 8, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $sp
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 -8
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s20)
  ; CHECK-NEXT:   G_STORE [[BUILD_VECTOR]](<4 x s16>), [[PTR_ADD]](p0) :: (store (<4 x s16>) into stack - 8, basealign 32)
  ; CHECK-NEXT:   $l0 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   $l1 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   $l2 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   $l3 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   $l4 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   $l5 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   $l6 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   $l7 = COPY [[BUILD_VECTOR]](<4 x s16>)
  ; CHECK-NEXT:   PseudoJL @callee_v4int16, CustomRegMask($lr,$p6,$p7), implicit-def $lr, implicit $l0, implicit $l1, implicit $l2, implicit $l3, implicit $l4, implicit $l5, implicit $l6, implicit $l7
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 8, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  call void @callee_v4int16(<4 x i16> zeroinitializer, <4 x i16> zeroinitializer, <4 x i16> zeroinitializer, <4 x i16> zeroinitializer, <4 x i16> zeroinitializer, <4 x i16> zeroinitializer, <4 x i16> zeroinitializer, <4 x i16> zeroinitializer,
                            <4 x i16> zeroinitializer)
  ret void
}

declare void @callee_v8int8(<8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>, <8 x i8>,
                            <8 x i8>)
define void @call_v8int8() {
  ; CHECK-LABEL: name: call_v8int8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s8>) = G_BUILD_VECTOR [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8), [[C]](s8)
  ; CHECK-NEXT:   ADJCALLSTACKUP 8, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $sp
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s20) = G_CONSTANT i20 -8
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s20)
  ; CHECK-NEXT:   G_STORE [[BUILD_VECTOR]](<8 x s8>), [[PTR_ADD]](p0) :: (store (<8 x s8>) into stack - 8, basealign 32)
  ; CHECK-NEXT:   $l0 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   $l1 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   $l2 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   $l3 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   $l4 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   $l5 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   $l6 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   $l7 = COPY [[BUILD_VECTOR]](<8 x s8>)
  ; CHECK-NEXT:   PseudoJL @callee_v8int8, CustomRegMask($lr,$p6,$p7), implicit-def $lr, implicit $l0, implicit $l1, implicit $l2, implicit $l3, implicit $l4, implicit $l5, implicit $l6, implicit $l7
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 8, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   PseudoRET implicit $lr
  call void @callee_v8int8(<8 x i8> zeroinitializer, <8 x i8> zeroinitializer, <8 x i8> zeroinitializer, <8 x i8> zeroinitializer, <8 x i8> zeroinitializer, <8 x i8> zeroinitializer, <8 x i8> zeroinitializer, <8 x i8> zeroinitializer,
                           <8 x i8> zeroinitializer)
  ret void
}
