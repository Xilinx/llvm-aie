# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select -o - -verify-machineinstrs %s | FileCheck %s


---
name: post-inc-3d-store
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $m0, $p1, $dc0, $dj0, $dn0
    ; CHECK-LABEL: name: post-inc-3d-store
    ; CHECK: liveins: $p0, $r0, $m0, $p1, $dc0, $dj0, $dn0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_dms_sts:%[0-9]+]]:ep, [[ST_3D_dms_sts1:%[0-9]+]]:edc, [[ST_3D_dms_sts2:%[0-9]+]]:edc = ST_3D_dms_sts [[COPY1]], [[COPY]], [[REG_SEQUENCE]] :: (store (s32))
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_S16_:%[0-9]+]]:ep, [[ST_3D_S16_1:%[0-9]+]]:edc, [[ST_3D_S16_2:%[0-9]+]]:edc = ST_3D_S16 [[COPY1]], [[COPY]], [[REG_SEQUENCE1]] :: (store (s16))
    ; CHECK-NEXT: [[REG_SEQUENCE2:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_S8_:%[0-9]+]]:ep, [[ST_3D_S8_1:%[0-9]+]]:edc, [[ST_3D_S8_2:%[0-9]+]]:edc = ST_3D_S8 [[COPY1]], [[COPY]], [[REG_SEQUENCE2]] :: (store (s8))
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ep_as_32bit = COPY $p1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:mdm_as_32bit = COPY $m0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:em_as_32bit = COPY $m0
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edc_as_32bit = COPY $dc0
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edj_as_32bit = COPY $dj0
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edn_as_32bit = COPY $dn0
    ; CHECK-NEXT: [[REG_SEQUENCE3:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_dms_sts3:%[0-9]+]]:ep, [[ST_3D_dms_sts4:%[0-9]+]]:edc, [[ST_3D_dms_sts5:%[0-9]+]]:edc = ST_3D_dms_sts [[COPY2]], [[COPY]], [[REG_SEQUENCE3]] :: (store (s32))
    ; CHECK-NEXT: [[REG_SEQUENCE4:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_dms_sts6:%[0-9]+]]:ep, [[ST_3D_dms_sts7:%[0-9]+]]:edc, [[ST_3D_dms_sts8:%[0-9]+]]:edc = ST_3D_dms_sts [[COPY3]], [[COPY]], [[REG_SEQUENCE4]] :: (store (s20), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE5:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_dms_sts9:%[0-9]+]]:ep, [[ST_3D_dms_sts10:%[0-9]+]]:edc, [[ST_3D_dms_sts11:%[0-9]+]]:edc = ST_3D_dms_sts [[COPY4]], [[COPY]], [[REG_SEQUENCE5]] :: (store (s20), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE6:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_dms_sts12:%[0-9]+]]:ep, [[ST_3D_dms_sts13:%[0-9]+]]:edc, [[ST_3D_dms_sts14:%[0-9]+]]:edc = ST_3D_dms_sts [[COPY5]], [[COPY]], [[REG_SEQUENCE6]] :: (store (s20), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE7:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_dms_sts15:%[0-9]+]]:ep, [[ST_3D_dms_sts16:%[0-9]+]]:edc, [[ST_3D_dms_sts17:%[0-9]+]]:edc = ST_3D_dms_sts [[COPY6]], [[COPY]], [[REG_SEQUENCE7]] :: (store (s20), align 4)
    ; CHECK-NEXT: [[REG_SEQUENCE8:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[ST_3D_dms_sts18:%[0-9]+]]:ep, [[ST_3D_dms_sts19:%[0-9]+]]:edc, [[ST_3D_dms_sts20:%[0-9]+]]:edc = ST_3D_dms_sts [[COPY7]], [[COPY]], [[REG_SEQUENCE8]] :: (store (s20), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %8:gprregbank(s32) = COPY $r0
    %9:ptrregbank(p0), %10:modregbank(s20), %11:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s32))
    %90:ptrregbank(p0), %100:modregbank(s20), %110:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s16))
    %91:ptrregbank(p0), %101:modregbank(s20), %111:modregbank(s20) = G_AIE_POSTINC_3D_STORE %8, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s8))
    %80:ptrregbank(s32) = COPY $p1
    %81:modregbank(s20) = COPY $m0
    %82:em(s20) = COPY $m0
    %83:edc(s20) = COPY $dc0
    %84:edj(s20) = COPY $dj0
    %85:edn(s20) = COPY $dn0
    %92:ptrregbank(p0), %102:modregbank(s20), %112:modregbank(s20) = G_AIE_POSTINC_3D_STORE %80, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s32))
    %93:ptrregbank(p0), %103:modregbank(s20), %113:modregbank(s20) = G_AIE_POSTINC_3D_STORE %81, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s20))
    %94:ptrregbank(p0), %104:modregbank(s20), %114:modregbank(s20) = G_AIE_POSTINC_3D_STORE %82, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s20))
    %95:ptrregbank(p0), %105:modregbank(s20), %115:modregbank(s20) = G_AIE_POSTINC_3D_STORE %83, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s20))
    %96:ptrregbank(p0), %106:modregbank(s20), %116:modregbank(s20) = G_AIE_POSTINC_3D_STORE %84, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s20))
    %97:ptrregbank(p0), %107:modregbank(s20), %117:modregbank(s20) = G_AIE_POSTINC_3D_STORE %85, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (s20))
    PseudoRET implicit $lr
...
