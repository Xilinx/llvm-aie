# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            test_v32int8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: test_v32int8
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY1]], [[COPY]], 0 :: (store (<32 x s8>))
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<32 x s8>) = COPY $wl0
    G_STORE %1(<32 x s8>), %0(p0) :: (store (<32 x s8>))
...

---
name:            test_v16int16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: test_v16int16
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY1]], [[COPY]], 0 :: (store (<16 x s16>))
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<16 x s16>) = COPY $wl0
    G_STORE %1(<16 x s16>), %0(p0) :: (store (<16 x s16>))
...

---
name:            test_v8int32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: test_v8int32
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY1]], [[COPY]], 0 :: (store (<8 x s32>))
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<8 x s32>) = COPY $wl0
    G_STORE %1(<8 x s32>), %0(p0) :: (store (<8 x s32>))
...

---
name:            test_v8acc32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0
    ; CHECK-LABEL: name: test_v8acc32
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY1]], [[COPY]], 0 :: (store (<4 x s64>))
    %0:ptrregbank(p0) = COPY $p0
    %1:accregbank(<4 x s64>) = COPY $amll0
    G_STORE %1(<4 x s64>), %0(p0) :: (store (<4 x s64>))
...

---
name:            test_v4acc64
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0
    ; CHECK-LABEL: name: test_v4acc64
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY1]], [[COPY]], 0 :: (store (<4 x s64>))
    %0:ptrregbank(p0) = COPY $p0
    %1:accregbank(<4 x s64>) = COPY $amll0
    G_STORE %1(<4 x s64>), %0(p0) :: (store (<4 x s64>))
...

---
name:            test_v64int8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: test_v64int8
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<32 x s8>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY2]], [[COPY]], 0 :: (store (<32 x s8>), align 64)
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<64 x s8>) = COPY $x0
    G_STORE %1(<64 x s8>), %0(p0) :: (store (<64 x s8>))
...

---
name:            test_v32int16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: test_v32int16
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<16 x s16>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY2]], [[COPY]], 0 :: (store (<16 x s16>), align 64)
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<32 x s16>) = COPY $x0
    G_STORE %1(<32 x s16>), %0(p0) :: (store (<32 x s16>))
...

---
name:            test_v16int32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: test_v16int32
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY2]], [[COPY]], 0 :: (store (<8 x s32>), align 64)
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<16 x s32>) = COPY $x0
    G_STORE %1(<16 x s32>), %0(p0) :: (store (<16 x s32>))
...

---
name:            test_v16acc32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0
    ; CHECK-LABEL: name: test_v16acc32
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY2]], [[COPY]], 0 :: (store (<4 x s64>), align 64)
    %0:ptrregbank(p0) = COPY $p0
    %1:accregbank(<8 x s64>) = COPY $bml0
    G_STORE %1(<8 x s64>), %0(p0) :: (store (<8 x s64>))
...

---
name:            test_v8acc64
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0
    ; CHECK-LABEL: name: test_v8acc64
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY1]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[COPY]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY2]], [[COPY]], 0 :: (store (<4 x s64>), align 64)
    %0:ptrregbank(p0) = COPY $p0
    %1:accregbank(<8 x s64>) = COPY $bml0
    G_STORE %1(<8 x s64>), %0(p0) :: (store (<8 x s64>))
...

---
name:            test_v128int8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $y2
    ; CHECK-LABEL: name: test_v128int8
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY5]], [[COPY]], 96 :: (store (<32 x s8>) into unknown-address + 96)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY4]], [[COPY]], 64 :: (store (<32 x s8>) into unknown-address + 64, align 64)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vec256 = COPY [[COPY2]].sub_256_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vec256 = COPY [[COPY2]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY7]], [[COPY]], 32 :: (store (<32 x s8>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY6]], [[COPY]], 0 :: (store (<32 x s8>), align 128)
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<128 x s8>) = COPY $y2
    G_STORE %1(<128 x s8>), %0(p0) :: (store (<128 x s8>))
...

---
name:            test_v64int16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $y2
    ; CHECK-LABEL: name: test_v64int16
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY5]], [[COPY]], 96 :: (store (<16 x s16>) into unknown-address + 96)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY4]], [[COPY]], 64 :: (store (<16 x s16>) into unknown-address + 64, align 64)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vec256 = COPY [[COPY2]].sub_256_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vec256 = COPY [[COPY2]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY7]], [[COPY]], 32 :: (store (<16 x s16>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY6]], [[COPY]], 0 :: (store (<16 x s16>), align 128)
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<64 x s16>) = COPY $y2
    G_STORE %1(<64 x s16>), %0(p0) :: (store (<64 x s16>))
...

---
name:            test_v32int32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $y2
    ; CHECK-LABEL: name: test_v32int32
    ; CHECK: liveins: $p0, $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vec256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY5]], [[COPY]], 96 :: (store (<8 x s32>) into unknown-address + 96)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY4]], [[COPY]], 64 :: (store (<8 x s32>) into unknown-address + 64, align 64)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vec256 = COPY [[COPY2]].sub_256_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vec256 = COPY [[COPY2]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY7]], [[COPY]], 32 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY6]], [[COPY]], 0 :: (store (<8 x s32>), align 128)
    %0:ptrregbank(p0) = COPY $p0
    %1:vregbank(<32 x s32>) = COPY $y2
    G_STORE %1(<32 x s32>), %0(p0) :: (store (<32 x s32>))
...

---
name:            test_v32acc32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0
    ; CHECK-LABEL: name: test_v32acc32
    ; CHECK: liveins: $cm0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY5]], [[COPY]], 96 :: (store (<4 x s64>) into unknown-address + 96)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY4]], [[COPY]], 64 :: (store (<4 x s64>) into unknown-address + 64, align 64)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc256 = COPY [[COPY2]].sub_256_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:acc256 = COPY [[COPY2]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY7]], [[COPY]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY6]], [[COPY]], 0 :: (store (<4 x s64>), align 128)
    %0:ptrregbank(p0) = COPY $p0
    %1:accregbank(<16 x s64>) = COPY $cm0
    G_STORE %1(<16 x s64>), %0(p0) :: (store (<16 x s64>))
...

---
name:            test_v16acc64
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $cm0, $p0
    ; CHECK-LABEL: name: test_v16acc64
    ; CHECK: liveins: $cm0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY [[COPY1]].sub_512_hi
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_lo
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:acc256 = COPY [[COPY3]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY5]], [[COPY]], 96 :: (store (<4 x s64>) into unknown-address + 96)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY4]], [[COPY]], 64 :: (store (<4 x s64>) into unknown-address + 64, align 64)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:acc256 = COPY [[COPY2]].sub_256_lo
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:acc256 = COPY [[COPY2]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY7]], [[COPY]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY6]], [[COPY]], 0 :: (store (<4 x s64>), align 128)
    %0:ptrregbank(p0) = COPY $p0
    %1:accregbank(<16 x s64>) = COPY $cm0
    G_STORE %1(<16 x s64>), %0(p0) :: (store (<16 x s64>))
...
