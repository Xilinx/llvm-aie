# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VST_2D_POSTINC_PACK_S4_S8
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_2D_POSTINC_PACK_S4_S8
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_2D_PACK_S4_S8_:%[0-9]+]]:ep, [[VST_2D_PACK_S4_S8_1:%[0-9]+]]:edc = VST_2D_PACK_S4_S8 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit $crsat :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %100:vregbank(<8 x s64>) = COPY $x0
    %101:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %100:vregbank(<8 x s64>), %101:gprregbank(s32)
    %19:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %103, %0, %1, %2, %3, %4 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_2D_POSTINC_PACK_S8_S16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_2D_POSTINC_PACK_S8_S16
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_2D_PACK_S8_S16_:%[0-9]+]]:ep, [[VST_2D_PACK_S8_S16_1:%[0-9]+]]:edc = VST_2D_PACK_S8_S16 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit $crsat :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %100:vregbank(<8 x s64>) = COPY $x0
    %101:gprregbank(s32) = G_CONSTANT i32 1
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %100:vregbank(<8 x s64>), %101:gprregbank(s32)
    %19:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %103, %0, %1, %2, %3, %4 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_2D_POSTINC_PACK_D4_D8
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_2D_POSTINC_PACK_D4_D8
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_2D_PACK_D4_D8_:%[0-9]+]]:ep, [[VST_2D_PACK_D4_D8_1:%[0-9]+]]:edc = VST_2D_PACK_D4_D8 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit $crsat, implicit $crpacksign :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %100:vregbank(<8 x s64>) = COPY $x0
    %101:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %100:vregbank(<8 x s64>), %101:gprregbank(s32)
    %19:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %103, %0, %1, %2, %3, %4 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_2D_POSTINC_PACK_D8_D16
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0
    ; CHECK-LABEL: name: VST_2D_POSTINC_PACK_D8_D16
    ; CHECK: liveins: $p0, $r0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_2D_PACK_D8_D16_:%[0-9]+]]:ep, [[VST_2D_PACK_D8_D16_1:%[0-9]+]]:edc = VST_2D_PACK_D8_D16 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit $crsat, implicit $crpacksign :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %100:vregbank(<8 x s64>) = COPY $x0
    %101:gprregbank(s32) = G_CONSTANT i32 0
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %100:vregbank(<8 x s64>), %101:gprregbank(s32)
    %19:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %103, %0, %1, %2, %3, %4 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_2D_POSTINC_PACK_D4_D8_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0, $r1
    ; CHECK-LABEL: name: VST_2D_POSTINC_PACK_D4_D8_dyn
    ; CHECK: liveins: $p0, $r0, $x0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_2D_PACK_D4_D8_:%[0-9]+]]:ep, [[VST_2D_PACK_D4_D8_1:%[0-9]+]]:edc = VST_2D_PACK_D4_D8 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit $crsat, implicit $crpacksign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %100:vregbank(<8 x s64>) = COPY $x0
    %101:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I4.I8), %100:vregbank(<8 x s64>), %101:gprregbank(s32)
    %19:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %103, %0, %1, %2, %3, %4 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_2D_POSTINC_PACK_D8_D16_dyn
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $r0, $x0, $r1
    ; CHECK-LABEL: name: VST_2D_POSTINC_PACK_D8_D16_dyn
    ; CHECK: liveins: $p0, $r0, $x0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: $crpacksign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VST_2D_PACK_D8_D16_:%[0-9]+]]:ep, [[VST_2D_PACK_D8_D16_1:%[0-9]+]]:edc = VST_2D_PACK_D8_D16 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit $crsat, implicit $crpacksign :: (store (<16 x s16>))
    ; CHECK-NEXT: $crpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %100:vregbank(<8 x s64>) = COPY $x0
    %101:gprregbank(s32) = COPY $r1
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.pack.I8.I16), %100:vregbank(<8 x s64>), %101:gprregbank(s32)
    %19:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %103, %0, %1, %2, %3, %4 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...
