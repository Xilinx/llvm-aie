# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VEC256_LOAD_maxOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_maxOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 992 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLDA_dmw_lda_w_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 992
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC256_LOAD_minOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_minOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], -1024 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLDA_dmw_lda_w_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC256_LOAD_maxOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_maxOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], 96 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLD_idx_imm_3x32_pseudo]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 96
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC256_LOAD_minOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_minOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], -128 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLD_idx_imm_3x32_pseudo]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -128
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC256_LOAD_overMaxOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_overMaxOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[VLD_idx_pseudo:%[0-9]+]]:vec256 = VLD_idx_pseudo [[COPY]], [[MOVXM_lng_cg]] :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLD_idx_pseudo]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 1024
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC256_LOAD_belowMinOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_belowMinOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg -1056
    ; CHECK-NEXT: [[VLD_idx_pseudo:%[0-9]+]]:vec256 = VLD_idx_pseudo [[COPY]], [[MOVXM_lng_cg]] :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLD_idx_pseudo]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC256_LOAD_overMaxOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_overMaxOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 128 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLDA_dmw_lda_w_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 128
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC256_LOAD_belowMinOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC256_LOAD_belowMinOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], -160 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wl0 = COPY [[VLDA_dmw_lda_w_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -160
    %0:vregbank(<8 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s32>))
    $wl0 = COPY %0:vregbank(<8 x s32>)
...

---
name:            VEC512_LOAD_maxOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_maxOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 992 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm1:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 960 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_w_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 960
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_minOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_minOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], -992 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm1:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], -1024 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_w_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_overMaxOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_overMaxOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[PADD_imm_pseudo:%[0-9]+]]:ep = PADD_imm_pseudo [[COPY]], 992
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[PADD_imm_pseudo]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm1:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[PADD_imm_pseudo]], 0 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_w_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 992
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_belowMinOffset_slotA
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_belowMinOffset_slotA
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[PADDA_lda_ptr_inc_idx_imm:%[0-9]+]]:ep = PADDA_lda_ptr_inc_idx_imm [[COPY]], -1056
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[PADDA_lda_ptr_inc_idx_imm]], 32 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm1:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[PADDA_lda_ptr_inc_idx_imm]], 0 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_w_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_maxOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_maxOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 128 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], 96 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_lo, [[VLDA_dmw_lda_w_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 96
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_minOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_minOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], -96 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo1:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], -128 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_idx_imm_3x32_pseudo1]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -128
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_overMaxOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_overMaxOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 160 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm1:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 128 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_w_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 128
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_belowMinOffset_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_belowMinOffset_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], -128 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], -160 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLDA_dmw_lda_w_ag_idx_imm]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -160
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            VEC512_LOAD_maxOffset-32_slotB
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: VEC512_LOAD_maxOffset-32_slotB
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], 96 :: (load (<8 x s32>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLD_idx_imm_3x32_pseudo1:%[0-9]+]]:vec256 = VLD_idx_imm_3x32_pseudo [[COPY]], 64 :: (load (<8 x s32>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vec512 = REG_SEQUENCE [[VLD_idx_imm_3x32_pseudo1]], %subreg.sub_256_lo, [[VLD_idx_imm_3x32_pseudo]], %subreg.sub_256_hi
    ; CHECK-NEXT: $x0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 64
    %0:vregbank(<16 x s32>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<16 x s32>))
    $x0 = COPY %0:vregbank(<16 x s32>)
...

---
name:            ACC256_LOAD_maxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC256_LOAD_maxOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 992 :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[VLDA_dmw_lda_am_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 992
    %0:accregbank(<4 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<4 x s64>))
    $amll0 = COPY %0:accregbank(<4 x s64>)
...

---
name:            ACC256_LOAD_minOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC256_LOAD_minOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], -1024 :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[VLDA_dmw_lda_am_ag_idx_imm]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    %0:accregbank(<4 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<4 x s64>))
    $amll0 = COPY %0:accregbank(<4 x s64>)
...

---
name:            ACC256_LOAD_overMaxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC256_LOAD_overMaxOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx [[COPY]], [[MOVXM_lng_cg]] :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[VLDA_dmw_lda_am_ag_idx]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 1024
    %0:accregbank(<4 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<4 x s64>))
    $amll0 = COPY %0:accregbank(<4 x s64>)
...

---
name:            ACC256_LOAD_belowMinOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC256_LOAD_belowMinOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg -1056
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx [[COPY]], [[MOVXM_lng_cg]] :: (load (<4 x s64>))
    ; CHECK-NEXT: $amll0 = COPY [[VLDA_dmw_lda_am_ag_idx]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    %0:accregbank(<4 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<4 x s64>))
    $amll0 = COPY %0:accregbank(<4 x s64>)
...

---
name:            ACC512_LOAD_maxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC512_LOAD_maxOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 992 :: (load (<4 x s64>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm1:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 960 :: (load (<4 x s64>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 960
    %0:accregbank(<8 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s64>))
    $bml0 = COPY %0:accregbank(<8 x s64>)
...

---
name:            ACC512_LOAD_minOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC512_LOAD_minOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], -992 :: (load (<4 x s64>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm1:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], -1024 :: (load (<4 x s64>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    %0:accregbank(<8 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s64>))
    $bml0 = COPY %0:accregbank(<8 x s64>)
...

---
name:            ACC512_LOAD_overMaxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC512_LOAD_overMaxOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[PADD_imm_pseudo:%[0-9]+]]:ep = PADD_imm_pseudo [[COPY]], 996
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[PADD_imm_pseudo]], 32 :: (load (<4 x s64>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm1:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[PADD_imm_pseudo]], 0 :: (load (<4 x s64>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 996
    %0:accregbank(<8 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s64>))
    $bml0 = COPY %0:accregbank(<8 x s64>)
...

---
name:            ACC512_LOAD_belowMinOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0
    ; CHECK-LABEL: name: ACC512_LOAD_belowMinOffset
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[PADDA_lda_ptr_inc_idx_imm:%[0-9]+]]:ep = PADDA_lda_ptr_inc_idx_imm [[COPY]], -1056
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[PADDA_lda_ptr_inc_idx_imm]], 32 :: (load (<4 x s64>) from unknown-address + 32)
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm1:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[PADDA_lda_ptr_inc_idx_imm]], 0 :: (load (<4 x s64>), align 64)
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:acc512 = REG_SEQUENCE [[VLDA_dmw_lda_am_ag_idx_imm1]], %subreg.sub_256_lo, [[VLDA_dmw_lda_am_ag_idx_imm]], %subreg.sub_256_hi
    ; CHECK-NEXT: $bml0 = COPY [[REG_SEQUENCE]]
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    %0:accregbank(<8 x s64>) = G_AIE_OFFSET_LOAD %1:ptrregbank(p0), %2:modregbank(s20) :: (load (<8 x s64>))
    $bml0 = COPY %0:accregbank(<8 x s64>)
...

---
name:            VEC256_STORE_maxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: VEC256_STORE_maxOffset
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY]], [[COPY1]], 992 :: (store (<8 x s32>))
    %0:vregbank(<8 x s32>) = COPY $wl0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 992
    G_AIE_OFFSET_STORE %0:vregbank(<8 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s32>))
...

---
name:            VEC256_STORE_minOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: VEC256_STORE_minOffset
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY]], [[COPY1]], -1024 :: (store (<8 x s32>))
    %0:vregbank(<8 x s32>) = COPY $wl0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    G_AIE_OFFSET_STORE %0:vregbank(<8 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s32>))
...

---
name:            VEC256_STORE_overMaxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: VEC256_STORE_overMaxOffset
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx [[COPY]], [[COPY1]], [[MOVXM_lng_cg]] :: (store (<8 x s32>))
    %0:vregbank(<8 x s32>) = COPY $wl0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 1024
    G_AIE_OFFSET_STORE %0:vregbank(<8 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s32>))
...

---
name:            VEC256_STORE_belowMinOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $wl0
    ; CHECK-LABEL: name: VEC256_STORE_belowMinOffset
    ; CHECK: liveins: $p0, $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg -1056
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx [[COPY]], [[COPY1]], [[MOVXM_lng_cg]] :: (store (<8 x s32>))
    %0:vregbank(<8 x s32>) = COPY $wl0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    G_AIE_OFFSET_STORE %0:vregbank(<8 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s32>))
...

---
name:            VEC512_STORE_maxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: VEC512_STORE_maxOffset
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[COPY1]], 992 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY2]], [[COPY1]], 960 :: (store (<8 x s32>), align 64)
    %0:vregbank(<16 x s32>) = COPY $x0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 960
    G_AIE_OFFSET_STORE %0:vregbank(<16 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<16 x s32>))
...

---
name:            VEC512_STORE_minOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: VEC512_STORE_minOffset
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[COPY1]], -992 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY2]], [[COPY1]], -1024 :: (store (<8 x s32>), align 64)
    %0:vregbank(<16 x s32>) = COPY $x0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    G_AIE_OFFSET_STORE %0:vregbank(<16 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<16 x s32>))
...

---
name:            VEC512_STORE_overMaxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: VEC512_STORE_overMaxOffset
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: [[PADD_imm_pseudo:%[0-9]+]]:ep = PADD_imm_pseudo [[COPY1]], 996
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[PADD_imm_pseudo]], 32 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY2]], [[PADD_imm_pseudo]], 0 :: (store (<8 x s32>), align 64)
    %0:vregbank(<16 x s32>) = COPY $x0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 996
    G_AIE_OFFSET_STORE %0:vregbank(<16 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<16 x s32>))
...

---
name:            VEC512_STORE_belowMinOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p0, $x0
    ; CHECK-LABEL: name: VEC512_STORE_belowMinOffset
    ; CHECK: liveins: $p0, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vec256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: [[PADDA_lda_ptr_inc_idx_imm:%[0-9]+]]:ep = PADDA_lda_ptr_inc_idx_imm [[COPY1]], -1056
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY3]], [[PADDA_lda_ptr_inc_idx_imm]], 32 :: (store (<8 x s32>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm [[COPY2]], [[PADDA_lda_ptr_inc_idx_imm]], 0 :: (store (<8 x s32>), align 64)
    %0:vregbank(<16 x s32>) = COPY $x0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    G_AIE_OFFSET_STORE %0:vregbank(<16 x s32>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<16 x s32>))
...

---
name:            ACC256_STORE_maxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0
    ; CHECK-LABEL: name: ACC256_STORE_maxOffset
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY]], [[COPY1]], 992 :: (store (<4 x s64>))
    %0:accregbank(<4 x s64>) = COPY $amll0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 992
    G_AIE_OFFSET_STORE %0:accregbank(<4 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<4 x s64>))
...

---
name:            ACC256_STORE_minOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0
    ; CHECK-LABEL: name: ACC256_STORE_minOffset
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY]], [[COPY1]], -1024 :: (store (<4 x s64>))
    %0:accregbank(<4 x s64>) = COPY $amll0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    G_AIE_OFFSET_STORE %0:accregbank(<4 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<4 x s64>))
...

---
name:            ACC256_STORE_overMaxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0
    ; CHECK-LABEL: name: ACC256_STORE_overMaxOffset
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg 1024
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx [[COPY]], [[COPY1]], [[MOVXM_lng_cg]] :: (store (<4 x s64>))
    %0:accregbank(<4 x s64>) = COPY $amll0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 1024
    G_AIE_OFFSET_STORE %0:accregbank(<4 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<4 x s64>))
...

---
name:            ACC256_STORE_belowMinOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $amll0, $p0
    ; CHECK-LABEL: name: ACC256_STORE_belowMinOffset
    ; CHECK: liveins: $amll0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc256 = COPY $amll0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOVXM_lng_cg:%[0-9]+]]:edj_as_32bit = MOVXM_lng_cg -1056
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx [[COPY]], [[COPY1]], [[MOVXM_lng_cg]] :: (store (<4 x s64>))
    %0:accregbank(<4 x s64>) = COPY $amll0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    G_AIE_OFFSET_STORE %0:accregbank(<4 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<4 x s64>))
...

---
name:            ACC512_STORE_maxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0
    ; CHECK-LABEL: name: ACC512_STORE_maxOffset
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[COPY1]], 992 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY2]], [[COPY1]], 960 :: (store (<4 x s64>), align 64)
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 960
    G_AIE_OFFSET_STORE %0:accregbank(<8 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s64>))
...

---
name:            ACC512_STORE_minOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0
    ; CHECK-LABEL: name: ACC512_STORE_minOffset
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[COPY1]], -992 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY2]], [[COPY1]], -1024 :: (store (<4 x s64>), align 64)
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1024
    G_AIE_OFFSET_STORE %0:accregbank(<8 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s64>))
...

---
name:            ACC512_STORE_overMaxOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0
    ; CHECK-LABEL: name: ACC512_STORE_overMaxOffset
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: [[PADD_imm_pseudo:%[0-9]+]]:ep = PADD_imm_pseudo [[COPY1]], 996
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[PADD_imm_pseudo]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY2]], [[PADD_imm_pseudo]], 0 :: (store (<4 x s64>), align 64)
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 996
    G_AIE_OFFSET_STORE %0:accregbank(<8 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s64>))
...

---
name:            ACC512_STORE_belowMinOffset
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $bml0, $p0
    ; CHECK-LABEL: name: ACC512_STORE_belowMinOffset
    ; CHECK: liveins: $bml0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_lo
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc256 = COPY [[COPY]].sub_256_hi
    ; CHECK-NEXT: [[PADDA_lda_ptr_inc_idx_imm:%[0-9]+]]:ep = PADDA_lda_ptr_inc_idx_imm [[COPY1]], -1056
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY3]], [[PADDA_lda_ptr_inc_idx_imm]], 32 :: (store (<4 x s64>) into unknown-address + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm [[COPY2]], [[PADDA_lda_ptr_inc_idx_imm]], 0 :: (store (<4 x s64>), align 64)
    %0:accregbank(<8 x s64>) = COPY $bml0
    %1:ptrregbank(p0) = COPY $p0
    %2:modregbank(s20) = G_CONSTANT i20 -1056
    G_AIE_OFFSET_STORE %0:accregbank(<8 x s64>), %1:ptrregbank(p0), %2:modregbank(s20) :: (store (<8 x s64>))
...
