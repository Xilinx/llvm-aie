# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
#
# RUN: llc -mtriple aie2 -run-pass=dead-mi-elimination %s -verify-machineinstrs -o - | FileCheck %s

# Test 1 - Deadcode elimination.
# %0 = COPY $r0                    |   |    | %0 = COPY $r0
# $1 = COPY $r1                    |   |    | $1 = COPY $r1
# $crupssign = COPY %0             |   |    | $crupssign = COPY %0
# %2 = opcode implicit $crupssign  |   |    | %2 = opcode implicit $crupssign
# $crupssign = MOV 0               |-> to ->| -------------------------------
# $crupssign = COPY %0             |   |    | $crupssign = COPY %0
# %3 = opcode implicit $crupssign  |   |    | %3 = opcode implicit $crupssign
# $crupssign = MOV 0               |   |    | -------------------------------
# $crupssign = COPY %1             |   |    | $crupssign = COPY %1
---
name:            crupssign_redundant_reassignments
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.0.entry:

    liveins: $r0, $crsat, $p0
    ; CHECK-LABEL: name: crupssign_redundant_reassignments
    ; CHECK: liveins: $r0, $crsat, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ercr = COPY $crsat
    ; CHECK-NEXT: $crsat = COPY [[COPY1]]
    ; CHECK-NEXT: $crupssign = COPY [[COPY]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_UPS_S32_D8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: $crsat = COPY [[COPY1]]
    ; CHECK-NEXT: $crupssign = COPY [[COPY]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D8_ag_idx_imm1:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: $crsat = COPY [[COPY1]]
    ; CHECK-NEXT: $crupssign = COPY [[COPY]]
    ; CHECK-NEXT: [[VLDA_UPS_S32_D8_ag_idx_imm2:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: $crupssign = MOV_scalar_imm10_pseudo 2
    %0:er = MOV_RLC_imm10_pseudo 0
    %1:er = COPY $r0
    %2:ercr = COPY $crsat
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %3:mss = COPY %0:er
    %4:ep = COPY $p0
    %5:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 0
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %6:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 1
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %5:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 2
...

# Test 2 - Test 1 variation with two basic blocks.
---
name:            crupssign_redundant_reassignments_multiple_bb
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: crupssign_redundant_reassignments_multiple_bb
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $crsat, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ercr = COPY $crsat
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm1:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm2:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:ercr = COPY $crsat
  ; CHECK-NEXT:   $crsat = COPY [[COPY4]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm3:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 4
  ; CHECK-NEXT:   $crsat = COPY [[COPY4]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm4:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]

  bb.0.entry:
    successors: %bb.1(0x80000000); %bb.1(100.00%)
    liveins: $r1, $crsat, $p0
    %0:er = MOV_RLC_imm10_pseudo 0
    %1:er = COPY $r1
    %2:ercr = COPY $crsat
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %3:mss = COPY %0:er
    %4:ep = COPY $p0
    %5:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 0
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %6:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 1
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %7:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 2
    PseudoJ_jump_imm %bb.1

  bb.1:
  ; predecessors: %bb.0
    %8:ercr = COPY $crsat
    $crsat = MOV_scalar_imm10_pseudo 3
    $crsat = COPY %8:ercr
    $crupssign = COPY %1:er
    %9:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 4
    $crsat = COPY %8:ercr
    %10:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = COPY %1:er
...

# Test 3 - Test 2 variation with multiple basic blocks - conditional - and a self loop.
#
# There is a self loop on 1.
#     0 -> 1 -> 2 -> 4
#     |              ^
#     |              |
#     + -> 3 --------+
#
---
name:            crupssign_reassignments_multiple_bb_conditional_with_loop
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: crupssign_reassignments_multiple_bb_conditional_with_loop
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.3(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r1, $crsat, $p0, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ercr = COPY $crsat
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm1:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 1
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   PseudoJNZ [[COPY4]], %bb.3
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:ercr = COPY $crsat
  ; CHECK-NEXT:   $crsat = COPY [[COPY5]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm2:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 2
  ; CHECK-NEXT:   $crsat = COPY [[COPY5]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm3:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   PseudoJNZ [[COPY4]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:ercr = COPY $crsat
  ; CHECK-NEXT:   $crsat = COPY [[COPY6]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm4:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 4
  ; CHECK-NEXT:   $crsat = COPY [[COPY6]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm5:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crsat = MOV_scalar_imm10_pseudo 2
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 5
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm6:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 6
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm7:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 7
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm8:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crsat = COPY [[COPY1]]
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm9:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY2]], [[COPY3]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 9
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
    successors: %bb.3(0x40000000), %bb.1(0x40000000); %bb.3(50.00%), %bb.1(50.00%)
    liveins: $r1, $crsat, $p0, $r0
    %0:er = MOV_RLC_imm10_pseudo 0
    %1:er = COPY $r1
    %2:ercr = COPY $crsat
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %3:mss = COPY %0:er
    %4:ep = COPY $p0
    %5:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 0
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %6:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 1
    %7:er = COPY $r0
    PseudoJNZ %7:er, %bb.3
    PseudoJ_jump_imm %bb.1

  bb.1:
  ; predecessors: %bb.0, %bb.1
    successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

    %8:ercr = COPY $crsat
    $crsat = COPY %8:ercr
    $crupssign = COPY %1:er
    %9:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 2
    $crsat = COPY %8:ercr
    %10:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = COPY %1:er
    PseudoJNZ %7:er, %bb.1
    PseudoJ_jump_imm %bb.2

  bb.2:
  ; predecessors: %bb.1
    successors: %bb.4(0x80000000); %bb.4(100.00%)

    %11:ercr = COPY $crsat
    $crsat = MOV_scalar_imm10_pseudo 3
    $crsat = COPY %11:ercr
    $crupssign = COPY %1:er
    %12:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 4
    $crsat = COPY %11:ercr
    %13:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crsat = MOV_scalar_imm10_pseudo 2
    $crupssign = MOV_scalar_imm10_pseudo 5
    PseudoJ_jump_imm %bb.4

  bb.3:
  ; predecessors: %bb.0
    successors: %bb.4(0x80000000); %bb.4(100.00%)

    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %14:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 6
    $crsat = COPY %2:ercr
    %15:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 7
    PseudoJ_jump_imm %bb.4

  bb.4:
  ; predecessors: %bb.2, %bb.3

    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %16:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 8
    $crsat = COPY %2:ercr
    $crupssign = COPY %1:er
    %15:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %3:mss, %4:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 9
    PseudoRET implicit $lr
...

# Test 4 - Test 2 variation #2 with multiple basic blocks, a feedback loop and a self loop.
#
# There is a self loop on 2.
#
#     0 -> 1 -> 2 -> 3 -> 4
#          ^         |
#          |_________v
#
---
name:            crupssign_reassignments_multiple_bb_conditional_with_loop_2
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: crupssign_reassignments_multiple_bb_conditional_with_loop_2
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $p0, $crsat
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm1:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 1
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm2:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm3:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 2
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm4:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   PseudoJNZ [[COPY3]], %bb.2
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm5:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 3
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm6:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   PseudoJNZ [[COPY3]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm7:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm8:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 5
  ; CHECK-NEXT:   PseudoRET implicit $lr
  bb.0.entry:
    successors: %bb.1(0x80000000); %bb.1(100.00%)
    liveins: $r1, $p0, $crsat
    %0:er = MOV_RLC_imm10_pseudo 0
    %1:er = COPY $r1
    $crupssign = COPY %1:er
    %2:mss = COPY %0:er
    %3:ep = COPY $p0
    %4:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 0
    PseudoJ_jump_imm %bb.1

  bb.1:
  ; predecessors: %bb.0, %bb.3
    successors: %bb.2(0x80000000); %bb.2(100.00%)

    $crupssign = COPY %1:er
    %5:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 1
    %6:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = COPY %1:er
    PseudoJ_jump_imm %bb.2

  bb.2:
  ; predecessors: %bb.1, %bb.2
    successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
    liveins: $r0
    $crupssign = COPY %1:er
    %7:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 2
    %8:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = COPY %1:er
    %9:er = COPY $r0
    PseudoJNZ %9:er, %bb.2
    PseudoJ_jump_imm %bb.3

  bb.3:
  ; predecessors: %bb.2
    successors: %bb.1(0x40000000), %bb.4(0x40000000); %bb.1(50.00%), %bb.4(50.00%)

    $crupssign = COPY %1:er
    %10:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 3
    %11:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = COPY %1:er
    PseudoJNZ %9:er, %bb.1
    PseudoJ_jump_imm %bb.4

  bb.4:
  ; predecessors: %bb.3

    $crupssign = COPY %1:er
    %12:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 4
    $crupssign = COPY %1:er
    %11:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 5
    PseudoRET implicit $lr
...

# Test 5 - Last Visited Def in %bb.2 doesn't come from an immediate predecessor.
---
name:            crupssign_dead_mi_elim
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: crupssign_dead_mi_elim
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $p0, $crsat
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:er = COPY $r1
  ; CHECK-NEXT:   $crupssign = COPY [[COPY]]
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:mss = COPY [[MOV_RLC_imm10_pseudo]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 0
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:er = COPY $r2
  ; CHECK-NEXT:   $crupssign = COPY [[COPY3]]
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm1:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  ; CHECK-NEXT:   $crupssign = MOV_scalar_imm10_pseudo 1
  ; CHECK-NEXT:   [[VLDA_UPS_S32_D8_ag_idx_imm2:%[0-9]+]]:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm [[COPY1]], [[COPY2]], 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
  bb.0.entry:
    successors: %bb.1(0x80000000); %bb.1(100.00%)
    liveins: $r1, $p0, $crsat
    %0:er = MOV_RLC_imm10_pseudo 0
    %1:er = COPY $r1
    $crupssign = COPY %1:er
    %2:mss = COPY %0:er
    %3:ep = COPY $p0
    %4:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 0

    PseudoJ_jump_imm %bb.1

  bb.1:
  ; predecessors: %bb.0
    successors: %bb.2(0x80000000); %bb.2(100.00%)

    %5:er = MOV_RLC_imm10_pseudo 23
    PseudoJ_jump_imm %bb.2

  bb.2:
  ; predecessors: %bb.1
    liveins: $r2
    %6:er = COPY $r2
    $crupssign = COPY %6:er
    %7:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign = MOV_scalar_imm10_pseudo 1
    %8:acc1024 = VLDA_UPS_S32_D8_ag_idx_imm %2:mss, %3:ep, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
...

# Test 6 - Remove dead code with virtual registers.
# Transform -
# %1 = opcode                    |   |    |   %1 = opcode
# %2 = opcode                    |   |    |   %2 = opcode
# %3 = opcode %1 %2              |-> to ->|   -----------------
# %4 = opcode %1 %2              |   |    |   -----------------
# %5 = opcode %1 %2              |   |    |   -----------------
# %6 = opcode %1 %2              |   |    |   %6 = opcode %1 %2
---
name:            crfpmask_multiple
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.0.entry:
  liveins: $bml1, $bml2, $crfpmask
    ; CHECK-LABEL: name: crfpmask_multiple
    ; CHECK: liveins: $bml1, $bml2, $crfpmask
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml2
    ; CHECK-NEXT: [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 28
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:ercr = COPY $crfpmask
    ; CHECK-NEXT: $crfpmask = COPY [[COPY2]]
    ; CHECK-NEXT: [[VNEGSUB_F:%[0-9]+]]:acc512 = VNEGSUB_F [[COPY]], [[COPY1]], [[MOV_RLC_imm10_pseudo]], implicit-def $srfpflags, implicit $crfpmask
    %0:acc512 = COPY $bml1
    %1:acc512 = COPY $bml2
    %2:er = MOV_RLC_imm10_pseudo 28
    %3:ercr = COPY $crfpmask
    $crfpmask = COPY %3:ercr
    %4:acc512 = VNEGSUB_F %0:acc512, %1:acc512, %2:er, implicit-def $srfpflags, implicit $crfpmask
    $crfpmask = COPY %3:ercr
    %5:acc512 = VNEGSUB_F %0:acc512, %1:acc512, %2:er, implicit-def $srfpflags, implicit $crfpmask
    %6:ercr = COPY $crfpmask
    $crfpmask = COPY %6:ercr
    %7:acc512 = VNEGSUB_F %0:acc512, %1:acc512, %2:er, implicit-def $srfpflags, implicit $crfpmask
    $crfpmask = COPY %3:ercr
    %8:acc512 = VNEGSUB_F %0:acc512, %1:acc512, %2:er, implicit-def $srfpflags, implicit $crfpmask
    $crfpmask = COPY %3:ercr
    %9:acc512 = VNEGSUB_F %0:acc512, %1:acc512, %2:er, implicit-def $srfpflags, implicit $crfpmask
    $crfpmask = COPY %3:ercr
    %10:acc512 = VNEGSUB_F %0:acc512, %1:acc512, %2:er, implicit-def $srfpflags, implicit $crfpmask
...
