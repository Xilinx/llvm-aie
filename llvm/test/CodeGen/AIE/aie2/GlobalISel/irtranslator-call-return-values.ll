; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s


declare i32 @callee_i32()
define void @test_call_i32() {
  ; CHECK-LABEL: name: test_call_i32
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i32, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call i32 @callee_i32()
  ret void
}

declare i64 @callee_i64()
define void @test_call_i64() {
  ; CHECK-LABEL: name: test_call_i64
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i64, csr_aie2, implicit-def $lr, implicit-def $r0, implicit-def $r1
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call i64 @callee_i64()
  ret void
}

declare i1 @callee_i1()
define void @test_call_i1() {
  ; CHECK-LABEL: name: test_call_i1
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i1, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i1, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[COPY1]], 1
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s1) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i1, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[COPY2]], 1
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s1) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res1 = call i1 @callee_i1()
  %res2 = call signext i1 @callee_i1()
  %res3 = call zeroext i1 @callee_i1()
  ret void
}

declare i8 @callee_i8()
define void @test_call_i8() {
  ; CHECK-LABEL: name: test_call_i8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i8, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i8, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[COPY1]], 8
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i8, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[COPY2]], 8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res1 = call i8 @callee_i8()
  %res2 = call signext i8 @callee_i8()
  %res3 = call zeroext i8 @callee_i8()
  ret void
}

declare i16 @callee_i16()
define void @test_call_i16() {
  ; CHECK-LABEL: name: test_call_i16
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i16, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i16, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[COPY1]], 16
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_i16, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[COPY2]], 16
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res1 = call i16 @callee_i16()
  %res2 = call signext i16 @callee_i16()
  %res3 = call zeroext i16 @callee_i16()
  ret void
}

declare i32* @callee_ptr()
define void @test_call_ptr() {
  ; CHECK-LABEL: name: test_call_ptr
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_ptr, csr_aie2, implicit-def $lr, implicit-def $p0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call i32* @callee_ptr()
  ret void
}

declare float @callee_float()
define void @test_callee_float() {
  ; CHECK-LABEL: name: test_callee_float
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_float, csr_aie2, implicit-def $lr, implicit-def $r0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call float @callee_float()
  ret void
}

declare double @callee_double()
define void @test_callee_double() {
  ; CHECK-LABEL: name: test_callee_double
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   JL @callee_double, csr_aie2, implicit-def $lr, implicit-def $r0, implicit-def $r1
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  %res = call double @callee_double()
  ret void
}
