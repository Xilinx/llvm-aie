# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-prelegalizer-combiner %s -verify-machineinstrs -o - | FileCheck %s
---
name:            shufflevector_both_registers
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: shufflevector_both_registers
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[COPY]](<8 x s32>), [[COPY1]], shufflemask(4, 5, 3, 7, 2, 7, 1, 4, 1, 1, 5, 3, 3, 2, 0, 0)
    ; CHECK-NEXT: $x0 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(4, 5, 3, 7, 2, 7, 1, 4, 1, 1, 5, 3, 3, 2, 0, 0)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_both_registers_undef
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: shufflevector_both_registers_undef
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[COPY]](<8 x s32>), [[COPY1]], shufflemask(4, 5, undef, 7, undef, 7, undef, 4, 1, 1, 5, undef, 3, undef, 0, 0)
    ; CHECK-NEXT: $x0 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<8 x s32>) = COPY $wl4
    %0:_(<16 x s32>) = G_SHUFFLE_VECTOR %1:_(<8 x s32>), %2:_, shufflemask(4, 5, -1, 7, -1, 7, -1, 4, 1, 1, 5, -1, 3, -1, 0, 0)
    $x0 = COPY %0:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_order
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl4
    ; CHECK-LABEL: name: shufflevector_order
    ; CHECK: liveins: $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32), [[C2]](s32), [[C3]](s32), [[C4]](s32), [[C5]](s32), [[C6]](s32), [[C7]](s32), [[C7]](s32), [[C6]](s32), [[C5]](s32), [[C4]](s32), [[C3]](s32), [[C2]](s32), [[C1]](s32), [[C]](s32)
    ; CHECK-NEXT: $x0 = COPY [[BUILD_VECTOR]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_CONSTANT i32 2
    %3:_(s32) = G_CONSTANT i32 3
    %4:_(s32) = G_CONSTANT i32 4
    %5:_(s32) = G_CONSTANT i32 5
    %6:_(s32) = G_CONSTANT i32 6
    %7:_(s32) = G_CONSTANT i32 7
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = G_BUILD_VECTOR %7(s32), %6(s32), %5(s32), %4(s32), %3(s32), %2(s32), %1(s32), %0(s32)
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %8:_(<8 x s32>), %9:_, shufflemask(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_order_undef
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl4
    ; CHECK-LABEL: name: shufflevector_order_undef
    ; CHECK: liveins: $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32), [[DEF]](s32), [[C3]](s32), [[DEF]](s32), [[C4]](s32), [[C5]](s32), [[C6]](s32), [[C6]](s32), [[DEF]](s32), [[DEF]](s32), [[DEF]](s32), [[DEF]](s32), [[C2]](s32), [[C1]](s32), [[C]](s32)
    ; CHECK-NEXT: $x0 = COPY [[BUILD_VECTOR]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_CONSTANT i32 2
    %3:_(s32) = G_CONSTANT i32 3
    %4:_(s32) = G_CONSTANT i32 4
    %5:_(s32) = G_CONSTANT i32 5
    %6:_(s32) = G_CONSTANT i32 6
    %7:_(s32) = G_CONSTANT i32 7
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = G_BUILD_VECTOR %7(s32), %6(s32), %5(s32), %4(s32), %3(s32), %2(s32), %1(s32), %0(s32)
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %8:_(<8 x s32>), %9:_, shufflemask(0, 1, -1, 3, -1, 5, 6, 7, 8, -1, -1, -1, -1, 13, 14, 15)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_order_reverse
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl4
    ; CHECK-LABEL: name: shufflevector_order_reverse
    ; CHECK: liveins: $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_BUILD_VECTOR [[C7]](s32), [[C6]](s32), [[C5]](s32), [[C4]](s32), [[C3]](s32), [[C2]](s32), [[C1]](s32), [[C]](s32), [[C]](s32), [[C1]](s32), [[C2]](s32), [[C3]](s32), [[C4]](s32), [[C5]](s32), [[C6]](s32), [[C7]](s32)
    ; CHECK-NEXT: $x0 = COPY [[BUILD_VECTOR]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_CONSTANT i32 2
    %3:_(s32) = G_CONSTANT i32 3
    %4:_(s32) = G_CONSTANT i32 4
    %5:_(s32) = G_CONSTANT i32 5
    %6:_(s32) = G_CONSTANT i32 6
    %7:_(s32) = G_CONSTANT i32 7
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = G_BUILD_VECTOR %7(s32), %6(s32), %5(s32), %4(s32), %3(s32), %2(s32), %1(s32), %0(s32)
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %8:_(<8 x s32>), %9:_, shufflemask(8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_bv_reg
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl4
    ; CHECK-LABEL: name: shufflevector_bv_reg
    ; CHECK: liveins: $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 28
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 18
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32), [[C2]](s32), [[C3]](s32), [[C4]](s32), [[C5]](s32), [[C6]](s32), [[C7]](s32)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[BUILD_VECTOR]](<8 x s32>), [[COPY]], shufflemask(4, 5, 3, 7, 2, 7, 1, 4, 1, 1, 5, 3, 3, 2, 0, 0)
    ; CHECK-NEXT: $x0 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 28
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s32) = G_CONSTANT i32 18
    %3:_(s32) = G_CONSTANT i32 8
    %4:_(s32) = G_CONSTANT i32 7
    %5:_(s32) = G_CONSTANT i32 3
    %6:_(s32) = G_CONSTANT i32 2
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = COPY $wl4
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %8:_(<8 x s32>), %9:_, shufflemask(4, 5, 3, 7, 2, 7, 1, 4, 1, 1, 5, 3, 3, 2, 0, 0)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_bv_reg_undef
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl4
    ; CHECK-LABEL: name: shufflevector_bv_reg_undef
    ; CHECK: liveins: $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 28
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 18
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32), [[C2]](s32), [[C3]](s32), [[C4]](s32), [[C5]](s32), [[C6]](s32), [[C7]](s32)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[BUILD_VECTOR]](<8 x s32>), [[COPY]], shufflemask(4, 5, 3, 7, undef, 7, 1, undef, 1, undef, 5, undef, 3, undef, 0, 0)
    ; CHECK-NEXT: $x0 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 28
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s32) = G_CONSTANT i32 18
    %3:_(s32) = G_CONSTANT i32 8
    %4:_(s32) = G_CONSTANT i32 7
    %5:_(s32) = G_CONSTANT i32 3
    %6:_(s32) = G_CONSTANT i32 2
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = COPY $wl4
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %8:_(<8 x s32>), %9:_, shufflemask(4, 5, 3, 7, -1, 7, 1, -1, 1, -1, 5, -1, 3, -1, 0, 0)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_bv_undef
legalized:       false
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: shufflevector_bv_undef
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 28
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 18
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_BUILD_VECTOR [[C4]](s32), [[C5]](s32), [[C3]](s32), [[C6]](s32), [[C2]](s32), [[C6]](s32), [[C1]](s32), [[C4]](s32), [[C1]](s32), [[C1]](s32), [[C5]](s32), [[C3]](s32), [[C3]](s32), [[C2]](s32), [[C]](s32), [[C]](s32)
    ; CHECK-NEXT: $x0 = COPY [[BUILD_VECTOR]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 28
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s32) = G_CONSTANT i32 18
    %3:_(s32) = G_CONSTANT i32 8
    %4:_(s32) = G_CONSTANT i32 7
    %5:_(s32) = G_CONSTANT i32 3
    %6:_(s32) = G_CONSTANT i32 2
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = G_IMPLICIT_DEF
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %8:_(<8 x s32>), %9:_, shufflemask(4, 5, 3, 7, 2, 7, 1, 4, 1, 1, 5, 3, 3, 2, 0, 0)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_bv_undef_undef
legalized:       false
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: shufflevector_bv_undef_undef
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 18
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_BUILD_VECTOR [[C3]](s32), [[C4]](s32), [[C2]](s32), [[C5]](s32), [[DEF]](s32), [[C5]](s32), [[C]](s32), [[DEF]](s32), [[DEF]](s32), [[C]](s32), [[DEF]](s32), [[C2]](s32), [[DEF]](s32), [[C1]](s32), [[DEF]](s32), [[DEF]](s32)
    ; CHECK-NEXT: $x0 = COPY [[BUILD_VECTOR]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 28
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s32) = G_CONSTANT i32 18
    %3:_(s32) = G_CONSTANT i32 8
    %4:_(s32) = G_CONSTANT i32 7
    %5:_(s32) = G_CONSTANT i32 3
    %6:_(s32) = G_CONSTANT i32 2
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = G_IMPLICIT_DEF
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %8:_(<8 x s32>), %9:_, shufflemask(4, 5, 3, 7, -1, 7, 1, -1, -1, 1, -1, 3, -1, 2, -1, -1)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_reg_bv
legalized:       false
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: shufflevector_reg_bv
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 28
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 18
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32), [[C2]](s32), [[C3]](s32), [[C4]](s32), [[C5]](s32), [[C6]](s32), [[C7]](s32)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl4
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[COPY]](<8 x s32>), [[BUILD_VECTOR]], shufflemask(12, 13, 11, 15, 9, 9, 8, 12, 8, 8, 13, 12, 12, 10, 8, 9)
    ; CHECK-NEXT: $x0 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 28
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s32) = G_CONSTANT i32 18
    %3:_(s32) = G_CONSTANT i32 8
    %4:_(s32) = G_CONSTANT i32 7
    %5:_(s32) = G_CONSTANT i32 3
    %6:_(s32) = G_CONSTANT i32 2
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = COPY $wl4
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %9:_(<8 x s32>), %8:_, shufflemask(12, 13, 11, 15, 9, 9, 8, 12, 8, 8, 13, 12, 12, 10, 8, 9)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_undef_bv
legalized:       false
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: shufflevector_undef_bv
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 18
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_BUILD_VECTOR [[C3]](s32), [[C4]](s32), [[C2]](s32), [[C6]](s32), [[C]](s32), [[C]](s32), [[C1]](s32), [[C3]](s32), [[C3]](s32), [[C5]](s32), [[C4]](s32), [[C3]](s32), [[C3]](s32), [[C1]](s32), [[C5]](s32), [[C]](s32)
    ; CHECK-NEXT: $x0 = COPY [[BUILD_VECTOR]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(s32) = G_CONSTANT i32 28
    %1:_(s32) = G_CONSTANT i32 24
    %2:_(s32) = G_CONSTANT i32 18
    %3:_(s32) = G_CONSTANT i32 8
    %4:_(s32) = G_CONSTANT i32 7
    %5:_(s32) = G_CONSTANT i32 3
    %6:_(s32) = G_CONSTANT i32 2
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(<8 x s32>) = G_BUILD_VECTOR %0(s32), %1(s32), %2(s32), %3(s32), %4(s32), %5(s32), %6(s32), %7(s32)
    %9:_(<8 x s32>) = G_IMPLICIT_DEF
    %10:_(<16 x s32>) = G_SHUFFLE_VECTOR %9:_(<8 x s32>), %8:_, shufflemask(12, 13, 11, 15, 9, 9, 10, 12, 12, 14, 13, 12, 12, 10, 14, 9)
    $x0 = COPY %10:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_undef_undef
legalized:       false
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: shufflevector_undef_undef
    ; CHECK: [[DEF:%[0-9]+]]:_(<16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: $x0 = COPY [[DEF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(<8 x s32>) = G_IMPLICIT_DEF
    %1:_(<8 x s32>) = G_IMPLICIT_DEF
    %2:_(<16 x s32>) = G_SHUFFLE_VECTOR %0:_(<8 x s32>), %1:_, shufflemask(12, 13, 11, 15, 9, 9, 8, 12, 8, 8, 13, 12, 12, 10, 8, 9)
    $x0 = COPY %2:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_reg_undef
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2
    ; CHECK-LABEL: name: shufflevector_reg_undef
    ; CHECK: liveins: $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[COPY]](<8 x s32>), [[DEF]], shufflemask(12, 13, 11, 15, 9, 9, 8, 12, 8, 8, 13, 12, 12, 10, 8, 9)
    ; CHECK-NEXT: $x0 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(<8 x s32>) = COPY $wl2
    %1:_(<8 x s32>) = G_IMPLICIT_DEF
    %2:_(<16 x s32>) = G_SHUFFLE_VECTOR %0:_(<8 x s32>), %1:_, shufflemask(12, 13, 11, 15, 9, 9, 8, 12, 8, 8, 13, 12, 12, 10, 8, 9)
    $x0 = COPY %2:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_undef_reg
legalized:       false
body:             |
  bb.1.entry:
    liveins: $wl2, $wl4
    ; CHECK-LABEL: name: shufflevector_undef_reg
    ; CHECK: liveins: $wl2, $wl4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; CHECK-NEXT: [[SHUF:%[0-9]+]]:_(<16 x s32>) = G_SHUFFLE_VECTOR [[DEF]](<8 x s32>), [[COPY]], shufflemask(12, 13, 11, 15, 9, 9, 8, 12, 8, 8, 13, 12, 12, 10, 8, 9)
    ; CHECK-NEXT: $x0 = COPY [[SHUF]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %0:_(<8 x s32>) = G_IMPLICIT_DEF
    %1:_(<8 x s32>) = COPY $wl2
    %2:_(<16 x s32>) = G_SHUFFLE_VECTOR %0:_(<8 x s32>), %1:_, shufflemask(12, 13, 11, 15, 9, 9, 8, 12, 8, 8, 13, 12, 12, 10, 8, 9)
    $x0 = COPY %2:_(<16 x s32>)
    PseudoRET implicit $lr, implicit $x0
...
---
name:            shufflevector_broadcast
legalized:       false
body:             |
  bb.1.entry:
    liveins: $r0
    ; CHECK-LABEL: name: shufflevector_broadcast
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[AIE_BROADCAST_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_AIE_BROADCAST_VECTOR [[COPY]](s32)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[AIE_BROADCAST_VECTOR]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[UV]](<8 x s32>)
    %1:_(s32) = COPY $r0
    %3:_(<8 x s32>) = G_IMPLICIT_DEF
    %5:_(s32) = G_IMPLICIT_DEF
    %2:_(<8 x s32>) = G_BUILD_VECTOR %1(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32)
    %0:_(<8 x s32>) = G_SHUFFLE_VECTOR %2(<8 x s32>), %3, shufflemask(0, 0, 0, 0, 0, 0, 0, 0)
    PseudoRET implicit $lr, implicit %0
...
