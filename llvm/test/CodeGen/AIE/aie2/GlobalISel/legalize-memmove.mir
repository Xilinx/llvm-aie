# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name: test_memcpy_constant_size
body: |
  bb.0:
  liveins: $p0, $p1
    ; CHECK-LABEL: name: test_memcpy_constant_size
    ; CHECK: liveins: $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $p1 = COPY [[COPY]](p0)
    ; CHECK-NEXT: $p2 = COPY [[COPY1]](p0)
    ; CHECK-NEXT: $r0 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &memmove, csr_aie2, implicit-def $lr, implicit $p1, implicit $p2, implicit $r0, implicit-def $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s32) = G_CONSTANT i32 16
    %3:_(s20) = G_TRUNC %2
    G_MEMMOVE %0(p0), %1(p0), %3(s20), 0 :: (store (s8)), (load (s8))
...

---
name: test_memcpy_size_in_reg
body: |
  bb.0:
  liveins: $p0, $p1, $r6
    ; CHECK-LABEL: name: test_memcpy_size_in_reg
    ; CHECK: liveins: $p0, $p1, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1048575
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $p1 = COPY [[COPY]](p0)
    ; CHECK-NEXT: $p2 = COPY [[COPY1]](p0)
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoJL &memmove, csr_aie2, implicit-def $lr, implicit $p1, implicit $p2, implicit $r0, implicit-def $p0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s32) = COPY $r6
    %3:_(s20) = G_TRUNC %2
    G_MEMMOVE %0(p0), %1(p0), %3(s20), 0 :: (store (s8)), (load (s8))
...

---
name: test_memcpy_constant_size_aligns
body: |
  bb.0:
  liveins: $p0, $p1
    ; CHECK-LABEL: name: test_memcpy_constant_size_aligns
    ; CHECK: liveins: $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 48
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $p1 = COPY [[COPY]](p0)
    ; CHECK-NEXT: $p2 = COPY [[COPY1]](p0)
    ; CHECK-NEXT: $r0 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &memmove, csr_aie2, implicit-def $lr, implicit $p1, implicit $p2, implicit $r0, implicit-def $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s32) = G_CONSTANT i32 48
    %3:_(s20) = G_TRUNC %2
    G_MEMMOVE %0(p0), %1(p0), %3(s20), 0 :: (store (s8), align 4), (load (s8), align 4)
...

---
name: test_memcpy_constant_size_different_aligns
body: |
  bb.0:
  liveins: $p0, $p1
    ; CHECK-LABEL: name: test_memcpy_constant_size_different_aligns
    ; CHECK: liveins: $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 48
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $p1 = COPY [[COPY]](p0)
    ; CHECK-NEXT: $p2 = COPY [[COPY1]](p0)
    ; CHECK-NEXT: $r0 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &memmove, csr_aie2, implicit-def $lr, implicit $p1, implicit $p2, implicit $r0, implicit-def $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p1
    %2:_(s32) = G_CONSTANT i32 48
    %3:_(s20) = G_TRUNC %2
    G_MEMMOVE %0(p0), %1(p0), %3(s20), 0 :: (store (s8), align 4), (load (s8), align 8)
...

---
name: test_memcpy_src_is_dest
body: |
  bb.0:
  liveins: $p0
    ; CHECK-LABEL: name: test_memcpy_src_is_dest
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 48
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $p1 = COPY [[COPY]](p0)
    ; CHECK-NEXT: $p2 = COPY [[COPY1]](p0)
    ; CHECK-NEXT: $r0 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoJL &memmove, csr_aie2, implicit-def $lr, implicit $p1, implicit $p2, implicit $r0, implicit-def $p0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $p0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    %0:_(p0) = COPY $p0
    %1:_(p0) = COPY $p0
    %2:_(s32) = G_CONSTANT i32 48
    %3:_(s20) = G_TRUNC %2
    G_MEMMOVE %0(p0), %1(p0), %3(s20), 0 :: (store (s8)), (load (s8))
