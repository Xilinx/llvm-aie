# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=aie2-prelegalizer-combiner %s -verify-machineinstrs -o - \
# RUN:    | FileCheck %s --check-prefix=COMBINER
# RUN: llc -mtriple aie2 -start-before=aie2-prelegalizer-combiner --stop-after=register-coalescer %s -verify-machineinstrs -o - \
# RUN:    | FileCheck %s --check-prefix=COALESCER

# This shows that the G_AIE_UNPAD_VECTOR and G_AIE_PAD_VECTOR_UNDEF generated
# by the pre-legalizer combiner will get simplified by the time we reach RA.
---
name: unpad_256_bits
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $wl2
    ; COMBINER-LABEL: name: unpad_256_bits
    ; COMBINER: liveins: $wl2
    ; COMBINER-NEXT: {{  $}}
    ; COMBINER-NEXT: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $wl2
    ; COMBINER-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[COPY]](<8 x s32>)
    ; COMBINER-NEXT: [[AIE_PAD_VECTOR_UNDEF:%[0-9]+]]:_(<8 x s32>) = G_AIE_PAD_VECTOR_UNDEF [[AIE_UNPAD_VECTOR]](<4 x s32>)
    ; COMBINER-NEXT: $wl0 = COPY [[AIE_PAD_VECTOR_UNDEF]](<8 x s32>)
    ; COMBINER-NEXT: PseudoRET implicit $lr, implicit $wl0
    ; COALESCER-LABEL: name: unpad_256_bits
    ; COALESCER: liveins: $wl2
    ; COALESCER-NEXT: {{  $}}
    ; COALESCER-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; COALESCER-NEXT: $wl0 = COPY [[COPY]]
    ; COALESCER-NEXT: PseudoRET implicit $lr, implicit killed $wl0
    %1:_(<8 x s32>) = COPY $wl2
    %0:_(<4 x s32>), %2:_(<4 x s32>) = G_UNMERGE_VALUES %1(<8 x s32>)
    %4:_(s32), %5:_(s32), %6:_(s32), %7:_(s32) = G_UNMERGE_VALUES %0(<4 x s32>)
    %8:_(s32) = G_IMPLICIT_DEF
    %3:_(<8 x s32>) = G_BUILD_VECTOR %4(s32), %5(s32), %6(s32), %7(s32), %8(s32), %8(s32), %8(s32), %8(s32)
    $wl0 = COPY %3(<8 x s32>)
    PseudoRET implicit $lr, implicit $wl0
...
