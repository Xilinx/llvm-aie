# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s


---
name:            byte_incr
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p1, $r0
    ; CHECK-LABEL: name: byte_incr
    ; CHECK: liveins: $p1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[PADD_mod_pseudo:%[0-9]+]]:ep = PADD_mod_pseudo [[COPY]], [[COPY2]]
    ; CHECK-NEXT: $p0 = COPY [[PADD_mod_pseudo]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $p0
    %1:ptrregbank(p0) = COPY $p1
    %2:gprregbank(s32) = COPY $r0
    %3:modregbank(s20) = G_TRUNC %2:gprregbank(s32)
    %4:ptrregbank(p0) = G_PTR_ADD %1:ptrregbank, %3:modregbank(s20)
    $p0 = COPY %4:ptrregbank(p0)
    PseudoRET implicit $lr, implicit $p0
...


---
name:            add2d_byte
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p1, $p2, $r0, $r1, $r2
    ; CHECK-LABEL: name: add2d_byte
    ; CHECK: liveins: $p1, $p2, $r0, $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep = COPY $p2
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edj = COPY [[COPY4]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edn = COPY [[COPY2]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY3]], 0 :: (load (s32))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:edc = COPY [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[COPY5]], %subreg.sub_mod, [[COPY7]], %subreg.sub_dim_size, [[COPY6]], %subreg.sub_dim_stride, [[COPY8]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[PADDA_2D:%[0-9]+]]:ep, [[PADDA_2D1:%[0-9]+]]:edc = PADDA_2D [[COPY]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:ep = COPY [[PADDA_2D1]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:er = COPY [[COPY9]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY10]], [[COPY3]], 0 :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[PADDA_2D]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $p0
    %1:ptrregbank(p0) = COPY $p1
    %2:gprregbank(s32) = COPY $r0
    %3:gprregbank(s32) = COPY $r1
    %4:ptrregbank(p0) = COPY $p2
    %5:gprregbank(s32) = COPY $r2
    %6:modregbank(s20) = G_TRUNC %2:gprregbank(s32)
    %7:modregbank(s20) = G_TRUNC %5:gprregbank(s32)
    %8:modregbank(s20) = G_TRUNC %3:gprregbank(s32)
    %9:gprregbank(s32) = G_LOAD %4:ptrregbank(p0) :: (load (s32) , align 4)
    %10:modregbank(s20) = G_TRUNC %9:gprregbank(s32)
    %11:ptrregbank(p0), %12:modregbank(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %1:ptrregbank(p0), %6:modregbank(s20), %7:modregbank(s20), %8:modregbank(s20), %10:modregbank(s20)
    %18:ptrregbank(s20) = COPY %12:modregbank(s20)
    %13:gprregbank(s32) = G_ZEXT %18:ptrregbank(s20)
    G_STORE %13:gprregbank(s32), %4:ptrregbank(p0) :: (store (s32) )
    $p0 = COPY %11:ptrregbank(p0)
    PseudoRET implicit $lr, implicit $p0
...


---
name:            add2d_constrained_regClass
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p1, $p2, $r0, $r1, $r2
    ; CHECK-LABEL: name: add2d_constrained_regClass
    ; CHECK: liveins: $p1, $p2, $r0, $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep = COPY $p2
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edj = COPY [[COPY4]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:edn = COPY [[COPY2]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY3]], 0 :: (load (s32))
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:edc = COPY [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[COPY5]], %subreg.sub_mod, [[COPY7]], %subreg.sub_dim_size, [[COPY6]], %subreg.sub_dim_stride, [[COPY8]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[PADDA_2D:%[0-9]+]]:ep, [[PADDA_2D1:%[0-9]+]]:edc = PADDA_2D [[COPY]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:ep = COPY [[PADDA_2D1]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:er = COPY [[COPY9]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY10]], [[COPY3]], 0 :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[PADDA_2D]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $p0
    %1:ptrregbank(p0) = COPY $p1
    %2:gprregbank(s32) = COPY $r0
    %3:gprregbank(s32) = COPY $r1
    %4:ptrregbank(p0) = COPY $p2
    %5:gprregbank(s32) = COPY $r2
    %6:em(s20) = G_TRUNC %2:gprregbank(s32)
    %7:edj(s20) = G_TRUNC %5:gprregbank(s32)
    %8:edn(s20) = G_TRUNC %3:gprregbank(s32)
    %9:gprregbank(s32) = G_LOAD %4:ptrregbank(p0) :: (load (s32) , align 4)
    %10:edc(s20) = G_TRUNC %9:gprregbank(s32)
    %11:ptrregbank(p0), %12:edc(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %1:ptrregbank(p0), %6:em(s20), %7:edj(s20), %8:edn(s20), %10:edc(s20)
    %18:ptrregbank(s20) = COPY %12:edc(s20)
    %13:gprregbank(s32) = G_ZEXT %18:ptrregbank(s20)
    G_STORE %13:gprregbank(s32), %4:ptrregbank(p0) :: (store (s32) )
    $p0 = COPY %11:ptrregbank(p0)
    PseudoRET implicit $lr, implicit $p0
...

---
name:            add2d_unconstrained_regClass
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-LABEL: name: add2d_unconstrained_regClass
    ; CHECK: liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 32
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY2]], %subreg.sub_dim_size, [[COPY1]], %subreg.sub_dim_stride, [[COPY3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[PADDA_2D:%[0-9]+]]:ep, [[PADDA_2D1:%[0-9]+]]:edc = PADDA_2D [[COPY]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[PADDA_2D]]
    %1:ptrregbank(p0) = COPY $p1
    %2:modregbank(s20) = G_CONSTANT i20 32
    %3:ptrregbank(p0), %4:modregbank(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.2d), %1:ptrregbank(p0), %2:modregbank(s20), %2:modregbank(s20), %2:modregbank(s20), %2:modregbank(s20)
    PseudoRET implicit $lr, implicit %3
...

---
name:            add3d_byte
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-LABEL: name: add3d_byte
    ; CHECK: liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep = COPY $p2
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r3
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:ep = COPY $p3
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:er = COPY $r4
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:edj = COPY [[COPY4]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:edj = COPY [[COPY7]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:edn = COPY [[COPY2]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY3]], 0 :: (load (s32))
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:edc = COPY [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:edn = COPY [[COPY5]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm1:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY6]], 0 :: (load (s32))
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:edc = COPY [[LDA_dms_lda_idx_imm1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[COPY8]], %subreg.sub_mod, [[COPY11]], %subreg.sub_dim_size, [[COPY9]], %subreg.sub_dim_stride, [[COPY12]], %subreg.sub_dim_count, [[COPY13]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY10]], %subreg.sub_hi_dim_then_sub_dim_stride, [[COPY14]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[PADDA_3D:%[0-9]+]]:ep, [[PADDA_3D1:%[0-9]+]]:edc, [[PADDA_3D2:%[0-9]+]]:edc = PADDA_3D [[COPY]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:ep = COPY [[PADDA_3D1]]
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:er = COPY [[COPY15]]
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:ep = COPY [[PADDA_3D2]]
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:er = COPY [[COPY17]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY16]], [[COPY3]], 0 :: (store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY18]], [[COPY6]], 0 :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[PADDA_3D]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $p0
    %1:ptrregbank(p0) = COPY $p1
    %2:gprregbank(s32) = COPY $r0
    %3:gprregbank(s32) = COPY $r1
    %4:ptrregbank(p0) = COPY $p2
    %5:gprregbank(s32) = COPY $r2
    %6:gprregbank(s32) = COPY $r3
    %7:ptrregbank(p0) = COPY $p3
    %8:gprregbank(s32) = COPY $r4
    %9:modregbank(s20) = G_TRUNC %2:gprregbank(s32)
    %10:modregbank(s20) = G_TRUNC %5:gprregbank(s32)
    %11:modregbank(s20) = G_TRUNC %8:gprregbank(s32)
    %12:modregbank(s20) = G_TRUNC %3:gprregbank(s32)
    %13:gprregbank(s32) = G_LOAD %4:ptrregbank(p0) :: (load (s32) , align 4)
    %14:modregbank(s20) = G_TRUNC %13:gprregbank(s32)
    %15:modregbank(s20) = G_TRUNC %6:gprregbank(s32)
    %16:gprregbank(s32) = G_LOAD %7:ptrregbank(p0) :: (load (s32) , align 4)
    %17:modregbank(s20) = G_TRUNC %16:gprregbank(s32)
    %18:ptrregbank(p0), %19:modregbank(s20), %20:modregbank(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %1:ptrregbank(p0), %9:modregbank(s20), %10:modregbank(s20), %11:modregbank(s20), %12:modregbank(s20), %14:modregbank(s20), %15:modregbank(s20), %17:modregbank(s20)
    %30:ptrregbank(s20) = COPY %19:modregbank(s20)
    %21:gprregbank(s32) = G_ZEXT %30:ptrregbank(s20)
    %31:ptrregbank(s20) = COPY %20:modregbank(s20)
    %22:gprregbank(s32) = G_ZEXT %31:ptrregbank(s20)
    G_STORE %21:gprregbank(s32), %4:ptrregbank(p0) :: (store (s32) )
    G_STORE %22:gprregbank(s32), %7:ptrregbank(p0) :: (store (s32) )
    $p0 = COPY %18:ptrregbank(p0)
    PseudoRET implicit $lr, implicit $p0
...

---
name:            add3d_constrained_regClass
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-LABEL: name: add3d_constrained_regClass
    ; CHECK: liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:ep = COPY $p2
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:er = COPY $r3
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:ep = COPY $p3
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:er = COPY $r4
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:edj = COPY [[COPY4]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:edj = COPY [[COPY7]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:edn = COPY [[COPY2]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY3]], 0 :: (load (s32))
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:edc = COPY [[LDA_dms_lda_idx_imm]]
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:edn = COPY [[COPY5]]
    ; CHECK-NEXT: [[LDA_dms_lda_idx_imm1:%[0-9]+]]:er = LDA_dms_lda_idx_imm [[COPY6]], 0 :: (load (s32))
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:edc = COPY [[LDA_dms_lda_idx_imm1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[COPY8]], %subreg.sub_mod, [[COPY11]], %subreg.sub_dim_size, [[COPY9]], %subreg.sub_dim_stride, [[COPY12]], %subreg.sub_dim_count, [[COPY13]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY10]], %subreg.sub_hi_dim_then_sub_dim_stride, [[COPY14]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[PADDA_3D:%[0-9]+]]:ep, [[PADDA_3D1:%[0-9]+]]:edc, [[PADDA_3D2:%[0-9]+]]:edc = PADDA_3D [[COPY]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:ep = COPY [[PADDA_3D1]]
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:er = COPY [[COPY15]]
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:ep = COPY [[PADDA_3D2]]
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:er = COPY [[COPY17]]
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY16]], [[COPY3]], 0 :: (store (s32))
    ; CHECK-NEXT: ST_dms_sts_idx_imm [[COPY18]], [[COPY6]], 0 :: (store (s32))
    ; CHECK-NEXT: $p0 = COPY [[PADDA_3D]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $p0
    %1:ptrregbank(p0) = COPY $p1
    %2:gprregbank(s32) = COPY $r0
    %3:gprregbank(s32) = COPY $r1
    %4:ptrregbank(p0) = COPY $p2
    %5:gprregbank(s32) = COPY $r2
    %6:gprregbank(s32) = COPY $r3
    %7:ptrregbank(p0) = COPY $p3
    %8:gprregbank(s32) = COPY $r4
    %9:em(s20) = G_TRUNC %2:gprregbank(s32)
    %10:edj(s20) = G_TRUNC %5:gprregbank(s32)
    %11:edj(s20) = G_TRUNC %8:gprregbank(s32)
    %12:edn(s20) = G_TRUNC %3:gprregbank(s32)
    %13:gprregbank(s32) = G_LOAD %4:ptrregbank(p0) :: (load (s32) , align 4)
    %14:edc(s20) = G_TRUNC %13:gprregbank(s32)
    %15:edn(s20) = G_TRUNC %6:gprregbank(s32)
    %16:gprregbank(s32) = G_LOAD %7:ptrregbank(p0) :: (load (s32) , align 4)
    %17:edc(s20) = G_TRUNC %16:gprregbank(s32)
    %18:ptrregbank(p0), %19:edc(s20), %20:edc(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %1:ptrregbank(p0), %9:em(s20), %10:edj(s20), %11:edj(s20), %12:edn(s20), %14:edc(s20), %15:edn(s20), %17:edc(s20)
    %30:ptrregbank(s20) = COPY %19:edc(s20)
    %21:gprregbank(s32) = G_ZEXT %30:ptrregbank(s20)
    %31:ptrregbank(s20) = COPY %20:edc(s20)
    %22:gprregbank(s32) = G_ZEXT %31:ptrregbank(s20)
    G_STORE %21:gprregbank(s32), %4:ptrregbank(p0) :: (store (s32) )
    G_STORE %22:gprregbank(s32), %7:ptrregbank(p0) :: (store (s32) )
    $p0 = COPY %18:ptrregbank(p0)
    PseudoRET implicit $lr, implicit $p0
...

---
name:            add3d_unconstrained_regClass
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-LABEL: name: add3d_unconstrained_regClass
    ; CHECK: liveins: $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 32
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:edn = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:edc = COPY [[MOV_PD_imm10_pseudo]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[COPY3]], %subreg.sub_dim_size, [[COPY1]], %subreg.sub_dim_stride, [[COPY4]], %subreg.sub_dim_count, [[COPY5]], %subreg.sub_hi_dim_then_sub_dim_size, [[COPY2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[COPY6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[PADDA_3D:%[0-9]+]]:ep, [[PADDA_3D1:%[0-9]+]]:edc, [[PADDA_3D2:%[0-9]+]]:edc = PADDA_3D [[COPY]], [[REG_SEQUENCE]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[PADDA_3D]]
    %1:ptrregbank(p0) = COPY $p1
    %2:modregbank(s20) = G_CONSTANT i20 32
    %3:ptrregbank(p0), %4:modregbank(s20), %5:modregbank(s20) = G_INTRINSIC intrinsic(@llvm.aie2.add.3d), %1:ptrregbank(p0), %2:modregbank(s20), %2:modregbank(s20), %2:modregbank(s20), %2:modregbank(s20), %2:modregbank(s20), %2:modregbank(s20), %2:modregbank(s20)
    PseudoRET implicit $lr, implicit %3
...
