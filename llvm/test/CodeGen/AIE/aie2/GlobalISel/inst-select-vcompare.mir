# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VGE_D8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VGE_D8
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VGE_D8_:%[0-9]+]]:el = VGE_D8 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0, implicit [[VGE_D8_]]
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x2
    %4:gprregbank(s32) = G_CONSTANT i32 0
    %3:gprregbank(<2 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vge8), %1:vregbank(<64 x s8>), %2:vregbank(<64 x s8>), %4:gprregbank(s32)
    PseudoRET implicit $lr, implicit $r0, implicit %3
...

---
name:            VGE_D8_sgn
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r2, $x0, $x2
    ; CHECK-LABEL: name: VGE_D8_sgn
    ; CHECK: liveins: $r2, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: $crvaddsign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VGE_D8_:%[0-9]+]]:el = VGE_D8 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $crvaddsign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VGE_D8_]]
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x2
    %4:gprregbank(s32) = COPY $r2
    %5:gprregbank(s32) = G_ASSERT_ZEXT %4:gprregbank, 1
    %7:gprregbank(<2 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vge8), %1:vregbank(<64 x s8>), %2:vregbank(<64 x s8>), %5:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VGE_S8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VGE_S8
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VGE_S8_:%[0-9]+]]:el = VGE_S8 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VGE_S8_]]
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x2
    %4:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(<2 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vge8), %1:vregbank(<64 x s8>), %2:vregbank(<64 x s8>), %4:gprregbank(s32)
    PseudoRET implicit $lr, implicit %3
...

---
name:            VGE_D16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VGE_D16
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VGE_D16_:%[0-9]+]]:ers8 = VGE_D16 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VGE_D16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vge16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VGE_D16_sgn
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r1, $x0, $x2
    ; CHECK-LABEL: name: VGE_D16_sgn
    ; CHECK: liveins: $r1, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crvaddsign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VGE_D16_:%[0-9]+]]:ers8 = VGE_D16 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $crvaddsign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $r0 = COPY [[VGE_D16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %4:gprregbank(s32) = COPY $r1
    %5:gprregbank(s32) = G_ASSERT_ZEXT %4:gprregbank, 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vge16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>), %5:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VGE_S16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VGE_S16
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VGE_S16_:%[0-9]+]]:ers8 = VGE_S16 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[VGE_S16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vge16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VGE_D32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VGE_D32
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VGE_D32_:%[0-9]+]]:ers8 = VGE_D32 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VGE_D32_]]
    %1:vregbank(<16 x s32>) = COPY $x0
    %2:vregbank(<16 x s32>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vge32), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VGE_D32_sgn
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r1, $x0, $x2
    ; CHECK-LABEL: name: VGE_D32_sgn
    ; CHECK: liveins: $r1, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crvaddsign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VGE_D32_:%[0-9]+]]:ers8 = VGE_D32 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $crvaddsign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $r0 = COPY [[VGE_D32_]]
    %1:vregbank(<16 x s32>) = COPY $x0
    %2:vregbank(<16 x s32>) = COPY $x2
    %4:gprregbank(s32) = COPY $r1
    %5:gprregbank(s32) = G_ASSERT_ZEXT %4:gprregbank, 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vge32), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %5:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VGE_S32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VGE_S32
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VGE_S32_:%[0-9]+]]:ers8 = VGE_S32 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[VGE_S32_]]
    %1:vregbank(<16 x s32>) = COPY $x0
    %2:vregbank(<16 x s32>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vge32), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VLT_D8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VLT_D8
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VLT_D8_:%[0-9]+]]:el = VLT_D8 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLT_D8_]]
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x2
    %4:gprregbank(s32) = G_CONSTANT i32 0
    %3:gprregbank(<2 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vlt8), %1:vregbank(<64 x s8>), %2:vregbank(<64 x s8>), %4:gprregbank(s32)
    PseudoRET implicit $lr, implicit %3
...

---
name:            VLT_D8_sgn
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r2, $x0, $x2
    ; CHECK-LABEL: name: VLT_D8_sgn
    ; CHECK: liveins: $r2, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r2
    ; CHECK-NEXT: $crvaddsign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VLT_D8_:%[0-9]+]]:el = VLT_D8 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $crvaddsign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[VLT_D8_]]
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x2
    %4:gprregbank(s32) = COPY $r2
    %5:gprregbank(s32) = G_ASSERT_ZEXT %4:gprregbank, 1
    %7:gprregbank(<2 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vlt8), %1:vregbank(<64 x s8>), %2:vregbank(<64 x s8>), %5:gprregbank(s32)
    PseudoRET implicit $lr, implicit %7
...

---
name:            VLT_S8
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VLT_S8
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VLT_S8_:%[0-9]+]]:el = VLT_S8 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY [[VLT_S8_]].sub_l_even
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:er = COPY [[VLT_S8_]].sub_l_odd
    ; CHECK-NEXT: $r0 = COPY [[COPY2]]
    ; CHECK-NEXT: $r1 = COPY [[COPY3]]
    %1:vregbank(<64 x s8>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x2
    %4:gprregbank(s32) = G_CONSTANT i32 1
    %3:gprregbank(<2 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vlt8), %1:vregbank(<64 x s8>), %2:vregbank(<64 x s8>), %4:gprregbank(s32)
    %0:gprregbank(s64) = G_BITCAST %3:gprregbank(<2 x s32>)
    %5:gprregbank(s32), %6:gprregbank(s32) = G_UNMERGE_VALUES %0:gprregbank(s64)
    $r0 = COPY %5:gprregbank(s32)
    $r1 = COPY %6:gprregbank(s32)
...

---
name:            VLT_D16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VLT_D16
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VLT_D16_:%[0-9]+]]:ers8 = VLT_D16 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VLT_D16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vlt16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VLT_D16_sgn
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r1, $x0, $x2
    ; CHECK-LABEL: name: VLT_D16_sgn
    ; CHECK: liveins: $r1, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crvaddsign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VLT_D16_:%[0-9]+]]:ers8 = VLT_D16 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $crvaddsign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $r0 = COPY [[VLT_D16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %4:gprregbank(s32) = COPY $r1
    %5:gprregbank(s32) = G_ASSERT_ZEXT %4:gprregbank, 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vlt16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>), %5:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VLT_S16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VLT_S16
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VLT_S16_:%[0-9]+]]:ers8 = VLT_S16 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[VLT_S16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vlt16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VLT_D32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VLT_D32
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VLT_D32_:%[0-9]+]]:ers8 = VLT_D32 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $r0 = COPY [[VLT_D32_]]
    %1:vregbank(<16 x s32>) = COPY $x0
    %2:vregbank(<16 x s32>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vlt32), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VLT_D32_sgn
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r1, $x0, $x2
    ; CHECK-LABEL: name: VLT_D32_sgn
    ; CHECK: liveins: $r1, $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:er = COPY $r1
    ; CHECK-NEXT: $crvaddsign = COPY [[COPY2]]
    ; CHECK-NEXT: [[VLT_D32_:%[0-9]+]]:ers8 = VLT_D32 [[COPY]], [[COPY1]], implicit $crvaddsign
    ; CHECK-NEXT: $crvaddsign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $r0 = COPY [[VLT_D32_]]
    %1:vregbank(<16 x s32>) = COPY $x0
    %2:vregbank(<16 x s32>) = COPY $x2
    %4:gprregbank(s32) = COPY $r1
    %5:gprregbank(s32) = G_ASSERT_ZEXT %4:gprregbank, 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vlt32), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %5:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            VLT_S32
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: VLT_S32
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VLT_S32_:%[0-9]+]]:ers8 = VLT_S32 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[VLT_S32_]]
    %1:vregbank(<16 x s32>) = COPY $x0
    %2:vregbank(<16 x s32>) = COPY $x2
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vlt32), %1:vregbank(<16 x s32>), %2:vregbank(<16 x s32>), %3:gprregbank(s32)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            vlt.bf16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: vlt.bf16
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VLT_BF16_:%[0-9]+]]:ers8 = VLT_BF16 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[VLT_BF16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vltbf16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>)
    $r0 = COPY %0:gprregbank(s32)
...

---
name:            vge.bf16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $x0, $x2
    ; CHECK-LABEL: name: vge.bf16
    ; CHECK: liveins: $x0, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x2
    ; CHECK-NEXT: [[VGE_BF16_:%[0-9]+]]:ers8 = VGE_BF16 [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $r0 = COPY [[VGE_BF16_]]
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<32 x s16>) = COPY $x2
    %0:gprregbank(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vgebf16), %1:vregbank(<32 x s16>), %2:vregbank(<32 x s16>)
    $r0 = COPY %0:gprregbank(s32)
...
