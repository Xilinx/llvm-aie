# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name:            test_build_vector_32
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR [[COPY]](s32), [[COPY1]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BUILD_VECTOR]](<2 x s32>)
    %0:_(s32) = COPY $r0
    %1:_(s32) = COPY $r1
    %2:_(<2 x s32>) = G_BUILD_VECTOR %0, %1
    PseudoRET implicit $lr, implicit %2
...

---
name:            test_build_vector_32bit_256
stack:
  - {id: 0, name: "", type: default, offset: 0, size: 32, alignment: 32}
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32bit_256
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 9
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 13
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI4:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI3]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI5:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI4]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI6:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI5]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI7:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI6]], [[C3]](s32)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<8 x s32>), [[UV1:%[0-9]+]]:_(<8 x s32>) = G_UNMERGE_VALUES [[AIE_ADD_VECTOR_ELT_HI7]](<16 x s32>)
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: G_STORE [[UV1]](<8 x s32>), [[FRAME_INDEX]](p0) :: (store (<8 x s32>))
    %2:_(s32) = G_CONSTANT i32 9
    %3:_(s32) = G_CONSTANT i32 12
    %4:_(s32) = G_CONSTANT i32 13
    %5:_(s32) = G_CONSTANT i32 0
    %1:_(<8 x s32>) = G_BUILD_VECTOR %2(s32), %3(s32), %4(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    G_STORE %1(<8 x s32>), %0(p0) :: (store (<8 x s32>))
...

---
name:            test_build_vector_32bit_512
stack:
  - {id: 0, name: "", type: default, offset: 0, size: 64, alignment: 32}
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32bit_512
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 9
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI4:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI3]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI5:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI4]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI6:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI5]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI7:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI6]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI8:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI7]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI9:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI8]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI10:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI9]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI11:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI10]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI12:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI11]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI13:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI12]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI14:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI13]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI15:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI14]], [[C3]](s32)
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: G_STORE [[AIE_ADD_VECTOR_ELT_HI]](<16 x s32>), [[FRAME_INDEX]](p0) :: (store (<16 x s32>), align 32)
    %2:_(s32) = G_CONSTANT i32 4
    %3:_(s32) = G_CONSTANT i32 12
    %4:_(s32) = G_CONSTANT i32 9
    %5:_(s32) = G_CONSTANT i32 0
    %1:_(<16 x s32>) = G_BUILD_VECTOR %2(s32), %3(s32), %4(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    G_STORE %1(<16 x s32>), %0(p0) :: (store (<16 x s32>), align 32)
...

---
name:            test_build_vector_32bit_1024
stack:
  - {id: 0, name: "", type: default, offset: 0, size: 128, alignment: 32}
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32bit_1024
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 42
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 11
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI4:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI3]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI5:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI4]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI6:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI5]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI7:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI6]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI8:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI7]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI9:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI8]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI10:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI9]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI11:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI10]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI12:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI11]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI13:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI12]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI14:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI13]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI15:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI14]], [[C3]](s32)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY [[DEF]](<16 x s32>)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI16:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[COPY]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI17:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI16]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI18:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI17]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI19:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI18]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI20:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI19]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI21:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI20]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI22:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI21]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI23:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI22]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI24:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI23]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI25:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI24]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI26:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI25]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI27:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI26]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI28:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI27]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI29:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI28]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI30:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI29]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI31:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI30]], [[C3]](s32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<32 x s32>) = G_CONCAT_VECTORS [[AIE_ADD_VECTOR_ELT_HI]](<16 x s32>), [[AIE_ADD_VECTOR_ELT_HI16]](<16 x s32>)
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: G_STORE [[CONCAT_VECTORS]](<32 x s32>), [[FRAME_INDEX]](p0) :: (store (<32 x s32>), align 32)
    %2:_(s32) = G_CONSTANT i32 42
    %3:_(s32) = G_CONSTANT i32 12
    %4:_(s32) = G_CONSTANT i32 11
    %5:_(s32) = G_CONSTANT i32 0
    %1:_(<32 x s32>) = G_BUILD_VECTOR %2(s32), %3(s32), %4(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32), %5(s32)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    G_STORE %1(<32 x s32>), %0(p0) :: (store (<32 x s32>), align 32)
...

---
name:            test_build_vector_8bit_256
stack:
  - {id: 0, name: "", type: default, offset: 0, size: 32, alignment: 32}
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_8bit_256
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 9
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<64 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI4:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI3]], [[COPY]](s32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI5:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI4]], [[COPY1]](s32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI6:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI5]], [[COPY2]](s32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI7:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI6]], [[COPY3]](s32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI8:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI7]], [[COPY4]](s32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI9:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI8]], [[COPY5]](s32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI10:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI9]], [[COPY6]](s32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI11:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI10]], [[COPY7]](s32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI12:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI11]], [[COPY8]](s32)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI13:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI12]], [[COPY9]](s32)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI14:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI13]], [[COPY10]](s32)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI15:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI14]], [[COPY11]](s32)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI16:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI15]], [[COPY12]](s32)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI17:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI16]], [[COPY13]](s32)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI18:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI17]], [[COPY14]](s32)
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI19:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI18]], [[COPY15]](s32)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI20:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI19]], [[COPY16]](s32)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI21:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI20]], [[COPY17]](s32)
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI22:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI21]], [[COPY18]](s32)
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI23:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI22]], [[COPY19]](s32)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI24:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI23]], [[COPY20]](s32)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI25:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI24]], [[COPY21]](s32)
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI26:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI25]], [[COPY22]](s32)
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI27:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI26]], [[COPY23]](s32)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI28:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI27]], [[COPY24]](s32)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI29:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI28]], [[COPY25]](s32)
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI30:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI29]], [[COPY26]](s32)
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI31:%[0-9]+]]:_(<64 x s8>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI30]], [[COPY27]](s32)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<32 x s8>), [[UV1:%[0-9]+]]:_(<32 x s8>) = G_UNMERGE_VALUES [[AIE_ADD_VECTOR_ELT_HI31]](<64 x s8>)
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: G_STORE [[UV1]](<32 x s8>), [[FRAME_INDEX]](p0) :: (store (<32 x s8>))
    %2:_(s8) = G_CONSTANT i8 9
    %3:_(s8) = G_CONSTANT i8 12
    %4:_(s8) = G_CONSTANT i8 4
    %5:_(s8) = G_CONSTANT i8 0
    %1:_(<32 x s8>) = G_BUILD_VECTOR %2(s8), %3(s8), %4(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8), %5(s8)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    G_STORE %1(<32 x s8>), %0(p0) :: (store (<32 x s8>))
...

---
name:            test_build_vector_16bit_1024
stack:
  - {id: 0, name: "", type: default, offset: 0, size: 128, alignment: 32}
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_16bit_1024
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 19
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 42
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI4:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI3]], [[COPY]](s32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI5:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI4]], [[COPY1]](s32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI6:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI5]], [[COPY2]](s32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI7:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI6]], [[COPY3]](s32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI8:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI7]], [[COPY4]](s32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI9:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI8]], [[COPY5]](s32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI10:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI9]], [[COPY6]](s32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI11:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI10]], [[COPY7]](s32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI12:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI11]], [[COPY8]](s32)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI13:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI12]], [[COPY9]](s32)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI14:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI13]], [[COPY10]](s32)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI15:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI14]], [[COPY11]](s32)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI16:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI15]], [[COPY12]](s32)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI17:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI16]], [[COPY13]](s32)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI18:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI17]], [[COPY14]](s32)
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI19:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI18]], [[COPY15]](s32)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI20:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI19]], [[COPY16]](s32)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI21:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI20]], [[COPY17]](s32)
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI22:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI21]], [[COPY18]](s32)
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI23:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI22]], [[COPY19]](s32)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI24:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI23]], [[COPY20]](s32)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI25:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI24]], [[COPY21]](s32)
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI26:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI25]], [[COPY22]](s32)
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI27:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI26]], [[COPY23]](s32)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI28:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI27]], [[COPY24]](s32)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI29:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI28]], [[COPY25]](s32)
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI30:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI29]], [[COPY26]](s32)
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI31:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI30]], [[COPY27]](s32)
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:_(<32 x s16>) = COPY [[DEF]](<32 x s16>)
    ; CHECK-NEXT: [[COPY29:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI32:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[COPY28]], [[COPY29]](s32)
    ; CHECK-NEXT: [[COPY30:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI33:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI32]], [[COPY30]](s32)
    ; CHECK-NEXT: [[COPY31:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI34:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI33]], [[COPY31]](s32)
    ; CHECK-NEXT: [[COPY32:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI35:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI34]], [[COPY32]](s32)
    ; CHECK-NEXT: [[COPY33:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI36:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI35]], [[COPY33]](s32)
    ; CHECK-NEXT: [[COPY34:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI37:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI36]], [[COPY34]](s32)
    ; CHECK-NEXT: [[COPY35:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI38:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI37]], [[COPY35]](s32)
    ; CHECK-NEXT: [[COPY36:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI39:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI38]], [[COPY36]](s32)
    ; CHECK-NEXT: [[COPY37:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI40:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI39]], [[COPY37]](s32)
    ; CHECK-NEXT: [[COPY38:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI41:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI40]], [[COPY38]](s32)
    ; CHECK-NEXT: [[COPY39:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI42:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI41]], [[COPY39]](s32)
    ; CHECK-NEXT: [[COPY40:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI43:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI42]], [[COPY40]](s32)
    ; CHECK-NEXT: [[COPY41:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI44:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI43]], [[COPY41]](s32)
    ; CHECK-NEXT: [[COPY42:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI45:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI44]], [[COPY42]](s32)
    ; CHECK-NEXT: [[COPY43:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI46:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI45]], [[COPY43]](s32)
    ; CHECK-NEXT: [[COPY44:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI47:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI46]], [[COPY44]](s32)
    ; CHECK-NEXT: [[COPY45:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI48:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI47]], [[COPY45]](s32)
    ; CHECK-NEXT: [[COPY46:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI49:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI48]], [[COPY46]](s32)
    ; CHECK-NEXT: [[COPY47:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI50:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI49]], [[COPY47]](s32)
    ; CHECK-NEXT: [[COPY48:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI51:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI50]], [[COPY48]](s32)
    ; CHECK-NEXT: [[COPY49:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI52:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI51]], [[COPY49]](s32)
    ; CHECK-NEXT: [[COPY50:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI53:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI52]], [[COPY50]](s32)
    ; CHECK-NEXT: [[COPY51:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI54:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI53]], [[COPY51]](s32)
    ; CHECK-NEXT: [[COPY52:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI55:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI54]], [[COPY52]](s32)
    ; CHECK-NEXT: [[COPY53:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI56:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI55]], [[COPY53]](s32)
    ; CHECK-NEXT: [[COPY54:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI57:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI56]], [[COPY54]](s32)
    ; CHECK-NEXT: [[COPY55:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI58:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI57]], [[COPY55]](s32)
    ; CHECK-NEXT: [[COPY56:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI59:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI58]], [[COPY56]](s32)
    ; CHECK-NEXT: [[COPY57:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI60:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI59]], [[COPY57]](s32)
    ; CHECK-NEXT: [[COPY58:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI61:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI60]], [[COPY58]](s32)
    ; CHECK-NEXT: [[COPY59:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI62:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI61]], [[COPY59]](s32)
    ; CHECK-NEXT: [[COPY60:%[0-9]+]]:_(s32) = COPY [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI63:%[0-9]+]]:_(<32 x s16>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI62]], [[COPY60]](s32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<64 x s16>) = G_CONCAT_VECTORS [[AIE_ADD_VECTOR_ELT_HI]](<32 x s16>), [[AIE_ADD_VECTOR_ELT_HI32]](<32 x s16>)
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: G_STORE [[CONCAT_VECTORS]](<64 x s16>), [[FRAME_INDEX]](p0) :: (store (<64 x s16>), align 32)
    %2:_(s16) = G_CONSTANT i16 19
    %3:_(s16) = G_CONSTANT i16 32
    %4:_(s16) = G_CONSTANT i16 42
    %5:_(s16) = G_CONSTANT i16 0
    %1:_(<64 x s16>) = G_BUILD_VECTOR %2(s16), %3(s16), %4(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16), %5(s16)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    G_STORE %1(<64 x s16>), %0(p0) :: (store (<64 x s16>), align 32)
...

---
name: g_build_vector_order_most_to_least_significant
body:               |
  bb.1.entry:
    ; CHECK-LABEL: name: g_build_vector_order_most_to_least_significant
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 9
    ; CHECK-NEXT: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 10
    ; CHECK-NEXT: [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 11
    ; CHECK-NEXT: [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[C12:%[0-9]+]]:_(s32) = G_CONSTANT i32 13
    ; CHECK-NEXT: [[C13:%[0-9]+]]:_(s32) = G_CONSTANT i32 14
    ; CHECK-NEXT: [[C14:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[C15:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI4:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI3]], [[C4]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI5:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI4]], [[C5]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI6:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI5]], [[C6]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI7:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI6]], [[C7]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI8:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI7]], [[C8]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI9:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI8]], [[C9]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI10:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI9]], [[C10]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI11:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI10]], [[C11]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI12:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI11]], [[C12]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI13:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI12]], [[C13]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI14:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI13]], [[C14]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI15:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI14]], [[C15]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[AIE_ADD_VECTOR_ELT_HI]](<16 x s32>)
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_CONSTANT i32 2
    %3:_(s32) = G_CONSTANT i32 3
    %4:_(s32) = G_CONSTANT i32 4
    %5:_(s32) = G_CONSTANT i32 5
    %6:_(s32) = G_CONSTANT i32 6
    %7:_(s32) = G_CONSTANT i32 7
    %8:_(s32) = G_CONSTANT i32 8
    %9:_(s32) = G_CONSTANT i32 9
    %10:_(s32) = G_CONSTANT i32 10
    %11:_(s32) = G_CONSTANT i32 11
    %12:_(s32) = G_CONSTANT i32 12
    %13:_(s32) = G_CONSTANT i32 13
    %14:_(s32) = G_CONSTANT i32 14
    %15:_(s32) = G_CONSTANT i32 15
    %16:_(s32) = G_CONSTANT i32 16
    %0:_(<16 x s32>) = G_BUILD_VECTOR %1:_(s32), %2:_(s32), %3:_(s32), %4:_(s32), %5:_(s32), %6:_(s32), %7:_(s32), %8:_(s32), %9:_(s32), %10:_(s32), %11:_(s32), %12:_(s32), %13:_(s32), %14:_(s32), %15:_(s32), %16:_(s32)
     PseudoRET implicit $lr, implicit %0
...

---
name: test_build_vector_32bit_128
stack:
  - {id: 0, name: "", type: default, offset: 0, size: 128, alignment: 32}
body:           |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32bit_128
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 42
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 19
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[DEF]], [[C]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI1:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI]], [[C1]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI2:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI1]], [[C2]](s32)
    ; CHECK-NEXT: [[AIE_ADD_VECTOR_ELT_HI3:%[0-9]+]]:_(<16 x s32>) = G_AIE_ADD_VECTOR_ELT_HI [[AIE_ADD_VECTOR_ELT_HI2]], [[C3]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 48
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(<16 x s32>) = G_INTRINSIC intrinsic(@llvm.aie2.vshift.I512.I512), [[AIE_ADD_VECTOR_ELT_HI3]](<16 x s32>), [[AIE_ADD_VECTOR_ELT_HI3]](<16 x s32>), [[C4]](s32), [[C5]](s32)
    ; CHECK-NEXT: [[AIE_UNPAD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_AIE_UNPAD_VECTOR [[INT]](<16 x s32>)
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: G_STORE [[AIE_UNPAD_VECTOR]](<4 x s32>), [[FRAME_INDEX]](p0) :: (store (<4 x s32>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %2:_(s32) = G_CONSTANT i32 42
    %3:_(s32) = G_CONSTANT i32 19
    %4:_(s32) = G_CONSTANT i32 32
    %5:_(s32) = G_CONSTANT i32 12
    %1:_(<4 x s32>) = G_BUILD_VECTOR %2(s32), %3(s32), %4(s32), %5(s32)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    G_STORE %1(<4 x s32>), %0(p0) :: (store (<4 x s32>))
    PseudoRET implicit $lr
...

---
name:            test_build_vector_32_16
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32_16
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[C1]], [[C3]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[OR1]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST]](<2 x s16>)
    %0:_(s16) = G_CONSTANT i16 1
    %1:_(s16) = G_CONSTANT i16 2
    %2:_(<2 x s16>) = G_BUILD_VECTOR %0(s16), %1(s16)
    PseudoRET implicit $lr, implicit %2
...

---
name:            test_build_vector_32_8
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32_8
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[C4]], [[C]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[C1]], [[C5]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[C2]], [[C6]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[SHL1]]
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[C3]], [[C7]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[OR2]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[OR3]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST]](<4 x s8>)
    %0:_(s8) = G_CONSTANT i8 1
    %1:_(s8) = G_CONSTANT i8 2
    %2:_(s8) = G_CONSTANT i8 3
    %3:_(s8) = G_CONSTANT i8 4
    %4:_(<4 x s8>) = G_BUILD_VECTOR %0(s8), %1(s8), %2(s8), %3(s8)
    PseudoRET implicit $lr, implicit %4
...

---
name:            test_build_vector_32_8_negative
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32_8_negative
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[C]], [[COPY]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 254
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[C2]], [[C3]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 253
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[C4]], [[C5]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[SHL1]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 252
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[C6]], [[C7]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[OR2]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[OR3]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST]](<4 x s8>)
    %0:_(s8) = G_CONSTANT i8 -1
    %1:_(s8) = G_CONSTANT i8 -2
    %2:_(s8) = G_CONSTANT i8 -3
    %3:_(s8) = G_CONSTANT i8 -4
    %4:_(<4 x s8>) = G_BUILD_VECTOR %0(s8), %1(s8), %2(s8), %3(s8)
    PseudoRET implicit $lr, implicit %4
...

---
name:            test_build_vector_32_8_mixed
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: test_build_vector_32_8_mixed
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 19
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 33
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 232
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[C3]], [[C4]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[C1]], [[C5]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[SHL1]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 164
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[C6]], [[C7]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[OR2]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[OR3]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST]](<4 x s8>)
    %0:_(s8) = G_CONSTANT i8 19
    %1:_(s8) = G_CONSTANT i8 -24
    %2:_(s8) = G_CONSTANT i8 33
    %3:_(s8) = G_CONSTANT i8 -92
    %4:_(<4 x s8>) = G_BUILD_VECTOR %0(s8), %1(s8), %2(s8), %3(s8)
    PseudoRET implicit $lr, implicit %4
...

---
name:            test_build_vector_32_8_from_registers
body:             |
  bb.1.entry:
    liveins: $r0, $r1, $r2, $r3
    ; CHECK-LABEL: name: test_build_vector_32_8_from_registers
    ; CHECK: liveins: $r0, $r1, $r2, $r3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[C]], [[AND]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[AND1]], [[C2]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[AND2]], [[C3]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[SHL1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[AND3]], [[C4]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[OR2]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[OR3]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST]](<4 x s8>)
    %0:_(s32) = COPY $r0
    %1:_(s32) = COPY $r1
    %2:_(s32) = COPY $r2
    %3:_(s32) = COPY $r3
    %4:_(s8) = G_TRUNC %0(s32)
    %5:_(s8) = G_TRUNC %1(s32)
    %6:_(s8) = G_TRUNC %2(s32)
    %7:_(s8) = G_TRUNC %3(s32)
    %8:_(<4 x s8>) = G_BUILD_VECTOR %4(s8), %5(s8), %6(s8), %7(s8)
    PseudoRET implicit $lr, implicit %8
...

---
name:            test_build_vector_32_8_register_constant
body:             |
  bb.1.entry:
    liveins: $r0, $r1
    ; CHECK-LABEL: name: test_build_vector_32_8_register_constant
    ; CHECK: liveins: $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 19
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 33
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C3]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[AND]], [[C4]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[C1]], [[C5]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[SHL1]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C3]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[AND1]], [[C6]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[OR2]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[OR3]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST]](<4 x s8>)
    %0:_(s32) = COPY $r0
    %1:_(s32) = COPY $r1
    %2:_(s8) = G_CONSTANT i8 19
    %3:_(s8) = G_TRUNC %0(s32)
    %4:_(s8) = G_CONSTANT i8 33
    %5:_(s8) = G_TRUNC %1(s32)
    %6:_(<4 x s8>) = G_BUILD_VECTOR %2(s8), %3(s8), %4(s8), %5(s8)
    PseudoRET implicit $lr, implicit %6
