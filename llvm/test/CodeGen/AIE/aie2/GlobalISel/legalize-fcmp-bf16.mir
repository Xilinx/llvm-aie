# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name:            fcmp_true
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_true
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %0:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %0:_(s32)
    %2:_(s32) = COPY $r2
    %3:_(s16) = G_TRUNC %2:_(s32)
    %4:_(s1) = G_FCMP floatpred(true), %1:_(s16), %3
    PseudoRET implicit $lr, implicit %4
...

---
name:            fcmp_false
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_false
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[TRUNC]](s1)
    %0:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %0:_(s32)
    %2:_(s32) = COPY $r2
    %3:_(s16) = G_TRUNC %2:_(s32)
    %4:_(s1) = G_FCMP floatpred(false), %1(s16), %3
    PseudoRET implicit $lr, implicit %4
...

---
name:            fcmp_ogt
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_ogt
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY]](s32), [[C]](s32)
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT1:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vltbf16), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[INT]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(ogt), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_ole
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_ole
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY]](s32), [[C]](s32)
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT1:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vgebf16), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[INT]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(ole), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_oge
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_oge
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY]](s32), [[C]](s32)
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT1:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vgebf16), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[INT]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(oge), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_olt
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_olt
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY]](s32), [[C]](s32)
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT1:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vltbf16), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[INT]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(olt), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_one
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_one
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY]](s32), [[C]](s32)
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT1:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vltbf16), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>)
    ; CHECK-NEXT: [[INT1:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vltbf16), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[INT]], [[INT1]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[OR]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(one), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_oeq
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_oeq
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY]](s32), [[C]](s32)
    ; CHECK-NEXT: [[AIE_INSERT_VECTOR_ELT1:%[0-9]+]]:_(<32 x s16>) = G_AIE_INSERT_VECTOR_ELT [[DEF]], [[COPY1]](s32), [[C]](s32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vgebf16), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>)
    ; CHECK-NEXT: [[INT1:%[0-9]+]]:_(s32) = G_INTRINSIC intrinsic(@llvm.aie2.vgebf16), [[AIE_INSERT_VECTOR_ELT1]](<32 x s16>), [[AIE_INSERT_VECTOR_ELT]](<32 x s16>)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[INT]], [[INT1]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[AND]], [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[AND1]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(oeq), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_ugt
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_ugt
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[SHL]](s32)
    ; CHECK-NEXT: $r2 = COPY [[SHL1]](s32)
    ; CHECK-NEXT: PseudoJL &__lesf2, csr_aie2, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(ugt), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_ule
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_ule
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[SHL]](s32)
    ; CHECK-NEXT: $r2 = COPY [[SHL1]](s32)
    ; CHECK-NEXT: PseudoJL &__gtsf2, csr_aie2, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(ule), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_uge
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_uge
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[SHL]](s32)
    ; CHECK-NEXT: $r2 = COPY [[SHL1]](s32)
    ; CHECK-NEXT: PseudoJL &__ltsf2, csr_aie2, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(uge), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_ult
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_ult
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[SHL]](s32)
    ; CHECK-NEXT: $r2 = COPY [[SHL1]](s32)
    ; CHECK-NEXT: PseudoJL &__gesf2, csr_aie2, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(ult), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_une
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_une
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[SHL]](s32)
    ; CHECK-NEXT: $r2 = COPY [[SHL1]](s32)
    ; CHECK-NEXT: PseudoJL &__nesf2, csr_aie2, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: $r0 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(une), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...

---
name:            fcmp_ueq
body:             |
  bb.1.entry:
    liveins: $r1, $r2
    ; CHECK-LABEL: name: fcmp_ueq
    ; CHECK: liveins: $r1, $r2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C]](s32)
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[SHL]](s32)
    ; CHECK-NEXT: $r2 = COPY [[SHL1]](s32)
    ; CHECK-NEXT: PseudoJL &__eqsf2, csr_aie2, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: $r1 = COPY [[SHL]](s32)
    ; CHECK-NEXT: $r2 = COPY [[SHL1]](s32)
    ; CHECK-NEXT: PseudoJL &__unordsf2, csr_aie2, implicit-def $lr, implicit $r1, implicit $r2, implicit-def $r0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY3]](s32), [[C1]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[ICMP1]]
    ; CHECK-NEXT: $r0 = COPY [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $r0
    %3:_(s32) = COPY $r1
    %1:_(s16) = G_TRUNC %3:_(s32)
    %4:_(s32) = COPY $r2
    %2:_(s16) = G_TRUNC %4:_(s32)
    %0:_(s1) = G_FCMP floatpred(ueq), %1:_(s16), %2:_
    %5:_(s32) = G_ZEXT %0:_(s1)
    $r0 = COPY %5:_(s32)
    PseudoRET implicit $lr, implicit $r0
...
