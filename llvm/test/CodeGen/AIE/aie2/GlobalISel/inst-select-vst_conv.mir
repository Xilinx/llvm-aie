# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            VST_CONV
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0
    ; CHECK-LABEL: name: VST_CONV
    ; CHECK: liveins: $p0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx_imm [[COPY]], 0, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %100:accregbank(<8 x s64>) = COPY $bml0
    %104:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    G_STORE %104, %0 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_CONV_OFFSET_imm
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0
    ; CHECK-LABEL: name: VST_CONV_OFFSET_imm
    ; CHECK: liveins: $p0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx_imm [[COPY]], 0, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx_imm [[COPY]], -128, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx_imm [[COPY]], 96, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %8:modregbank(s20) = G_CONSTANT i20 0
    %10:modregbank(s20) = G_CONSTANT i20 -128
    %11:modregbank(s20) = G_CONSTANT i20 96
    %100:accregbank(<8 x s64>) = COPY $bml0
    %104:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %106:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %107:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    G_AIE_OFFSET_STORE %104, %0, %8 :: (store (<16 x s16>))
    G_AIE_OFFSET_STORE %106, %0, %10 :: (store (<16 x s16>))
    G_AIE_OFFSET_STORE %107, %0, %11 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_CONV_OFFSET_non_imm
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $bml0
    ; CHECK-LABEL: name: VST_CONV_OFFSET_non_imm
    ; CHECK: liveins: $p0, $r0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:edj = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 128
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx [[COPY]], [[COPY2]], [[COPY3]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo]], [[COPY3]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx [[COPY]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %9:modregbank(s20) = G_CONSTANT i20 16
    %12:modregbank(s20) = G_CONSTANT i20 128
    %100:accregbank(<8 x s64>) = COPY $bml0
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %105:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %108:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    G_AIE_OFFSET_STORE %103, %0, %7 :: (store (<16 x s16>))
    G_AIE_OFFSET_STORE %105, %0, %9 :: (store (<16 x s16>))
    G_AIE_OFFSET_STORE %108, %0, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_CONV_POSTINC_imm
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0
    ; CHECK-LABEL: name: VST_CONV_POSTINC_imm
    ; CHECK: liveins: $p0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[VST_CONV_BF16_FP32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_CONV_BF16_FP32_ag_pstm_nrm_imm [[COPY]], 0, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: [[VST_CONV_BF16_FP32_ag_pstm_nrm_imm1:%[0-9]+]]:ep = VST_CONV_BF16_FP32_ag_pstm_nrm_imm [[VST_CONV_BF16_FP32_ag_pstm_nrm_imm]], -256, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: [[VST_CONV_BF16_FP32_ag_pstm_nrm_imm2:%[0-9]+]]:ep = VST_CONV_BF16_FP32_ag_pstm_nrm_imm [[VST_CONV_BF16_FP32_ag_pstm_nrm_imm1]], 224, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %8:modregbank(s20) = G_CONSTANT i20 0
    %10:modregbank(s20) = G_CONSTANT i20 -256
    %11:modregbank(s20) = G_CONSTANT i20 224
    %100:accregbank(<8 x s64>) = COPY $bml0
    %104:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %106:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %107:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %0, %8 :: (store (<16 x s16>))
    %22:ptrregbank(p0) = G_AIE_POSTINC_STORE %106, %20, %10 :: (store (<16 x s16>))
    %23:ptrregbank(p0) = G_AIE_POSTINC_STORE %107, %22, %11 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_CONV_POSTINC_non_imm
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $r0, $bml0
    ; CHECK-LABEL: name: VST_CONV_POSTINC_non_imm
    ; CHECK: liveins: $p0, $r0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:em = COPY [[COPY1]]
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 16
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:em = MOV_PD_imm10_pseudo 256
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[VST_CONV_BF16_FP32_ag_pstm_nrm:%[0-9]+]]:ep = VST_CONV_BF16_FP32_ag_pstm_nrm [[COPY]], [[COPY2]], [[COPY3]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: [[VST_CONV_BF16_FP32_ag_pstm_nrm1:%[0-9]+]]:ep = VST_CONV_BF16_FP32_ag_pstm_nrm [[VST_CONV_BF16_FP32_ag_pstm_nrm]], [[MOV_PD_imm10_pseudo]], [[COPY3]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: [[VST_CONV_BF16_FP32_ag_pstm_nrm2:%[0-9]+]]:ep = VST_CONV_BF16_FP32_ag_pstm_nrm [[VST_CONV_BF16_FP32_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo1]], [[COPY3]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:gprregbank(s32) = COPY $r0
    %7:modregbank(s20) = G_TRUNC %1
    %9:modregbank(s20) = G_CONSTANT i20 16
    %12:modregbank(s20) = G_CONSTANT i20 256
    %100:accregbank(<8 x s64>) = COPY $bml0
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %105:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %108:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %19:ptrregbank(p0) = G_AIE_POSTINC_STORE %103, %0, %7 :: (store (<16 x s16>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %105, %19, %9 :: (store (<16 x s16>))
    %24:ptrregbank(p0) = G_AIE_POSTINC_STORE %108, %21, %12 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_CONV_2D
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0
    ; CHECK-LABEL: name: VST_CONV_2D
    ; CHECK: liveins: $p0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[VST_CONV_2D_BF16_FP32_:%[0-9]+]]:ep, [[VST_CONV_2D_BF16_FP32_1:%[0-9]+]]:edc = VST_CONV_2D_BF16_FP32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %100:accregbank(<8 x s64>) = COPY $bml0
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %19:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_STORE %103, %0, %1, %2, %3, %4 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_CONV_3D
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0
    ; CHECK-LABEL: name: VST_CONV_3D
    ; CHECK: liveins: $p0, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo4:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 5
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo5:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 6
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo6:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 7
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:eds = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo5]], %subreg.sub_dim_count, [[MOV_PD_imm10_pseudo4]], %subreg.sub_hi_dim_then_sub_dim_size, [[MOV_PD_imm10_pseudo2]], %subreg.sub_hi_dim_then_sub_dim_stride, [[MOV_PD_imm10_pseudo6]], %subreg.sub_hi_dim_then_sub_dim_count
    ; CHECK-NEXT: [[VST_CONV_3D_BF16_FP32_:%[0-9]+]]:ep, [[VST_CONV_3D_BF16_FP32_1:%[0-9]+]]:edc, [[VST_CONV_3D_BF16_FP32_2:%[0-9]+]]:edc = VST_CONV_3D_BF16_FP32 [[COPY]], [[REG_SEQUENCE]], [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edj(s20) = G_CONSTANT i20 3
    %4:edn(s20) = G_CONSTANT i20 4
    %5:edn(s20) = G_CONSTANT i20 5
    %6:edc(s20) = G_CONSTANT i20 6
    %7:edc(s20) = G_CONSTANT i20 7
    %100:accregbank(<8 x s64>) = COPY $bml0
    %103:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %19:ptrregbank(p0), %8:modregbank(s20), %9:modregbank(s20) = G_AIE_POSTINC_3D_STORE %103, %0, %1, %2, %3, %4, %6, %5, %7 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...

---
name:            VST_CONV_insertion_point
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $bml0, $amll1
    ; CHECK-LABEL: name: VST_CONV_insertion_point
    ; CHECK: liveins: $p0, $bml0, $amll1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:acc256 = COPY $amll1
    ; CHECK-NEXT: [[VST_dmw_sts_am_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_dmw_sts_am_ag_pstm_nrm_imm [[COPY2]], [[COPY]], 32 :: (store (<4 x s64>))
    ; CHECK-NEXT: [[VST_CONV_BF16_FP32_ag_pstm_nrm_imm:%[0-9]+]]:ep = VST_CONV_BF16_FP32_ag_pstm_nrm_imm [[COPY]], 32, [[COPY1]], implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<16 x s16>))
    ; CHECK-NEXT: PseudoRET implicit $lr
    %0:ptrregbank(p0) = COPY $p0
    %8:modregbank(s20) = G_CONSTANT i20 32
    %100:accregbank(<8 x s64>) = COPY $bml0
    %101:accregbank(<4 x s64>) = COPY $amll1
    %104:vregbank(<16 x s16>) = G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aie2.v16accfloat.to.v16bf16), %100:accregbank(<8 x s64>)
    %20:ptrregbank(p0) = G_AIE_POSTINC_STORE %101, %0, %8 :: (store (<4 x s64>))
    %21:ptrregbank(p0) = G_AIE_POSTINC_STORE %104, %0, %8 :: (store (<16 x s16>))
    PseudoRET implicit $lr
...
