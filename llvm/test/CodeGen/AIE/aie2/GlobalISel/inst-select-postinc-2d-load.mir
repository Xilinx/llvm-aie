# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select -o - -verify-machineinstrs %s | FileCheck %s

---
name: post-inc-2d-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda:%[0-9]+]]:er, [[LDA_2D_dms_lda1:%[0-9]+]]:ep, [[LDA_2D_dms_lda2:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s32))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_2D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:gprregbank(s32), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s32))
    PseudoRET implicit $lr, implicit %5
...

---
name: post-inc-2d-load-ext-s8
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load-ext-s8
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_S8_dmhb_lda:%[0-9]+]]:er, [[LDA_2D_S8_dmhb_lda1:%[0-9]+]]:ep, [[LDA_2D_S8_dmhb_lda2:%[0-9]+]]:edc = LDA_2D_S8_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s8))
    ; CHECK-NEXT: $r0 = COPY [[LDA_2D_S8_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %13:gprregbank(s32), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s8), align 1)
    $r0 = COPY %13
...

---
name: post-inc-2d-load-ext-s16
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load-ext-s16
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_S16_dmhb_lda:%[0-9]+]]:er, [[LDA_2D_S16_dmhb_lda1:%[0-9]+]]:ep, [[LDA_2D_S16_dmhb_lda2:%[0-9]+]]:edc = LDA_2D_S16_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s16), align 1)
    ; CHECK-NEXT: $r0 = COPY [[LDA_2D_S16_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %13:gprregbank(s32), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s16), align 1)
    $r0 = COPY %13
...
---
name: post-inc-2d-load-p0-ptr
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load-p0-ptr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda:%[0-9]+]]:ep_as_32bit, [[LDA_2D_dms_lda1:%[0-9]+]]:ep, [[LDA_2D_dms_lda2:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_2D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %13:ptrregbank(p0), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (p0), align 4)
    $p0 = COPY %13
...

---
name: post-inc-2d-load-p0-as-32bits
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load-p0-as-32bits
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda:%[0-9]+]]:ep_as_32bit, [[LDA_2D_dms_lda1:%[0-9]+]]:ep, [[LDA_2D_dms_lda2:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_2D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %13:ep_as_32bit(p0), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (p0), align 4)
    $p0 = COPY %13
...

---
name: post-inc-2d-load-p0-gpr
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load-p0-gpr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda:%[0-9]+]]:er, [[LDA_2D_dms_lda1:%[0-9]+]]:ep, [[LDA_2D_dms_lda2:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (p0), align 4)
    ; CHECK-NEXT: $p0 = COPY [[LDA_2D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %13:gprregbank(p0), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (p0), align 4)
    $p0 = COPY %13
...

---
name: post-inc-2d-load-s20-gpr
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load-s20-gpr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda:%[0-9]+]]:er, [[LDA_2D_dms_lda1:%[0-9]+]]:ep, [[LDA_2D_dms_lda2:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s20), align 4)
    ; CHECK-NEXT: $m0 = COPY [[LDA_2D_dms_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %13:gprregbank(s20), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s20), align 4)
    $m0 = COPY %13
...

---
name: post-inc-2d-load-s20
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-load-s20
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda:%[0-9]+]]:mdm_as_32bit, [[LDA_2D_dms_lda1:%[0-9]+]]:ep, [[LDA_2D_dms_lda2:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s20), align 4)
    ; CHECK-NEXT: $m0 = COPY [[LDA_2D_dms_lda]]
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda3:%[0-9]+]]:edc_as_32bit, [[LDA_2D_dms_lda4:%[0-9]+]]:ep, [[LDA_2D_dms_lda5:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE1]] :: (load (s20), align 4)
    ; CHECK-NEXT: $dc0 = COPY [[LDA_2D_dms_lda3]]
    ; CHECK-NEXT: [[REG_SEQUENCE2:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda6:%[0-9]+]]:edj_as_32bit, [[LDA_2D_dms_lda7:%[0-9]+]]:ep, [[LDA_2D_dms_lda8:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE2]] :: (load (s20), align 4)
    ; CHECK-NEXT: $dj0 = COPY [[LDA_2D_dms_lda6]]
    ; CHECK-NEXT: [[REG_SEQUENCE3:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda9:%[0-9]+]]:edn_as_32bit, [[LDA_2D_dms_lda10:%[0-9]+]]:ep, [[LDA_2D_dms_lda11:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE3]] :: (load (s20), align 4)
    ; CHECK-NEXT: $dn0 = COPY [[LDA_2D_dms_lda9]]
    ; CHECK-NEXT: [[REG_SEQUENCE4:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_dms_lda12:%[0-9]+]]:em_as_32bit, [[LDA_2D_dms_lda13:%[0-9]+]]:ep, [[LDA_2D_dms_lda14:%[0-9]+]]:edc = LDA_2D_dms_lda [[COPY]], [[REG_SEQUENCE4]] :: (load (s20), align 4)
    ; CHECK-NEXT: $m1 = COPY [[LDA_2D_dms_lda12]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %14:modregbank(s20), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s20), align 4)
    $m0 = COPY %14
    %15:edc(s20), %60:ptrregbank(p0), %70:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s20), align 4)
    $dc0 = COPY %15
    %16:edj(s20), %61:ptrregbank(p0), %71:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s20), align 4)
    $dj0 = COPY %16
    %17:edn(s20), %62:ptrregbank(p0), %72:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s20), align 4)
    $dn0 = COPY %17
    %18:em(s20), %63:ptrregbank(p0), %73:modregbank(s20) = G_AIE_POSTINC_2D_LOAD %0, %1, %2, %3, %4 :: (load (s20), align 4)
    $m1 = COPY %18
...

---
name: post-inc-2d-hbsext-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-hbsext-load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_S16_dmhb_lda:%[0-9]+]]:er, [[LDA_2D_S16_dmhb_lda1:%[0-9]+]]:ep, [[LDA_2D_S16_dmhb_lda2:%[0-9]+]]:edc = LDA_2D_S16_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s16))
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_S8_dmhb_lda:%[0-9]+]]:er, [[LDA_2D_S8_dmhb_lda1:%[0-9]+]]:ep, [[LDA_2D_S8_dmhb_lda2:%[0-9]+]]:edc = LDA_2D_S8_dmhb_lda [[COPY]], [[REG_SEQUENCE1]] :: (load (s8))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_2D_S16_dmhb_lda]], implicit [[LDA_2D_S8_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:gprregbank(s32), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_SEXTLOAD %0, %1, %2, %3, %4 :: (load (s16))
    %8:gprregbank(s32), %9:ptrregbank(p0), %10:modregbank(s20) = G_AIE_POSTINC_2D_SEXTLOAD %0, %1, %2, %3, %4 :: (load (s8))
    PseudoRET implicit $lr, implicit %5, implicit %8
...

---
name: post-inc-2d-hbzext-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: post-inc-2d-hbzext-load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 1
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo1:%[0-9]+]]:edj = MOV_PD_imm10_pseudo 2
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo2:%[0-9]+]]:edn = MOV_PD_imm10_pseudo 3
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo3:%[0-9]+]]:edc = MOV_PD_imm10_pseudo 4
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_U16_dmhb_lda:%[0-9]+]]:er, [[LDA_2D_U16_dmhb_lda1:%[0-9]+]]:ep, [[LDA_2D_U16_dmhb_lda2:%[0-9]+]]:edc = LDA_2D_U16_dmhb_lda [[COPY]], [[REG_SEQUENCE]] :: (load (s16))
    ; CHECK-NEXT: [[REG_SEQUENCE1:%[0-9]+]]:ed = REG_SEQUENCE [[MOV_PD_imm10_pseudo]], %subreg.sub_mod, [[MOV_PD_imm10_pseudo2]], %subreg.sub_dim_size, [[MOV_PD_imm10_pseudo1]], %subreg.sub_dim_stride, [[MOV_PD_imm10_pseudo3]], %subreg.sub_dim_count
    ; CHECK-NEXT: [[LDA_2D_U8_dmhb_lda:%[0-9]+]]:er, [[LDA_2D_U8_dmhb_lda1:%[0-9]+]]:ep, [[LDA_2D_U8_dmhb_lda2:%[0-9]+]]:edc = LDA_2D_U8_dmhb_lda [[COPY]], [[REG_SEQUENCE1]] :: (load (s8))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_2D_U16_dmhb_lda]], implicit [[LDA_2D_U8_dmhb_lda]]
    %0:ptrregbank(p0) = COPY $p0
    %1:em(s20) = G_CONSTANT i20 1
    %2:edj(s20) = G_CONSTANT i20 2
    %3:edn(s20) = G_CONSTANT i20 3
    %4:edc(s20) = G_CONSTANT i20 4
    %5:gprregbank(s32), %6:ptrregbank(p0), %7:modregbank(s20) = G_AIE_POSTINC_2D_ZEXTLOAD %0, %1, %2, %3, %4 :: (load (s16))
    %8:gprregbank(s32), %9:ptrregbank(p0), %10:modregbank(s20) = G_AIE_POSTINC_2D_ZEXTLOAD %0, %1, %2, %3, %4 :: (load (s8))
    PseudoRET implicit $lr, implicit %5, implicit %8
...
