; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

; The Y2 reg is used by the result type, and it overlaps with wl4 and wl5 regs.
; Therefore, %a2 cannot be passed in vl0
declare <32 x i32> @retcc_reserved_wl(<8 x i32> %a0, <8 x i32> %a1, <8 x i32> %a2)
define void @call_retcc_reserved_wl() {
  ; CHECK-LABEL: name: call_retcc_reserved_wl
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   $wl0 = COPY [[BUILD_VECTOR]](<8 x s32>)
  ; CHECK-NEXT:   $wl2 = COPY [[BUILD_VECTOR]](<8 x s32>)
  ; CHECK-NEXT:   $wl6 = COPY [[BUILD_VECTOR]](<8 x s32>)
  ; CHECK-NEXT:   JL @retcc_reserved_wl, csr_aie2, implicit-def $lr, implicit $wl0, implicit $wl2, implicit $wl6, implicit-def $y2
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  call <32 x i32> @retcc_reserved_wl(<8 x i32> zeroinitializer, <8 x i32> zeroinitializer, <8 x i32> zeroinitializer)
  ret void
}

; The Y2 reg is used by the result type, and it overlaps with the x4 and x5 regs.
; Therefore, %a2 cannot be passed in x4.
declare <32 x i32> @retcc_reserved_x(<16 x i32> %a0, <16 x i32> %a1, <16 x i32> %a2)
define void @call_retcc_reserved_x() {
  ; CHECK-LABEL: name: call_retcc_reserved_x
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   $x0 = COPY [[BUILD_VECTOR]](<16 x s32>)
  ; CHECK-NEXT:   $x2 = COPY [[BUILD_VECTOR]](<16 x s32>)
  ; CHECK-NEXT:   $x6 = COPY [[BUILD_VECTOR]](<16 x s32>)
  ; CHECK-NEXT:   JL @retcc_reserved_x, csr_aie2, implicit-def $lr, implicit $x0, implicit $x2, implicit $x6, implicit-def $y2
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  call <32 x i32> @retcc_reserved_x(<16 x i32> zeroinitializer, <16 x i32> zeroinitializer, <16 x i32> zeroinitializer)
  ret void
}

; The Y2 reg is used by the result type, and it overlaps with the Y regs
; Therefore, %a1 cannot be passed in y2.
declare <32 x i32> @retcc_reserved_y(<32 x i32> %a1)
define void @call_retcc_reserved_y() {
  ; CHECK-LABEL: name: call_retcc_reserved_y
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[BUILD_VECTOR:%[0-9]+]]:_(<32 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0
  ; CHECK-NEXT:   $y3 = COPY [[BUILD_VECTOR]](<32 x s32>)
  ; CHECK-NEXT:   JL @retcc_reserved_y, csr_aie2, implicit-def $lr, implicit $y3, implicit-def $y2
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $y2
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  call <32 x i32> @retcc_reserved_y(<32 x i32> zeroinitializer)
  ret void
}
