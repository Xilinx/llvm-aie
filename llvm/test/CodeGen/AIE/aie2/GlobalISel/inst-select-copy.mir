# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            copy_gpr
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: copy_gpr
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:er = COPY $r6
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:gprregbank(s32) = COPY $r6
    PseudoRET implicit $lr, implicit %0
...

---
name:            copy_ptr
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: copy_ptr
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:ptrregbank(p0) = COPY $p0
    PseudoRET implicit $lr, implicit %0
...

---
name:            copy_mod
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $m0
    ; CHECK-LABEL: name: copy_mod
    ; CHECK: liveins: $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:mdm = COPY $m0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:modregbank(p0) = COPY $m0
    PseudoRET implicit $lr, implicit %0
...

---
name:            copy_special
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: copy_special
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:er = COPY $sp
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:gprregbank(p0) = COPY $sp
    PseudoRET implicit $lr, implicit %0
...

---
name:            copy_constrained
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $p0
    ; CHECK-LABEL: name: copy_constrained
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:er27 = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY [[COPY]]
    ; CHECK-NEXT: $r1 = COPY [[COPY1]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:er27(s32) = COPY $r0
    %1:gprregbank(s32) = COPY %0
    $r1 = COPY %1
    PseudoRET implicit $lr, implicit %0
...

---
name:            copy_rReg_to_sReg
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $r0
    ; CHECK-LABEL: name: copy_rReg_to_sReg
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:mss = COPY [[COPY]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]], implicit [[COPY1]]
    %0:gprregbank(s32) = COPY $r0
    %1:mss(s32) = COPY %0
    PseudoRET implicit $lr, implicit %0, implicit %1
...

---
name:            copy_64bit_vec
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $l0
    ; CHECK-LABEL: name: copy_64bit_vec
    ; CHECK: liveins: $l0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:el = COPY $l0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:el = COPY $l0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:el = COPY $l0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]], implicit [[COPY1]], implicit [[COPY2]]
    %0:gprregbank(<2 x s32>) = COPY $l0
    %1:gprregbank(<4 x s16>) = COPY $l0
    %2:gprregbank(<8 x s8>) = COPY $l0
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2
...

# TODO: proper 128-bit vector support
# ---
# name:            copy_128bit_vec
# legalized:       true
# regBankSelected: true

# body: |
#   bb.0:
#     %10:gprregbank(s32) = G_CONSTANT i32 0
#     %20:vregbank(<4 x s32>) = G_BUILD_VECTOR %10, %10, %10, %10
#     %0:vregbank(<4 x s32>) = COPY %20
#     %21:vregbank(<8 x s16>) = G_BITCAST %20
#     %1:vregbank(<8 x s16>) = COPY %21
#     %22:vregbank(<16 x s8>) = G_BITCAST %20
#     %2:vregbank(<16 x s8>) = COPY %22
#     PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2
# ...

---
name:            copy_256bit_vec
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $wl0
    ; CHECK-LABEL: name: copy_256bit_vec
    ; CHECK: liveins: $wl0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec256 = COPY $wl0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]], implicit [[COPY1]], implicit [[COPY2]]
    %0:vregbank(<8 x s32>) = COPY $wl0
    %1:vregbank(<16 x s16>) = COPY $wl0
    %2:vregbank(<32 x s8>) = COPY $wl0
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2
...

---
name:            copy_512bit_vec
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: copy_512bit_vec
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec512 = COPY $x0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]], implicit [[COPY1]], implicit [[COPY2]]
    %0:vregbank(<16 x s32>) = COPY $x0
    %1:vregbank(<32 x s16>) = COPY $x0
    %2:vregbank(<64 x s8>) = COPY $x0
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2
...

---
name:            copy_1024bit_vec
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $y2
    ; CHECK-LABEL: name: copy_1024bit_vec
    ; CHECK: liveins: $y2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vec1024 = COPY $y2
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]], implicit [[COPY1]], implicit [[COPY2]]
    %0:vregbank(<32 x s32>) = COPY $y2
    %1:vregbank(<64 x s16>) = COPY $y2
    %2:vregbank(<128 x s8>) = COPY $y2
    PseudoRET implicit $lr, implicit %0, implicit %1, implicit %2
...

---
name:            copy_256bit_acc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $amll0
    ; CHECK-LABEL: name: copy_256bit_acc
    ; CHECK: liveins: $amll0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc256 = COPY $wl0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:accregbank(<4 x s64>) = COPY $wl0
    PseudoRET implicit $lr, implicit %0
...

---
name:            copy_512bit_acc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $bml0
    ; CHECK-LABEL: name: copy_512bit_acc
    ; CHECK: liveins: $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc512 = COPY $bml0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:accregbank(<8 x s64>) = COPY $bml0
    PseudoRET implicit $lr, implicit %0
...

---
name:            copy_1024bit_acc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $cm0
    ; CHECK-LABEL: name: copy_1024bit_acc
    ; CHECK: liveins: $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:acc1024 = COPY $cm0
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[COPY]]
    %0:accregbank(<16 x s64>) = COPY $cm0
    PseudoRET implicit $lr, implicit %0
...
