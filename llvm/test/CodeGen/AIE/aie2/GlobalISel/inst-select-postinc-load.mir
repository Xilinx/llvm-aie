# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select -o - -verify-machineinstrs %s | FileCheck %s

---
name: post-inc-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0
    ; CHECK-LABEL: name: post-inc-load
    ; CHECK: liveins: $p0, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_dms_lda_pstm_nrm:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm1:%[0-9]+]]:ep = LDA_dms_lda_pstm_nrm [[COPY]], [[COPY1]] :: (load (s32))
    ; CHECK-NEXT: [[LDA_dms_lda_pstm_nrm2:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm3:%[0-9]+]]:ep = LDA_dms_lda_pstm_nrm [[LDA_dms_lda_pstm_nrm1]], [[MOV_PD_imm10_pseudo]] :: (load (s32))
    ; CHECK-NEXT: [[LDA_dms_lda_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm_imm1:%[0-9]+]]:ep = LDA_dms_lda_pstm_nrm_imm [[COPY]], 16 :: (load (s32))
    ; CHECK-NEXT: [[LDA_dms_lda_pstm_nrm_imm2:%[0-9]+]]:ep_as_32bit, [[LDA_dms_lda_pstm_nrm_imm3:%[0-9]+]]:ep = LDA_dms_lda_pstm_nrm_imm [[COPY]], 16 :: (load (p0), align 4)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_dms_lda_pstm_nrm]], implicit [[LDA_dms_lda_pstm_nrm2]], implicit [[LDA_dms_lda_pstm_nrm_imm]], implicit [[LDA_dms_lda_pstm_nrm_imm2]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 16
    %8:gprregbank(s32), %11:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %5 :: (load (s32))
    %9:gprregbank(s32), %12:ptrregbank(p0) = G_AIE_POSTINC_LOAD %11, %6 :: (load (s32))
    %10:gprregbank(s32), %13:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (s32))
    %14:ptrregbank(p0), %15:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (p0))
    PseudoRET implicit $lr, implicit %8, implicit %9, implicit %10, implicit %14
...


---
name: post-inc-load-ext-s8-s16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0
    ; CHECK-LABEL: name: post-inc-load-ext-s8-s16
    ; CHECK: liveins: $p0, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_S8_ag_pstm_nrm:%[0-9]+]]:er, [[LDA_S8_ag_pstm_nrm1:%[0-9]+]]:ep = LDA_S8_ag_pstm_nrm [[COPY]], [[COPY1]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S16_ag_pstm_nrm:%[0-9]+]]:er, [[LDA_S16_ag_pstm_nrm1:%[0-9]+]]:ep = LDA_S16_ag_pstm_nrm [[COPY]], [[COPY1]] :: (load (s16), align 1)
    ; CHECK-NEXT: [[LDA_S8_ag_pstm_nrm2:%[0-9]+]]:er, [[LDA_S8_ag_pstm_nrm3:%[0-9]+]]:ep = LDA_S8_ag_pstm_nrm [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S16_ag_pstm_nrm2:%[0-9]+]]:er, [[LDA_S16_ag_pstm_nrm3:%[0-9]+]]:ep = LDA_S16_ag_pstm_nrm [[COPY]], [[MOV_PD_imm10_pseudo]] :: (load (s16), align 1)
    ; CHECK-NEXT: [[LDA_S8_ag_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_S8_ag_pstm_nrm_imm1:%[0-9]+]]:ep = LDA_S8_ag_pstm_nrm_imm [[COPY]], -3 :: (load (s8))
    ; CHECK-NEXT: [[LDA_S16_ag_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_S16_ag_pstm_nrm_imm1:%[0-9]+]]:ep = LDA_S16_ag_pstm_nrm_imm [[COPY]], -3 :: (load (s16), align 1)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_S8_ag_pstm_nrm]], implicit [[LDA_S16_ag_pstm_nrm]], implicit [[LDA_S8_ag_pstm_nrm2]], implicit [[LDA_S16_ag_pstm_nrm2]], implicit [[LDA_S8_ag_pstm_nrm_imm]], implicit [[LDA_S16_ag_pstm_nrm_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 -3
    %8:gprregbank(s32), %11:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %5 :: (load (s8), align 1)
    %80:gprregbank(s32), %12:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %5 :: (load (s16), align 1)
    %81:gprregbank(s32), %111:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %6 :: (load (s8), align 1)
    %801:gprregbank(s32), %121:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %6 :: (load (s16), align 1)
    %82:gprregbank(s32), %112:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (s8), align 1)
    %802:gprregbank(s32), %122:ptrregbank(p0) = G_AIE_POSTINC_LOAD %0, %7 :: (load (s16), align 1)
    PseudoRET implicit $lr, implicit %8, implicit %80, implicit %81, implicit %801, implicit %82, implicit %802
...

---
name: post-inc-hbzext-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0
    ; CHECK-LABEL: name: post-inc-hbzext-load
    ; CHECK: liveins: $p0, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_U8_ag_pstm_nrm:%[0-9]+]]:er, [[LDA_U8_ag_pstm_nrm1:%[0-9]+]]:ep = LDA_U8_ag_pstm_nrm [[COPY]], [[COPY1]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_U8_ag_pstm_nrm2:%[0-9]+]]:er, [[LDA_U8_ag_pstm_nrm3:%[0-9]+]]:ep = LDA_U8_ag_pstm_nrm [[LDA_U8_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_U8_ag_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_U8_ag_pstm_nrm_imm1:%[0-9]+]]:ep = LDA_U8_ag_pstm_nrm_imm [[LDA_U8_ag_pstm_nrm3]], -3 :: (load (s8))
    ; CHECK-NEXT: [[LDA_U16_ag_pstm_nrm:%[0-9]+]]:er, [[LDA_U16_ag_pstm_nrm1:%[0-9]+]]:ep = LDA_U16_ag_pstm_nrm [[COPY]], [[COPY1]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_U16_ag_pstm_nrm2:%[0-9]+]]:er, [[LDA_U16_ag_pstm_nrm3:%[0-9]+]]:ep = LDA_U16_ag_pstm_nrm [[LDA_U16_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_U16_ag_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_U16_ag_pstm_nrm_imm1:%[0-9]+]]:ep = LDA_U16_ag_pstm_nrm_imm [[COPY]], -3 :: (load (s16))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_U8_ag_pstm_nrm]], implicit [[LDA_U8_ag_pstm_nrm2]], implicit [[LDA_U8_ag_pstm_nrm_imm]], implicit [[LDA_U16_ag_pstm_nrm]], implicit [[LDA_U16_ag_pstm_nrm2]], implicit [[LDA_U16_ag_pstm_nrm_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 -3
    %8:gprregbank(s32), %14:ptrregbank(p0) = G_AIE_POSTINC_ZEXTLOAD %0, %5 :: (load (s8))
    %9:gprregbank(s32), %15:ptrregbank(p0) = G_AIE_POSTINC_ZEXTLOAD %14, %6 :: (load (s8))
    %10:gprregbank(s32), %16:ptrregbank(p0) = G_AIE_POSTINC_ZEXTLOAD %15, %7 :: (load (s8))
    %11:gprregbank(s32), %17:ptrregbank(p0) = G_AIE_POSTINC_ZEXTLOAD %0, %5 :: (load (s16))
    %12:gprregbank(s32), %18:ptrregbank(p0) = G_AIE_POSTINC_ZEXTLOAD %17, %6 :: (load (s16))
    %13:gprregbank(s32), %19:ptrregbank(p0) = G_AIE_POSTINC_ZEXTLOAD %0, %7 :: (load (s16))
    PseudoRET implicit $lr, implicit %8, implicit %9, implicit %10, implicit %11, implicit %12, implicit %13
...


---
name: post-inc-hbsext-load
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $p0, $m0
    ; CHECK-LABEL: name: post-inc-hbsext-load
    ; CHECK: liveins: $p0, $m0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:em = COPY $m0
    ; CHECK-NEXT: [[MOV_PD_imm10_pseudo:%[0-9]+]]:em = MOV_PD_imm10_pseudo 10
    ; CHECK-NEXT: [[LDA_S8_ag_pstm_nrm:%[0-9]+]]:er, [[LDA_S8_ag_pstm_nrm1:%[0-9]+]]:ep = LDA_S8_ag_pstm_nrm [[COPY]], [[COPY1]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S8_ag_pstm_nrm2:%[0-9]+]]:er, [[LDA_S8_ag_pstm_nrm3:%[0-9]+]]:ep = LDA_S8_ag_pstm_nrm [[LDA_S8_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]] :: (load (s8))
    ; CHECK-NEXT: [[LDA_S8_ag_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_S8_ag_pstm_nrm_imm1:%[0-9]+]]:ep = LDA_S8_ag_pstm_nrm_imm [[LDA_S8_ag_pstm_nrm3]], -3 :: (load (s8))
    ; CHECK-NEXT: [[LDA_S16_ag_pstm_nrm:%[0-9]+]]:er, [[LDA_S16_ag_pstm_nrm1:%[0-9]+]]:ep = LDA_S16_ag_pstm_nrm [[COPY]], [[COPY1]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_S16_ag_pstm_nrm2:%[0-9]+]]:er, [[LDA_S16_ag_pstm_nrm3:%[0-9]+]]:ep = LDA_S16_ag_pstm_nrm [[LDA_S16_ag_pstm_nrm1]], [[MOV_PD_imm10_pseudo]] :: (load (s16))
    ; CHECK-NEXT: [[LDA_S16_ag_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_S16_ag_pstm_nrm_imm1:%[0-9]+]]:ep = LDA_S16_ag_pstm_nrm_imm [[COPY]], -3 :: (load (s16))
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[LDA_S8_ag_pstm_nrm]], implicit [[LDA_S8_ag_pstm_nrm2]], implicit [[LDA_S8_ag_pstm_nrm_imm]], implicit [[LDA_S16_ag_pstm_nrm]], implicit [[LDA_S16_ag_pstm_nrm2]], implicit [[LDA_S16_ag_pstm_nrm_imm]]
    %0:ptrregbank(p0) = COPY $p0
    %5:modregbank(s20) = COPY $m0
    %6:modregbank(s20) = G_CONSTANT i20 10
    %7:modregbank(s20) = G_CONSTANT i20 -3
    %8:gprregbank(s32), %14:ptrregbank(p0) = G_AIE_POSTINC_SEXTLOAD %0, %5 :: (load (s8))
    %9:gprregbank(s32), %15:ptrregbank(p0) = G_AIE_POSTINC_SEXTLOAD %14, %6 :: (load (s8))
    %10:gprregbank(s32), %16:ptrregbank(p0) = G_AIE_POSTINC_SEXTLOAD %15, %7 :: (load (s8))
    %11:gprregbank(s32), %17:ptrregbank(p0) = G_AIE_POSTINC_SEXTLOAD %0, %5 :: (load (s16))
    %12:gprregbank(s32), %18:ptrregbank(p0) = G_AIE_POSTINC_SEXTLOAD %17, %6 :: (load (s16))
    %13:gprregbank(s32), %19:ptrregbank(p0) = G_AIE_POSTINC_SEXTLOAD %0, %7 :: (load (s16))
    PseudoRET implicit $lr, implicit %8, implicit %9, implicit %10, implicit %11, implicit %12, implicit %13
...
