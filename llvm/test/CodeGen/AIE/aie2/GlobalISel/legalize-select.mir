# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=legalizer %s -verify-machineinstrs -o - | FileCheck %s

---
name:            select_vec_256
body:             |
  bb.1.entry:
    liveins: $r0, $wl0, $wh3
    ; CHECK-LABEL: name: select_vec_256
    ; CHECK: liveins: $r0, $wl0, $wh3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<32 x s8>) = COPY $wl0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<32 x s8>) = COPY $wh3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<32 x s8>) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[SELECT]](<32 x s8>)
    %0:_(s32) = COPY $r0
    %1:_(s1) = G_TRUNC %0:_(s32)
    %2:_(<32 x s8>) = COPY $wl0
    %3:_(<32 x s8>) = COPY $wh3
    %4:_(<32 x s8>) = G_SELECT %1:_(s1), %2(<32 x s8>), %3(<32 x s8>)
    PseudoRET implicit $lr, implicit %4
...

---
name:            select_vec_512
body:             |
  bb.1.entry:
    liveins: $r0, $x0, $x1
    ; CHECK-LABEL: name: select_vec_512
    ; CHECK: liveins: $r0, $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<64 x s8>) = COPY $x0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<64 x s8>) = COPY $x1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<64 x s8>) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[SELECT]](<64 x s8>)
    %0:_(s32) = COPY $r0
    %1:_(s1) = G_TRUNC %0:_(s32)
    %2:_(<64 x s8>) = COPY $x0
    %3:_(<64 x s8>) = COPY $x1
    %4:_(<64 x s8>) = G_SELECT %1:_(s1), %2(<64 x s8>), %3(<64 x s8>)
    PseudoRET implicit $lr, implicit %4
...

---
name:            select_vec_1024
body:             |
  bb.1.entry:
    liveins: $r0, $y2, $y5
    ; CHECK-LABEL: name: select_vec_1024
    ; CHECK: liveins: $r0, $y2, $y5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<64 x s16>) = COPY $y5
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<64 x s16>) = COPY $y2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<64 x s16>) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[SELECT]](<64 x s16>)
    %0:_(s32) = COPY $r0
    %1:_(s1) = G_TRUNC %0:_(s32)
    %2:_(<64 x s16>) = COPY $y5
    %3:_(<64 x s16>) = COPY $y2
    %4:_(<64 x s16>) = G_SELECT %1:_(s1), %2(<64 x s16>), %3(<64 x s16>)
    PseudoRET implicit $lr, implicit %4
...

---
name:            select_acc_256
body:             |
  bb.1.entry:
    liveins: $r0, $amll0, $amll1
    ; CHECK-LABEL: name: select_acc_256
    ; CHECK: liveins: $r0, $amll0, $amll1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<4 x s64>) = COPY $amll0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<4 x s64>) = COPY $amll1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x s32>) = G_BITCAST [[COPY1]](<4 x s64>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<8 x s32>) = G_BITCAST [[COPY2]](<4 x s64>)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<8 x s32>) = G_SELECT [[AND]](s32), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x s64>) = G_BITCAST [[SELECT]](<8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST2]](<4 x s64>)
    %0:_(s32) = COPY $r0
    %1:_(s1) = G_TRUNC %0:_(s32)
    %2:_(<4 x s64>) = COPY $amll0
    %3:_(<4 x s64>) = COPY $amll1
    %4:_(<4 x s64>) = G_SELECT %1:_(s1), %2(<4 x s64>), %3(<4 x s64>)
    PseudoRET implicit $lr, implicit %4
...

---
name:            select_acc_512
body:             |
  bb.1.entry:
    liveins: $r0, $bml0, $bml1
    ; CHECK-LABEL: name: select_acc_512
    ; CHECK: liveins: $r0, $bml0, $bml1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<8 x s64>) = COPY $bml0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<8 x s64>) = COPY $bml1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<16 x s32>) = G_BITCAST [[COPY1]](<8 x s64>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<16 x s32>) = G_BITCAST [[COPY2]](<8 x s64>)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<16 x s32>) = G_SELECT [[AND]](s32), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<8 x s64>) = G_BITCAST [[SELECT]](<16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST2]](<8 x s64>)
    %0:_(s32) = COPY $r0
    %1:_(s1) = G_TRUNC %0:_(s32)
    %2:_(<8 x s64>) = COPY $bml0
    %3:_(<8 x s64>) = COPY $bml1
    %4:_(<8 x s64>) = G_SELECT %1:_(s1), %2(<8 x s64>), %3(<8 x s64>)
    PseudoRET implicit $lr, implicit %4
...

---
name:            select_acc_1024
body:             |
  bb.1.entry:
    liveins: $r0, $cm0, $cm1
    ; CHECK-LABEL: name: select_acc_1024
    ; CHECK: liveins: $r0, $cm0, $cm1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<16 x s64>) = COPY $cm0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<16 x s64>) = COPY $cm1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<32 x s32>) = G_BITCAST [[COPY1]](<16 x s64>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<32 x s32>) = G_BITCAST [[COPY2]](<16 x s64>)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<32 x s32>) = G_SELECT [[AND]](s32), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<16 x s64>) = G_BITCAST [[SELECT]](<32 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit [[BITCAST2]](<16 x s64>)
    %0:_(s32) = COPY $r0
    %1:_(s1) = G_TRUNC %0:_(s32)
    %2:_(<16 x s64>) = COPY $cm0
    %3:_(<16 x s64>) = COPY $cm1
    %4:_(<16 x s64>) = G_SELECT %1:_(s1), %2(<16 x s64>), %3(<16 x s64>)
    PseudoRET implicit $lr, implicit %4
...
