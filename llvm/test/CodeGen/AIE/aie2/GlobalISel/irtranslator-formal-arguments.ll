; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --print-fixed-stack
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s


@g_ptr_1 = global i1 0
@g_ptr_8 = global i8 0
@g_ptr_16 = global i16 0
@g_ptr_32 = global i32 0
@g_ptr_64 = global i64 0
@g_ptr_128 = global i128 0

define void @test_unreachable(i32 %a) {
  ; CHECK-LABEL: name: test_unreachable
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  unreachable
}

define void @test_arg_i32(i32 %a) {
  ; CHECK-LABEL: name: test_arg_i32
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_32
  ; CHECK-NEXT:   G_STORE [[COPY]](s32), [[GV]](p0) :: (store (s32) into @g_ptr_32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i32 %a, i32* @g_ptr_32
  ret void
}

define void @test_arg_i64(i64 %a) {
  ; CHECK-LABEL: name: test_arg_i64
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_64
  ; CHECK-NEXT:   G_STORE [[MV]](s64), [[GV]](p0) :: (store (s64) into @g_ptr_64, align 4)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i64 %a, i64* @g_ptr_64
  ret void
}

define void @test_arg_i128([3 x i128] %b, i128 %a) {
  ; CHECK-LABEL: name: test_arg_i128
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $q0, $q1, $q2, $q3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s128) = COPY $q1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s128) = COPY $q3
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_128
  ; CHECK-NEXT:   G_STORE [[COPY3]](s128), [[GV]](p0) :: (store (s128) into @g_ptr_128, align 4)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i128 %a, i128* @g_ptr_128
  ret void
}

define void @test_arg_i128_stack([4 x i128] %a, i128 %stack) {
  ; CHECK-LABEL: name: test_arg_i128_stack
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -16, size: 16, alignment: 16, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $q0, $q1, $q2, $q3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s128) = COPY $q0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s128) = COPY $q2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s128) = COPY $q1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s128) = COPY $q3
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s128) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s128) from %fixed-stack.0)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_128
  ; CHECK-NEXT:   G_STORE [[LOAD]](s128), [[GV]](p0) :: (store (s128) into @g_ptr_128, align 4)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i128 %stack, i128* @g_ptr_128
  ret void
}

define void @test_arg_i1(i1 %a) {
  ; CHECK-LABEL: name: test_arg_i1
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_1
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s1), [[GV]](p0) :: (store (s1) into @g_ptr_1)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i1 %a, i1* @g_ptr_1
  ret void
}

define void @test_arg_i1_zeroext(i1 zeroext %a) {
  ; CHECK-LABEL: name: test_arg_i1_zeroext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[COPY]], 1
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_1
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s1), [[GV]](p0) :: (store (s1) into @g_ptr_1)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i1 %a, i1* @g_ptr_1
  ret void
}

define void @test_arg_i1_signext(i1 signext %a) {
  ; CHECK-LABEL: name: test_arg_i1_signext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[COPY]], 1
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_1
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s1), [[GV]](p0) :: (store (s1) into @g_ptr_1)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i1 %a, i1* @g_ptr_1
  ret void
}

define void @test_arg_i8_anyext(i8 %a) {
  ; CHECK-LABEL: name: test_arg_i8_anyext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_8
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s8), [[GV]](p0) :: (store (s8) into @g_ptr_8)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i8 %a, i8* @g_ptr_8
  ret void
}

define void @test_arg_i8_signext(i8 signext %a) {
  ; CHECK-LABEL: name: test_arg_i8_signext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[COPY]], 8
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_8
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s8), [[GV]](p0) :: (store (s8) into @g_ptr_8)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i8 %a, i8* @g_ptr_8
  ret void
}

define void @test_arg_i8_zeroext(i8 zeroext %a) {
  ; CHECK-LABEL: name: test_arg_i8_zeroext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[COPY]], 8
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_8
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s8), [[GV]](p0) :: (store (s8) into @g_ptr_8)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i8 %a, i8* @g_ptr_8
  ret void
}

define void @test_arg_i16_anyext(i16 %a) {
  ; CHECK-LABEL: name: test_arg_i16_anyext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_16
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s16), [[GV]](p0) :: (store (s16) into @g_ptr_16)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i16 %a, i16* @g_ptr_16
  ret void
}

define void @test_arg_i16_signext(i16 signext %a) {
  ; CHECK-LABEL: name: test_arg_i16_signext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[COPY]], 16
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_16
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s16), [[GV]](p0) :: (store (s16) into @g_ptr_16)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i16 %a, i16* @g_ptr_16
  ret void
}

define void @test_arg_i16_zeroext(i16 zeroext %a) {
  ; CHECK-LABEL: name: test_arg_i16_zeroext
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[COPY]], 16
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_16
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s16), [[GV]](p0) :: (store (s16) into @g_ptr_16)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i16 %a, i16* @g_ptr_16
  ret void
}

define void @test_arg_ptr(i8* %a) {
  ; CHECK-LABEL: name: test_arg_ptr
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; CHECK-NEXT:   G_STORE [[C]](s8), [[COPY]](p0) :: (store (s8) into %ir.a)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i8 1, i8* %a
  ret void
}

define void @test_arg_float(float %a) {
  ; CHECK-LABEL: name: test_arg_float
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

define void @test_arg_double(double %a) {
  ; CHECK-LABEL: name: test_arg_double
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

define void @test_arg_max_reg(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8,
  ; CHECK-LABEL: name: test_arg_max_reg
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $p3, $p4, $p5, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:_(p0) = COPY $p2
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:_(p0) = COPY $p3
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:_(p0) = COPY $p4
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:_(p0) = COPY $p5
  ; CHECK-NEXT:   PseudoRET implicit $lr
                              i8* %ptr1, i8* %ptr2, i8* %ptr3, i8* %ptr4, i8* %ptr5, i8* %ptr6) {
  ret void
}

define void @test_arg_stack_i1([8 x i32] %regs, i1 %stack) {
  ; CHECK-LABEL: name: test_arg_stack_i1
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -4, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[LOAD]](s32)
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_1
  ; CHECK-NEXT:   G_STORE [[TRUNC]](s1), [[GV]](p0) :: (store (s1) into @g_ptr_1)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i1 %stack, i1* @g_ptr_1
  ret void
}

define void @test_arg_stack_i8([8 x i32] %regs, i8 %stack1, i8 signext %stack2, i8 zeroext %stack3) {
  ; CHECK-LABEL: name: test_arg_stack_i8
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -12, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -8, size: 4, alignment: 8, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 2, type: default, offset: -4, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.2
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32) from %fixed-stack.2)
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD]](s32)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s32) from %fixed-stack.1, align 8)
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[LOAD1]], 8
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   [[FRAME_INDEX2:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX2]](p0) :: (invariant load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[LOAD2]], 8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

define void @test_arg_stack_i16([8 x i32] %regs, i16 %stack1, i16 signext %stack2, i16 zeroext %stack3) {
  ; CHECK-LABEL: name: test_arg_stack_i16
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -12, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -8, size: 4, alignment: 8, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 2, type: default, offset: -4, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.2
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32) from %fixed-stack.2)
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[LOAD]](s32)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s32) from %fixed-stack.1, align 8)
  ; CHECK-NEXT:   [[ASSERT_SEXT:%[0-9]+]]:_(s32) = G_ASSERT_SEXT [[LOAD1]], 16
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[ASSERT_SEXT]](s32)
  ; CHECK-NEXT:   [[FRAME_INDEX2:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX2]](p0) :: (invariant load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   [[ASSERT_ZEXT:%[0-9]+]]:_(s32) = G_ASSERT_ZEXT [[LOAD2]], 16
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[ASSERT_ZEXT]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

define void @test_arg_stack_i32([8 x i32] %regs, i32 %stack) {
  ; CHECK-LABEL: name: test_arg_stack_i32
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -4, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

define void @test_arg_stack_i64([8 x i32] %regs, i64 %stack) {
  ; CHECK-LABEL: name: test_arg_stack_i64
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -4, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -8, size: 4, alignment: 8, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32) from %fixed-stack.1, align 8)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[LOAD]](s32), [[LOAD1]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  ret void
}

define void @test_arg_stack_ptr(i8* %p0, i8* %p1, i8* %p2, i8* %p3, i8* %p4, i8* %p5, i8* %stack) {
  ; CHECK-LABEL: name: test_arg_stack_ptr
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -4, size: 3, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $p0, $p1, $p2, $p3, $p4, $p5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(p0) = COPY $p2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(p0) = COPY $p3
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(p0) = COPY $p4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(p0) = COPY $p5
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(p0) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (p0) from %fixed-stack.0, align 4)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; CHECK-NEXT:   G_STORE [[C]](s8), [[LOAD]](p0) :: (store (s8) into %ir.stack)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i8 1, i8* %stack
  ret void
}

; FIXME
; %stack crosses the Stack-Reg boundary (for AIE2), it should go on the stack.
; %r7 can be passed "out-of-order" in the remaining r7 GPR.
define void @test_cross_stack_reg_boundary(i64 %r01, i64 %r23, i64 %r45, i32 %r6, i64 %stack, i32 %r7) {
  ; CHECK-LABEL: name: test_cross_stack_reg_boundary
  ; CHECK: fixedStack:
  ; CHECK-NEXT:   - { id: 0, type: default, offset: -4, size: 4, alignment: 4, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK-NEXT:   - { id: 1, type: default, offset: -8, size: 4, alignment: 8, stack-id: default, 
  ; CHECK-NEXT:       isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true, 
  ; CHECK-NEXT:       debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r1
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[MV1:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY2]](s32), [[COPY3]](s32)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[MV2:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY4]](s32), [[COPY5]](s32)
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32) from %fixed-stack.1, align 8)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX1]](p0) :: (invariant load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   [[MV3:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[LOAD]](s32), [[LOAD1]](s32)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @g_ptr_64
  ; CHECK-NEXT:   G_STORE [[MV3]](s64), [[GV]](p0) :: (store (s64) into @g_ptr_64, align 4)
  ; CHECK-NEXT:   PseudoRET implicit $lr
  store i64 %stack, i64* @g_ptr_64
  ret void
}

; r0 and r1 are reserved by the RetCC
; (AIE2) Parameters are now passed from r2
define i64 @test_retcc_reserved_GPRs(i32 %r2) {
  ; CHECK-LABEL: name: test_retcc_reserved_GPRs
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[COPY]](s32)
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[SEXT]](s64)
  ; CHECK-NEXT:   $r0 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r1 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $r0, implicit $r1
  %tmp = sext i32 %r2 to i64
  ret i64 %tmp
}

; p0 is reserved by the RetCC
; Parameters are now passed from p1
define i32* @test_retcc_reserved_PTRs(i32* %p1) {
  ; CHECK-LABEL: name: test_retcc_reserved_PTRs
  ; CHECK: fixedStack:
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $p1
  ; CHECK-NEXT:   $p0 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit $p0
  ret i32* %p1
}
