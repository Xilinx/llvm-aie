# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 -run-pass=instruction-select %s -verify-machineinstrs -o - | FileCheck %s

---
name:            vunpack.d16.d8
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $wl2
    ; CHECK-LABEL: name: vunpack.d16.d8
    ; CHECK: liveins: $r0, $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY1]]
    ; CHECK-NEXT: [[VUNPACK_D16_D8_:%[0-9]+]]:vec512 = VUNPACK_D16_D8 [[COPY]], implicit $crunpacksign
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $x0 = COPY [[VUNPACK_D16_D8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %3:gprregbank(s32) = COPY $r0
    %4:gprregbank(s32) = G_ASSERT_ZEXT %3:gprregbank, 1
    %0:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %1:vregbank(<32 x s8>), %4:gprregbank(s32)
    $x0 = COPY %0:vregbank(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            vunpack.d8.d4
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $r0, $wl2
    ; CHECK-LABEL: name: vunpack.d8.d4
    ; CHECK: liveins: $r0, $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:er = COPY $r0
    ; CHECK-NEXT: $crunpacksign = COPY [[COPY1]]
    ; CHECK-NEXT: [[VUNPACK_D8_D4_:%[0-9]+]]:vec512 = VUNPACK_D8_D4 [[COPY]], implicit $crunpacksign
    ; CHECK-NEXT: $crunpacksign = MOV_scalar_imm10_pseudo 0
    ; CHECK-NEXT: $x0 = COPY [[VUNPACK_D8_D4_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %3:gprregbank(s32) = COPY $r0
    %4:gprregbank(s32) = G_ASSERT_ZEXT %3:gprregbank, 1
    %6:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %1:vregbank(<32 x s8>), %4:gprregbank(s32)
    %0:vregbank(<64 x s8>) = G_BITCAST %6:vregbank(<32 x s16>)
    $x0 = COPY %0:vregbank(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            vunpack8_signed
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl2
    ; CHECK-LABEL: name: vunpack8_signed
    ; CHECK: liveins: $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[VUNPACK_S16_S8_:%[0-9]+]]:vec512 = VUNPACK_S16_S8 [[COPY]]
    ; CHECK-NEXT: $x0 = COPY [[VUNPACK_S16_S8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %2:gprregbank(s32) = G_CONSTANT i32 1
    %0:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %1:vregbank(<32 x s8>), %2:gprregbank(s32)
    $x0 = COPY %0:vregbank(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            vunpack8_unsigned
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl2
    ; CHECK-LABEL: name: vunpack8_unsigned
    ; CHECK: liveins: $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[VUNPACK_D16_D8_:%[0-9]+]]:vec512 = VUNPACK_D16_D8 [[COPY]], implicit $crunpacksign
    ; CHECK-NEXT: $x0 = COPY [[VUNPACK_D16_D8_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %2:gprregbank(s32) = G_CONSTANT i32 0
    %0:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I16.I8), %1:vregbank(<32 x s8>), %2:gprregbank(s32)
    $x0 = COPY %0:vregbank(<32 x s16>)
    PseudoRET implicit $lr, implicit $x0
...

---
name:            vunpack4_singed
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl2
    ; CHECK-LABEL: name: vunpack4_singed
    ; CHECK: liveins: $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[VUNPACK_S8_S4_:%[0-9]+]]:vec512 = VUNPACK_S8_S4 [[COPY]]
    ; CHECK-NEXT: $x0 = COPY [[VUNPACK_S8_S4_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %3:gprregbank(s32) = G_CONSTANT i32 1
    %2:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %1:vregbank(<32 x s8>), %3:gprregbank(s32)
    %0:vregbank(<64 x s8>) = G_BITCAST %2:vregbank(<32 x s16>)
    $x0 = COPY %0:vregbank(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0
...

...

---
name:            vunpack4_unsigned
alignment:       16
legalized:       true
regBankSelected: true
body:             |
  bb.1.entry:
    liveins: $wl2
    ; CHECK-LABEL: name: vunpack4_unsigned
    ; CHECK: liveins: $wl2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vec256 = COPY $wl2
    ; CHECK-NEXT: [[VUNPACK_D8_D4_:%[0-9]+]]:vec512 = VUNPACK_D8_D4 [[COPY]], implicit $crunpacksign
    ; CHECK-NEXT: $x0 = COPY [[VUNPACK_D8_D4_]]
    ; CHECK-NEXT: PseudoRET implicit $lr, implicit $x0
    %1:vregbank(<32 x s8>) = COPY $wl2
    %3:gprregbank(s32) = G_CONSTANT i32 0
    %2:vregbank(<32 x s16>) = G_INTRINSIC intrinsic(@llvm.aie2.unpack.I8.I4), %1:vregbank(<32 x s8>), %3:gprregbank(s32)
    %0:vregbank(<64 x s8>) = G_BITCAST %2:vregbank(<32 x s16>)
    $x0 = COPY %0:vregbank(<64 x s8>)
    PseudoRET implicit $lr, implicit $x0
...
