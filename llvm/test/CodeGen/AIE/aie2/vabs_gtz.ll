; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s

define dso_local noundef <64 x i8> @_Z20test_abs_gtz_v64int8Dv64_abRy(<64 x i8> noundef %a, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(8) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z20test_abs_gtz_v64int8Dv64_abRy:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vabs_gtz.d8 x0, r25:r24, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vabs.gtz8(<64 x i8> %a, i32 %conv.i)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define dso_local noundef <64 x i8> @_Z27test_abs_gtz_v64uint8_sign0Dv64_hRy(<64 x i8> noundef %a, ptr nocapture nonnull writeonly align 4 dereferenceable(8) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z27test_abs_gtz_v64uint8_sign0Dv64_hRy:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    vabs_gtz.d8 x0, r25:r24, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vabs.gtz8(<64 x i8> %a, i32 0)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define dso_local noundef <64 x i8> @_Z27test_abs_gtz_v64uint8_sign1Dv64_hRy(<64 x i8> noundef %a, ptr nocapture nonnull writeonly align 4 dereferenceable(8) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z27test_abs_gtz_v64uint8_sign1Dv64_hRy:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    vabs_gtz.s8 x0, r25:r24, x2 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vabs.gtz8(<64 x i8> %a, i32 1)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define dso_local noundef <32 x i16> @_Z22test_abs_gtz_v32uint16Dv32_tbRj(<32 x i16> noundef %a, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z22test_abs_gtz_v32uint16Dv32_tbRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vabs_gtz.d16 x0, r16, x2 // Delay Slot 5
; CHECK-NEXT:    mov.d2 r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vabs.gtz16(<32 x i16> %a, i32 %conv.i)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define dso_local noundef <32 x i16> @_Z28test_abs_gtz_v32uint16_sign0Dv32_tRj(<32 x i16> noundef %a, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z28test_abs_gtz_v32uint16_sign0Dv32_tRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vabs_gtz.d16 x0, r16, x2 // Delay Slot 4
; CHECK-NEXT:    mov.d1 r0, r16 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vabs.gtz16(<32 x i16> %a, i32 0)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define dso_local noundef <32 x i16> @_Z28test_abs_gtz_v32uint16_sign1Dv32_tRj(<32 x i16> noundef %a, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z28test_abs_gtz_v32uint16_sign1Dv32_tRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vabs_gtz.s16 x0, r16, x2 // Delay Slot 4
; CHECK-NEXT:    mov.d1 r0, r16 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vabs.gtz16(<32 x i16> %a, i32 1)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define dso_local noundef <16 x i32> @_Z21test_abs_gtz_v16int32Dv16_ibRj(<16 x i32> noundef %a, i1 noundef zeroext %sgn, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z21test_abs_gtz_v16int32Dv16_ibRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopx ; mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vabs_gtz.d32 x0, r16, x2 // Delay Slot 5
; CHECK-NEXT:    mov.d2 r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vabs.gtz32(<16 x i32> %a, i32 %conv.i)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

define dso_local noundef <16 x i32> @_Z27test_abs_gtz_v16int32_sign0Dv16_iRj(<16 x i32> noundef %a, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z27test_abs_gtz_v16int32_sign0Dv16_iRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vabs_gtz.d32 x0, r16, x2 // Delay Slot 4
; CHECK-NEXT:    mov.d1 r0, r16 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vabs.gtz32(<16 x i32> %a, i32 0)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

define dso_local noundef <16 x i32> @_Z27test_abs_gtz_v16int32_sign1Dv16_iRj(<16 x i32> noundef %a, ptr nocapture nonnull writeonly align 4 dereferenceable(4) %cmp) local_unnamed_addr #0 {
; CHECK-LABEL: _Z27test_abs_gtz_v16int32_sign1Dv16_iRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vabs_gtz.s32 x0, r16, x2 // Delay Slot 4
; CHECK-NEXT:    mov.d1 r0, r16 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vabs.gtz32(<16 x i32> %a, i32 1)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

declare { <64 x i8>, <2 x i32> } @llvm.aie2.vabs.gtz8(<64 x i8>, i32) #1
declare { <32 x i16>, i32 } @llvm.aie2.vabs.gtz16(<32 x i16>, i32) #1
declare { <16 x i32>, i32 } @llvm.aie2.vabs.gtz32(<16 x i32>, i32) #1
