# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=aie-machine-alignment %s -verify-machineinstrs -o - | FileCheck %s

---
name:            zol_setup_in_different_mbb
body:             |
  ; CHECK-LABEL: name: zol_setup_in_different_mbb
  ; CHECK: bb.0 (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def $r2, implicit-def $lc, implicit $p0, implicit $r0 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     renamable $r1 = LDA_dms_lda_idx_imm renamable $p0, 0
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     renamable $r2 = MOVX_alu_cg 0
  ; CHECK-NEXT:     $lc = MOV_mv_scl $r0
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r3 {
  ; CHECK-NEXT:     NOPX
  ; CHECK-NEXT:     renamable $r3 = MOV_mv_cg 2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $ls {
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1 (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r4, implicit $r2, implicit $r3 {
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     renamable $r4 = LSHL renamable $r2, renamable $r3
  ; CHECK-NEXT:     NOPM
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $le {
  ; CHECK-NEXT:     $le = MOVXM_lng_cg <mcsymbol .L_1120>
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $dj0, implicit killed $r4 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPX
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl killed $r4
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r4, implicit $p1, implicit killed $dj0 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     renamable $r4 = LDA_dms_lda_idx renamable $p1, killed renamable $dj0
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2 (align 16):
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0 (align 16):
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0

    BUNDLE implicit-def $r1, implicit-def $r2, implicit-def $lc, implicit $p0, implicit $r0 {
      renamable $r1 = LDA_dms_lda_idx_imm renamable $p0, 0
      renamable $r2 = MOVX_alu_cg 0
      $lc = MOV_mv_scl $r0
    }
    BUNDLE implicit-def $r3 {
      renamable $r3 = MOV_mv_cg 2
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $ls {
      $ls = MOVXM_lng_cg %bb.1
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }

  bb.1 (align 16):
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r0, $r1, $r2, $r3

    BUNDLE implicit-def $r4, implicit $r2, implicit $r3 {
      renamable $r4 = LSHL renamable $r2, renamable $r3
    }
    BUNDLE implicit-def $le {
      $le = MOVXM_lng_cg <mcsymbol .L_1120>
    }
    BUNDLE implicit-def $dj0, implicit killed $r4 {
      $dj0 = MOV_mv_scl killed $r4
    }
    BUNDLE implicit-def $r4, implicit $p1, implicit killed $dj0 {
      renamable $r4 = LDA_dms_lda_idx renamable $p1, killed renamable $dj0
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.1

  bb.2 (align 16):
    BUNDLE {
      NOP
    }
    DelayedSchedBarrier

...
