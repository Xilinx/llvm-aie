# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc -mtriple aie2 -run-pass=aie-machine-alignment %s -verify-machineinstrs -o - | FileCheck %s
--- |

  define dso_local void @zol_multiple_zol_regions(i32 noundef %n, ptr nocapture readonly %in, ptr nocapture writeonly %out)  {
  entry:
    %cmp10 = icmp sgt i32 %n, 0
    br i1 %cmp10, label %for.body.lr.ph, label %for.cond.cleanup

  for.body.lr.ph:                                   ; preds = %entry
    %div1213 = lshr i32 %n, 1
    %xtraiter = and i32 %n, 7
    %0 = icmp ult i32 %n, 8
    br i1 %0, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.lr.ph.new

  for.body.lr.ph.new:                               ; preds = %for.body.lr.ph
    %unroll_iter = and i32 %n, -8
    br label %for.body

  for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.lr.ph
    %i.011.unr = phi i32 [ 0, %for.body.lr.ph ], [ %inc.7, %for.body ]
    %lcmp.mod.not = icmp eq i32 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil.preheader

  for.body.epil.preheader:                          ; preds = %for.cond.cleanup.loopexit.unr-lcssa
    br label %for.body.epil

  for.body.epil:                                    ; preds = %for.body.epil.preheader, %for.body.epil
    %lsr.iv = phi i32 [ %xtraiter, %for.body.epil.preheader ], [ %lsr.iv.next, %for.body.epil ]
    %i.011.epil = phi i32 [ %inc.epil, %for.body.epil ], [ %i.011.unr, %for.body.epil.preheader ]
    %cmp1.epil = icmp ult i32 %i.011.epil, %div1213
    %1 = load i32, ptr %in, align 4, !tbaa !2
    %2 = trunc i32 %i.011.epil to i20
    %arrayidx.epil = getelementptr inbounds i32, ptr %out, i20 %2
    %..epil = select i1 %cmp1.epil, i32 1, i32 -1
    %add.epil = add nsw i32 %1, %..epil
    store i32 %add.epil, ptr %arrayidx.epil, align 4, !tbaa !2
    %inc.epil = add nuw nsw i32 %i.011.epil, 1
    %lsr.iv.next = add nsw i32 %lsr.iv, -1
    %epil.iter.cmp.not = icmp eq i32 %lsr.iv.next, 0
    br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !6

  for.cond.cleanup:                                 ; preds = %for.body.epil, %for.cond.cleanup.loopexit.unr-lcssa, %entry
    ret void

  for.body:                                         ; preds = %for.body, %for.body.lr.ph.new
    %i.011 = phi i32 [ 0, %for.body.lr.ph.new ], [ %32, %for.body ]
    %cmp1 = icmp ult i32 %i.011, %div1213
    %3 = load i32, ptr %in, align 4, !tbaa !2
    %4 = trunc i32 %i.011 to i20
    %arrayidx = getelementptr inbounds i32, ptr %out, i20 %4
    %. = select i1 %cmp1, i32 1, i32 -1
    %add = add nsw i32 %3, %.
    store i32 %add, ptr %arrayidx, align 4, !tbaa !2
    %5 = add i32 %i.011, 1
    %cmp1.1 = icmp ult i32 %5, %div1213
    %6 = load i32, ptr %in, align 4, !tbaa !2
    %7 = trunc i32 %5 to i20
    %arrayidx.1 = getelementptr inbounds i32, ptr %out, i20 %7
    %..1 = select i1 %cmp1.1, i32 1, i32 -1
    %add.1 = add nsw i32 %6, %..1
    store i32 %add.1, ptr %arrayidx.1, align 4, !tbaa !2
    %8 = add i32 %i.011, 2
    %9 = add i32 %5, 1
    %cmp1.2 = icmp ult i32 %9, %div1213
    %10 = load i32, ptr %in, align 4, !tbaa !2
    %11 = trunc i32 %8 to i20
    %arrayidx.2 = getelementptr inbounds i32, ptr %out, i20 %11
    %..2 = select i1 %cmp1.2, i32 1, i32 -1
    %add.2 = add nsw i32 %10, %..2
    store i32 %add.2, ptr %arrayidx.2, align 4, !tbaa !2
    %12 = add i32 %i.011, 3
    %13 = add i32 %9, 1
    %cmp1.3 = icmp ult i32 %13, %div1213
    %14 = load i32, ptr %in, align 4, !tbaa !2
    %15 = trunc i32 %12 to i20
    %arrayidx.3 = getelementptr inbounds i32, ptr %out, i20 %15
    %..3 = select i1 %cmp1.3, i32 1, i32 -1
    %add.3 = add nsw i32 %14, %..3
    store i32 %add.3, ptr %arrayidx.3, align 4, !tbaa !2
    %16 = add i32 %i.011, 4
    %17 = add i32 %13, 1
    %cmp1.4 = icmp ult i32 %17, %div1213
    %18 = load i32, ptr %in, align 4, !tbaa !2
    %19 = trunc i32 %16 to i20
    %arrayidx.4 = getelementptr inbounds i32, ptr %out, i20 %19
    %..4 = select i1 %cmp1.4, i32 1, i32 -1
    %add.4 = add nsw i32 %18, %..4
    store i32 %add.4, ptr %arrayidx.4, align 4, !tbaa !2
    %20 = add i32 %i.011, 5
    %21 = add i32 %17, 1
    %cmp1.5 = icmp ult i32 %21, %div1213
    %22 = load i32, ptr %in, align 4, !tbaa !2
    %23 = trunc i32 %20 to i20
    %arrayidx.5 = getelementptr inbounds i32, ptr %out, i20 %23
    %..5 = select i1 %cmp1.5, i32 1, i32 -1
    %add.5 = add nsw i32 %22, %..5
    store i32 %add.5, ptr %arrayidx.5, align 4, !tbaa !2
    %24 = add i32 %i.011, 6
    %25 = add i32 %21, 1
    %cmp1.6 = icmp ult i32 %25, %div1213
    %26 = load i32, ptr %in, align 4, !tbaa !2
    %27 = trunc i32 %24 to i20
    %arrayidx.6 = getelementptr inbounds i32, ptr %out, i20 %27
    %..6 = select i1 %cmp1.6, i32 1, i32 -1
    %add.6 = add nsw i32 %26, %..6
    store i32 %add.6, ptr %arrayidx.6, align 4, !tbaa !2
    %28 = add i32 %i.011, 7
    %29 = add i32 %25, 1
    %cmp1.7 = icmp ult i32 %29, %div1213
    %30 = load i32, ptr %in, align 4, !tbaa !2
    %31 = trunc i32 %28 to i20
    %arrayidx.7 = getelementptr inbounds i32, ptr %out, i20 %31
    %..7 = select i1 %cmp1.7, i32 1, i32 -1
    %add.7 = add nsw i32 %30, %..7
    store i32 %add.7, ptr %arrayidx.7, align 4, !tbaa !2
    %inc.7 = add nuw nsw i32 %i.011, 8
    %32 = add i32 %29, 1
    %niter.ncmp.7 = icmp eq i32 %32, %unroll_iter
    br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !8
  }

  attributes #0 = { mustprogress nofree norecurse nosync nounwind memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }

  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 17.0.0"}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"int", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}
  !8 = distinct !{!8, !9}
  !9 = !{!"llvm.loop.mustprogress"}

...
---
name:            zol_multiple_zol_regions
body:             |
  ; CHECK-LABEL: name: zol_multiple_zol_regions
  ; CHECK: bb.0.entry (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.8(0x30000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r5 {
  ; CHECK-NEXT:     renamable $r5 = MOVA_lda_cg 0
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit $r5, implicit $r0 {
  ; CHECK-NEXT:     renamable $r1 = GE renamable $r5, renamable $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r1 {
  ; CHECK-NEXT:     JNZ killed renamable $r1, %bb.8
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.for.body.lr.ph:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r6 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     renamable $r6 = MOVA_lda_cg 8
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r6, implicit $r0, implicit killed $r6 {
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     renamable $r6 = LTU renamable $r0, killed renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r6 {
  ; CHECK-NEXT:     JZ killed renamable $r6, %bb.3
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r1 {
  ; CHECK-NEXT:     renamable $r1 = MOVA_lda_cg -1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r3, implicit-def $r2, implicit $r0, implicit $r1 {
  ; CHECK-NEXT:     renamable $r3 = MOVA_lda_cg 7
  ; CHECK-NEXT:     renamable $r2 = LSHL renamable $r0, renamable $r1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r4, implicit-def $r3, implicit $r0, implicit killed $r3 {
  ; CHECK-NEXT:     renamable $r4 = MOVA_lda_cg 1
  ; CHECK-NEXT:     renamable $r3 = AND renamable $r0, killed renamable $r3
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.5(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1, $r2, $r3, $r4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     J_jump_imm %bb.5
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPX
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7 {
  ; CHECK-NEXT:     renamable $r7 = MOVA_lda_cg 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.for.body.lr.ph.new (align 16):
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2, $r3, $r4, $r5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r6 {
  ; CHECK-NEXT:     renamable $r6 = MOVA_lda_cg -8
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r6, implicit-def $r0, implicit killed $r0 {
  ; CHECK-NEXT:     renamable $r6 = MOVA_lda_cg 2
  ; CHECK-NEXT:     renamable $r0 = AND killed renamable $r0, internal killed renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     $lc = MOV_mv_scl $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     $le = MOVXM_lng_cg <mcsymbol .L_1121>
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.for.body (align 16):
  ; CHECK-NEXT:   successors: %bb.5(0x04000000), %bb.4(0x7c000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2, $r3, $r4, $r5, $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r27, implicit $p0, implicit $r5, implicit $r2 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r5, renamable $r2
  ; CHECK-NEXT:     NOPM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r8, implicit $r5, implicit $r6 {
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     renamable $r8 = LSHL renamable $r5, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r8, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r8 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r8
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r8, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r8, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
  ; CHECK-NEXT:     ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx, !tbaa !2)
  ; CHECK-NEXT:     renamable $r8 = ADD_add_r_ri renamable $r5, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r27, implicit $p0, implicit $r8, implicit $r2 {
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r8, renamable $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit $r8, implicit $r6 {
  ; CHECK-NEXT:     renamable $r9 = LSHL renamable $r8, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r9
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
  ; CHECK-NEXT:     renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
  ; CHECK-NEXT:     ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.1, !tbaa !2)
  ; CHECK-NEXT:     renamable $r9 = ADD_add_r_ri renamable $r5, 2, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r8, renamable $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
  ; CHECK-NEXT:     renamable $r9 = LSHL killed renamable $r9, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r9
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
  ; CHECK-NEXT:     renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
  ; CHECK-NEXT:     ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.2, !tbaa !2)
  ; CHECK-NEXT:     renamable $r9 = ADD_add_r_ri renamable $r5, 3, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r8, renamable $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
  ; CHECK-NEXT:     renamable $r9 = LSHL killed renamable $r9, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r9
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
  ; CHECK-NEXT:     renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
  ; CHECK-NEXT:     ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.3, !tbaa !2)
  ; CHECK-NEXT:     renamable $r9 = ADD_add_r_ri renamable $r5, 4, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r8, renamable $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
  ; CHECK-NEXT:     renamable $r9 = LSHL killed renamable $r9, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r9
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
  ; CHECK-NEXT:     renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
  ; CHECK-NEXT:     ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.4, !tbaa !2)
  ; CHECK-NEXT:     renamable $r9 = ADD_add_r_ri renamable $r5, 5, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r8, renamable $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
  ; CHECK-NEXT:     renamable $r9 = LSHL killed renamable $r9, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r9
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
  ; CHECK-NEXT:     renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
  ; CHECK-NEXT:     ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.5, !tbaa !2)
  ; CHECK-NEXT:     renamable $r9 = ADD_add_r_ri renamable $r5, 6, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r8, renamable $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
  ; CHECK-NEXT:     renamable $r9 = LSHL killed renamable $r9, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r9
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
  ; CHECK-NEXT:     renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
  ; CHECK-NEXT:     ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.6, !tbaa !2)
  ; CHECK-NEXT:     renamable $r9 = ADD_add_r_ri renamable $r5, 7, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r8, renamable $r2
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
  ; CHECK-NEXT:     renamable $r9 = LSHL killed renamable $r9, renamable $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r9
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r9, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
  ; CHECK-NEXT:     renamable $r9 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r5 {
  ; CHECK-NEXT:     renamable $r7 = nuw nsw ADD_add_r_ri killed renamable $r5, 8, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r5, implicit-def $srcarry, implicit killed $r8 {
  ; CHECK-NEXT:     renamable $r5 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r8, implicit $r5, implicit $r0 {
  ; CHECK-NEXT:     renamable $r8 = EQ renamable $r5, renamable $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r9, implicit $p1, implicit killed $dj0 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     ST_dms_sts_idx killed renamable $r9, renamable $p1, killed renamable $dj0 :: (store (s32) into %ir.arrayidx.7, !tbaa !2)
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1121>, %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.for.cond.cleanup.loopexit.unr-lcssa (align 16):
  ; CHECK-NEXT:   successors: %bb.8(0x30000000), %bb.6(0x50000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1, $r2, $r3, $r4, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit $r3 {
  ; CHECK-NEXT:     JZ renamable $r3, %bb.8
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6.for.body.epil.preheader:
  ; CHECK-NEXT:   successors: %bb.7(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1, $r2, $r3, $r5, $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r0 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     renamable $r0 = MOVA_lda_cg 2
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     $lc = MOV_mv_scl $r5
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     $ls = MOVXM_lng_cg %bb.7
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     $le = MOVXM_lng_cg <mcsymbol .L_1120>
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7.for.body.epil (align 16):
  ; CHECK-NEXT:   successors: %bb.8(0x04000000), %bb.7(0x7c000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1, $r2, $r3, $r4, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $r5, implicit-def $r27, implicit $p0, implicit $r7, implicit $r2 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     renamable $r5 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
  ; CHECK-NEXT:     NOPS
  ; CHECK-NEXT:     renamable $r27 = LTU renamable $r7, renamable $r2
  ; CHECK-NEXT:     NOPM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r6, implicit $r7, implicit $r0 {
  ; CHECK-NEXT:     renamable $r6 = LSHL renamable $r7, renamable $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def dead $r6, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
  ; CHECK-NEXT:     renamable $r6 = SELNEZ renamable $r4, renamable $r1, renamable $r27
  ; CHECK-NEXT:     $dj0 = MOV_mv_scl internal killed $r6
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r5, implicit-def $srcarry, implicit killed $r5, implicit killed $r6 {
  ; CHECK-NEXT:     renamable $r5 = nsw ADD killed renamable $r5, killed renamable $r6, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7 {
  ; CHECK-NEXT:     renamable $r7 = nuw nsw ADD_add_r_ri killed renamable $r7, 1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit-def $r3, implicit-def $srcarry, implicit killed $r3 {
  ; CHECK-NEXT:     renamable $r3 = nsw ADD_add_r_ri killed renamable $r3, -1, implicit-def $srcarry
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE implicit killed $r5, implicit $p1, implicit killed $dj0 {
  ; CHECK-NEXT:     NOPB
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     ST_dms_sts_idx killed renamable $r5, renamable $p1, killed renamable $dj0 :: (store (s32) into %ir.arrayidx.epil, !tbaa !2)
  ; CHECK-NEXT:     NOPXM
  ; CHECK-NEXT:     NOPV
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_1120>, %bb.7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8.for.cond.cleanup (align 16):
  ; CHECK-NEXT:   BUNDLE implicit $lr {
  ; CHECK-NEXT:     NOPA
  ; CHECK-NEXT:     RET implicit $lr
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   BUNDLE {
  ; CHECK-NEXT:     NOP
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0.entry (align 16):
    successors: %bb.1(0x50000000), %bb.8(0x30000000)
    liveins: $p0, $p1, $r0

    BUNDLE implicit-def $r5 {
      renamable $r5 = MOVA_lda_cg 0
    }
    BUNDLE implicit-def $r1, implicit $r5, implicit $r0 {
      renamable $r1 = GE renamable $r5, renamable $r0
    }
    BUNDLE implicit killed $r1 {
      JNZ killed renamable $r1, %bb.8
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    DelayedSchedBarrier

  bb.1.for.body.lr.ph:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $p0, $p1, $r0, $r5

    BUNDLE implicit-def $r6 {
      renamable $r6 = MOVA_lda_cg 8
    }
    BUNDLE implicit-def $r6, implicit $r0, implicit killed $r6 {
      renamable $r6 = LTU renamable $r0, killed renamable $r6
    }
    BUNDLE implicit killed $r6 {
      JZ killed renamable $r6, %bb.3
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r1 {
      renamable $r1 = MOVA_lda_cg -1
    }
    BUNDLE implicit-def $r3, implicit-def $r2, implicit $r0, implicit $r1 {
      renamable $r3 = MOVA_lda_cg 7
      renamable $r2 = LSHL renamable $r0, renamable $r1
    }
    BUNDLE implicit-def $r4, implicit-def $r3, implicit $r0, implicit killed $r3 {
      renamable $r4 = MOVA_lda_cg 1
      renamable $r3 = AND renamable $r0, killed renamable $r3
    }
    DelayedSchedBarrier

  bb.2:
    successors: %bb.5(0x80000000)
    liveins: $p0, $p1, $r1, $r2, $r3, $r4

    BUNDLE {
      J_jump_imm %bb.5
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7 {
      renamable $r7 = MOVA_lda_cg 0
    }
    DelayedSchedBarrier

  bb.3.for.body.lr.ph.new (align 16):
    successors: %bb.4(0x80000000)
    liveins: $p0, $p1, $r0, $r1, $r2, $r3, $r4, $r5

    BUNDLE implicit-def $r6 {
      renamable $r6 = MOVA_lda_cg -8
    }
    BUNDLE implicit-def dead $r6, implicit-def $r0, implicit killed $r0 {
      renamable $r6 = MOVA_lda_cg 2
      renamable $r0 = AND killed renamable $r0, internal killed renamable $r6
    }
    BUNDLE {
      $lc = MOV_mv_scl $r0
    }
    BUNDLE {
      $ls = MOVXM_lng_cg %bb.4
    }
    BUNDLE {
      $le = MOVXM_lng_cg <mcsymbol .L_1121>
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }

  bb.4.for.body (align 16):
    successors: %bb.5(0x04000000), %bb.4(0x7c000000)
    liveins: $p0, $p1, $r0, $r1, $r2, $r3, $r4, $r5, $r6

    BUNDLE implicit-def $r7, implicit-def $r27, implicit $p0, implicit $r5, implicit $r2 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r27 = LTU renamable $r5, renamable $r2
    }
    BUNDLE implicit-def $r8, implicit $r5, implicit $r6 {
      renamable $r8 = LSHL renamable $r5, renamable $r6
    }
    BUNDLE implicit-def dead $r8, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r8 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r8
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r8 {
      renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r8, implicit-def $srcarry
    }
    BUNDLE implicit-def $r8, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
      ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx, !tbaa !2)
      renamable $r8 = ADD_add_r_ri renamable $r5, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $r27, implicit $p0, implicit $r8, implicit $r2 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r27 = LTU renamable $r8, renamable $r2
    }
    BUNDLE implicit-def $r9, implicit $r8, implicit $r6 {
      renamable $r9 = LSHL renamable $r8, renamable $r6
    }
    BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r9
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
      renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
    }
    BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
      ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.1, !tbaa !2)
      renamable $r9 = ADD_add_r_ri renamable $r5, 2, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
      renamable $r27 = LTU renamable $r8, renamable $r2
    }
    BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
      renamable $r9 = LSHL killed renamable $r9, renamable $r6
    }
    BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r9
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
      renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
    }
    BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
      ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.2, !tbaa !2)
      renamable $r9 = ADD_add_r_ri renamable $r5, 3, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
      renamable $r27 = LTU renamable $r8, renamable $r2
    }
    BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
      renamable $r9 = LSHL killed renamable $r9, renamable $r6
    }
    BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r9
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
      renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
    }
    BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
      ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.3, !tbaa !2)
      renamable $r9 = ADD_add_r_ri renamable $r5, 4, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
      renamable $r27 = LTU renamable $r8, renamable $r2
    }
    BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
      renamable $r9 = LSHL killed renamable $r9, renamable $r6
    }
    BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r9
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
      renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
    }
    BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
      ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.4, !tbaa !2)
      renamable $r9 = ADD_add_r_ri renamable $r5, 5, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
      renamable $r27 = LTU renamable $r8, renamable $r2
    }
    BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
      renamable $r9 = LSHL killed renamable $r9, renamable $r6
    }
    BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r9
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
      renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
    }
    BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
      ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.5, !tbaa !2)
      renamable $r9 = ADD_add_r_ri renamable $r5, 6, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
      renamable $r27 = LTU renamable $r8, renamable $r2
    }
    BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
      renamable $r9 = LSHL killed renamable $r9, renamable $r6
    }
    BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r9
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
      renamable $r7 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
    }
    BUNDLE implicit-def $r9, implicit-def $srcarry, implicit $r7, implicit $p1, implicit $dj0, implicit $r5 {
      ST_dms_sts_idx renamable $r7, renamable $p1, renamable $dj0 :: (store (s32) into %ir.arrayidx.6, !tbaa !2)
      renamable $r9 = ADD_add_r_ri renamable $r5, 7, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $r8, implicit-def $srcarry, implicit $p0, implicit killed $r8 {
      renamable $r7 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r8 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r27, implicit $r8, implicit $r2 {
      renamable $r27 = LTU renamable $r8, renamable $r2
    }
    BUNDLE implicit-def $r9, implicit killed $r9, implicit $r6 {
      renamable $r9 = LSHL killed renamable $r9, renamable $r6
    }
    BUNDLE implicit-def dead $r9, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r9 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r9
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r9, implicit-def $srcarry, implicit killed $r7, implicit killed $r9 {
      renamable $r9 = nsw ADD killed renamable $r7, killed renamable $r9, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r5 {
      renamable $r7 = nuw nsw ADD_add_r_ri killed renamable $r5, 8, implicit-def $srcarry
    }
    BUNDLE implicit-def $r5, implicit-def $srcarry, implicit killed $r8 {
      renamable $r5 = ADD_add_r_ri killed renamable $r8, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r8, implicit $r5, implicit $r0 {
      renamable $r8 = EQ renamable $r5, renamable $r0
    }
    BUNDLE implicit killed $r9, implicit $p1, implicit killed $dj0 {
      ST_dms_sts_idx killed renamable $r9, renamable $p1, killed renamable $dj0 :: (store (s32) into %ir.arrayidx.7, !tbaa !2)
    }
    PseudoLoopEnd <mcsymbol .L_1121>, %bb.4

  bb.5.for.cond.cleanup.loopexit.unr-lcssa (align 16):
    successors: %bb.8(0x30000000), %bb.6(0x50000000)
    liveins: $p0, $p1, $r1, $r2, $r3, $r4, $r7

    BUNDLE implicit $r3 {
      JZ renamable $r3, %bb.8
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    DelayedSchedBarrier

  bb.6.for.body.epil.preheader:
    successors: %bb.7(0x80000000)
    liveins: $p0, $p1, $r1, $r2, $r3, $r5, $r6

    BUNDLE implicit-def $r0 {
      renamable $r0 = MOVA_lda_cg 2
    }
    BUNDLE {
      $lc = MOV_mv_scl $r5
    }
    BUNDLE {
      $ls = MOVXM_lng_cg %bb.7
    }
    BUNDLE {
      $le = MOVXM_lng_cg <mcsymbol .L_1120>
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }

  bb.7.for.body.epil (align 16):
    successors: %bb.8(0x04000000), %bb.7(0x7c000000)
    liveins: $p0, $p1, $r0, $r1, $r2, $r3, $r4, $r7

    BUNDLE implicit-def $r5, implicit-def $r27, implicit $p0, implicit $r7, implicit $r2 {
      renamable $r5 = LDA_dms_lda_idx_imm renamable $p0, 0 :: (load (s32) from %ir.in, !tbaa !2)
      renamable $r27 = LTU renamable $r7, renamable $r2
    }
    BUNDLE implicit-def $r6, implicit $r7, implicit $r0 {
      renamable $r6 = LSHL renamable $r7, renamable $r0
    }
    BUNDLE implicit-def dead $r6, implicit-def $dj0, implicit $r4, implicit $r1, implicit $r27 {
      renamable $r6 = SELNEZ renamable $r4, renamable $r1, renamable $r27
      $dj0 = MOV_mv_scl internal killed $r6
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE implicit-def $r5, implicit-def $srcarry, implicit killed $r5, implicit killed $r6 {
      renamable $r5 = nsw ADD killed renamable $r5, killed renamable $r6, implicit-def $srcarry
    }
    BUNDLE implicit-def $r7, implicit-def $srcarry, implicit killed $r7 {
      renamable $r7 = nuw nsw ADD_add_r_ri killed renamable $r7, 1, implicit-def $srcarry
    }
    BUNDLE implicit-def $r3, implicit-def $srcarry, implicit killed $r3 {
      renamable $r3 = nsw ADD_add_r_ri killed renamable $r3, -1, implicit-def $srcarry
    }
    BUNDLE implicit killed $r5, implicit $p1, implicit killed $dj0 {
      ST_dms_sts_idx killed renamable $r5, renamable $p1, killed renamable $dj0 :: (store (s32) into %ir.arrayidx.epil, !tbaa !2)
    }
    PseudoLoopEnd <mcsymbol .L_1120>, %bb.7

  bb.8.for.cond.cleanup (align 16):
    BUNDLE implicit $lr {
      RET implicit $lr
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    BUNDLE {
      NOP
    }
    DelayedSchedBarrier

...
