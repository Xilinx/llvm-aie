; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s

define dso_local noundef <16 x i64> @test_addmac_acc32(<64 x i8> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_addmac_acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9; nopb ; nopxm
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vaddmac cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl15.i.i, %shl14.i.i
  %0 = bitcast <64 x i8> %b to <16 x i32>
  %1 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.addmac.conf(<64 x i8> %a, <16 x i32> %0, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or11.i.i)
  ret <16 x i64> %1
}

define dso_local noundef <16 x i64> @test_addmsc_acc32(<64 x i8> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_addmsc_acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9; nopb ; nopxm
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vaddmsc cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl15.i.i, %shl14.i.i
  %0 = bitcast <64 x i8> %b to <16 x i32>
  %1 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.addmsc.conf(<64 x i8> %a, <16 x i32> %0, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or11.i.i)
  ret <16 x i64> %1
}

define dso_local noundef <16 x i64> @test_submac_acc32(<64 x i8> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_submac_acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9; nopb ; nopxm
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vsubmac cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl15.i.i, %shl14.i.i
  %0 = bitcast <64 x i8> %b to <16 x i32>
  %1 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.submac.conf(<64 x i8> %a, <16 x i32> %0, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or11.i.i)
  ret <16 x i64> %1
}

define dso_local noundef <16 x i64> @test_submsc_acc32(<64 x i8> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_submsc_acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9; nopb ; nopxm
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vsubmsc cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl15.i.i, %shl14.i.i
  %0 = bitcast <64 x i8> %b to <16 x i32>
  %1 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.submsc.conf(<64 x i8> %a, <16 x i32> %0, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or11.i.i)
  ret <16 x i64> %1
}

define dso_local noundef <16 x i64> @test_addmac_acc64(<32 x i16> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_addmac_acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    mova r4, #18
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r0, r1
; CHECK-NEXT:    or r0, r0, r4
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vaddmac cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl14.i.i, %shl15.i.i
  %or17.i.i = or i32 %or11.i.i, 18
  %0 = bitcast <32 x i16> %a to <64 x i8>
  %1 = bitcast <64 x i8> %b to <16 x i32>
  %2 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8> %0, <16 x i32> %1, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or17.i.i)
  ret <16 x i64> %2
}

define dso_local noundef <16 x i64> @test_addmsc_acc64(<32 x i16> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_addmsc_acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    mova r4, #18
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r0, r1
; CHECK-NEXT:    or r0, r0, r4
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vaddmsc cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl14.i.i, %shl15.i.i
  %or17.i.i = or i32 %or11.i.i, 18
  %0 = bitcast <32 x i16> %a to <64 x i8>
  %1 = bitcast <64 x i8> %b to <16 x i32>
  %2 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8> %0, <16 x i32> %1, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or17.i.i)
  ret <16 x i64> %2
}

define dso_local noundef <16 x i64> @test_subadd_acc64(<32 x i16> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_subadd_acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    mova r4, #18
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r0, r1
; CHECK-NEXT:    or r0, r0, r4
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vsubmac cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl14.i.i, %shl15.i.i
  %or17.i.i = or i32 %or11.i.i, 18
  %0 = bitcast <32 x i16> %a to <64 x i8>
  %1 = bitcast <64 x i8> %b to <16 x i32>
  %2 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.submac.conf(<64 x i8> %0, <16 x i32> %1, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or17.i.i)
  ret <16 x i64> %2
}

define dso_local noundef <16 x i64> @test_submsc_acc64(<32 x i16> noundef %a, i32 noundef %sgn_x, <64 x i8> noundef %b, i32 noundef %sgn_y, <16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_submsc_acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    mova r4, #18
; CHECK-NEXT:    vmov cm0, cm1
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r0, r1
; CHECK-NEXT:    or r0, r0, r4
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vsubmsc cm0, cm0, cm2, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or11.i.i = or i32 %shl14.i.i, %shl15.i.i
  %or17.i.i = or i32 %or11.i.i, 18
  %0 = bitcast <32 x i16> %a to <64 x i8>
  %1 = bitcast <64 x i8> %b to <16 x i32>
  %2 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8> %0, <16 x i32> %1, <16 x i64> %acc1, <16 x i64> %acc2, i32 %or17.i.i)
  ret <16 x i64> %2
}

declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.addmac.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1
declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.addmsc.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1
declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.submac.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1
declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc32.submsc.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1

declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.addmac.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1
declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.addmsc.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1
declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.submac.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1
declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.ACC1024.acc64.submsc.conf(<64 x i8>, <16 x i32>, <16 x i64>, <16 x i64>, i32) #1
