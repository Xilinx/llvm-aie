# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -verify-machineinstrs --march=aie2 -run-pass=postrapseudos %s -o - | FileCheck %s

# Note that the "offset" field in the stack slots does not matter anymore,
# as the FI operands have already been translated to raw offsets.

---
name:            test_vec64
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_vec64
    ; CHECK: ST_dms_spill $r18, -16, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: ST_dms_spill $r19, -12, implicit $sp :: (store (s32) into %stack.0 + 4)
    VST_L_SPILL $l1, -16, implicit $sp :: (store (s64) into %stack.0, align 4)
...

---
name:            test_vec512
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_vec512
    ; CHECK: VST_dmw_sts_w_ag_spill $wl1, -96, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_spill $wh1, -64, implicit $sp :: (store (s256) into %stack.0 + 32)
    VST_X_SPILL $x1, -96, implicit $sp :: (store (s512) into %stack.0, align 32)
...

---
name:            test_vec1024
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 128, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_vec1024
    ; CHECK: VST_dmw_sts_w_ag_spill $wl6, -128, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_spill $wh6, -96, implicit $sp :: (store (s256) into %stack.0 + 32)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_spill $wl7, -64, implicit $sp :: (store (s256) into %stack.0 + 64)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_spill $wh7, -32, implicit $sp :: (store (s256) into %stack.0 + 96)
    VST_Y_SPILL $y3, -128, implicit $sp :: (store (s1024) into %stack.0, align 32)
...

---
name:            test_acc512
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_acc512
    ; CHECK: VST_dmw_sts_am_ag_spill $amll1, -96, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_spill $amlh1, -64, implicit $sp :: (store (s256) into %stack.0 + 32)
    VST_BM_SPILL $bml1, -96, implicit $sp :: (store (s512) into %stack.0, align 32)
...

---
name:            test_acc1024
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 128, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_acc1024
    ; CHECK: VST_dmw_sts_am_ag_spill $amll3, -128, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_spill $amlh3, -96, implicit $sp :: (store (s256) into %stack.0 + 32)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_spill $amhl3, -64, implicit $sp :: (store (s256) into %stack.0 + 64)
    ; CHECK-NEXT: VST_dmw_sts_am_ag_spill $amhh3, -32, implicit $sp :: (store (s256) into %stack.0 + 96)
    VST_CM_SPILL $cm3, -128, implicit $sp :: (store (s1024) into %stack.0, align 32)
...

# Check how "killed undef" is expanded.
---
name:            test_flags
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_flags
    ; CHECK: VST_dmw_sts_w_ag_spill killed undef $wl1, -96, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_spill killed undef $wh1, -64, implicit $sp :: (store (s256) into %stack.0 + 32)
    VST_X_SPILL killed undef $x1, -96, implicit $sp :: (store (s512) into %stack.0, align 32)
...

---
name:            test_sparse_vec640
alignment:       32
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 128, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_sparse_vec640
    ; CHECK: VST_dmw_sts_w_ag_spill killed $wl0, -96, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_spill killed $wh0, -64, implicit $sp :: (store (s256) into %stack.0 + 32)
    ; CHECK-NEXT: ST_dmv_sts_q_ag_spill killed $q0, -32, implicit $sp :: (store (s128) into %stack.0 + 64, align 32)
    VST_QX_SPILL killed renamable $qx0, -96, implicit $sp :: (store (s640) into %stack.0, align 32)
...
