# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -verify-machineinstrs --march=aie2 -run-pass=postrapseudos %s -o - | FileCheck %s

# Note that the "offset" field in the stack slots does not matter anymore,
# as the FI operands have already been translated to raw offsets.

---
name:            test_d
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_d
    ; CHECK: $m1 = LDA_dms_spill -20, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $dn1 = LDA_dms_spill -16, implicit $sp :: (load (s32) from %stack.0 + 4)
    ; CHECK-NEXT: $dj1 = LDA_dms_spill -12, implicit $sp :: (load (s32) from %stack.0 + 8)
    ; CHECK-NEXT: $dc1 = LDA_dms_spill -8, implicit $sp :: (load (s32) from %stack.0 + 12)
    ; CHECK-NEXT: ST_dms_spill $m1, -40, implicit $sp :: (store (s32) into %stack.1)
    ; CHECK-NEXT: ST_dms_spill $dn1, -36, implicit $sp :: (store (s32) into %stack.1 + 4)
    ; CHECK-NEXT: ST_dms_spill $dj1, -32, implicit $sp :: (store (s32) into %stack.1 + 8)
    ; CHECK-NEXT: ST_dms_spill $dc1, -28, implicit $sp :: (store (s32) into %stack.1 + 12)
    $d1 = LDA_D_SPILL -20, implicit $sp :: (load (s128) from %stack.0, align 4)
    ST_D_SPILL $d1, -40, implicit $sp :: (store (s128) into %stack.1, align 4)
...

# Only some lanes are liveout/livein when reloading/spilling. Make sure no
# unnecessary instructions are generated.
---
name:            test_d_partial
tracksRegLiveness: true
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_d_partial
    ; CHECK: $dj1 = LDA_dms_spill -12, implicit $sp :: (load (s32) from %stack.0 + 8)
    ; CHECK-NEXT: $dj2 = MOV_mv_scl $dj1
    ; CHECK-NEXT: ST_dms_spill $dj2, -32, implicit $sp :: (store (s32) into %stack.1 + 8)
    $d1 = LDA_D_SPILL -20, implicit $sp :: (load (s128) from %stack.0, align 4)
    $dj2 = COPY $dj1
    ST_D_SPILL $d2, -40, implicit $sp :: (store (s128) into %stack.1, align 4)
...

# No reg liveness is tracked, all spill instructions are generated.
---
name:            test_d_partial_notrack
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_d_partial_notrack
    ; CHECK: $m1 = LDA_dms_spill -20, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $dn1 = LDA_dms_spill -16, implicit $sp :: (load (s32) from %stack.0 + 4)
    ; CHECK-NEXT: $dj1 = LDA_dms_spill -12, implicit $sp :: (load (s32) from %stack.0 + 8)
    ; CHECK-NEXT: $dc1 = LDA_dms_spill -8, implicit $sp :: (load (s32) from %stack.0 + 12)
    ; CHECK-NEXT: $dj2 = MOV_mv_scl $dj1
    ; CHECK-NEXT: ST_dms_spill $m2, -40, implicit $sp :: (store (s32) into %stack.1)
    ; CHECK-NEXT: ST_dms_spill $dn2, -36, implicit $sp :: (store (s32) into %stack.1 + 4)
    ; CHECK-NEXT: ST_dms_spill $dj2, -32, implicit $sp :: (store (s32) into %stack.1 + 8)
    ; CHECK-NEXT: ST_dms_spill $dc2, -28, implicit $sp :: (store (s32) into %stack.1 + 12)
    $d1 = LDA_D_SPILL -20, implicit $sp :: (load (s128) from %stack.0, align 4)
    $dj2 = COPY $dj1
    ST_D_SPILL $d2, -40, implicit $sp :: (store (s128) into %stack.1, align 4)
...

# The load/stores are ordered (here, volatile) and cannot be removed.
# Make sure the right undef attributes are added.
---
name:            test_d_volatile
tracksRegLiveness: true
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_d_volatile
    ; CHECK: $m1 = LDA_dms_spill -20, implicit $sp :: (volatile load (s32) from %stack.0)
    ; CHECK-NEXT: $dn1 = LDA_dms_spill -16, implicit $sp :: (volatile load (s32) from %stack.0 + 4)
    ; CHECK-NEXT: $dj1 = LDA_dms_spill -12, implicit $sp :: (volatile load (s32) from %stack.0 + 8)
    ; CHECK-NEXT: $dc1 = LDA_dms_spill -8, implicit $sp :: (volatile load (s32) from %stack.0 + 12)
    ; CHECK-NEXT: $dj2 = MOV_mv_scl $dj1
    ; CHECK-NEXT: ST_dms_spill undef $m2, -40, implicit $sp :: (volatile store (s32) into %stack.1)
    ; CHECK-NEXT: ST_dms_spill undef $dn2, -36, implicit $sp :: (volatile store (s32) into %stack.1 + 4)
    ; CHECK-NEXT: ST_dms_spill $dj2, -32, implicit $sp :: (volatile store (s32) into %stack.1 + 8)
    ; CHECK-NEXT: ST_dms_spill undef $dc2, -28, implicit $sp :: (volatile store (s32) into %stack.1 + 12)
    $d1 = LDA_D_SPILL -20, implicit $sp :: (volatile load (s128) from %stack.0, align 4)
    $dj2 = COPY $dj1
    ST_D_SPILL $d2, -40, implicit $sp :: (volatile store (s128) into %stack.1, align 4)
...

---
name:            test_ds
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_ds
    ; CHECK: $m1 = LDA_dms_spill -40, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $dn1 = LDA_dms_spill -36, implicit $sp :: (load (s32) from %stack.0 + 4)
    ; CHECK-NEXT: $dj1 = LDA_dms_spill -32, implicit $sp :: (load (s32) from %stack.0 + 8)
    ; CHECK-NEXT: $dc1 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0 + 12)
    ; CHECK-NEXT: $m5 = LDA_dms_spill -24, implicit $sp :: (load (s32) from %stack.0 + 16)
    ; CHECK-NEXT: $dn5 = LDA_dms_spill -20, implicit $sp :: (load (s32) from %stack.0 + 20)
    ; CHECK-NEXT: $dj5 = LDA_dms_spill -16, implicit $sp :: (load (s32) from %stack.0 + 24)
    ; CHECK-NEXT: $dc5 = LDA_dms_spill -12, implicit $sp :: (load (s32) from %stack.0 + 28)
    ; CHECK-NEXT: ST_dms_spill $m1, -80, implicit $sp :: (store (s32) into %stack.1)
    ; CHECK-NEXT: ST_dms_spill $dn1, -76, implicit $sp :: (store (s32) into %stack.1 + 4)
    ; CHECK-NEXT: ST_dms_spill $dj1, -72, implicit $sp :: (store (s32) into %stack.1 + 8)
    ; CHECK-NEXT: ST_dms_spill $dc1, -68, implicit $sp :: (store (s32) into %stack.1 + 12)
    ; CHECK-NEXT: ST_dms_spill $m5, -64, implicit $sp :: (store (s32) into %stack.1 + 16)
    ; CHECK-NEXT: ST_dms_spill $dn5, -60, implicit $sp :: (store (s32) into %stack.1 + 20)
    ; CHECK-NEXT: ST_dms_spill $dj5, -56, implicit $sp :: (store (s32) into %stack.1 + 24)
    ; CHECK-NEXT: ST_dms_spill $dc5, -52, implicit $sp :: (store (s32) into %stack.1 + 28)
    $d1_3d = LDA_DS_SPILL -40, implicit $sp :: (load (s256) from %stack.0, align 4)
    ST_DS_SPILL $d1_3d, -80, implicit $sp :: (store (s256) into %stack.1, align 4)
...

# Only some lanes are liveout/livein when reloading/spilling. Make sure no
# unnecessary instructions are generated.
---
name:            test_ds_partial
tracksRegLiveness: true
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_ds_partial
    ; CHECK: $dj5 = LDA_dms_spill -16, implicit $sp :: (load (s32) from %stack.0 + 24)
    ; CHECK-NEXT: $dj6 = MOV_mv_scl $dj5
    ; CHECK-NEXT: ST_dms_spill $dj6, -56, implicit $sp :: (store (s32) into %stack.1 + 24)
    $d1_3d = LDA_DS_SPILL -40, implicit $sp :: (load (s256) from %stack.0, align 4)
    $dj6 = COPY $dj5
    ST_DS_SPILL $d2_3d, -80, implicit $sp :: (store (s256) into %stack.1, align 4)
...

# No reg liveness is tracked, all spill instructions are generated.
---
name:            test_ds_partial_notrack
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_ds_partial_notrack
    ; CHECK: $m1 = LDA_dms_spill -40, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $dn1 = LDA_dms_spill -36, implicit $sp :: (load (s32) from %stack.0 + 4)
    ; CHECK-NEXT: $dj1 = LDA_dms_spill -32, implicit $sp :: (load (s32) from %stack.0 + 8)
    ; CHECK-NEXT: $dc1 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0 + 12)
    ; CHECK-NEXT: $m5 = LDA_dms_spill -24, implicit $sp :: (load (s32) from %stack.0 + 16)
    ; CHECK-NEXT: $dn5 = LDA_dms_spill -20, implicit $sp :: (load (s32) from %stack.0 + 20)
    ; CHECK-NEXT: $dj5 = LDA_dms_spill -16, implicit $sp :: (load (s32) from %stack.0 + 24)
    ; CHECK-NEXT: $dc5 = LDA_dms_spill -12, implicit $sp :: (load (s32) from %stack.0 + 28)
    ; CHECK-NEXT: $dj6 = MOV_mv_scl $dj5
    ; CHECK-NEXT: ST_dms_spill $m2, -80, implicit $sp :: (store (s32) into %stack.1)
    ; CHECK-NEXT: ST_dms_spill $dn2, -76, implicit $sp :: (store (s32) into %stack.1 + 4)
    ; CHECK-NEXT: ST_dms_spill $dj2, -72, implicit $sp :: (store (s32) into %stack.1 + 8)
    ; CHECK-NEXT: ST_dms_spill $dc2, -68, implicit $sp :: (store (s32) into %stack.1 + 12)
    ; CHECK-NEXT: ST_dms_spill $m6, -64, implicit $sp :: (store (s32) into %stack.1 + 16)
    ; CHECK-NEXT: ST_dms_spill $dn6, -60, implicit $sp :: (store (s32) into %stack.1 + 20)
    ; CHECK-NEXT: ST_dms_spill $dj6, -56, implicit $sp :: (store (s32) into %stack.1 + 24)
    ; CHECK-NEXT: ST_dms_spill $dc6, -52, implicit $sp :: (store (s32) into %stack.1 + 28)
    $d1_3d = LDA_DS_SPILL -40, implicit $sp :: (load (s256) from %stack.0, align 4)
    $dj6 = COPY $dj5
    ST_DS_SPILL $d2_3d, -80, implicit $sp :: (store (s256) into %stack.1, align 4)
...

# The load/stores are ordered (here, volatile) and cannot be removed.
# Make sure the right undef attributes are added.
---
name:            test_ds_volatile
tracksRegLiveness: true
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 32, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_ds_volatile
    ; CHECK: $m1 = LDA_dms_spill -40, implicit $sp :: (volatile load (s32) from %stack.0)
    ; CHECK-NEXT: $dn1 = LDA_dms_spill -36, implicit $sp :: (volatile load (s32) from %stack.0 + 4)
    ; CHECK-NEXT: $dj1 = LDA_dms_spill -32, implicit $sp :: (volatile load (s32) from %stack.0 + 8)
    ; CHECK-NEXT: $dc1 = LDA_dms_spill -28, implicit $sp :: (volatile load (s32) from %stack.0 + 12)
    ; CHECK-NEXT: $m5 = LDA_dms_spill -24, implicit $sp :: (volatile load (s32) from %stack.0 + 16)
    ; CHECK-NEXT: $dn5 = LDA_dms_spill -20, implicit $sp :: (volatile load (s32) from %stack.0 + 20)
    ; CHECK-NEXT: $dj5 = LDA_dms_spill -16, implicit $sp :: (volatile load (s32) from %stack.0 + 24)
    ; CHECK-NEXT: $dc5 = LDA_dms_spill -12, implicit $sp :: (volatile load (s32) from %stack.0 + 28)
    ; CHECK-NEXT: $dj6 = MOV_mv_scl $dj5
    ; CHECK-NEXT: ST_dms_spill undef $m2, -80, implicit $sp :: (volatile store (s32) into %stack.1)
    ; CHECK-NEXT: ST_dms_spill undef $dn2, -76, implicit $sp :: (volatile store (s32) into %stack.1 + 4)
    ; CHECK-NEXT: ST_dms_spill undef $dj2, -72, implicit $sp :: (volatile store (s32) into %stack.1 + 8)
    ; CHECK-NEXT: ST_dms_spill undef $dc2, -68, implicit $sp :: (volatile store (s32) into %stack.1 + 12)
    ; CHECK-NEXT: ST_dms_spill undef $m6, -64, implicit $sp :: (volatile store (s32) into %stack.1 + 16)
    ; CHECK-NEXT: ST_dms_spill undef $dn6, -60, implicit $sp :: (volatile store (s32) into %stack.1 + 20)
    ; CHECK-NEXT: ST_dms_spill $dj6, -56, implicit $sp :: (volatile store (s32) into %stack.1 + 24)
    ; CHECK-NEXT: ST_dms_spill undef $dc6, -52, implicit $sp :: (volatile store (s32) into %stack.1 + 28)
    $d1_3d = LDA_DS_SPILL -40, implicit $sp :: (volatile load (s256) from %stack.0, align 4)
    $dj6 = COPY $dj5
    ST_DS_SPILL $d2_3d, -80, implicit $sp :: (volatile store (s256) into %stack.1, align 4)
...
