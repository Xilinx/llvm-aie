# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -verify-machineinstrs --march=aie2 -run-pass=postrapseudos %s -o - | FileCheck %s

# Note that the "offset" field in the stack slots does not matter anymore,
# as the FI operands have already been translated to raw offsets.

---
name:            test_vec64
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_vec64
    ; CHECK: $r18 = LDA_dms_spill -16, implicit $sp :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $r19 = LDA_dms_spill -12, implicit $sp :: (load (s32) from %stack.0 + 4)
    $l1 = VLDA_L_SPILL -16, implicit $sp :: (load (s64) from %stack.0, align 4)
...

---
name:            test_vec512
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_vec512
    ; CHECK: $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0)
    ; CHECK-NEXT: $wh1 = VLDA_dmw_lda_w_ag_spill -64, implicit $sp :: (load (s256) from %stack.0 + 32)
    $x1 = VLDA_X_SPILL -96, implicit $sp :: (load (s512) from %stack.0, align 32)
...

---
name:            test_vec1024
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 128, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_vec1024
    ; CHECK: $wl6 = VLDA_dmw_lda_w_ag_spill -128, implicit $sp :: (load (s256) from %stack.0)
    ; CHECK-NEXT: $wh6 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0 + 32)
    ; CHECK-NEXT: $wl7 = VLDA_dmw_lda_w_ag_spill -64, implicit $sp :: (load (s256) from %stack.0 + 64)
    ; CHECK-NEXT: $wh7 = VLDA_dmw_lda_w_ag_spill -32, implicit $sp :: (load (s256) from %stack.0 + 96)
    $y3 = VLDA_Y_SPILL -128, implicit $sp :: (load (s1024) from %stack.0, align 32)
...

---
name:            test_acc512
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_acc512
    ; CHECK: $amll1 = VLDA_dmw_lda_am_ag_spill -96, implicit $sp :: (load (s256) from %stack.0)
    ; CHECK-NEXT: $amlh1 = VLDA_dmw_lda_am_ag_spill -64, implicit $sp :: (load (s256) from %stack.0 + 32)
    $bml1 = VLDA_BM_SPILL -96, implicit $sp :: (load (s512) from %stack.0, align 32)
...

---
name:            test_acc1024
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 128, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_acc1024
    ; CHECK: $amll3 = VLDA_dmw_lda_am_ag_spill -128, implicit $sp :: (load (s256) from %stack.0)
    ; CHECK-NEXT: $amlh3 = VLDA_dmw_lda_am_ag_spill -96, implicit $sp :: (load (s256) from %stack.0 + 32)
    ; CHECK-NEXT: $amhl3 = VLDA_dmw_lda_am_ag_spill -64, implicit $sp :: (load (s256) from %stack.0 + 64)
    ; CHECK-NEXT: $amhh3 = VLDA_dmw_lda_am_ag_spill -32, implicit $sp :: (load (s256) from %stack.0 + 96)
    $cm3 = VLDA_CM_SPILL -128, implicit $sp :: (load (s1024) from %stack.0, align 32)
...

# Test how "dead" is expanded
---
name:            test_flags
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 64, alignment: 32 }
body:             |
  bb.0 (align 16):

    ; CHECK-LABEL: name: test_flags
    ; CHECK: dead $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0)
    ; CHECK-NEXT: dead $wh1 = VLDA_dmw_lda_w_ag_spill -64, implicit $sp :: (load (s256) from %stack.0 + 32)
    dead $x1 = VLDA_X_SPILL -96, implicit $sp :: (load (s512) from %stack.0, align 32)
...
