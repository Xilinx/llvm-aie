; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 --issue-limit=1 -verify-machineinstrs -o - < %s \
; RUN:   | FileCheck %s

define  i32 @test(i8 signext %i) noinline nounwind optnone {
; CHECK-LABEL: test:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    st p6, [sp, #-32] // 4-byte Folded Spill
; CHECK-NEXT:    mov p6, sp
; CHECK-NEXT:    paddb [p6], #-24
; CHECK-NEXT:    st.s8 r1, [p6, #0]
; CHECK-NEXT:    mova r2, #15
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    movxm r1, #1048575
; CHECK-NEXT:    lda.s8 r0, [p6, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    add r0, r0, #-1
; CHECK-NEXT:    and r1, r0, r1
; CHECK-NEXT:    ltu r1, r2, r1
; CHECK-NEXT:    jnz r1, #.LBB0_6
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    st lr, [sp, #-28] // 4-byte Folded Spill Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %entry
; CHECK-NEXT:    movxm r1, #1048575
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    mova r1, #2
; CHECK-NEXT:    lshl r0, r0, r1
; CHECK-NEXT:    movxm p0, #.LJTI0_0
; CHECK-NEXT:    mov dj0, r0
; CHECK-NEXT:    lda p0, [p0, dj0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    j p0
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:  .LBB0_2: // %sw.bb
; CHECK-NEXT:    jl #case1
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    j #.LBB0_7
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_3: // %sw.bb1
; CHECK-NEXT:    jl #case2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    j #.LBB0_7
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_4: // %sw.bb3
; CHECK-NEXT:    jl #case3
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    j #.LBB0_7
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_5: // %sw.bb5
; CHECK-NEXT:    jl #case4
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    j #.LBB0_7
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_6: // %sw.default
; CHECK-NEXT:    jl #caseb
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_7: // %sw.epilog
; CHECK-NEXT:    lda lr, [sp, #-28] // 4-byte Folded Reload
; CHECK-NEXT:    lda.s8 r0, [p6, #0]
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    lda p6, [sp, #-32] // 4-byte Folded Reload
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %i.addr = alloca i8, align 1
  store i8 %i, ptr %i.addr, align 1
  %0 = load i8, ptr %i.addr, align 1
  %conv = sext i8 %0 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb1
    i32 5, label %sw.bb3
    i32 16, label %sw.bb5
  ]

sw.bb:
  %call = call i32 @case1()
  br label %sw.epilog

sw.bb1:
  %call2 = call i32 @case2()
  br label %sw.epilog

sw.bb3:
  %call4 = call i32 @case3()
  br label %sw.epilog

sw.bb5:
  %call6 = call i32 @case4()
  br label %sw.epilog

sw.default:
  %call7 = call i32 @caseb()
  br label %sw.epilog

sw.epilog:
  %1 = load i8, ptr %i.addr, align 1
  %conv8 = sext i8 %1 to i32
  ret i32 %conv8
}

declare i32 @case1(...)
declare i32 @case2(...)
declare i32 @case3(...)
declare i32 @case4(...)
declare i32 @caseb(...)
