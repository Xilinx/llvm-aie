; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s


define <64 x i8> @test_vmaxdiff_lt_v64int8(<64 x i8> %a, <64 x i8>  %b, i1 %sgn, ptr %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v64int8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; mova r1, #1; nops ; nopxm ; nopv
; CHECK-NEXT:    nopa ; and r0, r0, r1
; CHECK-NEXT:    mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmaxdiff_lt.d8 x0, r25:r24, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmaxdiff.lt8(<64 x i8> %a, <64 x i8>  %b, i32 %conv.i)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define <64 x i8> @test_vmaxdiff_lt_v64uint8_sign0(<64 x i8>  %a, <64 x i8>  %b, ptr %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v64uint8_sign0:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    vmax_lt.d8 x0, r25:r24, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmaxdiff.lt8(<64 x i8> %a, <64 x i8>  %b, i32 0)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define <64 x i8> @test_vmaxdiff_lt_v64uint8_sign1(<64 x i8>  %a, <64 x i8>  %b, ptr %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v64uint8_sign1:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    vmax_lt.s8 x0, r25:r24, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    st r24, [p0], #4 // Delay Slot 3
; CHECK-NEXT:    st r25, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call { <64 x i8>, <2 x i32> } @llvm.aie2.vmaxdiff.lt8(<64 x i8> %a, <64 x i8>  %b, i32 1)
  %1 = extractvalue { <64 x i8>, <2 x i32> } %0, 1
  store <2 x i32> %1, ptr %cmp, align 8
  %2 = extractvalue { <64 x i8>, <2 x i32> } %0, 0
  ret <64 x i8> %2
}

define <32 x i16> @test_vmaxdiff_lt_v32uint16_tbRj(<32 x i16>  %a, <32 x i16>  %b, i1 %sgn, ptr  %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v32uint16_tbRj:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1; nopb ; nopxm ; nops
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    mov r2, r16
; CHECK-NEXT:    mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmaxdiff_lt.d16 x0, r16, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r2 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmaxdiff.lt16(<32 x i16> %a, <32 x i16>  %b, i32 %conv.i)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define <32 x i16> @test_vmaxdiff_lt_v32uint16_sign0(<32 x i16>  %a, <32 x i16>  %b, ptr %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v32uint16_sign0:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r0, r16 // Delay Slot 5
; CHECK-NEXT:    vmax_lt.d16 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmaxdiff.lt16(<32 x i16> %a, <32 x i16>  %b, i32 0)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define <32 x i16> @test_vmaxdiff_lt_v32uint16_sign1(<32 x i16>  %a, <32 x i16>  %b, ptr  %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v32uint16_sign1:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r0, r16 // Delay Slot 5
; CHECK-NEXT:    vmax_lt.s16 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <32 x i16>, i32 } @llvm.aie2.vmaxdiff.lt16(<32 x i16> %a, <32 x i16>  %b, i32 1)
  %1 = extractvalue { <32 x i16>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <32 x i16>, i32 } %0, 0
  ret <32 x i16> %2
}

define <16 x i32> @test_vmaxdiff_lt_v16int32(<16 x i32>  %a, <16 x i32> %b, i1 %sgn, ptr  %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v16int32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1; nopb ; nopxm ; nops
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    mov r2, r16
; CHECK-NEXT:    mov crVaddSign, r0
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vmaxdiff_lt.d32 x0, r16, x2, x4 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r2 // Delay Slot 1
entry:
  %conv.i = zext i1 %sgn to i32
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmaxdiff.lt32(<16 x i32> %a, <16 x i32> %b, i32 %conv.i)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

define <16 x i32> @test_vmaxdiff_lt_v16int32_sign0(<16 x i32>  %a, <16 x i32> %b, ptr  %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v16int32_sign0:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r0, r16 // Delay Slot 5
; CHECK-NEXT:    vmax_lt.d32 x0, r16, x2, x2 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmaxdiff.lt32(<16 x i32> %a, <16 x i32> %a, i32 0)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

define <16 x i32> @test_vmaxdiff_lt_v16int32_sign1(<16 x i32>  %a, <16 x i32>  %b, ptr  %cmp) {
; CHECK-LABEL: test_vmaxdiff_lt_v16int32_sign1:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r0, r16 // Delay Slot 5
; CHECK-NEXT:    vmax_lt.s32 x0, r16, x2, x4 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    st r16, [p0, #0] // Delay Slot 2
; CHECK-NEXT:    mov r16, r0 // Delay Slot 1
entry:
  %0 = tail call { <16 x i32>, i32 } @llvm.aie2.vmaxdiff.lt32(<16 x i32> %a, <16 x i32> %b, i32 1)
  %1 = extractvalue { <16 x i32>, i32 } %0, 1
  store i32 %1, ptr %cmp, align 4
  %2 = extractvalue { <16 x i32>, i32 } %0, 0
  ret <16 x i32> %2
}

declare { <64 x i8>, <2 x i32> } @llvm.aie2.vmaxdiff.lt8(<64 x i8>, <64 x i8> , i32)
declare { <32 x i16>, i32 } @llvm.aie2.vmaxdiff.lt16(<32 x i16>, <32 x i16> , i32)
declare { <16 x i32>, i32 } @llvm.aie2.vmaxdiff.lt32(<16 x i32>, <16 x i32> , i32)
