; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie2 --issue-limit=1 -verify-machineinstrs -o - < %s \
; RUN:   | FileCheck %s
define <16 x i64> @_Z19test_negmul_4x8_8x8ii(i32 noundef %sgn_x, i32 noundef %sgn_y) {
; CHECK-LABEL: _Z19test_negmul_4x8_8x8ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r2, #9; nopb ; nopxm
; CHECK-NEXT:    mova r3, #8
; CHECK-NEXT:    lshl r0, r0, r2
; CHECK-NEXT:    lshl r1, r1, r3
; CHECK-NEXT:    or r0, r0, r1
; CHECK-NEXT:    or r0, r0, r3
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vnegmul cm0, x0, x0, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x i8> @llvm.aie2.v64int8()
  %shl14.i.i = shl i32 %sgn_x, 9
  %shl15.i.i = shl i32 %sgn_y, 8
  %or16.i.i = or i32 %shl14.i.i, %shl15.i.i
  %or17.i.i = or i32 %or16.i.i, 8
  %1 = bitcast <64 x i8> %0 to <16 x i32>
  %2 = tail call <16 x i64> @llvm.aie2.I512.I512.acc32.negmul.conf(<64 x i8> %0, <16 x i32> %1, i32 %or17.i.i)
  ret <16 x i64> %2
}

define <16 x i64> @_Z21test_negmul_4x16_16x8v() {
; CHECK-LABEL: _Z21test_negmul_4x16_16x8v:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; mova r0, #0; nops ; nopxm ; nopv
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vnegmul cm0, x0, x0, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x i8> @llvm.aie2.v64int8()
  %1 = tail call <16 x i32> @llvm.aie2.v16int32()
  %2 = tail call <16 x i64> @llvm.aie2.I512.I512.acc32.negmul.conf(<64 x i8> %0, <16 x i32> %1, i32 0)
  ret <16 x i64> %2
}
define <16 x i64> @_Z19test_negmul_2x8_8x8Dv32_tDv64_h(<32 x i16> noundef %a, <64 x i8> noundef %b)  {
; CHECK-LABEL: _Z19test_negmul_2x8_8x8Dv32_tDv64_h:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; mova r0, #18; nops ; nopxm ; nopv
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vnegmul cm0, x0, x2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <32 x i16> %a to <64 x i8>
  %1 = bitcast <64 x i8> %b to <16 x i32>
  %2 = tail call <16 x i64> @llvm.aie2.I512.I512.acc64.negmul.conf(<64 x i8> %0, <16 x i32> %1, i32 18)
  ret <16 x i64> %2
}
declare <16 x i64> @llvm.aie2.I512.I512.acc64.negmul.conf(<64 x i8>, <16 x i32>, i32)

declare <64 x i8> @llvm.aie2.v64int8()
declare <16 x i32> @llvm.aie2.v16int32()
declare <16 x i64> @llvm.aie2.I512.I512.acc32.negmul.conf(<64 x i8>, <16 x i32>, i32)
