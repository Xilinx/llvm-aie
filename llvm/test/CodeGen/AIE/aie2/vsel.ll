; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 %s -o - | FileCheck %s

define dso_local noundef <64 x i8> @test_vsel_s8(<64 x i8> noundef %a, <64 x i8> noundef %b, i64 noundef %s) local_unnamed_addr #0 {
; CHECK-LABEL: test_vsel_s8:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r24, r0 // Delay Slot 4
; CHECK-NEXT:    mov r25, r1 // Delay Slot 3
; CHECK-NEXT:    vsel.8 x0, x2, x4, r25:r24 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast i64 %s to <2 x i32>
  %1 = tail call <64 x i8> @llvm.aie2.vsel8(<64 x i8> %a, <64 x i8> %b, <2 x i32> %0)
  ret <64 x i8> %1
}

define dso_local noundef <64 x i8> @test_vsel_s8_zeroinit(<64 x i8> noundef %a, <64 x i8> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: test_vsel_s8_zeroinit:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mova r24, #0 // Delay Slot 4
; CHECK-NEXT:    mov r25, r24 // Delay Slot 3
; CHECK-NEXT:    vsel.8 x0, x2, x4, r25:r24 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x i8> @llvm.aie2.vsel8(<64 x i8> %a, <64 x i8> %b, <2 x i32> zeroinitializer)
  ret <64 x i8> %0
}

define dso_local noundef <64 x i8> @test_vsel_s8_zeroinit_from_s32(<64 x i8> noundef %a, <64 x i8> noundef %b, i32 noundef %s) local_unnamed_addr #0 {
; CHECK-LABEL: test_vsel_s8_zeroinit_from_s32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r24, r0 // Delay Slot 4
; CHECK-NEXT:    mova r25, #0 // Delay Slot 3
; CHECK-NEXT:    vsel.8 x0, x2, x4, r25:r24 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %bitvec = insertelement <2 x i32> <i32 poison, i32 0>, i32 %s, i64 0
  %0 = tail call <64 x i8> @llvm.aie2.vsel8(<64 x i8> %a, <64 x i8> %b, <2 x i32> %bitvec)
  ret <64 x i8> %0
}

define dso_local noundef <32 x i16> @test_vsel_s16(<32 x i16> noundef %a, <32 x i16> noundef %b, i32 noundef %s) local_unnamed_addr #0 {
; CHECK-LABEL: test_vsel_s16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov r16, r0 // Delay Slot 3
; CHECK-NEXT:    vsel.16 x0, x2, x4, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call <32 x i16> @llvm.aie2.vsel16(<32 x i16> %a, <32 x i16> %b, i32 %s)
  ret <32 x i16> %0
}

define dso_local noundef <16 x i32> @test_vsel_s32(<16 x i32> noundef %a, <16 x i32> noundef %b, i32 noundef %s) local_unnamed_addr #0 {
; CHECK-LABEL: test_vsel_s32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov r1, r16 // Delay Slot 4
; CHECK-NEXT:    mov r16, r0 // Delay Slot 3
; CHECK-NEXT:    vsel.32 x0, x2, x4, r16 // Delay Slot 2
; CHECK-NEXT:    mov r16, r1 // Delay Slot 1
entry:
  %0 = tail call <16 x i32> @llvm.aie2.vsel32(<16 x i32> %a, <16 x i32> %b, i32 %s)
  ret <16 x i32> %0
}

declare <64 x i8> @llvm.aie2.vsel8(<64 x i8>, <64 x i8>, <2 x i32>) #1
declare <32 x i16> @llvm.aie2.vsel16(<32 x i16>, <32 x i16>, i32) #1
declare <16 x i32> @llvm.aie2.vsel32(<16 x i32>, <16 x i32>, i32) #1
