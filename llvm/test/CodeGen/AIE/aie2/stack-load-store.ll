; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 %s -o - | FileCheck %s

define dso_local noundef <8 x i32> @_Z4testDv8_i(<8 x i32> noundef %vec) local_unnamed_addr #0 {
; CHECK-LABEL: _Z4testDv8_i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    vst wl2, [sp, #-32]
; CHECK-NEXT:    vlda wl0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %temp = alloca <8 x i32>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %temp)
  store volatile <8 x i32> %vec, ptr %temp, align 32, !tbaa !2
  %temp.0.temp.0.temp.0.temp.0. = load volatile <8 x i32>, ptr %temp, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %temp)
  ret <8 x i32> %temp.0.temp.0.temp.0.temp.0.
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

define dso_local noundef <4 x i64> @_Z4testDv8_u7__acc32(<4 x i64> noundef %vec) local_unnamed_addr #0 {
; CHECK-LABEL: _Z4testDv8_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    paddb [sp], #32
; CHECK-NEXT:    vst amll1, [sp, #-32]
; CHECK-NEXT:    vlda amll0, [sp, #-32]
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
entry:
  %temp = alloca <4 x i64>, align 32
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %temp)
  store volatile <4 x i64> %vec, ptr %temp, align 32, !tbaa !2
  %temp.0.temp.0.temp.0.temp.0. = load volatile <4 x i64>, ptr %temp, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %temp)
  ret <4 x i64> %temp.0.temp.0.temp.0.temp.0.
}

!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
