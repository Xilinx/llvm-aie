; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s


%class.bfloat16 = type { bfloat }

define dso_local noundef <32 x bfloat> @_Z11test_shiftxDv32_u6__bf16S_ii(<32 x bfloat> noundef %a, <32 x bfloat> noundef %b, i32 noundef %step, i32 noundef %shift) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_shiftxDv32_u6__bf16S_ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov s0, r0 // Delay Slot 3
; CHECK-NEXT:    vshift.align x0, x2, s0, x4, r1 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.vshift.bf512.bf512(<32 x bfloat> %a, <32 x bfloat> %b, i32 %step, i32 %shift)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z11test_insertDv32_u6__bf16i8bfloat16(<32 x bfloat> noundef %v, i32 noundef %idx, %class.bfloat16 %b.coerce) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv32_u6__bf16i8bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r0 // Delay Slot 3
; CHECK-NEXT:    vinsert.16 x0, x2, r29, r1 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %b.coerce.fca.0.extract.i = extractvalue %class.bfloat16 %b.coerce, 0
  %0 = tail call <32 x bfloat> @llvm.aie2.vinsert16.bf512(<32 x bfloat> %v, i32 %idx, bfloat %b.coerce.fca.0.extract.i)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z11test_insertDv32_u6__bf16iDv2_u6__bf16(<32 x bfloat> noundef %v, i32 noundef %idx, <2 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv32_u6__bf16iDv2_u6__bf16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r0 // Delay Slot 3
; CHECK-NEXT:    vinsert.32 x0, x2, r29, r1 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.vinsert32.bf512(<32 x bfloat> %v, i32 %idx, <2 x bfloat> %b)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z11test_insertDv32_u6__bf16iDv4_u6__bf16(<32 x bfloat> noundef %v, i32 noundef %idx, <4 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv32_u6__bf16iDv4_u6__bf16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r0 // Delay Slot 3
; CHECK-NEXT:    vinsert.64 x0, x2, r29, r17:r16 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.vinsert64.bf512(<32 x bfloat> %v, i32 %idx, <4 x bfloat> %b)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z11test_insertDv32_u6__bf16iy(<32 x bfloat> noundef %v, i32 noundef %idx, i64 noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv32_u6__bf16iy:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r24, r1 // Delay Slot 5
; CHECK-NEXT:    mov r29, r0 // Delay Slot 4
; CHECK-NEXT:    mov r25, r2 // Delay Slot 3
; CHECK-NEXT:    vinsert.64 x0, x2, r29, r25:r24 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast i64 %b to <4 x bfloat>
  %1 = tail call <32 x bfloat> @llvm.aie2.vinsert64.bf512(<32 x bfloat> %v, i32 %idx, <4 x bfloat> %0)
  ret <32 x bfloat> %1
}


define dso_local noundef <32 x bfloat> @_Z29test_broadcast_to_v32bfloat168bfloat16(%class.bfloat16 %b.coerce) local_unnamed_addr #0 {
; CHECK-LABEL: _Z29test_broadcast_to_v32bfloat168bfloat16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vbcst.16 x0, r0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %b.coerce.fca.0.extract.i = extractvalue %class.bfloat16 %b.coerce, 0
  %0 = tail call <32 x bfloat> @llvm.aie2.vbroadcast16.bf512(bfloat %b.coerce.fca.0.extract.i)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z29test_broadcast_to_v32bfloat16Dv2_u6__bf16(<2 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z29test_broadcast_to_v32bfloat16Dv2_u6__bf16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vbcst.32 x0, r0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.vbroadcast32.bf512(<2 x bfloat> %b)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z29test_broadcast_to_v32bfloat16Dv4_u6__bf16(<4 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z29test_broadcast_to_v32bfloat16Dv4_u6__bf16:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vbcst.64 x0, r17:r16 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.vbroadcast64.bf512(<4 x bfloat> %b)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z21test_shuffle_bfloat168bfloat16j(%class.bfloat16 %b.coerce, i32 noundef %m) local_unnamed_addr #0 {
; CHECK-LABEL: _Z21test_shuffle_bfloat168bfloat16j:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    mov r29, r1 // Delay Slot 3
; CHECK-NEXT:    vbcstshfl.16 x0, r0, r29 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %b.coerce.fca.0.extract.i = extractvalue %class.bfloat16 %b.coerce, 0
  %0 = tail call <32 x bfloat> @llvm.aie2.vbcst.shuffle.bf16(bfloat %b.coerce.fca.0.extract.i, i32 %m)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z12test_shuffleDv32_u6__bf16S_j(<32 x bfloat> noundef %a, <32 x bfloat> noundef %b, i32 noundef %mode) local_unnamed_addr #0 {
; CHECK-LABEL: _Z12test_shuffleDv32_u6__bf16S_j:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vshuffle x0, x2, x4, r0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.vshuffle.bf16(<32 x bfloat> %a, <32 x bfloat> %b, i32 %mode)
  ret <32 x bfloat> %0
}


define dso_local noundef <32 x bfloat> @_Z19test_broadcast_elemDv32_u6__bf16i(<32 x bfloat> noundef %v, i32 noundef %idx) local_unnamed_addr #0 {
; CHECK-LABEL: _Z19test_broadcast_elemDv32_u6__bf16i:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vextbcst.32 x0, x2, #1 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.vextract.broadcast32.bf512(<32 x bfloat> %v, i32 1)
  ret <32 x bfloat> %0
}


define dso_local %class.bfloat16 @_Z13test_ext_elemDv32_u6__bf16ii(<32 x bfloat> noundef %v, i32 noundef %idx, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z13test_ext_elemDv32_u6__bf16ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; mov r3, r16
; CHECK-NEXT:    mov r16, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crVaddSign, r2 // Delay Slot 5
; CHECK-NEXT:    vextract.d16 r0, x0, r16 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 2
; CHECK-NEXT:    mov r16, r3 // Delay Slot 1
entry:
  %0 = bitcast <32 x bfloat> %v to <32 x i16>
  %1 = tail call i32 @llvm.aie2.vextract.elem16.I512(<32 x i16> %0, i32 %idx, i32 %sign)
  %elem.0.extract.trunc.i = trunc i32 %1 to i16
  %2 = bitcast i16 %elem.0.extract.trunc.i to bfloat
  %.fca.0.insert.i = insertvalue %class.bfloat16 poison, bfloat %2, 0
  ret %class.bfloat16 %.fca.0.insert.i
}

define dso_local noundef <2 x bfloat> @_Z23test_extract_v2bfloat16Dv32_u6__bf16ii(<32 x bfloat> noundef %v, i32 noundef %idx, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z23test_extract_v2bfloat16Dv32_u6__bf16ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; mov r3, r16
; CHECK-NEXT:    mov r16, r1
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    mov crVaddSign, r2 // Delay Slot 5
; CHECK-NEXT:    vextract.d32 r0, x0, r16 // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 2
; CHECK-NEXT:    mov r16, r3 // Delay Slot 1
entry:
  %0 = bitcast <32 x bfloat> %v to <16 x i32>
  %1 = tail call i32 @llvm.aie2.vextract.elem32.I512(<16 x i32> %0, i32 %idx, i32 %sign)
  %2 = bitcast i32 %1 to <2 x bfloat>
  ret <2 x bfloat> %2
}

define dso_local noundef i64 @_Z12test_ext_u64Dv32_u6__bf16ii(<32 x bfloat> noundef %v, i32 noundef %idx, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z12test_ext_u64Dv32_u6__bf16ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; nopx ; mov r4, r16; nops
; CHECK-NEXT:    mov r16, r2
; CHECK-NEXT:    mov crVaddSign, r3
; CHECK-NEXT:    vextract.d64 r25:r24, x0, r16
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 4
; CHECK-NEXT:    mov r16, r4 // Delay Slot 3
; CHECK-NEXT:    mov r0, r24 // Delay Slot 2
; CHECK-NEXT:    mov r1, r25 // Delay Slot 1
entry:
  %0 = bitcast <32 x bfloat> %v to <16 x i32>
  %1 = tail call <2 x i32> @llvm.aie2.vextract.elem64.I512(<16 x i32> %0, i32 %idx, i32 %sign)
  %2 = bitcast <2 x i32> %1 to i64
  ret i64 %2
}

define dso_local noundef <4 x bfloat> @_Z23test_extract_v4bfloat16Dv32_u6__bf16ii(<32 x bfloat> noundef %v, i32 noundef %idx, i32 noundef %sign) local_unnamed_addr #0 {
; CHECK-LABEL: _Z23test_extract_v4bfloat16Dv32_u6__bf16ii:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    mov r16, r0 // Delay Slot 5
; CHECK-NEXT:    mov crVaddSign, r1 // Delay Slot 4
; CHECK-NEXT:    vextract.d64 r17:r16, x0, r16 // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    mov crVaddSign, #0 // Delay Slot 1
entry:
  %0 = bitcast <32 x bfloat> %v to <16 x i32>
  %1 = tail call <2 x i32> @llvm.aie2.vextract.elem64.I512(<16 x i32> %0, i32 %idx, i32 %sign)
  %2 = bitcast <2 x i32> %1 to <4 x bfloat>
  ret <4 x bfloat> %2
}


declare <32 x bfloat> @llvm.aie2.vshift.bf512.bf512(<32 x bfloat>, <32 x bfloat>, i32, i32) #2
declare <32 x bfloat> @llvm.aie2.vinsert16.bf512(<32 x bfloat>, i32, bfloat) #2
declare <32 x bfloat> @llvm.aie2.vinsert32.bf512(<32 x bfloat>, i32, <2 x bfloat>) #2
declare <32 x bfloat> @llvm.aie2.vinsert64.bf512(<32 x bfloat>, i32, <4 x bfloat>) #2
declare <32 x bfloat> @llvm.aie2.vbroadcast16.bf512(bfloat) #2
declare <32 x bfloat> @llvm.aie2.vbroadcast32.bf512(<2 x bfloat>) #2
declare <32 x bfloat> @llvm.aie2.vbroadcast64.bf512(<4 x bfloat>) #2
declare <32 x bfloat> @llvm.aie2.vbcst.shuffle.bf16(bfloat, i32) #2
declare <32 x bfloat> @llvm.aie2.vshuffle.bf16(<32 x bfloat>, <32 x bfloat>, i32) #2
declare <32 x bfloat> @llvm.aie2.vextract.broadcast32.bf512(<32 x bfloat>, i32) #2
declare i32 @llvm.aie2.vextract.elem16.I512(<32 x i16>, i32, i32)
declare i32 @llvm.aie2.vextract.elem32.I512(<16 x i32>, i32, i32)
declare <2 x i32> @llvm.aie2.vextract.elem64.I512(<16 x i32>, i32, i32)
