; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 %s -o - | FileCheck %s

define noundef <8 x bfloat> @test_extract_v8bfloat16_512(<32 x bfloat> noundef %a, i32 noundef %idx) {
; CHECK-LABEL: test_extract_v8bfloat16_512:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mova r1, #4 // Delay Slot 4
; CHECK-NEXT:    lshl r0, r0, r1 // Delay Slot 3
; CHECK-NEXT:    vshift x0, x2, x0, r0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <32 x bfloat> %a to <16 x i32>
  %1 = tail call <32 x bfloat> @llvm.aie2.v32bfloat16()
  %2 = bitcast <32 x bfloat> %1 to <16 x i32>
  %mul.i = shl nsw i32 %idx, 4
  %3 = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> %0, <16 x i32> %2, i32 0, i32 %mul.i)
  %4 = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> %3)
  %5 = bitcast <4 x i32> %4 to <8 x bfloat>
  ret <8 x bfloat> %5
}

define noundef <8 x bfloat> @test_extract_v8bfloat16_256(<16 x bfloat> noundef %a, i32 noundef %idx) {
; CHECK-LABEL: test_extract_v8bfloat16_256:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    mova r1, #4 // Delay Slot 4
; CHECK-NEXT:    lshl r0, r0, r1 // Delay Slot 3
; CHECK-NEXT:    vshift x0, x2, x0, r0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.set.bf512.bf256(<16 x bfloat> %a, i32 0)
  %1 = bitcast <32 x bfloat> %0 to <16 x i32>
  %2 = tail call <32 x bfloat> @llvm.aie2.v32bfloat16()
  %3 = bitcast <32 x bfloat> %2 to <16 x i32>
  %mul.i.i = shl nsw i32 %idx, 4
  %4 = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> %1, <16 x i32> %3, i32 0, i32 %mul.i.i)
  %5 = tail call <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32> %4)
  %6 = bitcast <4 x i32> %5 to <8 x bfloat>
  ret <8 x bfloat> %6
}

define noundef <16 x bfloat> @test_set_v8bfloat16_idx(i32 noundef %idx, <8 x bfloat> noundef %a) {
; CHECK-LABEL: test_set_v8bfloat16_idx:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm
; CHECK-NEXT:    mova r1, #4 // Delay Slot 5
; CHECK-NEXT:    mova r2, #64; lshl r0, r0, r1 // Delay Slot 4
; CHECK-NEXT:    sub r0, r2, r0 // Delay Slot 3
; CHECK-NEXT:    vshift x0, x0, x2, r0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <8 x bfloat> %a to <4 x i32>
  %1 = tail call <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32> %0)
  %2 = tail call <32 x bfloat> @llvm.aie2.v32bfloat16()
  %3 = bitcast <32 x bfloat> %2 to <16 x i32>
  %4 = shl i32 %idx, 4
  %mul.i.i = sub i32 64, %4
  %5 = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> %3, <16 x i32> %1, i32 0, i32 %mul.i.i)
  %retval.0.i.i = bitcast <16 x i32> %5 to <32 x bfloat>
  %6 = tail call <16 x bfloat> @llvm.aie2.ext.bf256.bf512(<32 x bfloat> %retval.0.i.i, i32 0)
  ret <16 x bfloat> %6
}

define dso_local noundef <16 x bfloat> @test_extract_v16bfloat16_512(<32 x bfloat> noundef %a, i32 noundef %idx) local_unnamed_addr #0 {
; CHECK-LABEL: test_extract_v16bfloat16_512:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov x0, x2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x bfloat> @llvm.aie2.ext.bf256.bf512(<32 x bfloat> %a, i32 0)
  ret <16 x bfloat> %0
}

define dso_local noundef <32 x bfloat> @test_insert_v16bfloat16_512(<32 x bfloat> noundef %a, i32 noundef %idx, <16 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: test_insert_v16bfloat16_512:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov x0, x2 // Delay Slot 3
; CHECK-NEXT:    vmov wh0, wl4 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.upd.bf512.bf256(<32 x bfloat> %a, <16 x bfloat> %b, i32 1)
  ret <32 x bfloat> %0
}

define dso_local noundef <32 x bfloat> @test_set_v16bfloat16_512(i32 noundef %idx, <16 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: test_set_v16bfloat16_512:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov wh0, wl2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.set.bf512.bf256(<16 x bfloat> %b, i32 1)
  ret <32 x bfloat> %0
}

define dso_local noundef <32 x bfloat> @test_concat_v16bfloat16_512(<16 x bfloat> noundef %a0, <16 x bfloat> noundef %a1) local_unnamed_addr #0 {
; CHECK-LABEL: test_concat_v16bfloat16_512:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov wl0, wl2 // Delay Slot 3
; CHECK-NEXT:    vmov wh0, wl4 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.concat.bf512.bf256(<16 x bfloat> %a0, <16 x bfloat> %a1)
  ret <32 x bfloat> %0
}

define dso_local noundef <16 x bfloat> @test_extract_v16bfloat16_1024(<64 x bfloat> noundef %a, i32 noundef %idx) local_unnamed_addr #0 {
; CHECK-LABEL: test_extract_v16bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov wl0, wh5 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x bfloat> @llvm.aie2.ext.bf256.bf1024(<64 x bfloat> %a, i32 3)
  ret <16 x bfloat> %0
}

define dso_local noundef <64 x bfloat> @test_insert_v16bfloat16_1024(<64 x bfloat> noundef %a, i32 noundef %idx, <16 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: test_insert_v16bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vmov x4, x6 // Delay Slot 4
; CHECK-NEXT:    vmov x5, x7 // Delay Slot 3
; CHECK-NEXT:    vmov wl5, wl0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x bfloat> @llvm.aie2.upd.bf1024.bf256(<64 x bfloat> %a, <16 x bfloat> %b, i32 2)
  ret <64 x bfloat> %0
}

define dso_local noundef <64 x bfloat> @test_set_v16bfloat16_1024(i32 noundef %idx, <16 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: test_set_v16bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov wh4, wl0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x bfloat> @llvm.aie2.set.bf1024.bf256(<16 x bfloat> %b, i32 1)
  ret <64 x bfloat> %0
}

define dso_local noundef <64 x bfloat> @test_concat_v16bfloat16_1024(<16 x bfloat> noundef %a0, <16 x bfloat> noundef %a1, <16 x bfloat> noundef %a2, <16 x bfloat> noundef %a3) local_unnamed_addr #0 {
; CHECK-LABEL: test_concat_v16bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopa ; nopb ; ret lr ; nopm ; nops
; CHECK-NEXT:    vmov wl4, wl0 // Delay Slot 5
; CHECK-NEXT:    vmov wh4, wl2 // Delay Slot 4
; CHECK-NEXT:    vmov wl5, wl6 // Delay Slot 3
; CHECK-NEXT:    vmov wh5, wl8 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x bfloat> @llvm.aie2.concat.bf1024.bf256(<16 x bfloat> %a0, <16 x bfloat> %a1, <16 x bfloat> %a2, <16 x bfloat> %a3)
  ret <64 x bfloat> %0
}

define dso_local noundef <32 x bfloat> @test_extract_v32bfloat16_1024(<64 x bfloat> noundef %a, i32 noundef %idx) local_unnamed_addr #0 {
; CHECK-LABEL: test_extract_v32bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov x0, x5 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <32 x bfloat> @llvm.aie2.ext.bf512.bf1024(<64 x bfloat> %a, i32 1)
  ret <32 x bfloat> %0
}

define dso_local noundef <64 x bfloat> @test_insert_v32bfloat16_1024(<64 x bfloat> noundef %a, i32 noundef %idx, <32 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: test_insert_v32bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov x4, x6 // Delay Slot 3
; CHECK-NEXT:    vmov x5, x0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x bfloat> @llvm.aie2.upd.bf1024.bf512(<64 x bfloat> %a, <32 x bfloat> %b, i32 1)
  ret <64 x bfloat> %0
}

define dso_local noundef <64 x bfloat> @test_set_v32bfloat16_1024(i32 noundef %idx, <32 x bfloat> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: test_set_v32bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov x5, x0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x bfloat> @llvm.aie2.set.bf1024.bf512(<32 x bfloat> %b, i32 1)
  ret <64 x bfloat> %0
}

define dso_local noundef <64 x bfloat> @test_concat_v32bfloat16_1024(<32 x bfloat> noundef %a0, <32 x bfloat> noundef %a1) local_unnamed_addr #0 {
; CHECK-LABEL: test_concat_v32bfloat16_1024:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; nopa ; nops ; ret lr ; nopm ; nopv
; CHECK-NEXT:    nopx // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov x4, x0 // Delay Slot 3
; CHECK-NEXT:    vmov x5, x2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <64 x bfloat> @llvm.aie2.concat.bf1024.bf512(<32 x bfloat> %a0, <32 x bfloat> %a1)
  ret <64 x bfloat> %0
}

declare <16 x bfloat> @llvm.aie2.ext.bf256.bf512(<32 x bfloat>, i32) #1
declare <32 x bfloat> @llvm.aie2.upd.bf512.bf256(<32 x bfloat>, <16 x bfloat>, i32) #1
declare <32 x bfloat> @llvm.aie2.set.bf512.bf256(<16 x bfloat>, i32) #1
declare <32 x bfloat> @llvm.aie2.concat.bf512.bf256(<16 x bfloat>, <16 x bfloat>) #1
declare <16 x bfloat> @llvm.aie2.ext.bf256.bf1024(<64 x bfloat>, i32) #1
declare <64 x bfloat> @llvm.aie2.upd.bf1024.bf256(<64 x bfloat>, <16 x bfloat>, i32) #1
declare <64 x bfloat> @llvm.aie2.set.bf1024.bf256(<16 x bfloat>, i32) #1
declare <64 x bfloat> @llvm.aie2.concat.bf1024.bf256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>, <16 x bfloat>) #1
declare <32 x bfloat> @llvm.aie2.ext.bf512.bf1024(<64 x bfloat>, i32) #1
declare <64 x bfloat> @llvm.aie2.upd.bf1024.bf512(<64 x bfloat>, <32 x bfloat>, i32) #1
declare <64 x bfloat> @llvm.aie2.set.bf1024.bf512(<32 x bfloat>, i32) #1
declare <64 x bfloat> @llvm.aie2.concat.bf1024.bf512(<32 x bfloat>, <32 x bfloat>) #1
declare <16 x i32> @llvm.aie2.set.I512.I128(<4 x i32>) #1
declare <32 x bfloat> @llvm.aie2.v32bfloat16() #1
declare <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32>, <16 x i32>, i32, i32) #1
declare <4 x i32> @llvm.aie2.extract.I128.I512(<16 x i32>) #1
