; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 --issue-limit=1 %s -o - | FileCheck %s

define dso_local noundef <16 x i64> @test_sub_acc(<16 x i64> noundef %acc1, <16 x i64> noundef %acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_sub_acc:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    nopb ; mova r0, #0; nops ; nopxm ; nopv
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vsub cm0, cm1, cm2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.sub.acc(<16 x i64> %acc1, <16 x i64> %acc2, i32 0)
  ret <16 x i64> %0
}

define dso_local noundef <16 x i64> @test_sub_conf(<16 x i64> noundef %acc1, <16 x i64> noundef %acc2, i32 noundef %zero_acc1, i32 noundef %shift16, i32 noundef %sub_acc1, i32 noundef %sub_acc2) local_unnamed_addr #0 {
; CHECK-LABEL: test_sub_conf:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r4, #10; nopb ; nopx
; CHECK-NEXT:    mova r5, #12
; CHECK-NEXT:    lshl r1, r1, r4
; CHECK-NEXT:    mova r6, #13
; CHECK-NEXT:    lshl r2, r2, r5
; CHECK-NEXT:    or r0, r1, r0
; CHECK-NEXT:    lshl r3, r3, r6
; CHECK-NEXT:    or r0, r0, r2
; CHECK-NEXT:    mova r7, #2
; CHECK-NEXT:    or r0, r0, r3
; CHECK-NEXT:    or r0, r0, r7
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    vsub cm0, cm1, cm2, r0 // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %shl1.i.i = shl i32 %shift16, 10
  %shl4.i.i = shl i32 %sub_acc1, 12
  %shl6.i.i = shl i32 %sub_acc2, 13
  %or11.i.i = or i32 %shl1.i.i, %zero_acc1
  %or13.i.i = or i32 %or11.i.i, %shl4.i.i
  %or17.i.i = or i32 %or13.i.i, %shl6.i.i
  %or19.i.i = or i32 %or17.i.i, 2
  %0 = tail call <16 x i64> @llvm.aie2.sub.acc(<16 x i64> %acc1, <16 x i64> %acc2, i32 %or19.i.i)
  ret <16 x i64> %0
}


declare <16 x i64> @llvm.aie2.sub.acc(<16 x i64>, <16 x i64>, i32) #1
