# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched \
# RUN:     --aie-interblock-scoreboard=false --aie-loop-aware=false %s -o - | FileCheck %s

# Check that inter-block latencies are respected. We disable the interblock
# scoreboard from the commandline to make the test more sensitive

# Note: Comments sometimes refer to cycles. The first cycle is cycle 0

---
name:            singleSuccLoopPreheader
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: singleSuccLoopPreheader
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = nsw ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r1, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   ST_dms_sts_idx_imm $r0, $p1, 0
  ; CHECK-NEXT:   $p0 = PADDB_ldb_ptr_inc_nrm_imm killed $p0, 4
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r0

  ;  The load in the preheader has a single use in the store.
  ;  This is pushed ALAP into the delay slot, which allows a single nop
  ;  as safety margin in the preheader
  bb.0:
    liveins: $p0, $p1, $r1
    $r0 = LDA_dms_lda_idx_imm $p0, 0
  bb.1:
    liveins: $p0, $p1, $r0, $r1
    $r1 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
    $p0 = PADD_imm_pseudo $p0, 4
    ST_dms_sts_idx_imm $r0, $p1, 0
    JNZ $r1, %bb.1
    DelayedSchedBarrier
  bb.4:
    liveins: $r0
    RET implicit $lr
    DelayedSchedBarrier implicit $r0
...


---
name:            twoSucc
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: twoSucc
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r1, %bb.2
  ; CHECK-NEXT:   $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $x0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = OR killed $r1, $r2
  ; CHECK-NEXT:   $r1 = AND killed $r1, killed $r2
  ; CHECK-NEXT:   $x0 = VSHUFFLE killed $x0, $x0, killed $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $wl0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $wl0

  ;  The load has uses in two successor blocks
  ;  bb.1 uses it in cycle 2, bb2 uses it deep down in the delay slot
  ;  Check that we observe the earliest one
  bb.0:
    liveins: $p0, $r1
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    JNZ $r1, %bb.2
    DelayedSchedBarrier
  bb.1:
    liveins: $x0, $r1, $r2
    $r1 = OR $r1, $r2
    $r1 = AND $r1, $r2
    $x0 = VSHUFFLE $x0, $x0, $r1
  bb.2:
    liveins: $wl0
    RET implicit $lr
    DelayedSchedBarrier implicit $wl0
...

# The load latency exceeds the length of the successor block
# Therefore, we need to fill some nops as safety margin
---
name:            shortSucc
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: shortSucc
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = OR killed $r1, $r2
  ; CHECK-NEXT:   $r1 = AND killed $r1, killed $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1

  bb.0:
    successors: %bb.1
    liveins: $p0
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
  bb.1:
    successors: %bb.2
    liveins: $r1, $r2
    $r1 = OR $r1, $r2
    $r1 = AND $r1, $r2
  bb.2:
    successors:
    liveins: $r1
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...
