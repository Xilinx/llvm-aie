# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched \
# RUN:   --aie-latency-margin=0 --aie-interblock-alignment=false \
# RUN:   --aie-loop-aware=false %s -o - | FileCheck %s

# Check that inter-block scoreboard is ok. We disable the latency safety
# margin from the command line to make the test more sensitive.
# We switch off the alignment provision, to have less fuzziness in
# the cycles we construct

# Note: Comments sometimes refer to cycles. The first cycle is cycle 0

# The write port of MUL_mul_r_rr conflicts with those of the ALU instructions
# in the successor
---
name:            oneSucc
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: oneSucc
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = MUL_mul_r_rr $r1, $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = OR $r1, $r1
  ; CHECK-NEXT:   $r2 = AND $r1, killed $r2
  ; CHECK-NEXT:   JNZ killed $r2, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier

  bb.0:
    successors: %bb.1
    liveins: $r1
    $r0 = MUL_mul_r_rr $r1, $r1
  bb.1:
    successors: %bb.1, %bb.2
    liveins: $r1
    $r2 = OR $r1, $r1
    $r2 = AND $r1, $r2
    JNZ $r2, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    RET  implicit $lr
    DelayedSchedBarrier
...

# The write port of MUL_mul_r_rr conflicts with those of the ALU instructions
# in bb.1
---
name:            twoSuccFirstConflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: twoSuccFirstConflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = MUL_mul_r_rr $r1, $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   JNZ killed $r0, %bb.2
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = OR killed $r1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier

  bb.0:
    successors: %bb.2, %bb.1
    liveins: $r1
    $r0 = MUL_mul_r_rr $r1, $r1
    JNZ $r0, %bb.2
    DelayedSchedBarrier
  bb.1:
    successors: %bb.2
    liveins: $r1
    $r2 = OR $r1, $r1
  bb.2:
    successors:
    RET  implicit $lr
    DelayedSchedBarrier
...

# The write port of MUL_mul_r_rr conflicts with those of the ALU instructions
# in bb.2
---
name:            twoSuccSecondConflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: twoSuccSecondConflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r1, %bb.2
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r0 = MUL_mul_r_rr $r1, $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $wl1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl0 = VMOV_mv_w killed $wl1
  ; CHECK-NEXT:   $wh0 = VMOV_mv_w killed $wl0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = OR killed $r1, $r1

  bb.0:
    successors: %bb.2, %bb.1
    liveins: $r1
    $r0 = MUL_mul_r_rr $r1, $r1
    JNZ $r1, %bb.2
    DelayedSchedBarrier
  bb.1:
    successors: %bb.2
    liveins: $wl1
    $wl0 = VMOV_mv_w $wl1
    $wh0 = VMOV_mv_w $wl0
  bb.2:
    successors:
    liveins: $r1
    $r2 = OR $r1, $r1
...

# The MUL_mul_r_rr has no successor conflicts
---
name:            twoSuccNoConflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: twoSuccNoConflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r1, %bb.2
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r0 = MUL_mul_r_rr killed $r1, $r1
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $wl1, $wh1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl0 = VMOV_mv_w $wl1
  ; CHECK-NEXT:   $wh0 = VMOV_mv_w $wh1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $wl1, $wh1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl2 = VMOV_mv_w killed $wl1
  ; CHECK-NEXT:   $wh2 = VMOV_mv_w killed $wh1
  ; CHECK-NEXT:   NOP

  bb.0:
    successors: %bb.2, %bb.1
    liveins: $r1
    $r0 = MUL_mul_r_rr $r1, $r1
    JNZ $r1, %bb.2
    DelayedSchedBarrier
  bb.1:
    successors: %bb.2
    liveins: $wl1, $wh1
    $wl0 = VMOV_mv_w $wl1
    $wh0 = VMOV_mv_w $wh1
  bb.2:
    successors:
    liveins: $wl1, $wh1
    $wl2 = VMOV_mv_w $wl1
    $wh2 = VMOV_mv_w $wh1
...

# We run into a block that is too short to exclude a conflict
---
name:            unknownConflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: unknownConflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = MUL_mul_r_rr killed $r1, $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:

  bb.0:
    successors: %bb.1
    liveins: $r1
    $r0 = MUL_mul_r_rr $r1, $r1
  bb.1:
    successors:
...

# VLDA has late vector write port W_WA conflicts with VCONV, E7 vs E2
# We force the VCONV to cycle 0 in bb.1 and cycle 1 in bb.2
# using a parallel latency chain that leaves the ST slot free in just one
# position. Hence, we have E2 and E3 in the successors occupied with W_WA
# E4 is free and the last visible cycle in both successors, so VLDA's
# W_WA use should land there.
---
name:            twoSuccLateConflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: twoSuccLateConflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ killed $r1, %bb.2
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $bml0, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl1 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd {
  ; CHECK-NEXT:     $p1 = MOV_mv_scl $p0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $p1 = PADDS_st_ptr_inc_idx_imm killed $p1, 4
  ; CHECK-NEXT:   $p1 = PADDS_st_ptr_inc_idx_imm killed $p1, 4
  ; CHECK-NEXT:   $p1 = PADDS_st_ptr_inc_idx_imm killed $p1, 4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $bml0, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $p0 = PADDS_st_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $wl1 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd {
  ; CHECK-NEXT:     $p1 = MOV_mv_scl killed $p0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $p1 = PADDS_st_ptr_inc_idx_imm killed $p1, 4
  ; CHECK-NEXT:   $p1 = PADDS_st_ptr_inc_idx_imm killed $p1, 4

  bb.0:
    successors: %bb.2, %bb.1
    liveins: $p0, $r1
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    JNZ $r1, %bb.2
    DelayedSchedBarrier
  bb.1:
    successors: %bb.2
    liveins: $bml0, $p0
    $wl1 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $p1 = MOV_mv_scl $p0
    $p1 = PADDS_st_ptr_inc_idx_imm $p1, 4
    $p1 = PADDS_st_ptr_inc_idx_imm $p1, 4
    $p1 = PADDS_st_ptr_inc_idx_imm $p1, 4
  bb.2:
    successors:
    liveins: $bml0, $p0
    $wl1 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $p0 = PADDS_st_ptr_inc_idx_imm $p0, 4
    $p1 = MOV_mv_scl $p0
    $p1 = PADDS_st_ptr_inc_idx_imm $p1, 4
    $p1 = PADDS_st_ptr_inc_idx_imm $p1, 4
...

# This is a variant of twoSuccLateConflict, where we have an unknown successor
# caused by a RET instruction
# This example is on the edge of being realistic. I don't see a way to get
# the VLDA in the bottom region, where it would have a chance of sticking out.
# To do that I would have a normal instruction between terminators.
---
name:            unknownRetSuccessor
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: unknownRetSuccessor
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
  ; CHECK-NEXT:   JNZ killed $r1, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $bml0, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $p0 = PADDS_st_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $wl1 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd {
  ; CHECK-NEXT:     $p1 = MOV_mv_scl killed $p0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $p1 = PADDS_st_ptr_inc_idx_imm killed $p1, 4
  ; CHECK-NEXT:   $p1 = PADDS_st_ptr_inc_idx_imm killed $p1, 4
  ; CHECK-NEXT:   DelayedSchedBarrier

  bb.0:
    successors: %bb.1
    liveins: $p0, $r1
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    JNZ $r1, %bb.1
    DelayedSchedBarrier
    RET  implicit $lr
    DelayedSchedBarrier
  bb.1:
    successors:
    liveins: $bml0, $p0
    $wl1 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $p0 = PADDS_st_ptr_inc_idx_imm $p0, 4
    $p1 = MOV_mv_scl $p0
    $p1 = PADDS_st_ptr_inc_idx_imm $p1, 4
    $p1 = PADDS_st_ptr_inc_idx_imm $p1, 4
    RET  implicit $lr
    DelayedSchedBarrier
...

# VLDA has a deep resource use that should be accounted for in bb.0
---
name:            simpleDeepResource
alignment:       16
tracksRegLiveness: true
body:             |

  bb.0:
    successors:
    liveins: $p0
    ; CHECK-LABEL: name: simpleDeepResource
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: RET implicit $lr
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: DelayedSchedBarrier
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    RET  implicit $lr
    DelayedSchedBarrier
...

# VSRS has an E4 use of W_WA_PORT, and both successors are too short
---
name:            twoShortSuccs
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: twoShortSuccs
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $s1, $r2, $bmh3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r2, %bb.2
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $wh5 = VSRS_D32_S64_mv_w_srs killed $bmh3, killed $s1, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = AND $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = OR killed $r2, $r3
  ; CHECK-NEXT:   $r0 = AND killed $r0, killed $r3
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $s1, $r2, $bmh3
    $wh5 = VSRS_D32_S64_mv_w_srs $bmh3, $s1, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    JNZ killed $r2, %bb.2
    DelayedSchedBarrier
  bb.1:
    successors: %bb.2
    liveins: $r2, $r3
    $r0 = AND $r2, $r3
  bb.2:
    successors:
    liveins: $r2, $r3
    $r0 = OR $r2, $r3
    $r0 = AND $r0, $r3
...

# We whould not trust successors if we have a call
---
name:            callConflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: callConflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx_imm killed $p0, 0
  ; CHECK-NEXT:   JL 32, implicit-def $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = OR killed $r2, $r3
  ; CHECK-NEXT:   $r0 = AND killed $r0, $r3
  ; CHECK-NEXT:   $r1 = OR $r0, $r3
  ; CHECK-NEXT:   $r1 = AND $r0, killed $r1
  ; CHECK-NEXT:   $r1 = OR killed $r1, killed $r0
  ; CHECK-NEXT:   $r1 = AND killed $r1, $r3
  ; CHECK-NEXT:   $r0 = OR killed $r1, killed $r3
  bb.0:
    successors: %bb.1
    liveins: $p0
    $r1 =  LDA_dms_lda_idx_imm $p0, 0
    JL  32, implicit-def $lr
    DelayedSchedBarrier
  bb.1:
    successors:
    liveins: $r2, $r3
    $r0 = OR $r2, $r3
    $r0 = AND $r0, $r3
    $r1 = OR $r0, $r3
    $r1 = AND $r0, $r1
    $r1 = OR $r1, $r0
    $r1 = AND $r1, $r3
    $r0 = OR $r1, $r3
...
