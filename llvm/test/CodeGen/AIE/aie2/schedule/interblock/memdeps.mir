# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched \
# RUN:     --aie-interblock-scoreboard=false %s -o - | FileCheck %s

# Check that inter-block memory latencies are respected.
# We disable the interblock scoreboard from the commandline to make the
# test more sensitive

# We focus on late memory writers like VST.SRS

# Note: Comments sometimes refer to cycles. The first cycle is cycle 0

# bb.0 has one scheduled successor bb.1 with a store memory dependence.
# That instruction is pushed to the start of the block by a chain of
# pointer dependences
# As a result, we cannot reduce maxlatency (3) of this instruction and we
# need two NOPs
---
name:            worstCase
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: worstCase
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $cm0, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   VST_SRS_D8_S32_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $wl0, $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   BUNDLE implicit-def $p1, implicit killed $p1, implicit killed $wl0 {
  ; CHECK-NEXT:     $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:     VST_dmw_sts_w_ag_idx_imm killed $wl0, internal $p1, 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0:
    liveins: $p0, $cm0, $s0
    successors: %bb.1
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  bb.1:
    liveins: $wl0, $p1
    successors: %bb.2
    VST_dmw_sts_w_ag_idx_imm  $wl0, $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
  bb.2:
    successors: %bb.2
    RET implicit $lr
    DelayedSchedBarrier
...


# Like worstCase, but now the store gets fixed in cycle 2. Since it is the
# only dependence, this saves two cycles, so we don't need any nops.
---
name:            bestCase
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: bestCase
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $cm0, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   VST_SRS_D8_S32_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $wl0, $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   BUNDLE implicit-def $p1, implicit killed $p1, implicit killed $wl0 {
  ; CHECK-NEXT:     $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:     VST_dmw_sts_w_ag_idx_imm killed $wl0, internal $p1, 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0:
    liveins: $p0, $cm0, $s0
    successors: %bb.1
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  bb.1:
    liveins: $wl0, $p1
    successors: %bb.2
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    VST_dmw_sts_w_ag_idx_imm  $wl0, $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
  bb.2:
    successors: %bb.2
    RET implicit $lr
    DelayedSchedBarrier
...

# Somewhere between worstCase and BestCase
---
name:            middleCase
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: middleCase
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $cm0, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   VST_SRS_D8_S32_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $wl0, $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   BUNDLE implicit-def $p1, implicit killed $p1, implicit killed $wl0 {
  ; CHECK-NEXT:     $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:     VST_dmw_sts_w_ag_idx_imm killed $wl0, internal $p1, 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0:
    liveins: $p0, $cm0, $s0
    successors: %bb.1
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  bb.1:
    liveins: $wl0, $p1
    successors: %bb.2
     $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    VST_dmw_sts_w_ag_idx_imm  $wl0, $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
    $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 0
  bb.2:
    successors: %bb.2
    RET implicit $lr
    DelayedSchedBarrier
...
