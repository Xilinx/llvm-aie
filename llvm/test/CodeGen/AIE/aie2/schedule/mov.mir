# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %s %topdown-multi -o - | FileCheck %s

---
name:            latency
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: latency
    ; CHECK: $r6 = MOV_mv_cg 10
    ; CHECK-NEXT: $r7 = MOV_mv_scl killed $r6
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r7, killed $p0, 0
    ; CHECK-NEXT: NOP
    $r6 = MOV_mv_cg 10
    $r7 = MOV_mv_scl $r6
    ST_dms_sts_idx_imm $r7, $p0, 0
...

---
name:            multi_slot_sched
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r2 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 2
    $r1 = MOV_RLC_imm10_pseudo 0
    $r2 = MOV_RLC_imm10_pseudo 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOVA_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOVA_first
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r2 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 2
    $r1 = MOVA_lda_cg 0
    $r2 = MOV_RLC_imm10_pseudo 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOVX_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOVX_first
    ; CHECK: BUNDLE implicit-def $r2, implicit-def $r1 {
    ; CHECK-NEXT:   $r2 = MOVA_lda_cg 1
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 2
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_RLC_imm10_pseudo 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOV_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOV_first
    ; CHECK: BUNDLE implicit-def $r2, implicit-def $r1 {
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $r1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 2
    $r1 = MOV_mv_cg 0
    $r2 = MOV_RLC_imm10_pseudo 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOVXM_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOVXM_first
    ; CHECK: $r1 = MOVXM_lng_cg 0
    ; CHECK-NEXT: BUNDLE implicit-def $r2, implicit-def $r3 {
    ; CHECK-NEXT:   $r2 = MOVA_lda_cg 1
    ; CHECK-NEXT:   $r3 = MOVX_alu_cg 2
    ; CHECK-NEXT: }
    $r1 = MOVXM_lng_cg 0
    $r2 = MOV_RLC_imm10_pseudo 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOVA_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOVA_second
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r3 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r3 = MOVX_alu_cg 2
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 1
    $r1 = MOV_RLC_imm10_pseudo 0
    $r2 = MOVA_lda_cg 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOVX_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOVX_second
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r2 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 2
    $r1 = MOV_RLC_imm10_pseudo 0
    $r2 = MOVX_alu_cg 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOV_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOV_second
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r3 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r3 = MOVX_alu_cg 2
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_cg 1
    $r1 = MOV_RLC_imm10_pseudo 0
    $r2 = MOV_mv_cg 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

---
name:            multi_slot_sched_MOVXM_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_MOVXM_second
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r3 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r3 = MOVX_alu_cg 2
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOVXM_lng_cg 1
    $r1 = MOV_RLC_imm10_pseudo 0
    $r2 = MOVXM_lng_cg 1
    $r3 = MOV_RLC_imm10_pseudo 2
...

# Lot of cases down are not bundling the INSTR together, because we reserve P_WM_PORT for any kind of D or P reg type. The ISA suggests every register file has its own writeport, which is selected. Once we are able to do that we would start seeing better bundling.

---
name:            multi_slot_sched_s20
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20
    ; CHECK: $dc1 = MOVA_lda_cg 0
    ; CHECK-NEXT: $m0 = MOVA_lda_cg 1
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    $dc1 = MOV_PD_imm10_pseudo 0
    $m0 = MOV_PD_imm10_pseudo 1
    $p0 = MOV_PD_imm10_pseudo 2
...

---
name:            multi_slot_sched_s20_MOVA_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOVA_first
    ; CHECK: $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT: $m0 = MOVA_lda_cg 1
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    $r1 = MOVA_lda_cg 0
    $m0 = MOV_PD_imm10_pseudo 1
    $p0 = MOV_PD_imm10_pseudo 2
...

---
name:            multi_slot_sched_s20_MOVX_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOVX_first
    ; CHECK: BUNDLE implicit-def $m0, implicit-def $r1 {
    ; CHECK-NEXT:   $m0 = MOVA_lda_cg 1
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    $r1 = MOVX_alu_cg 0
    $m0 = MOV_PD_imm10_pseudo 1
    $p0 = MOV_PD_imm10_pseudo 2
...

---
name:            multi_slot_sched_s20_MOV_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOV_first
    ; CHECK: $r1 = MOV_mv_cg 0
    ; CHECK-NEXT: $m0 = MOVA_lda_cg 1
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    $r1 = MOV_mv_cg 0
    $m0 = MOV_PD_imm10_pseudo 1
    $p0 = MOV_PD_imm10_pseudo 2
...

---
name:            multi_slot_sched_s20_MOVXM_first
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOVXM_first
    ; CHECK: $r1 = MOVXM_lng_cg 0
    ; CHECK-NEXT: $m0 = MOVA_lda_cg 1
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    $r1 = MOVXM_lng_cg 0
    $m0 = MOV_PD_imm10_pseudo 1
    $p0 = MOV_PD_imm10_pseudo 2
...


---
name:            multi_slot_sched_s20_MOVA_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOVA_second
    ; CHECK: $p1 = MOVA_lda_cg 0
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 1
    ; CHECK-NEXT: $m3 = MOVA_lda_cg 2
    $p1 = MOV_PD_imm10_pseudo 0
    $r2 = MOVA_lda_cg 1
    $m3 = MOV_PD_imm10_pseudo 2
...


---
name:            multi_slot_sched_s20_MOVX_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOVX_second
    ; CHECK: BUNDLE implicit-def $p1, implicit-def $r2 {
    ; CHECK-NEXT:   $p1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $m3 = MOVA_lda_cg 2
    $p1 = MOV_PD_imm10_pseudo 0
    $r2 = MOVX_alu_cg 1
    $m3 = MOV_PD_imm10_pseudo 2
...

---
name:            multi_slot_sched_s20_MOV_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOV_second
    ; CHECK: $p1 = MOVA_lda_cg 0
    ; CHECK-NEXT: $r2 = MOV_mv_cg 1
    ; CHECK-NEXT: $m3 = MOVA_lda_cg 2
    $p1 = MOV_PD_imm10_pseudo 0
    $r2 = MOV_mv_cg 1
    $m3 = MOV_PD_imm10_pseudo 2
...


---
name:            multi_slot_sched_s20_MOVXM_second
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_s20_MOVXM_second
    ; CHECK: $p1 = MOVA_lda_cg 0
    ; CHECK-NEXT: $r2 = MOVXM_lng_cg 1
    ; CHECK-NEXT: $m3 = MOVA_lda_cg 2
    $p1 = MOV_PD_imm10_pseudo 0
    $r2 = MOVXM_lng_cg 1
    $m3 = MOV_PD_imm10_pseudo 2
...

---
name:            multi_slot_sched_slot_alloc_order
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: multi_slot_sched_slot_alloc_order
    ; CHECK: BUNDLE implicit-def $r2, implicit-def $s1 {
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $s1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 2
    $s1 = MOV_S_imm10_pseudo 0
    $r2 = MOV_RLC_imm10_pseudo 1
    $r3 = MOV_RLC_imm10_pseudo 2
...
