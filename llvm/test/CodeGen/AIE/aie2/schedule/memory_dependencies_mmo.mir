# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched --issue-limit=6 %s -o - | FileCheck %s

# This test shows that memory dependencies are handled correctly with a
# "must alias" MMO or without.
# LLVM indeed creates different types of edges, so one needs to be sure
# to handle both (Memory and Barrier)


--- |
  define void @must_alias(ptr noalias %a) {
  entry:
    ret void
  }
  define void @no_info(ptr noalias %a) {
  entry:
    ret void
  }
...

# Both stores have MMOs, llvm creates a Memory edge
---
name:            must_alias
alignment:       16
body:             |
  bb.0.entry:
    liveins: $r0, $p0
    ; CHECK-LABEL: name: must_alias
    ; CHECK: liveins: $r0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r2 = LDA_dms_lda_idx_imm $p0, 0 :: (load (s32) from %ir.a) {
    ; CHECK-NEXT:   VST_SRS_D8_S32_ag_idx_imm $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into %ir.a)
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r6, killed $p0, 0 :: (store (s32) into %ir.a)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r2 = LDA_dms_lda_idx_imm $p0, 0 :: (load (s32) from %ir.a)
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into %ir.a)
    ST_dms_sts_idx_imm $r6, $p0, 0 :: (store (s32) into %ir.a)
...

# VST_SRS lacks an MMO, llvm creates a Barrier edge
---
name:            no_info
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: no_info
    ; CHECK: $r2 = LDA_dms_lda_idx_imm $p0, 0 :: (load (s32) from %ir.a) {
    ; CHECK-NEXT:   VST_SRS_D8_S32_ag_idx_imm $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r6, killed $p0, 0 :: (store (s32) into %ir.a)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r2 = LDA_dms_lda_idx_imm $p0, 0 :: (load (s32) from %ir.a)
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ST_dms_sts_idx_imm $r6, $p0, 0 :: (store (s32) into %ir.a)
...
