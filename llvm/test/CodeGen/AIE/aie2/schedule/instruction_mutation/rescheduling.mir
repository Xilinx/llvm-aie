# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2  -run-pass=postmisched --aie-instruction-mutation=true --verify-machineinstrs %s -o - | FileCheck %s --check-prefix=ON
# RUN: llc -march=aie2  -run-pass=postmisched --aie-instruction-mutation=false --verify-machineinstrs %s -o - | FileCheck %s --check-prefix=OFF

---
name:            check_rescheduling_1
alignment:       16
body:             |
  bb.0.entry:
    ; ON-LABEL: name: check_rescheduling_1
    ; ON: BUNDLE implicit-def $r1, implicit-def $p1, implicit killed $p1 {
    ; ON-NEXT:   $r1 = LDA_TM killed $p1 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; ON-NEXT:   $p1 = MOV_mv_cg 1
    ; ON-NEXT: }
    ; ON-NEXT: $r2 = LDA_TM killed $p1 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ;
    ; OFF-LABEL: name: check_rescheduling_1
    ; OFF: $r1 = LDA_TM killed $p1 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; OFF-NEXT: $p1 = MOVA_lda_cg 1
    ; OFF-NEXT: $r2 = LDA_TM killed $p1 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
  $r1 = LDA_TM $p1 :: (load (s32) from custom "TileMemory")
  $p1 = MOV_PD_imm10_pseudo 1
  $r2 = LDA_TM $p1 :: (load (s32) from custom "TileMemory")
...


---
name:            check_rescheduling_2
alignment:       16
body:             |
  bb.0.entry:
    ; ON-LABEL: name: check_rescheduling_2
    ; ON: BUNDLE implicit-def $wh1, implicit-def $p1, implicit killed $p1 {
    ; ON-NEXT:   $wh1 = VLDA_dmw_lda_w_ag_idx_imm killed $p1, 0
    ; ON-NEXT:   $p1 = MOV_mv_cg 1
    ; ON-NEXT: }
    ; ON-NEXT: $r2 = LDA_TM killed $p1 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ;
    ; OFF-LABEL: name: check_rescheduling_2
    ; OFF: $wh1 = VLDA_dmw_lda_w_ag_idx_imm killed $p1, 0
    ; OFF-NEXT: $p1 = MOVA_lda_cg 1
    ; OFF-NEXT: $r2 = LDA_TM killed $p1 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
  $wh1 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
  $p1 = MOV_PD_imm10_pseudo 1
  $r2 = LDA_TM $p1 :: (load (s32) from custom "TileMemory")
...

---
name:            check_rescheduling_3
alignment:       16
body:             |
  bb.0.entry:
    ; ON-LABEL: name: check_rescheduling_3
    ; ON: BUNDLE implicit-def $wh1, implicit-def $x7, implicit-def $wl7, implicit-def $wh7, implicit killed $p1, implicit killed $wl7 {
    ; ON-NEXT:   $wh1 = VLDA_dmw_lda_w_ag_idx_imm killed $p1, 0
    ; ON-NEXT:   $x7 = VUNPACK_S8_S4 killed $wl7
    ; ON-NEXT: }
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ; ON-NEXT: NOP
    ;
    ; OFF-LABEL: name: check_rescheduling_3
    ; OFF: $x7 = VUNPACK_S8_S4 killed $wl7
    ; OFF-NEXT: $wh1 = VLDB_dmw_ldb_ag_idx_imm killed $p1, 0
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
    ; OFF-NEXT: NOP
  $x7 = VUNPACK_S8_S4 $wl7
  $wh1 = VLD_idx_imm_3x32_pseudo $p1, 0
...

---
name:            check_rescheduling_4
alignment:       16
body:             |
  bb.0.entry:
    ; ON-LABEL: name: check_rescheduling_4
    ; ON: BUNDLE implicit-def $p0, implicit-def $r0 {
    ; ON-NEXT:   $p0 = MOVA_lda_cg 10
    ; ON-NEXT:   $r0 = MOVX_alu_cg 10
    ; ON-NEXT: }
    ;
    ; OFF-LABEL: name: check_rescheduling_4
    ; OFF: $p0 = MOVA_lda_cg 10
    ; OFF-NEXT: $r0 = MOVA_lda_cg 10
  $p0 = MOVA_lda_cg 10
  $r0 = MOV_RLC_imm10_pseudo 10
...
