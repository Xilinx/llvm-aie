# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched --issue-limit=8 %s -o - | FileCheck %s

# This test checks that we are able to schedule VLDA and VLDB_SPARSE at the same time.

---
name:            II_VLDA_II_VLDB_SPARSE_FILL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_SPARSE_FILL
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0 {
    ; CHECK-NEXT:   $p0 = VLDB_SPARSE_FILL_4 killed $p0, implicit-def $srsparse_of, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0 = VLDB_SPARSE_FILL_4 $p0, implicit-def $srsparse_of, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...

---
name:            II_VLDA_II_VLDB_SPARSE_RESET
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_SPARSE_RESET
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0 {
    ; CHECK-NEXT:   $p0 = VLDB_SPARSE_RESET_4 killed $p0, implicit-def $srsparse_of, implicit-def $dp, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0 = VLDB_SPARSE_RESET_4 $p0, implicit-def $srsparse_of, implicit-def $dp, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...

---
name:            II_VLDA_II_VLDB_SPARSE_PEEK
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_SPARSE_PEEK
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0 {
    ; CHECK-NEXT:   $p0, $qwh0 = VLDB_SPARSE_PEEK_4 killed $p0, implicit-def $srsparse_of, implicit-def $srcompr_uf, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0, $qwh0 = VLDB_SPARSE_PEEK_4 $p0, implicit-def $srsparse_of, implicit-def $srcompr_uf, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...

---
name:            II_VLDA_II_VLDB_SPARSE_POP
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_SPARSE_POP
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0 {
    ; CHECK-NEXT:   $p0, $qwh0 = VLDB_SPARSE_POP_4 killed $p0, implicit-def $srsparse_of, implicit-def $srcompr_uf, implicit-def $dp, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0, $qwh0 = VLDB_SPARSE_POP_4 $p0, implicit-def $srsparse_of, implicit-def $srcompr_uf, implicit-def $dp, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...
