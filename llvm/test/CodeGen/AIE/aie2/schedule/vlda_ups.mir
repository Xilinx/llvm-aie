# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %s -o - | FileCheck %s

# This test checks the input latencies of the shift register of the VLDA_UPS
# itineraries (E8) by scheduling a move into the $s0 afterwards (writes in E1)
# Due to reading happening at the start of a cycle and the write happening at
# the end they can happen in the same cycle and therefore the scheduler needs
# to put in 6 NOP instructions.
---
name:            vlda.ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda.ups
    ; CHECK: $bmh0 = VLDA_UPS_S32_S16_ag_idx_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $s0 = MOV_mv_cg 0
    ; CHECK-NEXT: NOP
    $bmh0 = VLDA_UPS_S32_S16_ag_idx_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat
    $s0 = MOV_mv_cg 0
...

---
name:            vlda.post.inc.ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda.post.inc.ups
    ; CHECK: $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $s0 = MOV_mv_cg 0
    ; CHECK-NEXT: NOP
    $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $s0 = MOV_mv_cg 0
...

---
name:            vlda.2d.ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda.2d.ups
    ; CHECK: $bmh0, $p0, $dc4 = VLDA_2D_UPS_S32_D16 killed $s0, killed $p0, killed $d4, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $s0 = MOV_mv_cg 0
    ; CHECK-NEXT: NOP
    $bmh0, $p0, $dc4 = VLDA_2D_UPS_S32_D16 $s0, $p0, $d4, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $s0 = MOV_mv_cg 0
...

---
name:            vlda.3d.ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda.3d.ups
    ; CHECK: $bmh0, $p0, $dc3, $dc7 = VLDA_3D_UPS_S32_D16 killed $s0, killed $p0, killed $d3_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $s0 = MOV_mv_cg 0
    ; CHECK-NEXT: NOP
    $bmh0, $p0, $dc3, $dc7 = VLDA_3D_UPS_S32_D16 $s0, $p0, $d3_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $s0 = MOV_mv_cg 0
...
