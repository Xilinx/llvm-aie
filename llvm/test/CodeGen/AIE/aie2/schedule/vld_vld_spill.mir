# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi --aie-stack-addrspace=5 %s -o - | FileCheck -check-prefixes=STACK-BANK-A %s
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi --aie-stack-addrspace=6 %s -o - | FileCheck -check-prefixes=STACK-BANK-B %s

# This test checks scheduling of LD_SPILL / VLD_SPILL or VLDB

---
name:            VLDA_Spill_VLD_1
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 32 }
body:             |
  bb.0.entry:
    ; STACK-BANK-A-LABEL: name: VLDA_Spill_VLD_1
    ; STACK-BANK-A: $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0, addrspace 5)
    ; STACK-BANK-A-NEXT: $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 5)
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ;
    ; STACK-BANK-B-LABEL: name: VLDA_Spill_VLD_1
    ; STACK-BANK-B: BUNDLE implicit-def $wl1, implicit-def $wl2, implicit $sp, implicit killed $p0 {
    ; STACK-BANK-B-NEXT:   $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0, addrspace 6)
    ; STACK-BANK-B-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 5)
    ; STACK-BANK-B-NEXT: }
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0)
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 5)
...

---
name:            VLDA_Spill_VLD_2
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 32 }
body:             |
  bb.0.entry:
    ; STACK-BANK-A-LABEL: name: VLDA_Spill_VLD_2
    ; STACK-BANK-A: BUNDLE implicit-def $wl1, implicit-def $wl2, implicit $sp, implicit killed $p0 {
    ; STACK-BANK-A-NEXT:   $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0, addrspace 5)
    ; STACK-BANK-A-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 6)
    ; STACK-BANK-A-NEXT: }
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ;
    ; STACK-BANK-B-LABEL: name: VLDA_Spill_VLD_2
    ; STACK-BANK-B: $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0, addrspace 6)
    ; STACK-BANK-B-NEXT: $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 6)
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    $wl1 = VLDA_dmw_lda_w_ag_spill -96, implicit $sp :: (load (s256) from %stack.0)
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 6)
...

---
name:            LDA_Spill_VLD_1
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 32 }
body:             |
  bb.0.entry:
    ; STACK-BANK-A-LABEL: name: LDA_Spill_VLD_1
    ; STACK-BANK-A: $r0 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0, addrspace 5)
    ; STACK-BANK-A-NEXT: $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 5)
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ;
    ; STACK-BANK-B-LABEL: name: LDA_Spill_VLD_1
    ; STACK-BANK-B: BUNDLE implicit-def $r0, implicit-def $wl2, implicit $sp, implicit killed $p0 {
    ; STACK-BANK-B-NEXT:   $r0 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0, addrspace 6)
    ; STACK-BANK-B-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 5)
    ; STACK-BANK-B-NEXT: }
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    $r0 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0)
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 5)
...

---
name:            LDA_Spill_VLD_2
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 32 }
body:             |
  bb.0.entry:
    ; STACK-BANK-A-LABEL: name: LDA_Spill_VLD_2
    ; STACK-BANK-A: BUNDLE implicit-def $r0, implicit-def $wl2, implicit $sp, implicit killed $p0 {
    ; STACK-BANK-A-NEXT:   $r0 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0, addrspace 5)
    ; STACK-BANK-A-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 6)
    ; STACK-BANK-A-NEXT: }
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ; STACK-BANK-A-NEXT: NOP
    ;
    ; STACK-BANK-B-LABEL: name: LDA_Spill_VLD_2
    ; STACK-BANK-B: $r0 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0, addrspace 6)
    ; STACK-BANK-B-NEXT: $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 6)
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    ; STACK-BANK-B-NEXT: NOP
    $r0 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0)
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 6)
...
