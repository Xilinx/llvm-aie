# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

# This tests how instructions with multiple slot alternatives are scheduled
# by the post-RA scheduler. Those should also be "materialized" into "fixed-slot"
# instructions as a consequence.

---
name:            load_padd
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: load_padd
    ; CHECK: BUNDLE implicit-def $r6, implicit-def $p1, implicit killed $p1, implicit killed $m1 {
    ; CHECK-NEXT:   $r6 = LDA_dms_lda_idx_imm $p1, 4
    ; CHECK-NEXT:   $p1 = PADDB_ldb_ptr_inc_nospill_nrm killed $p1, killed $m1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $p2, implicit-def $wl1, implicit killed $p2, implicit killed $m2, implicit killed $p1 {
    ; CHECK-NEXT:   $p2 = PADDA_lda_ptr_inc_idx killed $p2, killed $m2
    ; CHECK-NEXT:   $wl1 = VLDB_dmw_ldb_ag_idx_imm killed $p1, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r6 = LDA_dms_lda_idx_imm $p1, 4
    $p1 = PADD_mod_pseudo $p1, $m1
    $wl1 = VLDB_dmw_ldb_ag_idx_imm $p1, 0
    $p2 = PADD_mod_pseudo $p2, $m2
...

---
name:            padd_mod
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: padd_mod
    ; CHECK: BUNDLE implicit-def $p1, implicit-def $p0, implicit killed $p1, implicit killed $m1, implicit killed $p0, implicit killed $m0 {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx killed $p1, killed $m1
    ; CHECK-NEXT:   $p0 = PADDB_ldb_ptr_inc_nospill_nrm killed $p0, killed $m0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2 = PADDB_ldb_ptr_inc_nospill_nrm killed $p2, killed $m2
    $p0 = PADD_mod_pseudo $p0, $m0
    $p1 = PADD_mod_pseudo $p1, $m1
    $p2 = PADD_mod_pseudo $p2, $m2
...


---
name:            padd_imm
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: padd_imm
    ; CHECK: BUNDLE implicit-def $p3, implicit-def $p1, implicit killed $p3, implicit killed $p1 {
    ; CHECK-NEXT:   $p3 = PADDA_lda_ptr_inc_idx_imm killed $p3, 1020
    ; CHECK-NEXT:   $p1 = PADDB_ldb_ptr_inc_nrm_imm killed $p1, -4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $p2, implicit-def $p1, implicit killed $p2, implicit killed $p1 {
    ; CHECK-NEXT:   $p2 = PADDA_lda_ptr_inc_idx_imm killed $p2, 1020
    ; CHECK-NEXT:   $p1 = PADDB_ldb_ptr_inc_nrm_imm killed $p1, 100
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p1 = PADDB_ldb_ptr_inc_nrm_imm killed $p1, -100
    $p1 = PADD_imm_pseudo $p1, -4
    $p1 = PADD_imm_pseudo $p1, 100
    $p3 = PADD_imm_pseudo $p3, 1020
    $p1 = PADD_imm_pseudo $p1, -100
    $p2 = PADD_imm_pseudo $p2, 1020
...

---
name:            padd_mix
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: padd_mix
    ; CHECK: BUNDLE implicit-def $p1, implicit-def $sp, implicit killed $p1, implicit $sp {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 100
    ; CHECK-NEXT:   PADDB_sp_imm 32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $p2, implicit-def $sp, implicit killed $p2, implicit killed $m2, implicit $sp {
    ; CHECK-NEXT:   $p2 = PADDA_lda_ptr_inc_idx killed $p2, killed $m2
    ; CHECK-NEXT:   PADDB_sp_imm -32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: PADDB_sp_imm 65504, implicit-def $sp, implicit $sp
    PADD_sp_imm_pseudo 32, implicit-def $sp, implicit $sp
    $p1 = PADD_imm_pseudo $p1, 100
    PADD_sp_imm_pseudo -32, implicit-def $sp, implicit $sp
    $p2 = PADD_mod_pseudo $p2, $m2
    PADD_sp_imm_pseudo 65504, implicit-def $sp, implicit $sp
...

# Schedule two PADD where one is pre-selected as PADDB
---
name:            padd_forced_b
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: padd_forced_b
    ; CHECK: $p1 = PADDB_ldb_ptr_inc_nospill_nrm killed $p1, killed $m1
    ; CHECK-NEXT: PADDB_sp_imm 32, implicit-def $sp, implicit $sp
    $p1 = PADD_mod_pseudo $p1, $m1
    PADDB_sp_imm 32, implicit-def $sp, implicit $sp
...

# Same as above but the instruction order is reversed
---
name:            padd_forced_b_reversed
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: padd_forced_b_reversed
    ; CHECK: BUNDLE implicit-def $p1, implicit-def $sp, implicit killed $p1, implicit killed $m1, implicit $sp {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx killed $p1, killed $m1
    ; CHECK-NEXT:   PADDB_sp_imm 32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: }
    PADDB_sp_imm 32, implicit-def $sp, implicit $sp
    $p1 = PADD_mod_pseudo $p1, $m1
...
