# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched  \
# RUN:     --aie-interblock-scoreboard=true %s -o - \
# RUN:     | FileCheck %s

# Check that inter-block latencies are respected by the loop-aware in
# loop/epilogue analysis.

# WARNING: this set of tests relies on not breaking WAW dependencies, if this
# set fails because after some WAW dependency break mutation, please consider
# the inclusion of an option to disable such mutation to keep the correct
# semantic of the tests.


# This set of tests has as its goal testing the interaction between latency
# and resource conflict analysis. In this, way an operand latency induced by
# the loop on the epilogue can cause a shift on the epilogue's scoreboard
# with a side effect of causing resource conflicts that would not be present
# without the operand latency.

# Test 1: the goal here be a baseline test, where we do not need any
# additional nops in the epilogue, because all latencies are covered
# and we do not have resource conflicts. Note that MOVA_lda_cg and
# LDA_dms_lda_idx share the same write port WX, but in a safe distance.

---
name:            noNopsBaseline
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: noNopsBaseline
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $dj0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $r2 = LDA_dms_lda_idx $p0, $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r3, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r3
  bb.0:
    successors: %bb.1
    liveins: $p0
  bb.1:
    liveins: $p0, $r0, $r1, $dj0
    successors: %bb.1, %bb.2
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $r2 = LDA_dms_lda_idx $p0, killed $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors: %bb.3
    liveins: $r1
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  bb.3:
    successors:
    liveins: $r3, $p0
    RET implicit $lr
    DelayedSchedBarrier implicit $r3
...

# Test 2: now we have sufficient MOVA_lda_cg to cause resource
# conflicts to LDA_dms_lda_idx, so we need to shift sufficiently
# the scoreboard to a safe point (NOPS)

---
name:            nopsInducedByConflicts
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: nopsInducedByConflicts
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $dj0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $r2 = LDA_dms_lda_idx $p0, $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r3
  bb.0:
    successors: %bb.1
    liveins: $p0
  bb.1:
    liveins: $p0, $r0, $r1, $dj0
    successors: %bb.1, %bb.2
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $r2 = LDA_dms_lda_idx $p0, killed $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors: %bb.3
    liveins: $r1
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  bb.3:
    successors:
    liveins: $r3
    RET implicit $lr
    DelayedSchedBarrier implicit $r3
...

# Test 3: the same scenario as test 1, but we will cause a latency
# by introducing a data dependency (MUL_mul_r_rr and ADD_add_r_ri).
# This latency move the last MOVA_lda_cg to a conflicting point
# with LDA_dms_lda_idx. Ass effect, we need to shift all MOVA_lda_cg
# to a cycle without conflicts with LDA_dms_lda_idx (NOPS).

---
name:            nopConflictsInducedByLatency
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: nopConflictsInducedByLatency
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $dj0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 4
  ; CHECK-NEXT:   $r2 = LDA_dms_lda_idx $p0, $dj0 {
  ; CHECK-NEXT:     $r1 = MUL_mul_r_rr killed $r1, $r1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1023
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r3
  bb.0:
    successors: %bb.1
    liveins: $p0
  bb.1:
    liveins: $p0, $r0, $r1, $dj0
    successors: %bb.1, %bb.2
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    $r2 = LDA_dms_lda_idx $p0, killed $dj0
    $r1 = MUL_mul_r_rr killed $r1, $r1
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors: %bb.3
    liveins: $r1
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = MOVA_lda_cg 1023
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
    $r1 = ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  bb.3:
    successors:
    liveins: $r3
    RET implicit $lr
    DelayedSchedBarrier implicit $r3
...
