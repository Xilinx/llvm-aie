# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc --mtriple=aie2 --run-pass=postmisched %s -o -  | FileCheck %s

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# Make sure we correctly insert DBG_VALUE after scheduling

--- |
  source_filename = "dbgtest.c"
  target datalayout = "e-m:e-p:20:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32"
  target triple = "aie2"

  define dso_local i32 @foo(ptr nocapture readonly %vector) local_unnamed_addr #0 !dbg !7 {
  entry:
    tail call void @llvm.dbg.value(metadata ptr %vector, metadata !13, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 20)), !dbg !14
    br label %while.cond, !dbg !15

  while.cond:                                       ; preds = %while.cond, %entry
    %vector.addr.0 = phi ptr [ %vector, %entry ], [ %incdec.ptr, %while.cond ]
    tail call void @llvm.dbg.value(metadata ptr %vector.addr.0, metadata !13, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 20)), !dbg !14
    %0 = load i32, ptr %vector.addr.0, align 4, !dbg !16, !tbaa !17
    %cmp.not = icmp eq i32 %0, 0, !dbg !21
    %incdec.ptr = getelementptr inbounds i32, ptr %vector.addr.0, i20 1, !dbg !22
    tail call void @llvm.dbg.value(metadata ptr %incdec.ptr, metadata !13, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 20)), !dbg !14
    br i1 %cmp.not, label %while.end, label %while.cond, !dbg !15, !llvm.loop !24

  while.end:                                        ; preds = %while.cond
    %add.ptr = getelementptr inbounds i32, ptr %vector.addr.0, i20 -1, !dbg !28
    %1 = load i32, ptr %add.ptr, align 4, !dbg !29, !tbaa !17
    ret i32 %1, !dbg !30
  }

  declare void @llvm.dbg.value(metadata, metadata, metadata) #1

  attributes #0 = { nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5}
  !llvm.ident = !{!6}

  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 18.0.0git (git@github.com:Xilinx/llvm-aie.git 7c85afcf1bb8fc8c280944e490d0adf59af0c203)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "dbgtest.c", directory: "/scratch/llvm-aie/work2/Debug")
  !2 = !{i32 7, !"Dwarf Version", i32 4}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"debug-info-assignment-tracking", i1 true}
  !6 = !{!"clang version 18.0.0git (git@github.com:Xilinx/llvm-aie.git 7c85afcf1bb8fc8c280944e490d0adf59af0c203)"}
  !7 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 1, type: !8, scopeLine: 1, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
  !8 = !DISubroutineType(types: !9)
  !9 = !{!10, !11}
  !10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 32)
  !12 = !{!13}
  !13 = !DILocalVariable(name: "vector", arg: 1, scope: !7, file: !1, line: 1, type: !11)
  !14 = !DILocation(line: 0, scope: !7)
  !15 = !DILocation(line: 2, column: 5, scope: !7)
  !16 = !DILocation(line: 2, column: 12, scope: !7)
  !17 = !{!18, !18, i64 0}
  !18 = !{!"int", !19, i64 0}
  !19 = !{!"omnipotent char", !20, i64 0}
  !20 = !{!"Simple C/C++ TBAA"}
  !21 = !DILocation(line: 2, column: 20, scope: !7)
  !22 = !DILocation(line: 3, column: 15, scope: !23)
  !23 = distinct !DILexicalBlock(scope: !7, file: !1, line: 2, column: 26)
  !24 = distinct !{!24, !15, !25, !26, !27}
  !25 = !DILocation(line: 4, column: 5, scope: !7)
  !26 = !{!"llvm.loop.mustprogress"}
  !27 = !{!"llvm.loop.unroll.disable"}
  !28 = !DILocation(line: 5, column: 20, scope: !7)
  !29 = !DILocation(line: 5, column: 12, scope: !7)
  !30 = !DILocation(line: 5, column: 5, scope: !7)

...
---
name:            foo
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
calleeSavedRegisters: [ '$lr', '$r16', '$r17', '$r18', '$r19', '$r20',
                        '$r21', '$r22', '$r23', '$p6', '$p7' ]
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  varArgsFrameIndex: 0
body:             |
  ; CHECK-LABEL: name: foo
  ; CHECK: bb.0.entry (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DBG_VALUE $p0, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 0, 20), debug-location !14
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.while.cond (align 16):
  ; CHECK-NEXT:   successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r0 = LDA_dms_lda_idx_imm $p0, 0, debug-location !16 :: (load (s32) from %ir.vector.addr.0, !tbaa !17)
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   JNZ killed renamable $r0, %bb.1, debug-location !15
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DBG_VALUE $p1, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 0, 20), debug-location !14
  ; CHECK-NEXT:   renamable $p0 = nuw PADDB_ldb_ptr_inc_nrm_imm renamable $p0, 4, debug-location !22 {
  ; CHECK-NEXT:     $p1 = MOV_mv_scl killed $p0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DBG_VALUE $p0, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 0, 20), debug-location !14
  ; CHECK-NEXT:   DelayedSchedBarrier debug-location !15
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.while.end:
  ; CHECK-NEXT:   liveins: $p1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $r0 = LDA_dms_lda_idx_imm killed renamable $p1, -4, debug-location !29 :: (load (s32) from %ir.add.ptr, !tbaa !17)
  ; CHECK-NEXT:   RET implicit $lr, debug-location !30
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r0, debug-location !30
  bb.0.entry (align 16):
    successors: %bb.1(0x80000000)
    liveins: $p0

    DBG_VALUE $p0, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 0, 20), debug-location !14

  bb.1.while.cond (align 16):
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
    liveins: $p0

    $p1 = MOV_mv_scl $p0
    DBG_VALUE $p1, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 0, 20), debug-location !14
    renamable $r0 = LDA_dms_lda_idx_imm $p0, 0, debug-location !16 :: (load (s32) from %ir.vector.addr.0, !tbaa !17)
    renamable $p0 = nuw PADD_imm_pseudo killed renamable $p0, 4, debug-location !22
    DBG_VALUE $p0, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 0, 20), debug-location !14
    JNZ killed renamable $r0, %bb.1, debug-location !15
    DelayedSchedBarrier debug-location !15

  bb.2.while.end:
    liveins: $p1

    renamable $r0 = LDA_dms_lda_idx_imm killed renamable $p1, -4, debug-location !29 :: (load (s32) from %ir.add.ptr, !tbaa !17)
    RET implicit $lr, debug-location !30
    DelayedSchedBarrier implicit $r0, debug-location !30

...
