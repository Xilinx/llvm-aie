# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --run-pass=postmisched \
# RUN:     %s -o - | FileCheck %s

# Check that loopedges are treated correctly

# The MUL uses the GPR writeback in E2, where it might conflict with
# ADD, which is critical in the loop control
---
name:            avoidCycle0
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: avoidCycle0
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = ADD_add_r_ri killed $r0, -1, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, $r2
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = OR killed $r2, killed $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r2
  bb.0:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1
  bb.1:
    liveins: $r0, $r1, $r2
    successors: %bb.1, %bb.2
    $r0 = ADD_add_r_ri $r0, -1, implicit-def $srcarry
    $r1 = MUL_mul_r_rr $r1, $r2
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    liveins: $r1, $r2
    successors: %bb.3
    $r2 = OR $r2, $r1
  bb.3:
    liveins: $r2
    RET implicit $lr
    DelayedSchedBarrier implicit $r2
...

# Similar to the previous, but ADD is now pushed away by a mv instruction.
# We expect MUL to be scheduled in the last cycle.
---
name:            canUseCycle0
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: canUseCycle0
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r3 = MOV_mv_cg -1
  ; CHECK-NEXT:   $r0 = ADD killed $r0, killed $r3, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, $r2
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = OR killed $r2, killed $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r2
  bb.0:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1
  bb.1:
    liveins: $r0, $r1, $r2
    successors: %bb.1, %bb.2
    $r3 = MOV_mv_cg -1
    $r0 = ADD $r0, $r3, implicit-def $srcarry
    $r1 = MUL_mul_r_rr $r1, $r2
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    liveins: $r1, $r2
    successors: %bb.3
    $r2 = OR $r2, $r1
  bb.3:
    liveins: $r2
    RET implicit $lr
    DelayedSchedBarrier implicit $r2
...

# Similar to the first, but MUL is now pushed to the end.
# We need an extra nop expect MUL to be scheduled in the last cycle.
---
name:            needNop
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: needNop
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = ADD killed $r0, killed $r3, implicit-def $srcarry
  ; CHECK-NEXT:   $r3 = MOVX_alu_cg 1
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $r3 = OR killed $r3, $r2
  ; CHECK-NEXT:   $r4 = AND $r3, $r2
  ; CHECK-NEXT:   $r4 = OR $r3, $r3
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, killed $r4
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = OR killed $r2, killed $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r2
  bb.0:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1
  bb.1:
    liveins: $r0, $r1, $r2, $r3
    successors: %bb.1, %bb.2
    $r0 = ADD $r0, $r3, implicit-def $srcarry
    $r3 = MOVX_alu_cg 1
    $r3 = OR $r3, $r2
    $r4 = AND $r3, $r2
    $r4 = OR $r3, $r3
    $r1 = MUL_mul_r_rr $r1, $r4
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    liveins: $r1, $r2
    successors: %bb.3
    $r2 = OR $r2, $r1
  bb.3:
    liveins: $r2
    RET implicit $lr
    DelayedSchedBarrier implicit $r2
...

