# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --run-pass=postmisched \
# RUN:     %s -o - | FileCheck %s

# A simplified example of a SW-pipelined 2xVLD.UPS -> VADD -> VST.SRS loop.
# We want to make sure the VST.SRS ends up in the last cycle of the loop,
# and the VLD.UPS in the first cycles.
# This means that in the fixpoint loop for loop-aware-scheduling, one needs to
# increase the safety margin for one instruction at a time: The VLDs need to be
# pushed up, not the VST.
---
name:            add2d
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: add2d
  ; CHECK: bb.0 (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $dj0, $dj4, $dn0, $dn4, $m0, $m1, $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4, $r5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $dc0 = MOVA_lda_cg 0
  ; CHECK-NEXT:   BUNDLE implicit-def $cm0, implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $bmh0, implicit-def $amhl0, implicit-def $amhh0, implicit-def $p1, implicit-def $srups_of, implicit-def $dc4, implicit $s1, implicit killed $p1, implicit $m1, implicit $crsat, implicit $crupssign, implicit $dc0 {
  ; CHECK-NEXT:     renamable $cm0, renamable $p1 = VLDA_UPS_S32_D8_ag_pstm_nrm renamable $s1, killed renamable $p1, renamable $m1, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
  ; CHECK-NEXT:     $dc4 = MOV_mv_scl $dc0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $cm4, $p2, $dc0, $dc4 = VLDA_3D_UPS_S32_D8 killed $s1, killed $p2, $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $s1 = MOV_mv_scl killed $r2
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def dead $srcarry, implicit-def $s0, implicit killed $r1, implicit killed $r4 {
  ; CHECK-NEXT:     renamable $r1 = ADD_add_r_ri killed renamable $r1, -4, implicit-def dead $srcarry
  ; CHECK-NEXT:     $s0 = MOV_mv_scl killed $r4
  ; CHECK-NEXT:   }
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1 (align 16):
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $cm0, $cm4, $dc0, $dc4, $dj0, $dj4, $dn0, $dn4, $m0, $m1, $p1, $p2, $p3, $r0, $r1, $s0, $s1, $d0_3d:0x000000000001C870
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $cm0, renamable $p1 = VLDA_UPS_S32_D8_ag_pstm_nrm renamable $s1, killed renamable $p1, renamable $m1, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
  ; CHECK-NEXT:   BUNDLE implicit-def $cm4, implicit-def $bml4, implicit-def $amll4, implicit-def $amlh4, implicit-def $bmh4, implicit-def $amhl4, implicit-def $amhh4, implicit-def $p2, implicit-def $dc0, implicit-def $dc4, implicit-def $srups_of, implicit-def $cm8, implicit-def $bml8, implicit-def $amll8, implicit-def $amlh8, implicit-def $bmh8, implicit-def $amhl8, implicit-def $amhh8, implicit $s1, implicit killed $p2, implicit $d0_3d, implicit $crsat, implicit $crupssign, implicit $cm0, implicit $r0 {
  ; CHECK-NEXT:     $cm4, $p2, $dc0, $dc4 = VLDA_3D_UPS_S32_D8 $s1, killed $p2, $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
  ; CHECK-NEXT:     renamable $cm8 = VADD internal renamable $cm4, renamable $cm0, renamable $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   renamable $r1 = ADD_add_r_ri killed renamable $r1, -4, implicit-def dead $srcarry
  ; CHECK-NEXT:   JNZ renamable $r1, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   renamable $p3 = VST_SRS_D8_S32_ag_pstm_nrm_imm killed renamable $p3, 32, killed renamable $cm8, renamable $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $cm0, $cm4, $p3, $r0, $s0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $cm0 = VADD killed renamable $cm4, killed renamable $cm0, killed renamable $r0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   renamable $p3 = VST_SRS_D8_S32_ag_pstm_nrm_imm killed renamable $p3, 32, killed renamable $cm0, killed renamable $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier
  bb.0 (align 16):
    successors: %bb.1
    liveins: $dj0, $dj4, $dn0, $dn4, $m0, $m1, $p1, $p2, $p3, $r0, $r1, $r2, $r3, $r4, $r5

    renamable $dc0 = MOV_PD_imm10_pseudo 0
    $s1 = MOV_mv_scl killed $r2
    $s0 = MOV_mv_scl killed $r4
    renamable $cm0, renamable $p1 = VLDA_UPS_S32_D8_ag_pstm_nrm renamable $s1, killed renamable $p1, renamable $m1, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
    $dc4 = MOV_mv_scl $dc0
    $cm4, $p2, $dc0, $dc4 = VLDA_3D_UPS_S32_D8 $s1, killed $p2, $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
    renamable $r1 = ADD_add_r_ri killed renamable $r1, -4, implicit-def dead $srcarry

  bb.1 (align 16):
    successors: %bb.1, %bb.2
    liveins: $cm0, $cm4, $dc0, $dc4, $dj0, $dj4, $dn0, $dn4, $m0, $m1, $p1, $p2, $p3, $r0, $r1, $s0, $s1, $d0_3d:0x000000000001C870

    renamable $cm8 = VADD killed renamable $cm4, killed renamable $cm0, renamable $r0
    renamable $p3 = VST_SRS_D8_S32_ag_pstm_nrm_imm killed renamable $p3, 32, killed renamable $cm8, renamable $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
    renamable $cm0, renamable $p1 = VLDA_UPS_S32_D8_ag_pstm_nrm renamable $s1, killed renamable $p1, renamable $m1, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
    $cm4, $p2, $dc0, $dc4 = VLDA_3D_UPS_S32_D8 $s1, killed $p2, $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
    renamable $r1 = ADD_add_r_ri killed renamable $r1, -4, implicit-def dead $srcarry
    JNZ renamable $r1, %bb.1
    DelayedSchedBarrier

  bb.2:
    liveins: $cm0, $cm4, $p3, $r0, $s0

    renamable $cm0 = VADD killed renamable $cm4, killed renamable $cm0, renamable $r0
    renamable $p3 = VST_SRS_D8_S32_ag_pstm_nrm_imm killed renamable $p3, 32, killed renamable $cm0, renamable $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    RET implicit $lr
    DelayedSchedBarrier
...
