# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --run-pass=postmisched \
# RUN:     %s -o - | FileCheck %s

# The point of this test is to verify how the loop-aware scheduler avoids
# resource conflicts "across the edge".

# MUL uses R_WX_PORT in E2, ADD uses it in E1. So if MUL is in the last cycle
# of the loop, and ADD in the first one, that causes a conflict.
# We would like MUL to be moved up by one cycle.
---
name:            R_WX_PORT_conflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: R_WX_PORT_conflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = ADD_add_r_ri killed $r0, -1, implicit-def $srcarry
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def $r5, implicit killed $r1, implicit $r2, implicit $r0 {
  ; CHECK-NEXT:     $r1 = MUL_mul_r_rr killed $r1, $r2
  ; CHECK-NEXT:     $r5 = MOV_mv_scl $r0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $p0 = ST_dms_sts_pstm_nrm_imm killed $r5, killed $p0, 4
  ; CHECK-NEXT:   PseudoLoopEnd %bb.2, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1
  bb.0:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1
  bb.1:
    liveins: $r0, $r1, $r2, $p0
    successors: %bb.1, %bb.2
    $r0 = ADD_add_r_ri $r0, -1, implicit-def $srcarry
    $r5 = MOV_mv_scl $r0
    $r1 = MUL_mul_r_rr $r1, $r2
    $p0 = ST_dms_sts_pstm_nrm_imm killed $r5, killed $p0, 4
    PseudoLoopEnd %bb.2, %bb.1
  bb.2:
    liveins: $r1
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...
