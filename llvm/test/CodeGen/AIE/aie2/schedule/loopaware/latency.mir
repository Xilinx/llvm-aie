# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched \
# RUN:     --aie-interblock-scoreboard=false %s -o - | FileCheck %s

# Check that inter-block latencies are respected.

# Note: Comments sometimes refer to cycles. The first cycle is cycle 0

# The load in the preheader has a single use in the store.
# This is pushed ALAP into the delay slot, which allows a single nop
# as safety margin in the preheader
---
name:            singleSuccLoopPreheader
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: singleSuccLoopPreheader
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = nsw ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r1, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   BUNDLE implicit-def $p0, implicit killed $p0, implicit $r0, implicit $p1 {
  ; CHECK-NEXT:     $p0 = PADDB_ldb_ptr_inc_nrm_imm killed $p0, 4
  ; CHECK-NEXT:     ST_dms_sts_idx_imm $r0, $p1, 0
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r0

  bb.0:
    liveins: $p0, $p1, $r1
    $r0 = LDA_dms_lda_idx_imm $p0, 0
  bb.1:
    liveins: $p0, $p1, $r0, $r1
    $r1 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
    $p0 = PADD_imm9_pseudo $p0, 4
    ST_dms_sts_idx_imm $r0, $p1, 0
    JNZ $r1, %bb.1
    DelayedSchedBarrier
  bb.4:
    liveins: $r0
    RET implicit $lr
    DelayedSchedBarrier implicit $r0
...


# The MUL has a latency 2 to itself, which should not cause nops on the loop edge
#
---
name:            safetyOneNop
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: safetyOneNop
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = ADD_add_r_ri killed $r0, -11, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, $r2
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1

  bb.0:
    successors: %bb.1
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $r0, $r1, $r2
    $r0 = ADD_add_r_ri $r0, -11, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r1 = MUL_mul_r_rr $r1, $r2
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r1
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...

# The LDA has a latency 7 to the next iteration of the loop, but has a high depth
#
---
name:            safetySixNop
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: safetySixNop
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx_imm $p0, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r10 = MOVX_alu_cg 4
  ; CHECK-NEXT:   $r0 = ADD_add_r_ri killed $r0, -11, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = MUL_mul_r_rr killed $r2, killed $r10
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   BUNDLE implicit-def $r1, implicit-def $r3, implicit $p0, implicit killed $dj0, implicit killed $r3 {
  ; CHECK-NEXT:     $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:     $r3 = OR killed $r3, internal $r1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r3

  bb.0:
    successors: %bb.1
    liveins: $p0
    $r1 = LDA_dms_lda_idx_imm $p0, 0
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $p0, $r0, $r1, $r2, $r3
    $r0 = ADD_add_r_ri $r0, -11, implicit-def $srcarry
    $r10 = MOVX_alu_cg 4
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r2 = MUL_mul_r_rr $r2, $r10
    $dj0 = MOV_mv_scl $r2
    $r3 = OR $r3, $r1
    $r1 = LDA_dms_lda_idx $p0, $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r3
    RET implicit $lr
    DelayedSchedBarrier implicit $r3
...
