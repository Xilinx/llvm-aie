# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --run-pass=postmisched \
# RUN:     %s -o - | FileCheck %s

# Regions of 1 instruction are sometimes handled differently by MachineScheduler.
# This test is mostly for peace of mind. It makes sure that such tiny regions are
# correctly handled by the loop-aware scheduling, when there is a LCD and when
# there is not.

---
name:            singleInstrWithLCD
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: singleInstrWithLCD
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, $r1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   PseudoLoopEnd %bb.2, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1

  bb.0:
    liveins: $r1
    successors: %bb.1
  bb.1:
    liveins: $r1
    successors: %bb.1, %bb.2
    $r1 = MUL_mul_r_rr $r1, $r1
    PseudoLoopEnd %bb.2, %bb.1
  bb.2:
    liveins: $r1
    successors: %bb.3
  bb.3:
    liveins: $r1
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...

---
name:            singleInstrNoLCD
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: singleInstrNoLCD
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = MUL_mul_r_rr $r1, $r1
  ; CHECK-NEXT:   PseudoLoopEnd %bb.2, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r0

  bb.0:
    liveins: $r1
    successors: %bb.1
  bb.1:
    liveins: $r1
    successors: %bb.1, %bb.2
    $r0 = MUL_mul_r_rr $r1, $r1
    PseudoLoopEnd %bb.2, %bb.1
  bb.2:
    liveins: $r0
    successors: %bb.3
  bb.3:
    liveins: $r0
    RET implicit $lr
    DelayedSchedBarrier implicit $r0
...
