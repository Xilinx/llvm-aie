# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --run-pass=postmisched \
# RUN:     %s -o - | FileCheck %s

# Check that loopedges are treated correctly

# Check that the load latency fits in the loop. We use the load value
# across the loop edge, which is representative of a value spanning a SWP
# stage boundary
---
name:            longlatency
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: longlatency
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = ADD_add_r_ri killed $r0, -1, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r1, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 {
  ; CHECK-NEXT:     $r2 = OR killed $r2, killed $r1
  ; CHECK-NEXT:     $r10 = MOV_mv_cg 42
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $r2 = AND killed $r2, killed $r10
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = OR killed $r2, killed $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r2

  bb.0:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1
  bb.1:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1, %bb.2
    $r10 = MOV_mv_cg 42
    $r2 = OR $r2, $r1
    $r2 = AND $r2, $r10
    $r1, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4
    $r0 = ADD_add_r_ri $r0, -1, implicit-def $srcarry
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    liveins: $r1, $r2
    successors: %bb.3
    $r2 = OR $r2, $r1
  bb.3:
    liveins: $r2
    RET implicit $lr
    DelayedSchedBarrier implicit $r2
...

# like longlatency, except now we have a critical path filling the latency
# We expect no nops in the loop
---
name:            longloop
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: longloop
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r0 = ADD_add_r_ri killed $r0, -1, implicit-def $srcarry
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $r1, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 {
  ; CHECK-NEXT:     $r2 = OR killed $r2, killed $r1
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $r11 = MOVX_alu_cg 43 {
  ; CHECK-NEXT:     $r10 = MOV_mv_cg 42
  ; CHECK-NEXT:   }
  ; CHECK-NEXT:   $r2 = AND killed $r2, $r10
  ; CHECK-NEXT:   $r2 = XOR killed $r2, killed $r11
  ; CHECK-NEXT:   $r2 = XOR killed $r2, killed $r10
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = OR killed $r2, killed $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r2
  bb.0:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1
  bb.1:
    liveins: $p0, $r0, $r1, $r2
    successors: %bb.1, %bb.2
    $r10 = MOV_mv_cg 42
    $r2 = OR $r2, $r1
    $r2 = AND $r2, $r10
    $r11 = MOVX_alu_cg 43
    $r2 = XOR $r2, $r11
    $r2 = XOR $r2, $r10
    $r1, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4
    $r0 = ADD_add_r_ri $r0, -1, implicit-def $srcarry
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    liveins: $r1, $r2
    successors: %bb.3
    $r2 = OR $r2, $r1
  bb.3:
    liveins: $r2
    RET implicit $lr
    DelayedSchedBarrier implicit $r2
...
