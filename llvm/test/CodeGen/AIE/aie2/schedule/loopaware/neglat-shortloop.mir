# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --run-pass=postmisched %s -o - | FileCheck %s

# We have a short loop with a long latency loop-carried true dependence,
# which forms an anti dependence within the loop body
# Negative latency scheduling will swap the order of these instruction.
# When rescheduling the loop in loopaware, we have to make sure that this
# anti dependence is not changed into a true dependence.
# Furthermore, loop-aware scheduling should make sure that the loop carried
# true latency is respected


---
name:            maintainAntiDependence
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: maintainAntiDependence
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2, $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r10 = OR $r0, $r1
  ; CHECK-NEXT:   PseudoLoopEnd %bb.2, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r0, $r10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r0
  bb.0:
    successors: %bb.1
    liveins: $r0, $r1, $r2, $p0
  bb.1:
    successors: %bb.1, %bb.2
    liveins: $r0, $r1, $r2, $p0
    $r10 = OR $r0, $r1
    $dj0 = MOV_mv_scl $r2
    $r1 = LDA_dms_lda_idx $p0, $dj0
    PseudoLoopEnd %bb.2, %bb.1

  bb.2:
    liveins: $r0, $r10
    RET implicit $lr
    DelayedSchedBarrier implicit $r0
...
