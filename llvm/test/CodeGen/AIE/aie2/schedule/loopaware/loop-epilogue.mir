# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --issue-limit=6 --run-pass=postmisched  \
# RUN:     --aie-interblock-scoreboard=false %s -o - \
# RUN:     | FileCheck %s

# Check that inter-block latencies are respected by the loop-aware in
# loop/epilogue analysis.

# Test 1: operand latency between MUL (loop) and ADD (epilogue).

---
name:            safetyOneNopLatency
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: safetyOneNopLatency
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 2, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 3, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, $r2
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r2, 5, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 7, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 8, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 9, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 10, implicit-def $srcarry
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1


  bb.0:
    successors: %bb.1
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $r0, $r1, $r2
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 2, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 3, implicit-def $srcarry
    $r1 = MUL_mul_r_rr $r1, $r2
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r1, $r2
    $r1 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 7, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 8, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 9, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 10, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...

# Test 2: resource conflict between MUL (loop) and ADD (epilogue).

---
name:            safetyOneNopResConflict
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: safetyOneNopResConflict
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 2, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 3, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, $r2
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 5, implicit-def $srcarry
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r2, 5, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 7, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 8, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 9, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 10, implicit-def $srcarry
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1


  bb.0:
    successors: %bb.1
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $r0, $r1, $r2
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 2, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 3, implicit-def $srcarry
    $r1 = MUL_mul_r_rr $r1, $r2
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r1, $r2
    $r2 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 7, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 8, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 9, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 10, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...

# Test 3: no resource conflict and no latency.

---
name:            noResConflictNoLatency
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: noResConflictNoLatency
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 2, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 3, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = MUL_mul_r_rr killed $r1, $r2
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r2, 5, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 7, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 8, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 9, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 10, implicit-def $srcarry
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1


  bb.0:
    successors: %bb.1
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $r0, $r1, $r2
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 2, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 3, implicit-def $srcarry
    $r1 = MUL_mul_r_rr $r1, $r2
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r1, $r2
    $r1 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 7, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 8, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 9, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 10, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...


# Test 4: test effects of long latency.

---
name:            safetyNopsLongLatency
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: safetyNopsLongLatency
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 2, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 3, implicit-def $srcarry
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r1, 5, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 7, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r2, 8, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 9, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 10, implicit-def $srcarry
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1


  bb.0:
    successors: %bb.1
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $p0, $r0, $r1, $r2
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 2, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 3, implicit-def $srcarry
    $dj0 = MOV_mv_scl $r2
    $r1 = LDA_dms_lda_idx $p0, $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r1, $r2
    $r2 = ADD_add_r_ri $r1, 5, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 7, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r2, 8, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 9, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 10, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...

# Test 5: test effects of long latency and data dependency
# with an instruction inside of the conflict horizon.

---
name:            safetyNopsLongLatencyReduced
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: safetyNopsLongLatencyReduced
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 2, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 3, implicit-def $srcarry
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 5, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 7, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r2, 8, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 9, implicit-def $srcarry
  ; CHECK-NEXT:   $r1 = ADD_add_r_ri killed $r1, 10, implicit-def $srcarry
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1


  bb.0:
    successors: %bb.1
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $p0, $r0, $r1, $r2
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 2, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 3, implicit-def $srcarry
    $dj0 = MOV_mv_scl $r2
    $r1 = LDA_dms_lda_idx $p0, $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r1, $r2
    $r2 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 7, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r2, 8, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 9, implicit-def $srcarry
    $r1 = ADD_add_r_ri $r1, 10, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...


# Test 6: test effects of long latency and no data dependency.
# neither resource conflict.

---
name:            noResConflictNoLatencyTwo
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: noResConflictNoLatencyTwo
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 1, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 2, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 3, implicit-def $srcarry
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $r1, $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 5, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 7, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 8, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 9, implicit-def $srcarry
  ; CHECK-NEXT:   $r2 = ADD_add_r_ri killed $r2, 10, implicit-def $srcarry
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r1


  bb.0:
    successors: %bb.1
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $p0, $r0, $r1, $r2
    $r2 = ADD_add_r_ri $r2, 1, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 2, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 3, implicit-def $srcarry
    $dj0 = MOV_mv_scl $r2
    $r1 = LDA_dms_lda_idx $p0, $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors:
    liveins: $r1, $r2
    $r2 = ADD_add_r_ri $r2, 5, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 7, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 8, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 9, implicit-def $srcarry
    $r2 = ADD_add_r_ri $r2, 10, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier implicit $r1
...

# Test 7: in case of an empty epilogue, this block must contain enough nops
# to clear the path for the correct execution of the epilogue's successor.

---
name:            emptyEpilogue
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: emptyEpilogue
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   liveins: $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r3


  bb.0:
    successors: %bb.1
    liveins: $p0
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $p0, $r0, $r1, $r2, $r3
    $dj0 = MOV_mv_scl $r2
    $r1 = LDA_dms_lda_idx $p0, $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors: %bb.3
    liveins: $r1, $r3
  bb.3:
    successors: %bb.4
    liveins: $r1, $r3
    $r2 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
  bb.4:
    successors:
    liveins: $r1, $r2, $r3
    RET implicit $lr
    DelayedSchedBarrier implicit $r3
...

# Test 8: if we have just one instruction in the epilogue, we need to be
# sure that resource conflicts and latencies will be solved until the
# execution of epilogue's successor.

---
name:            oneInstrEpilogue
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: oneInstrEpilogue
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = nsw ADD_add_r_ri $r3, -1, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $r2 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   liveins: $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = nsw ADD_add_r_ri $r3, -1, implicit-def $srcarry
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r3


  bb.0:
    successors: %bb.1
    liveins: $p0
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $p0, $r0, $r1, $r2, $r3
    $dj0 = MOV_mv_scl $r2
    $r1 = LDA_dms_lda_idx $p0, $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors: %bb.3
    liveins: $r1, $r3
    $r2 = nsw ADD_add_r_ri $r3, -1, implicit-def $srcarry
  bb.3:
    successors: %bb.4
    liveins: $r1, $r3
    $r2 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
  bb.4:
    successors:
    liveins: $r1, $r2, $r3
    $r2 = nsw ADD_add_r_ri $r3, -1, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier implicit $r3
...

# Test 9: the goal here is to test the resolution of the write port conflict.
# In this case, both LDA_dms_lda_idx and MUL_mul_r_rr can conflict with this
# resource, but as MUL uses this port in a stage later than ADD, for example,
# it is possible to issue the MUL earlier.

---
name:            mulSchedEarly
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: mulSchedEarly
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $p0, $r0, $r1, $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JNZ $r0, %bb.1
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $dj0 = MOV_mv_scl $r2
  ; CHECK-NEXT:   $r1 = LDA_dms_lda_idx $p0, killed $dj0
  ; CHECK-NEXT:   DelayedSchedBarrier
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $r1, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = MUL_mul_r_rr $r3, $r3
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   $r2 = nsw ADD_add_r_ri killed $r1, -1, implicit-def $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET implicit $lr
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   NOP
  ; CHECK-NEXT:   DelayedSchedBarrier implicit killed $r3


  bb.0:
    successors: %bb.1
    liveins: $p0
  bb.1:
    successors: %bb.2, %bb.1
    liveins: $p0, $r0, $r1, $r2, $r3
    $dj0 = MOV_mv_scl $r2
    $r1 = LDA_dms_lda_idx $p0, $dj0
    JNZ $r0, %bb.1
    DelayedSchedBarrier
  bb.2:
    successors: %bb.3
    liveins: $r1, $r3
    $r2 = MUL_mul_r_rr $r3, $r3
    $r2 = nsw ADD_add_r_ri $r1, -1, implicit-def $srcarry
  bb.3:
    successors:
    liveins: $r3
    RET implicit $lr
    DelayedSchedBarrier implicit $r3
...
