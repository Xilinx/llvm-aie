# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %s -issue-limit=6 -o - | FileCheck %s

# Tests the MOV slot bypass (MOV_Bypass)
# This is particular looks at bypasses behavior for the wl and wh register
# files. Most instructions involved in MOV_Bypass use X registers, but some
# like VMOV and VCONV actually use W registers. For those, we have to make sure
# that the bypass isn't used for WH registers, as it isn't supported in HW.

---
name:            bypass_wl_from_x_with_vmov
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wl_from_x_with_vmov
    ; CHECK: $x0 = VBAND killed $x0, killed $x4
    ; CHECK-NEXT: $wh0 = VMOV_mv_w killed $wl0
    ; CHECK-NEXT: NOP
    $x0 = VBAND $x0, $x4
    $wh0 = VMOV_mv_w $wl0
...

---
name:            bypass_wh_from_x_with_vmov
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wh_from_x_with_vmov
    ; CHECK: $x0 = VBAND killed $x0, killed $x4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl0 = VMOV_mv_w killed $wh0
    ; CHECK-NEXT: NOP
    $x0 = VBAND $x0, $x4
    $wl0 = VMOV_mv_w $wh0
...

---
name:            bypass_wl_from_x_with_vconv
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wl_from_x_with_vconv
    ; CHECK: $x0 = VBAND killed $x0, killed $x4
    ; CHECK-NEXT: $bml0 = VCONV_FP32_BF16 killed $wl0
    ; CHECK-NEXT: NOP
    $x0 = VBAND $x0, $x4
    $bml0 = VCONV_FP32_BF16 $wl0
...

---
name:            bypass_wh_from_x_with_vconv
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wh_from_x_with_vconv
    ; CHECK: $x0 = VBAND killed $x0, killed $x4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $bml0 = VCONV_FP32_BF16 killed $wh0
    ; CHECK-NEXT: NOP
    $x0 = VBAND $x0, $x4
    $bml0 = VCONV_FP32_BF16 $wh0
...

---
name:            bypass_wl_to_x
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wl_to_x
    ; CHECK: $wl0 = VMOV_mv_w killed $wl2
    ; CHECK-NEXT: $x0 = VBAND killed $x0, killed $x4
    ; CHECK-NEXT: NOP
    $wl0 = VMOV_mv_w $wl2
    $x0 = VBAND $x0, $x4
...

---
name:            bypass_wh_to_x
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wh_to_x
    ; CHECK: $wh0 = VMOV_mv_w killed $wh2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $x0 = VBAND killed $x0, killed $x4
    ; CHECK-NEXT: NOP
    $wh0 = VMOV_mv_w $wh2
    $x0 = VBAND $x0, $x4
...

---
name:            bypass_wl
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wl
    ; CHECK: $wl1 = VMOV_mv_w killed $wh0
    ; CHECK-NEXT: $wl0 = VMOV_mv_w killed $wl1
    ; CHECK-NEXT: NOP
    $wl1 = VMOV_mv_w $wh0
    $wl0 = VMOV_mv_w $wl1
...

---
name:            bypass_wh
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wh
    ; CHECK: $wh1 = VMOV_mv_w killed $wh0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl0 = VMOV_mv_w killed $wh1
    ; CHECK-NEXT: NOP
    $wh1 = VMOV_mv_w $wh0
    $wl0 = VMOV_mv_w $wh1
...

---
name:            bypass_x
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_x
    ; CHECK: $x1 = VMOV_mv_x killed $x2
    ; CHECK-NEXT: $x0 = VMOV_mv_x killed $x1
    ; CHECK-NEXT: NOP
    $x1 = VMOV_mv_x $x2
    $x0 = VMOV_mv_x $x1
...

---
name:            no_bypass_vmov_x_cm
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: no_bypass_vmov_x_cm
    ; CHECK: $bml1 = VMOV_mv_x killed $bml0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $bml2 = VMOV_mv_x killed $bml1
    ; CHECK-NEXT: NOP
    $bml1 = VMOV_mv_x $bml0
    $bml2 = VMOV_mv_x $bml1
...

---
name:            no_bypass_vmov_w_cm
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: no_bypass_vmov_w_cm
    ; CHECK: $amll1 = VMOV_mv_w killed $amll0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $amll2 = VMOV_mv_w killed $amll1
    ; CHECK-NEXT: NOP
    $amll1 = VMOV_mv_w $amll0
    $amll2 = VMOV_mv_w $amll1
...

---
name:            bypass_wl_vconv
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wl_vconv
    ; CHECK: $wl1 = VMOV_mv_w killed $wh0
    ; CHECK-NEXT: $bmh0 = VCONV_FP32_BF16 killed $wl1
    ; CHECK-NEXT: NOP
    $wl1 = VMOV_mv_w $wh0
    $bmh0 = VCONV_FP32_BF16 $wl1
...

---
name:            bypass_wh_vconv
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: bypass_wh_vconv
    ; CHECK: $wh1 = VMOV_mv_w killed $wh0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $bmh0 = VCONV_FP32_BF16 killed $wh1
    ; CHECK-NEXT: NOP
    $wh1 = VMOV_mv_w $wh0
    $bmh0 = VCONV_FP32_BF16 $wh1
...
