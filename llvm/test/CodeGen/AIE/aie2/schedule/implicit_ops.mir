# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %s -issue-limit=6 -o - | FileCheck %s

# This tests the behavior of the scheduler with edges created by "dynamic"
# implicit operands.

# TODO: Those edges should probably be removed altogether, they are not required
# for correctness as the scheduling graph already deals with aliasing registers,
# but they potentially reduce parallelism.

# Due to the implicit-def, there is a RAW dependency between $x0 and $wh0.
# The edge gets a default latency of 0, the instructions can issue in parallel.
---
name:            implicit_RAW
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: implicit_RAW
    ; CHECK: BUNDLE implicit-def $wl0, implicit-def $x0, implicit-def $wh0, implicit killed $wh0, implicit killed $p0, implicit killed $wl2 {
    ; CHECK-NEXT:   VST_dmw_sts_w_ag_idx_imm killed $wh0, killed $p0, 0
    ; CHECK-NEXT:   $wl0 = VMOV_mv_w killed $wl2, implicit-def $x0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    $wl0 = VMOV_mv_w $wl2, implicit-def $x0
    VST_dmw_sts_w_ag_idx_imm $wh0, $p0, 0
...

# Due to the implicit-def, there is a WAR dependency between $wl2 and $x2.
# The edge gets a default latency of 0, the instructions can issue in parallel.
---
name:            implicit_WAR
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: implicit_WAR
    ; CHECK: BUNDLE implicit-def $wh2, implicit-def $x2, implicit-def $wl2, implicit killed $wl2, implicit killed $p0, implicit killed $wh0 {
    ; CHECK-NEXT:   VST_dmw_sts_w_ag_idx_imm killed $wl2, killed $p0, 0
    ; CHECK-NEXT:   $wh2 = VMOV_mv_w killed $wh0, implicit-def $x2
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl2, $p0, 0
    $wh2 = VMOV_mv_w $wh0, implicit-def $x2
...

# Due to the implicit-def, there is a WAW dependency between $x0 and $wh0.
# The edge gets a default latency of 0 because we are considered "out-of-order".
# The instructions can issue in parallel.
---
name:            implicit_WAW
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: implicit_WAW
    ; CHECK: BUNDLE implicit-def $wl0, implicit-def $x0, implicit-def $wh0, implicit killed $p0, implicit killed $p1 {
    ; CHECK-NEXT:   $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0, implicit-def $x0 :: (load (<8 x s32>) from stack - 64)
    ; CHECK-NEXT:   $wh0 = VLDB_dmw_ldb_ag_idx_imm killed $p1, 0 :: (load (<8 x s32>) from stack - 32)
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0, implicit-def $x0 :: (load (<8 x s32>) from stack - 64)
    $wh0 = VLDB_dmw_ldb_ag_idx_imm $p1, 0 :: (load (<8 x s32>) from stack - 32)
...
