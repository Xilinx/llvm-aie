# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %s -issue-limit=6 -o - | FileCheck %s

---
name:            test_mov_cntr
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_mov_cntr
    ; CHECK: $l5 = MOV_CNTR implicit $tile_cntr
    ; CHECK-NEXT: $l5 = MOV_CNTR implicit killed $tile_cntr
    ; CHECK-NEXT: $r7 = MOV_mv_scl killed $r27
    $l5 = MOV_CNTR implicit $tile_cntr
    $l5 = MOV_CNTR implicit $tile_cntr
    $r7 = MOV_mv_scl $r27
...

# MOV_CNTR is a scheduling barrier so it stays in place relative to the
# other instructions. If it was not a scheduling barrier we would expect
# it to be scheduled in the same bundle with the first VLDA. We would
# also expect the loads to be scheduled back-to-back.
---
name:            sched_barrier
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sched_barrier
    ; CHECK: $amll0 = VLDA_dmw_lda_am_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm2 = VNEG killed $cm0, killed $r5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $l5 = MOV_CNTR implicit killed $tile_cntr
    ; CHECK-NEXT: $amll1 = VLDA_dmw_lda_am_ag_idx_imm killed $p1, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm3 = VNEG killed $cm1, killed $r6
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $amll0 = VLDA_dmw_lda_am_ag_idx_imm $p0, 0
    $cm2 = VNEG $cm0, $r5
    $l5 = MOV_CNTR implicit $tile_cntr
    $amll1 = VLDA_dmw_lda_am_ag_idx_imm $p1, 0
    $cm3 = VNEG $cm1, $r6
...
