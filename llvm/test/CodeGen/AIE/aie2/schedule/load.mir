# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

---
name:            mix
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p1
    ; CHECK-LABEL: name: mix
    ; CHECK: liveins: $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6 = LDA_dms_lda_idx_imm killed $p1, 4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r7 = MOV_mv_scl killed $r6
    $r6 = LDA_dms_lda_idx_imm $p1, 4
    $r7 = MOV_mv_scl $r6
...

---
name:            load_tm
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p1
    ; CHECK-LABEL: name: load_tm
    ; CHECK: liveins: $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6 = LDA_TM killed $p1 :: (load (s32) from custom "TileMemory")
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r7 = MOV_mv_scl killed $r6
    $r6 = LDA_TM $p1 :: (load (s32) from custom "TileMemory")
    $r7 = MOV_mv_scl $r6
...

---
name:            postinc
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p1
    ; CHECK-LABEL: name: postinc
    ; CHECK: liveins: $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6, $p1 = LDA_dms_lda_pstm_nrm_imm killed $p1, 4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r7 = MOV_mv_scl killed $r6
    $r6, $p1 = LDA_dms_lda_pstm_nrm_imm $p1, 4
    $r7 = MOV_mv_scl $r6
...

---
name:            II_LDA_POST_2D
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p1, $d2
    ; CHECK-LABEL: name: II_LDA_POST_2D
    ; CHECK: liveins: $p1, $d2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6, $p1, $dc2 = LDA_2D_dms_lda killed $p1, $d2
    ; CHECK-NEXT: $r6, $p1, $dc2 = LDA_2D_dms_lda killed $p1, killed $d2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r7 = MOV_mv_scl killed $r6
    $r6, $p1, $dc2 = LDA_2D_dms_lda $p1, $d2
    $r6, $p1, $dc2 = LDA_2D_dms_lda $p1, $d2
    $r7 = MOV_mv_scl $r6
...

---
name:            II_LDA_POST_3D
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p1, $d2
    ; CHECK-LABEL: name: II_LDA_POST_3D
    ; CHECK: liveins: $p1, $d2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6, $p1, $dc2, $dc6 = LDA_3D_dms_lda killed $p1, $d2_3d
    ; CHECK-NEXT: $r6, $p1, $dc2, $dc6 = LDA_3D_dms_lda killed $p1, killed $d2_3d
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r7 = MOV_mv_scl killed $r6
    $r6, $p1, $dc2, $dc6 = LDA_3D_dms_lda $p1, $d2_3d
    $r6, $p1, $dc2, $dc6 = LDA_3D_dms_lda $p1, $d2_3d
    $r7 = MOV_mv_scl $r6
...

# This extra test combines different LDA instructions and tests data dependencies of different operands
---
name:            load_operands
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: load_operands
    ; CHECK: $r3, $p2, $dc1, $dc5 = LDA_3D_dms_lda killed $p2, $d1_3d
    ; CHECK-NEXT: $r2, $p3, $dc1 = LDA_2D_dms_lda killed $p3, $d1
    ; CHECK-NEXT: $m4, $p3 = LDA_dms_lda_pstm_nrm_imm killed $p3, 4
    ; CHECK-NEXT: $p3 = LDA_dms_lda_idx killed $p3, killed $dj1
    ; CHECK-NEXT: $dj1 = LDA_dms_lda_idx killed $p4, killed $dj2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3, $p2, $dc0, $dc4 = LDA_3D_dms_lda killed $p2, $d0_3d
    ; CHECK-NEXT: $r2, $p3, $dc4 = LDA_2D_dms_lda killed $p3, killed $d4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r3, $p2, $dc1, $dc5 = LDA_3D_dms_lda $p2, $d1_3d
    $r2, $p3, $dc1 = LDA_2D_dms_lda $p3, $d1
    $m4, $p3 = LDA_dms_lda_pstm_nrm_imm $p3, 4
    $p3 = LDA_dms_lda_idx $p3, $dj1
    $dj1 = LDA_dms_lda_idx $p4, $dj2
    $r3, $p2, $dc0, $dc4 = LDA_3D_dms_lda $p2, $d0_3d
    $r2, $p3, $dc4 = LDA_2D_dms_lda $p3, $d4
...
