# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

# This tests how memory dependencies are created based on the type of MMO.
# Each test case has two stores. Those are re-ordered to get a better schedule
# unless there is an ordering edge due to the MMOs.

# There are two main types of "stack" memory locations in MMO:
#  - A "stack" MMO is meant to represent "local variable" space. This can alias
#    IR values.
#  - A "%stack.idx" or "%fixed-stack.idx" MMO represents either a spill slot
#    or argument space. Those CANNOT alias IR values (or "stack" MMOs).


# Stores touch the same location, they cannot be re-ordered
---
name:            stack_mmos
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: stack_mmos
    ; CHECK: $r12 = MUL_mul_r_rr killed $r6, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_spill killed $r12, -28, implicit $sp :: (store (s32) into stack - 28)
    ; CHECK-NEXT: ST_dms_spill killed $dc1, -28, implicit $sp :: (store (s32) into stack - 28)
    ; CHECK-NEXT: NOP
    $r12 = MUL_mul_r_rr $r6, $r7
    ST_dms_spill $r12, -28, implicit $sp :: (store (s32) into stack - 28)
    ST_dms_spill $dc1, -28, implicit $sp :: (store (s32) into stack - 28)
...

# Stores touch the same location, they cannot be re-ordered
---
name:            fixed_spill_slot_mmos_zero_offset
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4 }
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: fixed_spill_slot_mmos_zero_offset
    ; CHECK: $r12 = MUL_mul_r_rr killed $r6, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_spill killed $r12, -28, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: ST_dms_spill killed $dc1, -28, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: NOP
    $r12 = MUL_mul_r_rr $r6, $r7
    ST_dms_spill $r12, -28, implicit $sp :: (store (s32) into %stack.0, align 4)
    ST_dms_spill $dc1, -28, implicit $sp :: (store (s32) into %stack.0, align 4)
...

# Stores touch the same location, they cannot be re-ordered
---
name:            fixed_spill_slot_mmos_same_offset
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: fixed_spill_slot_mmos_same_offset
    ; CHECK: $r12 = MUL_mul_r_rr killed $r6, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_spill killed $r12, -28, implicit $sp :: (store (s32) into %stack.0 + 4)
    ; CHECK-NEXT: ST_dms_spill killed $dc1, -28, implicit $sp :: (store (s32) into %stack.0 + 4)
    ; CHECK-NEXT: NOP
    $r12 = MUL_mul_r_rr $r6, $r7
    ST_dms_spill $r12, -28, implicit $sp :: (store (s32) into %stack.0 + 4, align 4)
    ST_dms_spill $dc1, -28, implicit $sp :: (store (s32) into %stack.0 + 4, align 4)
...

# Memory locations overlap, stores cannot be re-ordered
---
name:            fixed_spill_slot_mmos_overlap
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 32, alignment: 32 }
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: fixed_spill_slot_mmos_overlap
    ; CHECK: $r12 = MUL_mul_r_rr killed $r6, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_spill killed $r12, -28, implicit $sp :: (store (s32) into %stack.0 + 4)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_spill killed renamable $wl0, %stack.0, implicit $sp :: (store (s256) into %stack.0)
    ; CHECK-NEXT: NOP
    $r12 = MUL_mul_r_rr $r6, $r7
    ST_dms_spill $r12, -28, implicit $sp :: (store (s32) into %stack.0 + 4, align 4)
    VST_dmw_sts_w_ag_spill killed renamable $wl0, %stack.0, implicit $sp :: (store (s256) into %stack.0)
...

# Stores can be re-ordered, they touch different locations
---
name:            fixed_spill_slot_mmos_different_offset
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 16, alignment: 4 }
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: fixed_spill_slot_mmos_different_offset
    ; CHECK: BUNDLE implicit-def $r12, implicit killed $dc1, implicit $sp, implicit killed $r6, implicit killed $r7 {
    ; CHECK-NEXT:   ST_dms_spill killed $dc1, -28, implicit $sp :: (store (s32) into %stack.0 + 4)
    ; CHECK-NEXT:   $r12 = MUL_mul_r_rr killed $r6, killed $r7
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_spill killed $r12, -28, implicit $sp :: (store (s32) into %stack.0 + 8)
    ; CHECK-NEXT: NOP
    $r12 = MUL_mul_r_rr $r6, $r7
    ST_dms_spill $r12, -28, implicit $sp :: (store (s32) into %stack.0 + 8, align 4)
    ST_dms_spill $dc1, -28, implicit $sp :: (store (s32) into %stack.0 + 4, align 4)
...

# Stores can be re-ordered, they touch different locations
---
name:            fixed_spill_slot_mmos_different_slots
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4 }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4 }
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: fixed_spill_slot_mmos_different_slots
    ; CHECK: BUNDLE implicit-def $r12, implicit killed $dc1, implicit $sp, implicit killed $r6, implicit killed $r7 {
    ; CHECK-NEXT:   ST_dms_spill killed $dc1, -28, implicit $sp :: (store (s32) into %stack.1)
    ; CHECK-NEXT:   $r12 = MUL_mul_r_rr killed $r6, killed $r7
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_spill killed $r12, -28, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT: NOP
    $r12 = MUL_mul_r_rr $r6, $r7
    ST_dms_spill $r12, -28, implicit $sp :: (store (s32) into %stack.0, align 4)
    ST_dms_spill $dc1, -28, implicit $sp :: (store (s32) into %stack.1, align 4)
...

# "stack" and "%stack.idx" MMOs do not alias.
---
name:            fixed_spill_slot_and_stack_mmos
alignment:       16
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4 }
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: fixed_spill_slot_and_stack_mmos
    ; CHECK: BUNDLE implicit-def $r12, implicit killed $dc1, implicit $sp, implicit killed $r6, implicit killed $r7 {
    ; CHECK-NEXT:   ST_dms_spill killed $dc1, -28, implicit $sp :: (store (s32) into %stack.0)
    ; CHECK-NEXT:   $r12 = MUL_mul_r_rr killed $r6, killed $r7
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_spill killed $r12, -28, implicit $sp :: (store (s32) into stack - 4)
    ; CHECK-NEXT: NOP
    $r12 = MUL_mul_r_rr $r6, $r7
    ST_dms_spill $r12, -28, implicit $sp :: (store (s32) into stack - 4)
    ST_dms_spill $dc1, -28, implicit $sp :: (store (s32) into %stack.0, align 4)
...
