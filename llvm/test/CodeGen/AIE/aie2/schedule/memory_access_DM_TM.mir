# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

# This test checks scheduling of LDA_TM with VLDB

# We expect LDA.TM & VLDB to be scheduled in the same bundle when VLDB does not have MMO
---
name:            LDA_TM_VLDB_without_AS
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: LDA_TM_VLDB_without_AS
    ; CHECK: BUNDLE implicit-def $r0, implicit-def $wl2, implicit killed $p0 {
    ; CHECK-NEXT:   $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>))
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory")
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>))
...

---
name:            LDA_TM_VLDB_from_BankA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: LDA_TM_VLDB_from_BankA
    ; CHECK: BUNDLE implicit-def $r0, implicit-def $wl2, implicit killed $p0 {
    ; CHECK-NEXT:   $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 5)
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory")
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 5)
...

---
name:            LDA_TM_VLDB_from_BankB
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: LDA_TM_VLDB_from_BankB
    ; CHECK: BUNDLE implicit-def $r0, implicit-def $wl2, implicit killed $p0 {
    ; CHECK-NEXT:   $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 6)
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory")
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 6)
...

---
name:            LDA_TM_VLDB_from_BankC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: LDA_TM_VLDB_from_BankC
    ; CHECK: BUNDLE implicit-def $r0, implicit-def $wl2, implicit killed $p0 {
    ; CHECK-NEXT:   $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 7)
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory")
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 7)
...

---
name:            LDA_TM_VLDB_from_BankD
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: LDA_TM_VLDB_from_BankD
    ; CHECK: BUNDLE implicit-def $r0, implicit-def $wl2, implicit killed $p0 {
    ; CHECK-NEXT:   $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory", addrspace 15)
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0 :: (load (<8 x s32>), addrspace 8)
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r0 = LDA_TM $p0 :: (load (s32) from custom "TileMemory")
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0 :: (load (<8 x s32>), addrspace 8)
...
