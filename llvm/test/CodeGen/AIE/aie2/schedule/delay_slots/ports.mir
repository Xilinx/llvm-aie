# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -run-pass=postmisched --aie-bottomup-cycles=2 %s -o - | FileCheck %s

# ST_S8 uses r_wa in E7.
---
name:            r_wa_port_conflict
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: r_wa_port_conflict
    ; CHECK: ST_S8_ag_idx_imm killed $r0, killed $p0, 0
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    ; CHECK-NEXT: $r7 = MOVA_lda_cg 7
    ST_S8_ag_idx_imm $r0, $p0, 0
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
    $r7 = MOVA_lda_cg 7
...

# LDA uses r_wa in E7, MOVA in E1
---
name:            lda_E7_mova_E1
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: lda_E7_mova_E1
    ; CHECK: $r6 = LDA_dms_lda_idx_imm killed $p1, 4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    $r6 = LDA_dms_lda_idx_imm $p1, 4
    $r1 = MOVA_lda_cg 1
...

# VLDA accesses WA write port in cycle 7, VSRS in cycle 4
# The first scheduler requirement is that both instructions commit their
# effects before PseudoRET. This means a minimum of: 3 cycles after VSRS,
# and 6 cycles after VLDA. However, there needs to be an extra NOP between
# the two instructions; otherwise, they would access the WA port at the same
# time (in the last cycle).
---
name:            E4_vsrs_E7_VLDA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E4_vsrs_E7_VLDA
    ; CHECK: $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: RET implicit $lr
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: DelayedSchedBarrier implicit killed $wl0, implicit killed $wl3
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    RET implicit $lr
    DelayedSchedBarrier implicit $wl0, implicit $wl3
...
