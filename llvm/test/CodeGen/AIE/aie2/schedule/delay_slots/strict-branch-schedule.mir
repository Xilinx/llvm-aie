# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 --issue-limit=8 -run-pass=postmisched --aie-bottomup-cycles=2 %s -o - | FileCheck %s

# Test cases to make sure a delay slot instruction is scheduled EXACTLY 5 cycles
# before the end of the scheduling region.

---
name:            lda_slot
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r0
    ; CHECK-LABEL: name: lda_slot
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $r1, implicit killed $r0 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT:   JNZ killed renamable $r0, 200
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    ; CHECK-NEXT: DelayedSchedBarrier
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
    JNZ killed renamable $r0, 200
    DelayedSchedBarrier
...

---
name:            xm_slot
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r0
    ; CHECK-LABEL: name: xm_slot
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r1 = MOVXM_lng_cg 1
    ; CHECK-NEXT: JNZ killed renamable $r0, 200
    ; CHECK-NEXT: $r2 = MOVXM_lng_cg 2
    ; CHECK-NEXT: $r3 = MOVXM_lng_cg 3
    ; CHECK-NEXT: $r4 = MOVXM_lng_cg 4
    ; CHECK-NEXT: $r5 = MOVXM_lng_cg 5
    ; CHECK-NEXT: $r6 = MOVXM_lng_cg 6
    ; CHECK-NEXT: DelayedSchedBarrier
    $r1 = MOVXM_lng_cg 1
    $r2 = MOVXM_lng_cg 2
    $r3 = MOVXM_lng_cg 3
    $r4 = MOVXM_lng_cg 4
    $r5 = MOVXM_lng_cg 5
    $r6 = MOVXM_lng_cg 6
    JNZ killed renamable $r0, 200
    DelayedSchedBarrier
...

# Here, in bottom-up cycle c5, both the first ADD and the JNZ are available.
# Make sure JNZ is picked, even if the ADD is on the critical path.
---
name:            x_slot_chain
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r0, $r6
    ; CHECK-LABEL: name: x_slot_chain
    ; CHECK: liveins: $r0, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: JNZ killed renamable $r0, 200
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: DelayedSchedBarrier
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    JNZ killed renamable $r0, 200
    DelayedSchedBarrier
...

# Same as above, with a RET instruction (in slot X just like ADD).
---
name:            x_slot_chain_ret
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r0, $r6
    ; CHECK-LABEL: name: x_slot_chain_ret
    ; CHECK: liveins: $r0, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: RET implicit $lr
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: $r6 = ADD killed $r6, $r6, implicit-def $srcarry
    ; CHECK-NEXT: DelayedSchedBarrier
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    $r6 = ADD $r6, $r6, implicit-def $srcarry
    RET implicit $lr
    DelayedSchedBarrier
...
