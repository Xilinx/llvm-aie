# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -run-pass=postmisched --issue-limit=1 --debug %s -o - 2>%t.log | FileCheck %s
# RUN: cat %t.log | FileCheck %s --check-prefix=CHECK-SU
# REQUIRES: asserts

--- |
  define void @late_write(ptr noalias %a, ptr noalias %b) {
  entry:
    ret void
  }
...

# LDA writes $r1 late. With negative latencies, we would expect it to
# be moved "up" in the schedule, giving other instructions using $r1
# enough time before $r1 is written by LDA.
---
name:            late_write
alignment:       16
body:             |
  bb.0.entry:
    liveins: $r0, $p0
    ; CHECK-LABEL: name: late_write
    ; CHECK: liveins: $r0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r1 = LDA_dms_lda_idx_imm killed $p1, 0 :: (load (s32) from %ir.b)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r1 = ADD killed $r6, $r7, implicit-def $srcarry
    ; CHECK-NEXT: $r1 = MUL_mul_r_rr killed $r1, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r1, killed $p0, 0 :: (store (s32) into %ir.a)
    ; CHECK-NEXT: NOP
    $r1 = ADD $r6, $r7, implicit-def $srcarry
    $r1 = MUL_mul_r_rr $r1, $r7
    ST_dms_sts_idx_imm $r1, $p0, 0 :: (store (s32) into %ir.a)
    $r1 = LDA_dms_lda_idx_imm $p1, 0 :: (load (s32) from %ir.b)
...
# CHECK-SU-LABEL: late_write:%bb.0 entry
# CHECK-SU: SU(0):   $r1 = ADD $r6, $r7, implicit-def $srcarry
# CHECK-SU: SU(1):   $r1 = MUL_mul_r_rr $r1, $r7
# CHECK-SU:   Successors:
# CHECK-SU:     SU(3): Out  Latency=0(-4)
# CHECK-SU: SU(2):   ST_dms_sts_idx_imm $r1, $p0, 0 :: (store (s32) into %ir.a)
# CHECK-SU:   Successors:
# CHECK-SU:     SU(3): Anti Latency=0(-6)
# CHECK-SU: SU(3):   $r1 = LDA_dms_lda_idx_imm $p1, 0 :: (load (s32) from %ir.b)
