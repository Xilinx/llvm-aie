# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -run-pass=postmisched --issue-limit=1 --debug %s -o - 2>%t.log | FileCheck %s
# RUN: cat %t.log | FileCheck %s --check-prefix=CHECK-SU
# REQUIRES: asserts

--- |
  define void @load_store_chain(ptr noalias %a, ptr noalias %b) {
  entry:
    ret void
  }
...

# With negative latencies, we expect the load/store pairs to be "pipelined"
---
name:            load_store_chain
alignment:       16
body:             |
  bb.0.entry:
    liveins: $r0, $p0
    ; CHECK-LABEL: name: load_store_chain
    ; CHECK: liveins: $r0, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r6 = LDA_dms_lda_idx_imm $p1, 0 :: (load (s32) from %ir.b)
    ; CHECK-NEXT: $r6 = LDA_dms_lda_idx_imm $p1, 4 :: (load (s32) from %ir.b)
    ; CHECK-NEXT: $r6 = LDA_dms_lda_idx_imm killed $p1, 8 :: (load (s32) from %ir.b)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r6, $p0, 0 :: (store (s32) into %ir.a)
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r6, $p0, 4 :: (store (s32) into %ir.a)
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r6, killed $p0, 8 :: (store (s32) into %ir.a)
    ; CHECK-NEXT: NOP
    $r6 = LDA_dms_lda_idx_imm $p1, 0 :: (load (s32) from %ir.b)
    ST_dms_sts_idx_imm $r6, $p0, 0 :: (store (s32) into %ir.a)
    $r6 = LDA_dms_lda_idx_imm $p1, 4 :: (load (s32) from %ir.b)
    ST_dms_sts_idx_imm $r6, $p0, 4 :: (store (s32) into %ir.a)
    $r6 = LDA_dms_lda_idx_imm $p1, 8 :: (load (s32) from %ir.b)
    ST_dms_sts_idx_imm $r6, $p0, 8 :: (store (s32) into %ir.a)
...
# CHECK-SU-LABEL: load_store_chain:%bb.0 entry
# CHECK-SU: SU(0):   $r6 = LDA_dms_lda_idx_imm $p1, 0 :: (load (s32) from %ir.b)
# CHECK-SU:   Depth              : 0
# CHECK-SU:   Height             : 23
# CHECK-SU: SU(1):   ST_dms_sts_idx_imm $r6, $p0, 0 :: (store (s32) into %ir.a)
# CHECK-SU:   Depth              : 7
# CHECK-SU:   Height             : 16
# CHECK-SU:   Predecessors:
# CHECK-SU:     SU(0): Data Latency=7 Reg=$r6
# CHECK-SU: SU(2):   $r6 = LDA_dms_lda_idx_imm $p1, 4 :: (load (s32) from %ir.b)
# CHECK-SU:   Depth              : 7
# CHECK-SU:   Height             : 16
# CHECK-SU:   Predecessors:
# CHECK-SU:     SU(1): Anti Latency=0(-6)
# CHECK-SU:     SU(0): Out  Latency=1
# CHECK-SU: SU(3):   ST_dms_sts_idx_imm $r6, $p0, 4 :: (store (s32) into %ir.a)
# CHECK-SU:   Depth              : 14
# CHECK-SU:   Height             : 9
# CHECK-SU:   Predecessors:
# CHECK-SU:     SU(2): Data Latency=7 Reg=$r6
# CHECK-SU:     SU(1): Ord  Latency=1 Memory
# CHECK-SU: SU(4):   $r6 = LDA_dms_lda_idx_imm $p1, 8 :: (load (s32) from %ir.b)
# CHECK-SU:   Depth              : 14
# CHECK-SU:   Height             : 9
# CHECK-SU:   Predecessors:
# CHECK-SU:     SU(3): Anti Latency=0(-6)
# CHECK-SU:     SU(2): Out  Latency=1
# CHECK-SU: SU(5):   ST_dms_sts_idx_imm $r6, $p0, 8 :: (store (s32) into %ir.a)
# CHECK-SU:   Depth              : 21
# CHECK-SU:   Height             : 2
# CHECK-SU:   Predecessors:
# CHECK-SU:     SU(4): Data Latency=7 Reg=$r6
# CHECK-SU:     SU(3): Ord  Latency=1 Memory
# CHECK-SU:     SU(1): Ord  Latency=1 Memory
