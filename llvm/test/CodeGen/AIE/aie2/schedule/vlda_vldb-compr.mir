# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched --verify-machineinstrs %topdown-multi %s -o - | FileCheck %s

# This test checks that we are able to schedule VLDA and VLDB_COMPR at the same time.

---
name:            II_VLDA_II_VLDB_COMPR_FILL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_COMPR_FILL
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: BUNDLE implicit-def $wl2, implicit-def $p0, implicit killed $p1, implicit killed $p0, implicit killed $dp {
    ; CHECK-NEXT:   $wl2 = VLDA_dmw_lda_w_ag_idx_imm killed $p1, 0
    ; CHECK-NEXT:   $p0 = VLDB_COMPR_FILL killed $p0, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0 = VLDB_COMPR_FILL $p0, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...

---
name:            II_VLDA_II_VLDB_COMPR_RESET
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_COMPR_RESET
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: BUNDLE implicit-def $wl2, implicit-def $p0, implicit-def $dp, implicit killed $p1, implicit killed $p0, implicit killed $dp {
    ; CHECK-NEXT:   $wl2 = VLDA_dmw_lda_w_ag_idx_imm killed $p1, 0
    ; CHECK-NEXT:   $p0 = VLDB_COMPR_RESET killed $p0, implicit-def $dp, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0 = VLDB_COMPR_RESET $p0, implicit-def $dp, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...

---
name:            II_VLDA_II_VLDB_COMPR_PEEK
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_COMPR_PEEK
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: BUNDLE implicit-def $wl2, implicit-def $p0, implicit-def $wh0, implicit-def $srcompr_uf, implicit killed $p1, implicit killed $p0, implicit killed $dp {
    ; CHECK-NEXT:   $wl2 = VLDA_dmw_lda_w_ag_idx_imm killed $p1, 0
    ; CHECK-NEXT:   $p0, $wh0 = VLDB_COMPR_PEEK killed $p0, implicit-def $srcompr_uf, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0, $wh0 = VLDB_COMPR_PEEK $p0, implicit-def $srcompr_uf, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...

---
name:            II_VLDA_II_VLDB_COMPR_POP
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VLDA_II_VLDB_COMPR_POP
    ; CHECK: VST_dmw_sts_w_ag_idx_imm killed $wl0, $p0, 0
    ; CHECK-NEXT: BUNDLE implicit-def $wl2, implicit-def $p0, implicit-def $wh0, implicit-def $srcompr_uf, implicit-def $dp, implicit killed $p1, implicit killed $p0, implicit killed $dp {
    ; CHECK-NEXT:   $wl2 = VLDA_dmw_lda_w_ag_idx_imm killed $p1, 0
    ; CHECK-NEXT:   $p0, $wh0 = VLDB_COMPR_POP killed $p0, implicit-def $srcompr_uf, implicit-def $dp, implicit killed $dp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    $p0, $wh0 = VLDB_COMPR_POP $p0, implicit-def $srcompr_uf, implicit-def $dp, implicit $dp
    $wl2 = VLDA_dmw_lda_w_ag_idx_imm $p1, 0
...
