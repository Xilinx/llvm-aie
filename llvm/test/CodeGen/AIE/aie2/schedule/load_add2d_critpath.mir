# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -run-pass=postmisched %s -o - | FileCheck %s


# An example where it is critical to place down the scalar loads first as they
# are part of the critical path. Vector loads can be moved into the last
# top-down cycles because the "A" slot is free.
---
name:            single_bb
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $dc0, $dc4, $p0, $p1, $p2, $p3, $r0, $r1, $r2, $d0_3d:0x0000000000004010
    ; CHECK-LABEL: name: single_bb
    ; CHECK: liveins: $dc0, $dc4, $p0, $p1, $p2, $p3, $r0, $r1, $r2, $d0_3d:0x0000000000004010
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: renamable $wh0 = VLDA_dmw_lda_w_ag_idx_imm renamable $p0, 32 :: (load (<16 x s16>) from stack - 128)
    ; CHECK-NEXT: BUNDLE implicit-def $wl0, implicit-def $p4, implicit killed $p0, implicit killed $p3 {
    ; CHECK-NEXT:   renamable $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed renamable $p0, 0 :: (load (<16 x s16>) from stack - 128)
    ; CHECK-NEXT:   $p4 = MOV_mv_scl killed $p3
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $wl2, implicit-def $p4, implicit $p1, implicit killed $p4 {
    ; CHECK-NEXT:   renamable $wl2 = VLDA_dmw_lda_w_ag_idx_imm renamable $p1, 0 :: (load (<16 x s16>) from stack - 128)
    ; CHECK-NEXT:   renamable $p4 = PADDB_ldb_ptr_inc_nrm_imm killed renamable $p4, 60
    ; CHECK-NEXT: }
    ; CHECK-NEXT: renamable $r3, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, 36 :: (dereferenceable load (s32) from stack - 4)
    ; CHECK-NEXT: renamable $m0, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -8 :: (dereferenceable load (s20) from stack - 4, align 4)
    ; CHECK-NEXT: renamable $dn0, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -8 :: (dereferenceable load (s20) from stack - 4, align 4)
    ; CHECK-NEXT: renamable $dj0, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, 12 :: (dereferenceable load (s20) from stack - 4, align 4)
    ; CHECK-NEXT: renamable $dn4, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -8 :: (dereferenceable load (s20) from stack - 4, align 4)
    ; CHECK-NEXT: renamable $dj4, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -36 :: (dereferenceable load (s20) from stack - 4, align 4)
    ; CHECK-NEXT: renamable $r4, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, 16 :: (dereferenceable load (s32) from stack - 4)
    ; CHECK-NEXT: renamable $wh2 = VLDA_dmw_lda_w_ag_idx_imm renamable $p1, 32 :: (load (<16 x s16>) from stack - 128)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: renamable $bmh0 = VCONV_FP32_BF16 killed renamable $wh0
    ; CHECK-NEXT: renamable $bml0 = VCONV_FP32_BF16 killed renamable $wl0
    ; CHECK-NEXT: BUNDLE implicit-def $bml1, implicit-def $amll1, implicit-def $amlh1, implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $srfpflags, implicit killed $wl2, implicit killed $bml0, implicit $r4, implicit $crfpmask {
    ; CHECK-NEXT:   renamable $bml1 = VCONV_FP32_BF16 killed renamable $wl2
    ; CHECK-NEXT:   renamable $bml0 = VADD_F internal renamable $bml1, killed renamable $bml0, renamable $r4, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $bmh1, implicit-def $amhl1, implicit-def $amhh1, implicit-def $bmh0, implicit-def $amhl0, implicit-def $amhh0, implicit-def $srfpflags, implicit killed $wh2, implicit killed $bmh0, implicit killed $r4, implicit $crfpmask {
    ; CHECK-NEXT:   renamable $bmh1 = VCONV_FP32_BF16 killed renamable $wh2
    ; CHECK-NEXT:   renamable $bmh0 = VADD_F internal renamable $bmh1, killed renamable $bmh0, killed renamable $r4, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: renamable $wl0 = VCONV_BF16_FP32 killed renamable $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: renamable $wh0 = VCONV_BF16_FP32 killed renamable $bmh0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: $p1, $dc0, $dc4 = PADDA_3D killed $p1, killed $d0_3d
    renamable $wh0 = VLDA_dmw_lda_w_ag_idx_imm renamable $p0, 32 :: (load (<16 x s16>) from stack - 128)
    renamable $wl0 = VLDA_dmw_lda_w_ag_idx_imm renamable $p0, 0 :: (load (<16 x s16>) from stack - 128)
    renamable $wh2 = VLDA_dmw_lda_w_ag_idx_imm renamable $p1, 32 :: (load (<16 x s16>) from stack - 128)
    renamable $wl2 = VLDA_dmw_lda_w_ag_idx_imm renamable $p1, 0 :: (load (<16 x s16>) from stack - 128)
    $p4 = MOV_mv_scl $p3
    renamable $p4 = PADD_imm9_pseudo killed renamable $p4, 60
    renamable $r3, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, 36 :: (dereferenceable load (s32) from stack - 4)
    renamable $m0, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -8 :: (dereferenceable load (s20) from stack - 4)
    renamable $dn0, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -8 :: (dereferenceable load (s20) from stack - 4)
    renamable $dj0, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, 12 :: (dereferenceable load (s20) from stack - 4)
    renamable $dn4, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -8 :: (dereferenceable load (s20) from stack - 4)
    renamable $dj4, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, -36 :: (dereferenceable load (s20) from stack - 4)
    renamable $r4, renamable $p4 = LDA_dms_lda_pstm_nrm_imm killed renamable $p4, 16 :: (dereferenceable load (s32) from stack - 4)
    renamable $bml0 = VCONV_FP32_BF16 renamable $wl0
    renamable $bmh0 = VCONV_FP32_BF16 killed renamable $wh0
    renamable $bml1 = VCONV_FP32_BF16 renamable $wl2
    renamable $bmh1 = VCONV_FP32_BF16 killed renamable $wh2
    renamable $bml0 = VADD_F renamable $bml1, renamable $bml0, renamable $r4, implicit-def $srfpflags, implicit $crfpmask
    renamable $bmh0 = VADD_F killed renamable $bmh1, killed renamable $bmh0, killed renamable $r4, implicit-def $srfpflags, implicit $crfpmask
    renamable $wl0 = VCONV_BF16_FP32 renamable $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    renamable $wh0 = VCONV_BF16_FP32 killed renamable $bmh0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $p1, $dc0, $dc4 = PADDA_3D killed $p1, $d0_3d
...
