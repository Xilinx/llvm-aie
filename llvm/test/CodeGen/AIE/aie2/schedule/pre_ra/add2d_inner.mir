# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=machine-scheduler %s -o - | FileCheck %s


# This represents the innermost loop of Add2D after SW pipelining.
# We should see most of the VLDA.UPS instructions move down in the loop
# BB to reduce the reg pressure and avoid spills. They can later be moved back
# up by the post-RA scheduler. This should also make the 4 acc1024 COPY
# instructions coalesce-able.
---
name: add2d_innermost
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: add2d_innermost
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $m0, $cm0, $cm1, $s0, $d1, $x0, $r0, $d0_3d
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:em = COPY $m0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:acc1024 = COPY $cm0
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:ep_as_32bit = COPY $p0
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:ep_as_32bit = COPY $p0
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:ep_as_32bit = COPY $p0
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:eds = COPY $d0_3d
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:mss = COPY $s0
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:mss = COPY $s0
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:acc1024 = COPY [[COPY4]]
  ; CHECK-NEXT:   [[VADD:%[0-9]+]]:acc1024 = VADD [[COPY5]], [[COPY17]], [[COPY14]]
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:acc1024 = COPY [[COPY3]]
  ; CHECK-NEXT:   [[VADD1:%[0-9]+]]:acc1024 = VADD [[COPY6]], [[COPY18]], [[COPY14]]
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:acc1024 = COPY [[COPY2]]
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:acc1024, [[COPY9:%[0-9]+]]:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm [[COPY15]], [[COPY9]], [[COPY]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
  ; CHECK-NEXT:   [[VADD2:%[0-9]+]]:acc1024 = VADD [[COPY7]], [[COPY19]], [[COPY14]]
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:acc1024 = COPY [[COPY1]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:acc1024, [[COPY9:%[0-9]+]]:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm [[COPY15]], [[COPY9]], [[COPY]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
  ; CHECK-NEXT:   [[VADD3:%[0-9]+]]:acc1024 = VADD [[COPY8]], [[COPY20]], [[COPY14]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:acc1024, [[COPY9:%[0-9]+]]:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm [[COPY15]], [[COPY9]], [[COPY]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:acc1024, [[COPY9:%[0-9]+]]:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm [[COPY15]], [[COPY9]], [[COPY]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm [[COPY11]], 32, [[VADD]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:acc1024, [[COPY10:%[0-9]+]]:ep_as_32bit, [[COPY12:%[0-9]+]].sub_dim_count:eds, [[COPY12:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 [[COPY15]], [[COPY10]], [[COPY12]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm [[COPY11]], 32, [[VADD1]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:acc1024, [[COPY10:%[0-9]+]]:ep_as_32bit, [[COPY12:%[0-9]+]].sub_dim_count:eds, [[COPY12:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 [[COPY15]], [[COPY10]], [[COPY12]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm [[COPY11]], 32, [[VADD2]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:acc1024, [[COPY10:%[0-9]+]]:ep_as_32bit, [[COPY12:%[0-9]+]].sub_dim_count:eds, [[COPY12:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 [[COPY15]], [[COPY10]], [[COPY12]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm [[COPY11]], 32, [[VADD3]], [[COPY16]], implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:acc1024, [[COPY10:%[0-9]+]]:ep_as_32bit, [[COPY12:%[0-9]+]].sub_dim_count:eds, [[COPY12:%[0-9]+]].sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 [[COPY15]], [[COPY10]], [[COPY12]], implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:er = ADD_add_r_ri [[COPY13]], -4, implicit-def dead $srcarry
  ; CHECK-NEXT:   PseudoJNZ [[COPY13]], %bb.1
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   PseudoRET implicit $lr

  bb.0.entry:
    liveins: $p0, $m0, $cm0, $cm1, $s0, $d1, $x0, $r0, $d0_3d

    %367:acc1024 = COPY $cm0
    %365:acc1024 = COPY $cm0
    %363:acc1024 = COPY $cm0
    %361:acc1024 = COPY $cm0
    %362:acc1024 = COPY $cm0
    %364:acc1024 = COPY $cm0
    %366:acc1024 = COPY $cm0
    %368:acc1024 = COPY $cm0
    %248:mss = COPY $s0
    %245:mss = COPY $s0
    %355:ep_as_32bit = COPY $p0
    %358:ep_as_32bit = COPY $p0
    %359:ep_as_32bit = COPY $p0
    %82:em = COPY $m0
    %272:eds = COPY $d0_3d
    %360:er = COPY $r0
    %206:er = COPY $r0
    PseudoJ_jump_imm %bb.1

  bb.1:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)

    %327:acc1024 = COPY %367
    %325:acc1024 = COPY %365
    %323:acc1024 = COPY %363
    %321:acc1024 = COPY %361
    %361:acc1024, %355:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm %248, %355, %82, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
    %360:er = ADD_add_r_ri %360, -4, implicit-def dead $srcarry
    %281:acc1024 = VADD %362, %321, %206
    %363:acc1024, %355:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm %248, %355, %82, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
    %284:acc1024 = VADD %364, %323, %206
    %365:acc1024, %355:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm %248, %355, %82, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
    %287:acc1024 = VADD %366, %325, %206
    %367:acc1024, %355:ep_as_32bit = VLDA_UPS_S32_D8_ag_pstm_nrm %248, %355, %82, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 64)
    %362:acc1024, %358:ep_as_32bit, %272.sub_dim_count:eds, %272.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 %248, %358, %272, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
    %295:acc1024 = VADD %368, %327, %206
    %364:acc1024, %358:ep_as_32bit, %272.sub_dim_count:eds, %272.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 %248, %358, %272, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
    %366:acc1024, %358:ep_as_32bit, %272.sub_dim_count:eds, %272.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 %248, %358, %272, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
    %359:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm %359, 32, %281, %245, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
    %359:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm %359, 32, %284, %245, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
    %368:acc1024, %358:ep_as_32bit, %272.sub_dim_count:eds, %272.sub_hi_dim_then_sub_dim_count:eds = VLDA_3D_UPS_S32_D8 %248, %358, %272, implicit-def $srups_of, implicit $crsat, implicit $crupssign :: (load (<32 x s8>) from stack - 32)
    %359:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm %359, 32, %287, %245, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
    %359:ep_as_32bit = VST_SRS_D8_S32_ag_pstm_nrm_imm %359, 32, %295, %245, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<32 x s8>) into stack - 128)
    PseudoJNZ %360, %bb.1
    PseudoJ_jump_imm %bb.2

  bb.2:
    PseudoRET implicit $lr
...
