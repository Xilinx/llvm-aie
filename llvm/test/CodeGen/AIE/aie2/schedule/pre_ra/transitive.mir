# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 --aie-premisched-propagate-incoming-latencies -run-pass=machine-scheduler --aie-prera-cycle-separators %s -o - --issue-limit=6 | FileCheck %s

# This test verifies the behavior of the PropagateIncomingLatencies DAGMutator.
# What should be observed is that COPY instructions are scheduled as close as
# possible to their inputs (possibly in the same cycle), and the latency of
# those inputs is now carried by the COPY itself.

---
name: 2_vec_load
tracksRegLiveness: true
body: |
  bb.0.entry:
  liveins: $p0
    ; CHECK-LABEL: name: 2_vec_load
    ; CHECK: liveins: $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 0
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: [[VLDA_dmw_lda_w_ag_idx_imm1:%[0-9]+]]:vec256 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 16
    ; CHECK-NEXT: undef [[COPY1:%[0-9]+]].sub_256_lo:vec512 = COPY [[VLDA_dmw_lda_w_ag_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]].sub_256_hi:vec512 = COPY [[VLDA_dmw_lda_w_ag_idx_imm1]]
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: $x0 = COPY [[COPY1]]
    ; CHECK-NEXT: CYCLE_SEPARATOR
    %100:ep = COPY $p0
    %101:vec256 = VLDA_dmw_lda_w_ag_idx_imm %100, 0
    %102:vec256 = VLDA_dmw_lda_w_ag_idx_imm %100, 16
    undef %103.sub_256_lo:vec512 = COPY %101
    %103.sub_256_hi:vec512 = COPY %102
    $x0 = COPY %103
...

---
name: 2_acc_load
tracksRegLiveness: true
body: |
  bb.0.entry:
  liveins: $p0, $s0
    ; CHECK-LABEL: name: 2_acc_load
    ; CHECK: liveins: $p0, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep = COPY $p0
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 0
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: [[VLDA_dmw_lda_am_ag_idx_imm1:%[0-9]+]]:acc256 = VLDA_dmw_lda_am_ag_idx_imm [[COPY]], 16
    ; CHECK-NEXT: undef [[COPY1:%[0-9]+]].sub_256_lo:acc512 = COPY [[VLDA_dmw_lda_am_ag_idx_imm]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]].sub_256_hi:acc512 = COPY [[VLDA_dmw_lda_am_ag_idx_imm1]]
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: CYCLE_SEPARATOR
    ; CHECK-NEXT: VST_SRS_D16_S32_ag_idx_imm [[COPY]], 0, [[COPY1]], $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: CYCLE_SEPARATOR
    %100:ep = COPY $p0
    %101:acc256 = VLDA_dmw_lda_am_ag_idx_imm %100, 0
    %102:acc256 = VLDA_dmw_lda_am_ag_idx_imm %100, 16
    undef %103.sub_256_lo:acc512 = COPY %101
    %103.sub_256_hi:acc512 = COPY %102
    VST_SRS_D16_S32_ag_idx_imm %100, 0, %103, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...
