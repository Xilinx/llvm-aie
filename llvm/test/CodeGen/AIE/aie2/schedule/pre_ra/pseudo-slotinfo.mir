# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 --issue-limit=8 --enable-misched=1 -run-pass=machine-scheduler -run-pass=postmisched %s -o - | FileCheck %s

# The test check if the AIE2GenFormats.inc contains slot info of Pseudo,
# and it can use the information to bundle in a same VLIW test.
#
# This test checks for PADD pseudo instruction since those can be materialized to Slot A and B,
# we should see a bundle with two PADD instruction.


---
name:            load_padd
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: load_padd
    ; CHECK: $r6 = LDA_dms_lda_idx_imm $p1, 4 {
    ; CHECK-NEXT:   $p1 = PADDB_ldb_ptr_inc_nospill_nrm killed $p1, killed $m1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $wl1 = VLDB_dmw_ldb_ag_idx_imm killed $p1, 0
    ; CHECK-NEXT: $p2 = PADDB_ldb_ptr_inc_nospill_nrm killed $p2, killed $m2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r6 = LDA_dms_lda_idx_imm $p1, 4
    $p1 = PADD_mod_pseudo $p1, $m1
    $wl1 = VLDB_dmw_ldb_ag_idx_imm $p1, 0
    $p2 = PADD_mod_pseudo $p2, $m2
...

---
name:            padd_mod
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: padd_mod
    ; CHECK: $p1 = PADDA_lda_ptr_inc_idx $p1, $m1 {
    ; CHECK-NEXT:   $p0 = PADDB_ldb_ptr_inc_nospill_nrm killed $p0, killed $m0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2 = PADDB_ldb_ptr_inc_nospill_nrm killed $p2, killed $m2
    $p0 = PADD_mod_pseudo $p0, $m0
    $p1 = PADD_mod_pseudo $p1, $m1
    $p2 = PADD_mod_pseudo $p2, $m2
...


---
name:            padd_imm
alignment:       16
body:             |
  bb.0 (align 16):
    ; $p0 = PADD_imm_pseudo $p0, 4
    ; CHECK-LABEL: name: padd_imm
    ; CHECK: $p1 = PADDB_ldb_ptr_inc_nrm_imm killed $p1, -4
    ; CHECK-NEXT: $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 100 {
    ; CHECK-NEXT:   $p3 = PADDB_ldb_ptr_inc_nrm_imm killed $p3, 1020
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p1 = PADDA_lda_ptr_inc_idx_imm $p1, -100 {
    ; CHECK-NEXT:   $p2 = PADDB_ldb_ptr_inc_nrm_imm killed $p2, 1020
    ; CHECK-NEXT: }
    $p1 = PADD_imm_pseudo $p1, -4
    $p1 = PADD_imm_pseudo $p1, 100
    $p3 = PADD_imm_pseudo $p3, 1020
    $p1 = PADD_imm_pseudo $p1, -100
    $p2 = PADD_imm_pseudo $p2, 1020
...

---
name:            padd_mix
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: padd_mix
    ; CHECK: $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 100 {
    ; CHECK-NEXT:   PADDB_sp_imm 32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2 = PADDA_lda_ptr_inc_idx $p2, $m2 {
    ; CHECK-NEXT:   PADDB_sp_imm -32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: }
    ; CHECK-NEXT: PADDB_sp_imm 65504, implicit-def $sp, implicit $sp
    PADD_sp_imm_pseudo 32, implicit-def $sp, implicit $sp
    $p1 = PADD_imm_pseudo $p1, 100
    PADD_sp_imm_pseudo -32, implicit-def $sp, implicit $sp
    $p2 = PADD_mod_pseudo $p2, $m2
    PADD_sp_imm_pseudo 65504, implicit-def $sp, implicit $sp
...

---
name:            negative_padd
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: negative_padd
    ; CHECK: $p1 = PADDA_lda_ptr_inc_idx $p1, $m1 {
    ; CHECK-NEXT:   PADDB_sp_imm 32, implicit-def $sp, implicit $sp
    ; CHECK-NEXT: }
    $p1 = PADD_mod_pseudo $p1, $m1
    PADDB_sp_imm 32, implicit-def $sp, implicit $sp
...
