# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -enable-misched -run-pass=machine-scheduler --issue-limit=6 %s -o - | FileCheck %s

# Due to its higher latency, we might have wanted to schedule VLDA_UPS before
# the other standard VLDAs, even though it would require an extra PTR.
# However, we currently add an edge from "COPY %0" to the two VLDAs, forcing the
# VLDA_UPS to come afterwards.
---
name: mix
tracksRegLiveness: true
body: |
  bb.0.entry:
  liveins: $p0, $m0, $cm0, $cm1, $s0, $d1
    ; CHECK-LABEL: name: mix
    ; CHECK: liveins: $p0, $m0, $cm0, $cm1, $s0, $d1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:ep_as_32bit = COPY $p0
    ; CHECK-NEXT: $wl0 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 0 :: (load (<8 x s32>))
    ; CHECK-NEXT: $wh0 = VLDA_dmw_lda_w_ag_idx_imm [[COPY]], 32 :: (load (<8 x s32>))
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = COPY [[COPY]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:ep_as_32bit = PADD_imm_pseudo [[COPY1]], 64
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:mss = COPY $s0
    ; CHECK-NEXT: $bmh0 = VLDA_UPS_S32_S16_ag_idx_imm [[COPY2]], [[COPY1]], 0, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
    %0:ep_as_32bit = COPY $p0
    %1:mss = COPY $s0
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm %0, 0 :: (load (<8 x s32>))
    $wh0 = VLDA_dmw_lda_w_ag_idx_imm %0, 32 :: (load (<8 x s32>))
    %2:ep_as_32bit = COPY %0
    %2:ep_as_32bit = PADD_imm_pseudo %2, 64
    $bmh0 = VLDA_UPS_S32_S16_ag_idx_imm %1, %2, 0, implicit-def $srups_of, implicit $crsat :: (load (<8 x s32>))
...
