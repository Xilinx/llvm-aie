# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 -O2 --start-before=postmisched %s -o - | FileCheck %s

# The core of hardsigmoid_templated

--- |
  define dso_local void @kernel(ptr addrspace(5) noalias nocapture writeonly %d, ptr addrspace(6) noalias nocapture readonly %s, i32 noundef %n) local_unnamed_addr #0 {
  ; CHECK-LABEL: kernel:
  ; CHECK:       // %bb.0:
  ; CHECK-NEXT:    add.nc lc, r0, #-7
  ; CHECK-NEXT:    movxm ls, #.LBB0_2
  ; CHECK-NEXT:    movxm le, #.L_LEnd0
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; nopx
  ; CHECK-NEXT:    vmin_ge.s16 x8, r16, x6, x0
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; vmax_lt.s16 x10, r16, x8, x2
  ; CHECK-NEXT:    vmin_ge.s16 x8, r16, x6, x0
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; vmax_lt.s16 x10, r16, x8, x2; vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:    vmin_ge.s16 x8, r16, x6, x0
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; vmax_lt.s16 x10, r16, x8, x2; vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:    vmin_ge.s16 x8, r16, x6, x0
  ; CHECK-NEXT:  .LBB0_1: // %for.body
  ; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
  ; CHECK-NEXT:    vldb.unpack.s16.s8 x6, [p0], m0; nopa ; nops ; nopx ; vmax_lt.s16 x10, r16, x8, x2; vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:  .L_LEnd0:
  ; CHECK-NEXT:    nopb ; nopa ; vst.srs.s8.s32 cm1, s0, [p1], #32; nopx ; vmin_ge.s16 x8, r16, x6, x0; nopv
  ; CHECK-NEXT:  .LBB0_2: // %for.cond.cleanup
  ; CHECK-NEXT:    nopx ; vmax_lt.s16 x10, r16, x8, x2; vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:    vst.srs.s8.s32 cm1, s0, [p1], #32; vmin_ge.s16 x8, r16, x6, x0
  ; CHECK-NEXT:    vmax_lt.s16 x10, r16, x8, x2; vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:    vst.srs.s8.s32 cm1, s0, [p1], #32; vmin_ge.s16 x8, r16, x6, x0
  ; CHECK-NEXT:    vmax_lt.s16 x10, r16, x8, x2; vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:    vst.srs.s8.s32 cm1, s0, [p1], #32; vmin_ge.s16 x8, r16, x6, x0
  ; CHECK-NEXT:    vmax_lt.s16 x10, r16, x8, x2; vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:    vst.srs.s8.s32 cm1, s0, [p1], #32
  ; CHECK-NEXT:    vmac cm1, cm0, x10, x4, r0
  ; CHECK-NEXT:    vst.srs.s8.s32 cm1, s0, [p1], #32
  ; CHECK-NEXT:    nop
  ; CHECK-NEXT:    vst.srs.s8.s32 cm1, s0, [p1], #32
  ; CHECK-NEXT:    nop
  ; CHECK-NEXT:    vst.srs.s8.s32 cm1, s0, [p1], #32
  ; CHECK-NEXT:    ret lr
  ; CHECK-NEXT:    nop // Delay Slot 5
  ; CHECK-NEXT:    nop // Delay Slot 4
  ; CHECK-NEXT:    nop // Delay Slot 3
  ; CHECK-NEXT:    nop // Delay Slot 2
  ; CHECK-NEXT:    nop // Delay Slot 1
  entry:
    call void @llvm.set.loop.iterations.i32(i32 %n)
    br label %for.body

  for.body:
    %d.addr.07 = phi ptr addrspace(5) [ %incdec.ptr, %for.body ], [ %d, %entry ]
    %s.addr.06 = phi ptr addrspace(6) [ %incdec.ptr1, %for.body ], [ %s, %entry ]
    %incdec.ptr = getelementptr inbounds i32, ptr addrspace(5) %d.addr.07, i20 1
    %incdec.ptr1 = getelementptr inbounds i32, ptr addrspace(6) %s.addr.06, i20 1
    %1 = call i1 @llvm.loop.decrement.i32(i32 1)
    br i1 %1, label %for.body, label %for.cond.cleanup, !llvm.loop !6

  for.cond.cleanup:
    ret void
  }

  declare void @llvm.set.loop.iterations.i32(i32) #1
  declare i1 @llvm.loop.decrement.i32(i32) #1

  attributes #0 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }

  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 18.0.0git (git@github.com:Xilinx/llvm-aie.git 6532135c22419e573eaa75f1cc5defff7e04f931)"}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"int", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7, !8}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = !{!"llvm.loop.itercount.range", i64 10}

...
---
name:            kernel
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $r0

    $lc = ADD_NC $r0, 0
    $ls = MOVXM_lng_cg %bb.2
    $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>

  bb.1.for.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
    liveins: $p0, $p1, $r0, $m0, $x0, $x2, $x4, $s0, $cm0

    $x6, $p0 = VLDB_UNPACK_S16_S8_ag_pstm_nrm $p0, $m0 :: (load (<32 x s8>) from  %ir.s.addr.06, addrspace 5)
    $x8, $r16 = VMIN_GE_S16 $x6, $x0
    $x10, $r16 = VMAX_LT_S16 $x8, $x2
    $cm1 = VMAC_vmac_cm_core_dense $cm0, $x10, $x4, $r0
    $p1 = VST_SRS_S8_S32_ag_pstm_nrm_imm $p1, 32, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<32 x s8>) into %ir.d.addr.07, addrspace 6)
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.1

  bb.2.for.cond.cleanup:
    RET implicit $lr
    DelayedSchedBarrier

...
