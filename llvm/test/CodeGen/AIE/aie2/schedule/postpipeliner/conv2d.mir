# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates


# RUN: llc -O2 --mtriple=aie2 --start-before=postmisched  %s -o - | FileCheck %s

--- |
  define dso_local void @conv2d.loop.nest(ptr %add.ptr6.i51, ptr %add.ptr5, ptr %cond, ptr %cond.i50, <16 x i32> %0, i32 %cond67.i79, i20 %idx.ext.i.i81, i20 %idx.ext.i404.i, i20 %idx.ext.i410.i, i20 %idx.ext.i434.i85, i32 %1, i20 %2, i20 %3, i20 %4, i20 %5, i20 %6, i32 %7, i32 %8, i32 %or9.i.i.i.i.i96, i32 %9, i20 %idx.ext.i422.i82, i20 %10, i20 %11, i20 %12, i20 %13, i20 %14, i20 %15, i20 %16, i20 %17, i20 %18, i20 %19, i20 %20, i20 %21, i20 %22, i20 %23, i32 %conv192.i107, i20 %24, i20 %idx.ext.i428.i, i20 %25, i20 %26, i20 %27, i32 %28) #0 {
  ; CHECK-LABEL: conv2d.loop.nest:
  ; CHECK:         .p2align 4
  ; CHECK-NEXT:  // %bb.0: // %newFuncRoot
  ; CHECK-NEXT:    nopa ; paddb [sp], #32; nopx
  ; CHECK-NEXT:    st p6, [sp, #-28] // 4-byte Folded Spill
  ; CHECK-NEXT:    mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-132
  ; CHECK-NEXT:    lda m5, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-136
  ; CHECK-NEXT:    lda r28, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-140
  ; CHECK-NEXT:    lda r27, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-44
  ; CHECK-NEXT:    lda m0, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-48
  ; CHECK-NEXT:    lda dj0, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-52
  ; CHECK-NEXT:    lda dj4, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-56
  ; CHECK-NEXT:    lda dn0, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-60
  ; CHECK-NEXT:    lda dn4, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-68
  ; CHECK-NEXT:    lda r10, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-72; mov s0, r0
  ; CHECK-NEXT:    lda dj1, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-76; mov s1, r1
  ; CHECK-NEXT:    lda r11, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    mova dj3, #0; paddb [p6], #-80; mov s2, r6
  ; CHECK-NEXT:    lda dn1, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-84; mov dc0, dj3
  ; CHECK-NEXT:    lda r12, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-88; mov dc4, dj3
  ; CHECK-NEXT:    lda r13, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-92; mov dc1, dj3
  ; CHECK-NEXT:    lda dj2, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-96; mov r25, dj3
  ; CHECK-NEXT:    lda dj6, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-100; mov dc2, dj3
  ; CHECK-NEXT:    lda dn2, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-104; st p7, [sp, #-32] // 4-byte Folded Spill
  ; CHECK-NEXT:    lda dn6, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-108; mov p7, sp
  ; CHECK-NEXT:    lda r14, [p6, #0]; paddb [p7], #-112; mov p6, sp
  ; CHECK-NEXT:    lda dj7, [p7, #0]; paddb [p6], #-116; mov p7, sp
  ; CHECK-NEXT:    lda dn3, [p6, #0]; paddb [p7], #-40; mov p6, sp
  ; CHECK-NEXT:    lda m6, [p7, #0]; paddb [p6], #-120; mov dc6, dj3
  ; CHECK-NEXT:    lda dn7, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-36; mov dc3, dj3
  ; CHECK-NEXT:    lda r15, [p6, #0]; mov p6, sp
  ; CHECK-NEXT:    paddb [p6], #-64; mov p7, sp
  ; CHECK-NEXT:    lda r24, [p6, #0]; paddb [p7], #-128; mov p6, sp
  ; CHECK-NEXT:    lda m7, [p7, #0]; paddb [p6], #-124; movx r8, #11; mov dc7, dj3
  ; CHECK-NEXT:    lda m4, [p6, #0]; movx r9, #31; mov r26, dj3
  ; CHECK-NEXT:    // implicit-def: $x4
  ; CHECK-NEXT:    // implicit-def: $x2
  ; CHECK-NEXT:    .p2align 4
  ; CHECK-NEXT:  .LBB0_1: // %outer.loop.header
  ; CHECK-NEXT:    // =>This Loop Header: Depth=1
  ; CHECK-NEXT:    // Child Loop BB0_2 Depth 2
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh1, s0, [p2, #32]; mov m1, p4
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml1, s0, [p2], m1
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh2, s0, [p2, #32]; mov m2, p5
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml2, s0, [p2], m2
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh3, s0, [p2, #32]
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml3, s0, [p2], m1
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh4, s0, [p2, #32]; mov m3, r15
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml4, s0, [p2], m3
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh5, s0, [p2, #32]
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml5, s0, [p2], m1
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh6, s0, [p2, #32]
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml6, s0, [p2], m2
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh7, s0, [p2, #32]
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml7, s0, [p2], m1
  ; CHECK-NEXT:    vlda.ups.s32.s16 bmh0, s0, [p2, #32]
  ; CHECK-NEXT:    vlda.ups.s32.s16 bml0, s0, [p2, #0]; mov r0, p0
  ; CHECK-NEXT:    movxm ls, #.LBB0_2
  ; CHECK-NEXT:    movxm le, #.L_LEnd0
  ; CHECK-NEXT:    and r0, r0, r9
  ; CHECK-NEXT:    add r0, r0, #33; add.nc lc, r5, #-2
  ; CHECK-NEXT:    vldb wl6, [p0], m6; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb wh6, [p0], m6; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb wl8, [p0], m6; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb.3d wh8, [p0], d0; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb wl10, [p1], #32; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    vldb wh10, [p1], #32; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopa ; vldb wl7, [p1], #32; nopx
  ; CHECK-NEXT:    vldb wh7, [p1], #32; mov r6, p0
  ; CHECK-NEXT:    vldb wl6, [p0], m6; and r5, r6, r9; vshift.align x4, x4, s1, x6, r0
  ; CHECK-NEXT:    vldb wh6, [p0], m6
  ; CHECK-NEXT:    vldb wl8, [p0], m6; add r0, r5, #33; vshift.align x2, x2, s1, x8, r0
  ; CHECK-NEXT:    vldb.3d wh8, [p0], d0; vshuffle x9, x4, x2, r2
  ; CHECK-NEXT:    vldb wl10, [p1], #32; vshuffle x1, x9, x0, r8
  ; CHECK-NEXT:    vldb wh10, [p1], #32; vshuffle x3, x4, x2, r3; vmac cm1, cm1, x9, x10, r4
  ; CHECK-NEXT:    vldb wl7, [p1], #32; vshuffle x5, x3, x0, r8; vmac cm2, cm2, x1, x10, r4
  ; CHECK-NEXT:    vldb wh7, [p1], #32; mov r6, p0; vmac cm3, cm3, x3, x10, r4
  ; CHECK-NEXT:    .p2align 4
  ; CHECK-NEXT:  .LBB0_2: // %inner.loop
  ; CHECK-NEXT:    // Parent Loop BB0_1 Depth=1
  ; CHECK-NEXT:    // => This Inner Loop Header: Depth=2
  ; CHECK-NEXT:    vldb wl6, [p0], m6; nopa ; nops ; and r5, r6, r9; vshift.align x4, x4, s1, x6, r0; vmac cm4, cm4, x5, x10, r4
  ; CHECK-NEXT:    nopa ; vldb wh6, [p0], m6; nopx ; vmac cm5, cm5, x9, x7, r4
  ; CHECK-NEXT:    vldb wl8, [p0], m6; add r0, r5, #33; vshift.align x2, x2, s1, x8, r0; vmac cm6, cm6, x1, x7, r4
  ; CHECK-NEXT:    vldb.3d wh8, [p0], d0; vshuffle x9, x4, x2, r2; vmac cm7, cm7, x3, x7, r4
  ; CHECK-NEXT:    vldb wl10, [p1], #32; vshuffle x1, x9, x0, r8; vmac cm0, cm0, x5, x7, r4
  ; CHECK-NEXT:    vldb wh10, [p1], #32; vshuffle x3, x4, x2, r3; vmac cm1, cm1, x9, x10, r4
  ; CHECK-NEXT:    vldb wl7, [p1], #32; vshuffle x5, x3, x0, r8; vmac cm2, cm2, x1, x10, r4
  ; CHECK-NEXT:  .L_LEnd0:
  ; CHECK-NEXT:    vldb wh7, [p1], #32; nopa ; nops ; nopx ; mov r6, p0; vmac cm3, cm3, x3, x10, r4
  ; CHECK-NEXT:  // %bb.3: // %outer.loop.latch
  ; CHECK-NEXT:    // in Loop: Header=BB0_1 Depth=1
  ; CHECK-NEXT:    nopa ; and r5, r6, r9; vshift.align x4, x4, s1, x6, r0; vmac cm4, cm4, x5, x10, r4
  ; CHECK-NEXT:    vmac cm5, cm5, x9, x7, r4
  ; CHECK-NEXT:    add r0, r5, #33; vshift.align x2, x2, s1, x8, r0; vmac cm6, cm6, x1, x7, r4
  ; CHECK-NEXT:    vshuffle x9, x4, x2, r2; vmac cm7, cm7, x3, x7, r4
  ; CHECK-NEXT:    vshuffle x1, x9, x0, r8; vmac cm0, cm0, x5, x7, r4
  ; CHECK-NEXT:    vshuffle x3, x4, x2, r3; vmac cm1, cm1, x9, x10, r4
  ; CHECK-NEXT:    vshuffle x5, x3, x0, r8; vmac cm2, cm2, x1, x10, r4
  ; CHECK-NEXT:    vmac cm3, cm3, x3, x10, r4
  ; CHECK-NEXT:    vmac cm4, cm4, x5, x10, r4
  ; CHECK-NEXT:    vmac cm5, cm5, x9, x7, r4
  ; CHECK-NEXT:    vmac cm6, cm6, x1, x7, r4
  ; CHECK-NEXT:    vmac cm7, cm7, x3, x7, r4
  ; CHECK-NEXT:    vmac cm0, cm0, x5, x7, r4
  ; CHECK-NEXT:    nop
  ; CHECK-NEXT:    nop
  ; CHECK-NEXT:    nop
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh1, s2, [p3, #32]; mov s3, r6
  ; CHECK-NEXT:    vst.srs.s16.s32 bml1, s3, [p3], #64
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh2, s3, [p3, #32]
  ; CHECK-NEXT:    vst.srs.s16.s32 bml2, s3, [p3], m4
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh3, s3, [p3, #32]
  ; CHECK-NEXT:    vst.srs.s16.s32 bml3, s3, [p3], #64
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh4, s3, [p3, #32]
  ; CHECK-NEXT:    vst.srs.s16.s32 bml4, s3, [p3], m7
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh5, s3, [p3, #32]
  ; CHECK-NEXT:    vst.srs.s16.s32 bml5, s3, [p3], #64
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh6, s3, [p3, #32]; mov dc5, r26
  ; CHECK-NEXT:    vst.srs.s16.s32 bml6, s3, [p3], m4; mov dn5, r27
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh7, s3, [p3, #32]; mov dj5, r28
  ; CHECK-NEXT:    vst.srs.s16.s32 bml7, s3, [p3], #64; mov m1, r10
  ; CHECK-NEXT:    vst.srs.s16.s32 bmh0, s3, [p3, #32]; mov m2, r13
  ; CHECK-NEXT:    vst.2d.srs.s16.s32 bml0, s3, [p3], d5; mov dj5, r11
  ; CHECK-NEXT:    add r7, r7, #-1; mov dn5, r12
  ; CHECK-NEXT:    jnz r7, #.LBB0_1
  ; CHECK-NEXT:    mov r26, dc5 // Delay Slot 5
  ; CHECK-NEXT:    mov dc5, r25 // Delay Slot 4
  ; CHECK-NEXT:    padda.3d [p0], d1; mov m1, r24 // Delay Slot 3
  ; CHECK-NEXT:    padda.3d [p1], d2; paddb [p2], m1; mov m3, r14 // Delay Slot 2
  ; CHECK-NEXT:    padda.3d [p2], d3; mov r25, dc5 // Delay Slot 1
  ; CHECK-NEXT:  // %bb.4: // %exitStub
  ; CHECK-NEXT:    lda p7, [sp, #-32]; nopb ; nopxm // 4-byte Folded Reload
  ; CHECK-NEXT:    lda p6, [sp, #-28] // 4-byte Folded Reload
  ; CHECK-NEXT:    ret lr
  ; CHECK-NEXT:    nop // Delay Slot 5
  ; CHECK-NEXT:    nop // Delay Slot 4
  ; CHECK-NEXT:    nop // Delay Slot 3
  ; CHECK-NEXT:    nop // Delay Slot 2
  ; CHECK-NEXT:    paddb [sp], #-32 // Delay Slot 1
  newFuncRoot:
    br label %outer.loop.header

  outer.loop.header:                                ; preds = %outer.loop.latch, %newFuncRoot
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %outer.loop.latch ], [ %28, %newFuncRoot ]
    %p_in.0672.i = phi ptr [ %add.ptr6.i51, %newFuncRoot ], [ %112, %outer.loop.latch ]
    %p_w.0671.i = phi ptr [ %add.ptr5, %newFuncRoot ], [ %120, %outer.loop.latch ]
    %p_init16.0670.i = phi ptr [ %cond, %newFuncRoot ], [ %128, %outer.loop.latch ]
    %p_out.0669.i = phi ptr [ %cond.i50, %newFuncRoot ], [ %141, %outer.loop.latch ]
    %29 = phi <16 x i32> [ undef, %newFuncRoot ], [ %60, %outer.loop.latch ]
    %30 = phi <16 x i32> [ undef, %newFuncRoot ], [ %59, %outer.loop.latch ]
    %Ybuff0.sroa.0.0667.i = phi <16 x i32> [ %0, %newFuncRoot ], [ %80, %outer.loop.latch ]
    %Ybuff1.sroa.0.0666.i = phi <16 x i32> [ %0, %newFuncRoot ], [ %84, %outer.loop.latch ]
    %iterator_inner_cnt0.0665.i = phi i32 [ 0, %newFuncRoot ], [ %65, %outer.loop.latch ]
    %iterator_inner_cnt1.0664.i = phi i32 [ 0, %newFuncRoot ], [ %67, %outer.loop.latch ]
    %iterator_outer_cnt0.0663.i = phi i32 [ 0, %newFuncRoot ], [ %109, %outer.loop.latch ]
    %iterator_outer_cnt1.0662.i = phi i32 [ 0, %newFuncRoot ], [ %111, %outer.loop.latch ]
    %iterator_weights_cnt0.0661.i = phi i32 [ 0, %newFuncRoot ], [ %117, %outer.loop.latch ]
    %iterator_weights_cnt1.0660.i = phi i32 [ 0, %newFuncRoot ], [ %119, %outer.loop.latch ]
    %iterator_psum_cnt0.0659.i = phi i32 [ 0, %newFuncRoot ], [ %125, %outer.loop.latch ]
    %iterator_psum_cnt1.0658.i = phi i32 [ 0, %newFuncRoot ], [ %127, %outer.loop.latch ]
    %iterator_pout_cnt0.0657.i = phi i32 [ 0, %newFuncRoot ], [ %140, %outer.loop.latch ]
    %31 = ptrtoint ptr %p_in.0672.i to i20
    %32 = and i20 %31, 31
    %narrow.i108 = add nuw nsw i20 %32, 33
    %add76.i = zext i20 %narrow.i108 to i32
    %33 = load <32 x i16>, ptr %p_init16.0670.i, align 64, !tbaa !4
    %34 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %33, i32 %cond67.i79, i32 1)
    %add.ptr.i.i109 = getelementptr inbounds i8, ptr %p_init16.0670.i, i20 %idx.ext.i.i81
    %35 = load <32 x i16>, ptr %add.ptr.i.i109, align 64, !tbaa !4
    %36 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %35, i32 %cond67.i79, i32 1)
    %add.ptr.i405.i = getelementptr inbounds i8, ptr %add.ptr.i.i109, i20 %idx.ext.i404.i
    %37 = load <32 x i16>, ptr %add.ptr.i405.i, align 64, !tbaa !4
    %38 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %37, i32 %cond67.i79, i32 1)
    %add.ptr.i408.i = getelementptr inbounds i8, ptr %add.ptr.i405.i, i20 %idx.ext.i.i81
    %39 = load <32 x i16>, ptr %add.ptr.i408.i, align 64, !tbaa !4
    %40 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %39, i32 %cond67.i79, i32 1)
    %add.ptr.i411.i = getelementptr inbounds i8, ptr %add.ptr.i408.i, i20 %idx.ext.i410.i
    %41 = load <32 x i16>, ptr %add.ptr.i411.i, align 64, !tbaa !4
    %42 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %41, i32 %cond67.i79, i32 1)
    %add.ptr.i414.i = getelementptr inbounds i8, ptr %add.ptr.i411.i, i20 %idx.ext.i.i81
    %43 = load <32 x i16>, ptr %add.ptr.i414.i, align 64, !tbaa !4
    %44 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %43, i32 %cond67.i79, i32 1)
    %add.ptr.i417.i110 = getelementptr inbounds i8, ptr %add.ptr.i414.i, i20 %idx.ext.i404.i
    %45 = load <32 x i16>, ptr %add.ptr.i417.i110, align 64, !tbaa !4
    %46 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %45, i32 %cond67.i79, i32 1)
    %add.ptr.i420.i111 = getelementptr inbounds i8, ptr %add.ptr.i417.i110, i20 %idx.ext.i.i81
    %47 = load <32 x i16>, ptr %add.ptr.i420.i111, align 64, !tbaa !4
    %48 = tail call <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16> %47, i32 %cond67.i79, i32 1)
    call void @llvm.set.loop.iterations.i32(i32 %9)
    br label %inner.loop

  inner.loop:                                       ; preds = %inner.loop, %outer.loop.header
    %p_in.1655.i = phi ptr [ %p_in.0672.i, %outer.loop.header ], [ %68, %inner.loop ]
    %p_w.1654.i = phi ptr [ %p_w.0671.i, %outer.loop.header ], [ %add.ptr161.i, %inner.loop ]
    %49 = phi <16 x i32> [ %29, %outer.loop.header ], [ %60, %inner.loop ]
    %50 = phi <16 x i32> [ %30, %outer.loop.header ], [ %59, %inner.loop ]
    %frac.0652.i = phi i32 [ %add76.i, %outer.loop.header ], [ %add187.i, %inner.loop ]
    %Ybuff0.sroa.0.1651.i = phi <16 x i32> [ %Ybuff0.sroa.0.0667.i, %outer.loop.header ], [ %80, %inner.loop ]
    %Ybuff1.sroa.0.1650.i = phi <16 x i32> [ %Ybuff1.sroa.0.0666.i, %outer.loop.header ], [ %84, %inner.loop ]
    %iterator_inner_cnt0.1649.i = phi i32 [ %iterator_inner_cnt0.0665.i, %outer.loop.header ], [ %65, %inner.loop ]
    %iterator_inner_cnt1.1648.i = phi i32 [ %iterator_inner_cnt1.0664.i, %outer.loop.header ], [ %67, %inner.loop ]
    %Cbuff0.sroa.0.0647.i = phi <16 x i64> [ %34, %outer.loop.header ], [ %87, %inner.loop ]
    %Cbuff1.sroa.0.0646.i = phi <16 x i64> [ %36, %outer.loop.header ], [ %90, %inner.loop ]
    %Cbuff2.sroa.0.0645.i = phi <16 x i64> [ %38, %outer.loop.header ], [ %93, %inner.loop ]
    %Cbuff3.sroa.0.0644.i = phi <16 x i64> [ %40, %outer.loop.header ], [ %96, %inner.loop ]
    %Cbuff4.sroa.0.0643.i = phi <16 x i64> [ %42, %outer.loop.header ], [ %97, %inner.loop ]
    %Cbuff5.sroa.0.0642.i = phi <16 x i64> [ %44, %outer.loop.header ], [ %98, %inner.loop ]
    %Cbuff6.sroa.0.0641.i = phi <16 x i64> [ %46, %outer.loop.header ], [ %99, %inner.loop ]
    %Cbuff7.sroa.0.0640.i = phi <16 x i64> [ %48, %outer.loop.header ], [ %100, %inner.loop ]
    %51 = load <8 x i32>, ptr %p_in.1655.i, align 32, !tbaa !4
    %52 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %0, <8 x i32> %51, i32 0)
    %add.ptr.i435.i117 = getelementptr inbounds i8, ptr %p_in.1655.i, i20 %idx.ext.i434.i85
    %53 = load <8 x i32>, ptr %add.ptr.i435.i117, align 32, !tbaa !4
    %54 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %52, <8 x i32> %53, i32 1)
    %add.ptr.i437.i = getelementptr inbounds i8, ptr %add.ptr.i435.i117, i20 %idx.ext.i434.i85
    %55 = load <8 x i32>, ptr %add.ptr.i437.i, align 32, !tbaa !4
    %56 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %0, <8 x i32> %55, i32 0)
    %add.ptr.i439.i118 = getelementptr inbounds i8, ptr %add.ptr.i437.i, i20 %idx.ext.i434.i85
    %57 = load <8 x i32>, ptr %add.ptr.i439.i118, align 32, !tbaa !4
    %58 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %56, <8 x i32> %57, i32 1)
    %59 = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> %50, <16 x i32> %54, i32 %1, i32 %frac.0652.i)
    %60 = tail call <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32> %49, <16 x i32> %58, i32 %1, i32 %frac.0652.i)
    %61 = trunc i32 %iterator_inner_cnt0.1649.i to i20
    %62 = trunc i32 %iterator_inner_cnt1.1648.i to i20
    %63 = tail call { ptr, i20, i20 } @llvm.aie2.add.3d(ptr nonnull %add.ptr.i439.i118, i20 %2, i20 %3, i20 %4, i20 %5, i20 %61, i20 %6, i20 %62)
    %64 = extractvalue { ptr, i20, i20 } %63, 1
    %65 = zext i20 %64 to i32
    %66 = extractvalue { ptr, i20, i20 } %63, 2
    %67 = zext i20 %66 to i32
    %68 = extractvalue { ptr, i20, i20 } %63, 0
    %69 = tail call <16 x i32> @llvm.aie2.vshuffle(<16 x i32> %59, <16 x i32> %60, i32 %7)
    %70 = tail call <16 x i32> @llvm.aie2.vshuffle(<16 x i32> %69, <16 x i32> %0, i32 11)
    %71 = tail call <16 x i32> @llvm.aie2.vshuffle(<16 x i32> %59, <16 x i32> %60, i32 %8)
    %72 = tail call <16 x i32> @llvm.aie2.vshuffle(<16 x i32> %71, <16 x i32> %0, i32 11)
    %73 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %69, i32 0)
    %74 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %70, i32 0)
    %75 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %71, i32 0)
    %76 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %72, i32 0)
    %77 = load <8 x i32>, ptr %p_w.1654.i, align 32, !tbaa !4
    %78 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %Ybuff0.sroa.0.1651.i, <8 x i32> %77, i32 0)
    %add.ptr152.i = getelementptr inbounds i8, ptr %p_w.1654.i, i20 32
    %79 = load <8 x i32>, ptr %add.ptr152.i, align 32, !tbaa !4
    %80 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %78, <8 x i32> %79, i32 1)
    %add.ptr155.i = getelementptr inbounds i8, ptr %p_w.1654.i, i20 64
    %81 = load <8 x i32>, ptr %add.ptr155.i, align 32, !tbaa !4
    %82 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %Ybuff1.sroa.0.1650.i, <8 x i32> %81, i32 0)
    %add.ptr158.i = getelementptr inbounds i8, ptr %p_w.1654.i, i20 96
    %83 = load <8 x i32>, ptr %add.ptr158.i, align 32, !tbaa !4
    %84 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %82, <8 x i32> %83, i32 1)
    %add.ptr161.i = getelementptr inbounds i8, ptr %p_w.1654.i, i20 128
    %85 = tail call <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> %73, i32 0)
    %86 = bitcast <16 x i32> %85 to <64 x i8>
    %87 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %86, <16 x i32> %80, <16 x i64> %Cbuff0.sroa.0.0647.i, i32 %or9.i.i.i.i.i96)
    %88 = tail call <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> %74, i32 0)
    %89 = bitcast <16 x i32> %88 to <64 x i8>
    %90 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %89, <16 x i32> %80, <16 x i64> %Cbuff1.sroa.0.0646.i, i32 %or9.i.i.i.i.i96)
    %91 = tail call <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> %75, i32 0)
    %92 = bitcast <16 x i32> %91 to <64 x i8>
    %93 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %92, <16 x i32> %80, <16 x i64> %Cbuff2.sroa.0.0645.i, i32 %or9.i.i.i.i.i96)
    %94 = tail call <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32> %76, i32 0)
    %95 = bitcast <16 x i32> %94 to <64 x i8>
    %96 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %95, <16 x i32> %80, <16 x i64> %Cbuff3.sroa.0.0644.i, i32 %or9.i.i.i.i.i96)
    %97 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %86, <16 x i32> %84, <16 x i64> %Cbuff4.sroa.0.0643.i, i32 %or9.i.i.i.i.i96)
    %98 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %89, <16 x i32> %84, <16 x i64> %Cbuff5.sroa.0.0642.i, i32 %or9.i.i.i.i.i96)
    %99 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %92, <16 x i32> %84, <16 x i64> %Cbuff6.sroa.0.0641.i, i32 %or9.i.i.i.i.i96)
    %100 = tail call <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8> %95, <16 x i32> %84, <16 x i64> %Cbuff7.sroa.0.0640.i, i32 %or9.i.i.i.i.i96)
    %101 = ptrtoint ptr %68 to i20
    %102 = and i20 %101, 31
    %narrow402.i = add nuw nsw i20 %102, 33
    %add187.i = zext i20 %narrow402.i to i32
    %103 = call i1 @llvm.loop.decrement.i32(i32 1)
    br i1 %103, label %inner.loop, label %outer.loop.latch, !llvm.loop !7

  outer.loop.latch:                                 ; preds = %inner.loop
    %104 = extractvalue { ptr, i20, i20 } %63, 0
    %add.ptr.i423.i113 = getelementptr inbounds i8, ptr %add.ptr.i420.i111, i20 %idx.ext.i422.i82
    %105 = trunc i32 %iterator_outer_cnt0.0663.i to i20
    %106 = trunc i32 %iterator_outer_cnt1.0662.i to i20
    %107 = tail call { ptr, i20, i20 } @llvm.aie2.add.3d(ptr %104, i20 %10, i20 %11, i20 %12, i20 %13, i20 %105, i20 %14, i20 %106)
    %108 = extractvalue { ptr, i20, i20 } %107, 1
    %109 = zext i20 %108 to i32
    %110 = extractvalue { ptr, i20, i20 } %107, 2
    %111 = zext i20 %110 to i32
    %112 = extractvalue { ptr, i20, i20 } %107, 0
    %113 = trunc i32 %iterator_weights_cnt0.0661.i to i20
    %114 = trunc i32 %iterator_weights_cnt1.0660.i to i20
    %115 = tail call { ptr, i20, i20 } @llvm.aie2.add.3d(ptr nonnull %add.ptr161.i, i20 %15, i20 %16, i20 %17, i20 %18, i20 %113, i20 %19, i20 %114)
    %116 = extractvalue { ptr, i20, i20 } %115, 1
    %117 = zext i20 %116 to i32
    %118 = extractvalue { ptr, i20, i20 } %115, 2
    %119 = zext i20 %118 to i32
    %120 = extractvalue { ptr, i20, i20 } %115, 0
    %121 = trunc i32 %iterator_psum_cnt0.0659.i to i20
    %122 = trunc i32 %iterator_psum_cnt1.0658.i to i20
    %123 = tail call { ptr, i20, i20 } @llvm.aie2.add.3d(ptr nonnull %add.ptr.i423.i113, i20 %20, i20 0, i20 %21, i20 %22, i20 %121, i20 %23, i20 %122)
    %124 = extractvalue { ptr, i20, i20 } %123, 1
    %125 = zext i20 %124 to i32
    %126 = extractvalue { ptr, i20, i20 } %123, 2
    %127 = zext i20 %126 to i32
    %128 = extractvalue { ptr, i20, i20 } %123, 0
    %129 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %87, i32 %conv192.i107, i32 1)
    store <32 x i16> %129, ptr %p_out.0669.i, align 64, !tbaa !4
    %add.ptr.i424.i = getelementptr inbounds i8, ptr %p_out.0669.i, i20 64
    %130 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %90, i32 %conv192.i107, i32 1)
    store <32 x i16> %130, ptr %add.ptr.i424.i, align 64, !tbaa !4
    %add.ptr.i426.i114 = getelementptr inbounds i8, ptr %add.ptr.i424.i, i20 %24
    %131 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %93, i32 %conv192.i107, i32 1)
    store <32 x i16> %131, ptr %add.ptr.i426.i114, align 64, !tbaa !4
    %add.ptr.i427.i = getelementptr inbounds i8, ptr %add.ptr.i426.i114, i20 64
    %132 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %96, i32 %conv192.i107, i32 1)
    store <32 x i16> %132, ptr %add.ptr.i427.i, align 64, !tbaa !4
    %add.ptr.i429.i115 = getelementptr inbounds i8, ptr %add.ptr.i427.i, i20 %idx.ext.i428.i
    %133 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %97, i32 %conv192.i107, i32 1)
    store <32 x i16> %133, ptr %add.ptr.i429.i115, align 64, !tbaa !4
    %add.ptr.i430.i = getelementptr inbounds i8, ptr %add.ptr.i429.i115, i20 64
    %134 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %98, i32 %conv192.i107, i32 1)
    store <32 x i16> %134, ptr %add.ptr.i430.i, align 64, !tbaa !4
    %add.ptr.i432.i116 = getelementptr inbounds i8, ptr %add.ptr.i430.i, i20 %24
    %135 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %99, i32 %conv192.i107, i32 1)
    store <32 x i16> %135, ptr %add.ptr.i432.i116, align 64, !tbaa !4
    %add.ptr.i433.i = getelementptr inbounds i8, ptr %add.ptr.i432.i116, i20 64
    %136 = tail call <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64> %100, i32 %conv192.i107, i32 1)
    store <32 x i16> %136, ptr %add.ptr.i433.i, align 64, !tbaa !4
    %137 = trunc i32 %iterator_pout_cnt0.0657.i to i20
    %138 = tail call { ptr, i20 } @llvm.aie2.add.2d(ptr nonnull %add.ptr.i433.i, i20 %25, i20 %26, i20 %27, i20 %137)
    %139 = extractvalue { ptr, i20 } %138, 1
    %140 = zext i20 %139 to i32
    %141 = extractvalue { ptr, i20 } %138, 0
    %lsr.iv.next2 = add i32 %lsr.iv1, -1
    %exitcond687.not.i = icmp eq i32 %lsr.iv.next2, 0
    br i1 %exitcond687.not.i, label %exitStub, label %outer.loop.header, !llvm.loop !11

  exitStub:                                         ; preds = %outer.loop.latch
    ret void
  }

  ; Function Attrs: nounwind memory(inaccessiblemem: read)
  declare <16 x i64> @llvm.aie2.acc32.v32.I512.ups(<32 x i16>, i32, i32) #1

  ; Function Attrs: nounwind memory(inaccessiblemem: read)
  declare <32 x i16> @llvm.aie2.I512.v32.acc32.srs(<16 x i64>, i32, i32) #1

  ; Function Attrs: nounwind memory(none)
  declare { ptr, i20 } @llvm.aie2.add.2d(ptr, i20, i20, i20, i20) #2

  ; Function Attrs: nounwind memory(none)
  declare <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32>, <8 x i32>, i32) #2

  ; Function Attrs: nounwind memory(none)
  declare <16 x i32> @llvm.aie2.vshift.I512.I512(<16 x i32>, <16 x i32>, i32, i32) #2

  ; Function Attrs: nounwind memory(none)
  declare { ptr, i20, i20 } @llvm.aie2.add.3d(ptr, i20, i20, i20, i20, i20, i20, i20) #2

  ; Function Attrs: nounwind memory(none)
  declare <16 x i32> @llvm.aie2.vshuffle(<16 x i32>, <16 x i32>, i32) #2

  ; Function Attrs: nounwind memory(none)
  declare <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32>, i32) #2

  ; Function Attrs: nounwind memory(none)
  declare <16 x i64> @llvm.aie2.I512.I512.ACC1024.acc32.mac.conf(<64 x i8>, <16 x i32>, <16 x i64>, i32) #2

  ; Function Attrs: nounwind memory(none)
  declare <16 x i32> @llvm.aie2.set.I512.I256(<8 x i32>, i32) #2

  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare void @llvm.set.loop.iterations.i32(i32) #3

  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i1 @llvm.loop.decrement.i32(i32) #3

  attributes #0 = { "no-jump-tables"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
  attributes #1 = { nounwind memory(inaccessiblemem: read) }
  attributes #2 = { nounwind memory(none) }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }

  !llvm.linker.options = !{}
  !llvm.module.flags = !{!0, !1, !2}
  !llvm.ident = !{!3}

  !0 = !{i32 7, !"Dwarf Version", i32 4}
  !1 = !{i32 2, !"Debug Info Version", i32 3}
  !2 = !{i32 1, !"wchar_size", i32 4}
  !3 = !{!"clang version 17.0.0 (git@gitenterprise.xilinx.com:XRLabs/llvm-aie.git bbdf5affb7caccf6d5d27edd19fdf423dc9ab998)"}
  !4 = !{!5, !5, i64 0}
  !5 = !{!"omnipotent char", !6, i64 0}
  !6 = !{!"Simple C++ TBAA"}
  !7 = distinct !{!7, !8, !9, !10}
  !8 = !{!"llvm.loop.mustprogress"}
  !9 = !{!"llvm.loop.unroll.disable"}
  !10 = !{!"llvm.loop.itercount.range", i64 4}
  !11 = distinct !{!11, !8, !9}

...
---
name:            conv2d.loop.nest
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
calleeSavedRegisters: [ '$lr', '$r16', '$r17', '$r18', '$r19', '$r20',
                        '$r21', '$r22', '$r23', '$p6', '$p7' ]
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       32
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: -108, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: -104, size: 3, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, type: default, offset: -100, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, type: default, offset: -96, size: 3, alignment: 32, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, type: default, offset: -92, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, type: default, offset: -88, size: 3, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, type: default, offset: -84, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, type: default, offset: -80, size: 3, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, type: default, offset: -76, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, type: default, offset: -72, size: 3, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 10, type: default, offset: -68, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 11, type: default, offset: -64, size: 3, alignment: 32, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 12, type: default, offset: -60, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 13, type: default, offset: -56, size: 3, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 14, type: default, offset: -52, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 15, type: default, offset: -48, size: 3, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 16, type: default, offset: -44, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 17, type: default, offset: -40, size: 3, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 18, type: default, offset: -36, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 19, type: default, offset: -32, size: 3, alignment: 32, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 20, type: default, offset: -28, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 21, type: default, offset: -24, size: 3, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 22, type: default, offset: -20, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 23, type: default, offset: -16, size: 3, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 24, type: default, offset: -12, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 25, type: default, offset: -8, size: 3, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 26, type: default, offset: -4, size: 3, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: spill-slot, offset: 4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '$p6', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '$p7', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  varArgsFrameIndex: 0
body:             |
  bb.0.newFuncRoot (align 16):
    successors: %bb.1(0x80000000)
    liveins: $p0, $p1, $p2, $p3, $p4, $p5, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $x0, $p6, $p7

    frame-setup PADD_sp_imm_pseudo 32, implicit-def $sp, implicit $sp
    ST_dms_spill killed $p6, -28, implicit $sp :: (store (s32) into %stack.0)
    ST_dms_spill killed $p7, -32, implicit $sp :: (store (s32) into %stack.1)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -132
    renamable $m5 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.2, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -136
    renamable $r28 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.1, align 8)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -140
    renamable $r27 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.0, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -44
    renamable $m0 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.24, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -48
    renamable $dj0 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.23, align 16)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -52
    renamable $dj4 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.22, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -56
    renamable $dn0 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.21, align 8)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -60
    renamable $dn4 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.20, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -68
    renamable $r10 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.18, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -72
    renamable $dj1 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.17, align 8)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -76
    renamable $r11 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.16, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -80
    renamable $dn1 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.15, align 16)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -84
    renamable $r12 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.14, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -88
    renamable $r13 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.13, align 8)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -92
    renamable $dj2 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.12, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -96
    renamable $dj6 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.11, align 32)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -100
    renamable $dn2 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.10, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -104
    renamable $dn6 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.9, align 8)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -108
    $p7 = MOV_mv_scl $sp
    $p7 = PADD_imm9_pseudo $p7, -112
    renamable $r14 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.8, align 4)
    renamable $dj7 = LDA_dms_lda_idx_imm killed renamable $p7, 0 :: (invariant load (s20) from %fixed-stack.7, align 16)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -116
    renamable $dn3 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.6, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -120
    renamable $dn7 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.5, align 8)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -36
    $p7 = MOV_mv_scl $sp
    $p7 = PADD_imm9_pseudo $p7, -40
    renamable $r15 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.26, align 4)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -64
    renamable $m6 = LDA_dms_lda_idx_imm killed renamable $p7, 0 :: (invariant load (s20) from %fixed-stack.25, align 8)
    renamable $r24 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.19, align 32)
    $p6 = MOV_mv_scl $sp
    $p6 = PADD_imm9_pseudo $p6, -124
    $p7 = MOV_mv_scl $sp
    $p7 = PADD_imm9_pseudo $p7, -128
    renamable $m4 = LDA_dms_lda_idx_imm killed renamable $p6, 0 :: (invariant load (s20) from %fixed-stack.4, align 4)
    renamable $m7 = LDA_dms_lda_idx_imm killed renamable $p7, 0 :: (invariant load (s20) from %fixed-stack.3, align 32)
    renamable $r8 = MOV_RLC_imm10_pseudo 11
    renamable $r9 = MOV_RLC_imm10_pseudo 31
    renamable $dj3 = MOV_PD_imm10_pseudo 0
    $dc0 = MOV_mv_scl $dj3
    $dc4 = MOV_mv_scl $dj3
    $dc1 = MOV_mv_scl $dj3
    $r25 = MOV_mv_scl $dj3
    $dc2 = MOV_mv_scl $dj3
    $dc6 = MOV_mv_scl $dj3
    $dc3 = MOV_mv_scl $dj3
    $dc7 = MOV_mv_scl $dj3
    $r26 = MOV_mv_scl $dj3
    $s0 = MOV_mv_scl killed $r0
    renamable $x2 = IMPLICIT_DEF
    renamable $x4 = IMPLICIT_DEF
    $s1 = MOV_mv_scl killed $r1
    $s2 = MOV_mv_scl $r6

  bb.1.outer.loop.header (align 16):
    successors: %bb.2(0x80000000)
    liveins: $dc0, $dc1, $dc2, $dc3, $dc4, $dc6, $dc7, $dj0, $dj1, $dj2, $dj3, $dj4, $dj6, $dj7, $dn0, $dn1, $dn2, $dn3, $dn4, $dn6, $dn7, $m0, $m4, $m5, $m6, $m7, $p0, $p1, $p2, $p3, $p4, $p5, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r24, $r25, $r26, $r27, $r28, $s0, $s1, $s2, $x0, $x2, $x4

    renamable $bmh1 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.p_init16.0670.i + 32, basealign 64, !tbaa !4)
    $m1 = MOV_mv_scl $p4
    renamable $bml1, renamable $p2 = VLDA_UPS_S32_S16_ag_pstm_nrm renamable $s0, killed renamable $p2, renamable $m1, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.p_init16.0670.i, align 64, !tbaa !4)
    renamable $bmh2 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i.i109 + 32, basealign 64, !tbaa !4)
    $m2 = MOV_mv_scl $p5
    renamable $bml2, renamable $p2 = VLDA_UPS_S32_S16_ag_pstm_nrm renamable $s0, killed renamable $p2, renamable $m2, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i.i109, align 64, !tbaa !4)
    renamable $bmh3 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i405.i + 32, basealign 64, !tbaa !4)
    renamable $bml3, renamable $p2 = VLDA_UPS_S32_S16_ag_pstm_nrm renamable $s0, killed renamable $p2, renamable $m1, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i405.i, align 64, !tbaa !4)
    renamable $bmh4 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i408.i + 32, basealign 64, !tbaa !4)
    $m3 = MOV_mv_scl $r15
    renamable $bml4, renamable $p2 = VLDA_UPS_S32_S16_ag_pstm_nrm renamable $s0, killed renamable $p2, killed renamable $m3, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i408.i, align 64, !tbaa !4)
    renamable $bmh5 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i411.i + 32, basealign 64, !tbaa !4)
    renamable $bml5, renamable $p2 = VLDA_UPS_S32_S16_ag_pstm_nrm renamable $s0, killed renamable $p2, renamable $m1, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i411.i, align 64, !tbaa !4)
    renamable $bmh6 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i414.i + 32, basealign 64, !tbaa !4)
    renamable $bml6, renamable $p2 = VLDA_UPS_S32_S16_ag_pstm_nrm renamable $s0, killed renamable $p2, killed renamable $m2, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i414.i, align 64, !tbaa !4)
    renamable $bmh7 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i417.i110 + 32, basealign 64, !tbaa !4)
    renamable $bml7, renamable $p2 = VLDA_UPS_S32_S16_ag_pstm_nrm renamable $s0, killed renamable $p2, killed renamable $m1, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i417.i110, align 64, !tbaa !4)
    renamable $bmh0 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 32, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i420.i111 + 32, basealign 64, !tbaa !4)
    renamable $bml0 = VLDA_UPS_S32_S16_ag_idx_imm renamable $s0, renamable $p2, 0, implicit-def $srups_of, implicit $crsat :: (load (<16 x s16>) from %ir.add.ptr.i420.i111, align 64, !tbaa !4)
    $r0 = MOV_mv_scl $p0
    renamable $r0 = AND killed renamable $r0, renamable $r9
    renamable $r0 = nuw nsw ADD_add_r_ri killed renamable $r0, 33, implicit-def dead $srcarry
    $lc = ADD_NC $r5, 0
    $ls = MOVXM_lng_cg %bb.2
    $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>

  bb.2.inner.loop (align 16):
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $cm0:0x000000000000000F, $cm1:0x000000000000000F, $cm2:0x000000000000000F, $cm3:0x000000000000000F, $cm4:0x000000000000000F, $cm5:0x000000000000000F, $cm6:0x000000000000000F, $cm7:0x000000000000000F, $dc0, $dc1, $dc2, $dc3, $dc4, $dc6, $dc7, $dj0, $dj1, $dj2, $dj3, $dj4, $dj6, $dj7, $dn0, $dn1, $dn2, $dn3, $dn4, $dn6, $dn7, $m0, $m4, $m5, $m6, $m7, $p0, $p1, $p2, $p3, $p4, $p5, $r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r24, $r25, $r26, $r27, $r28, $s0, $s1, $s2, $x0, $x2, $x4, $d0_3d:0x000000000003C870

    renamable $wl6, renamable $p0 = VLD_pstm_pseudo killed renamable $p0, renamable $m6 :: (load (<8 x s32>) from %ir.p_in.1655.i, !tbaa !4)
    renamable $wh6, renamable $p0 = VLD_pstm_pseudo killed renamable $p0, renamable $m6 :: (load (<8 x s32>) from %ir.add.ptr.i435.i117, !tbaa !4)
    renamable $wl8, renamable $p0 = VLD_pstm_pseudo killed renamable $p0, renamable $m6 :: (load (<8 x s32>) from %ir.add.ptr.i437.i, !tbaa !4)
    $wh8, $p0, $dc0, $dc4 = VLD_3D_pseudo killed $p0, $d0_3d :: (load (<8 x s32>) from %ir.add.ptr.i439.i118, !tbaa !4)
    renamable $wl10, renamable $p1 = VLD_pstm_imm_4x32_pseudo killed renamable $p1, 32 :: (load (<8 x s32>) from %ir.p_w.1654.i, !tbaa !4)
    renamable $wh10, renamable $p1 = VLD_pstm_imm_4x32_pseudo killed renamable $p1, 32 :: (load (<8 x s32>) from %ir.add.ptr152.i, !tbaa !4)
    renamable $x4 = VSHIFT_ALIGN killed renamable $x4, renamable $s1, killed renamable $x6, renamable $r0
    renamable $wl7, renamable $p1 = VLD_pstm_imm_4x32_pseudo killed renamable $p1, 32 :: (load (<8 x s32>) from %ir.add.ptr155.i, !tbaa !4)
    renamable $x2 = VSHIFT_ALIGN killed renamable $x2, renamable $s1, killed renamable $x8, killed renamable $r0
    renamable $wh7, renamable $p1 = VLD_pstm_imm_4x32_pseudo killed renamable $p1, 32 :: (load (<8 x s32>) from %ir.add.ptr158.i, !tbaa !4)
    renamable $x9 = VSHUFFLE renamable $x4, renamable $x2, renamable $r2
    renamable $x1 = VSHUFFLE renamable $x9, renamable $x0, renamable $r8
    renamable $x3 = VSHUFFLE renamable $x4, renamable $x2, renamable $r3
    renamable $cm1 = VMAC_vmac_cm_core_dense killed renamable $cm1, renamable $x9, renamable $x10, renamable $r4
    renamable $x5 = VSHUFFLE renamable $x3, renamable $x0, renamable $r8
    renamable $cm2 = VMAC_vmac_cm_core_dense killed renamable $cm2, renamable $x1, renamable $x10, renamable $r4
    renamable $cm3 = VMAC_vmac_cm_core_dense killed renamable $cm3, renamable $x3, renamable $x10, renamable $r4
    renamable $cm4 = VMAC_vmac_cm_core_dense killed renamable $cm4, renamable $x5, killed renamable $x10, renamable $r4
    renamable $cm5 = VMAC_vmac_cm_core_dense killed renamable $cm5, killed renamable $x9, renamable $x7, renamable $r4
    renamable $cm6 = VMAC_vmac_cm_core_dense killed renamable $cm6, killed renamable $x1, renamable $x7, renamable $r4
    renamable $cm7 = VMAC_vmac_cm_core_dense killed renamable $cm7, killed renamable $x3, renamable $x7, renamable $r4
    renamable $cm0 = VMAC_vmac_cm_core_dense killed renamable $cm0, killed renamable $x5, killed renamable $x7, renamable $r4
    $r6 = MOV_mv_scl $p0
    renamable $r5 = AND killed renamable $r6, renamable $r9
    renamable $r0 = nuw nsw ADD_add_r_ri killed renamable $r5, 33, implicit-def dead $srcarry
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.2

  bb.3.outer.loop.latch:
    successors: %bb.4(0x04000000), %bb.1(0x7c000000)
    liveins: $cm0:0x000000000000000F, $cm1:0x000000000000000F, $cm2:0x000000000000000F, $cm3:0x000000000000000F, $cm4:0x000000000000000F, $cm5:0x000000000000000F, $cm6:0x000000000000000F, $cm7:0x000000000000000F, $d5:0x0000000000000800, $dc0, $dc1, $dc2, $dc3, $dc4, $dc6, $dc7, $dj0, $dj1, $dj2, $dj3, $dj4, $dj6, $dj7, $dn0, $dn1, $dn2, $dn3, $dn4, $dn6, $dn7, $m0, $m4, $m5, $m6, $m7, $p0, $p1, $p2, $p3, $p4, $p5, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r24, $r25, $r26, $r27, $r28, $s0, $s1, $s2, $x0, $x2, $x4, $d1_3d:0x0000000000020070, $d2_3d:0x000000000003C070, $d3_3d:0x000000000003C070

    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh1, renamable $s2, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.p_out.0669.i + 32, basealign 64, !tbaa !4)
    $s3 = MOV_mv_scl $r6
    renamable $p3 = VST_SRS_S16_S32_ag_pstm_nrm_imm killed renamable $p3, 64, killed renamable $bml1, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.p_out.0669.i, align 64, !tbaa !4)
    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh2, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i424.i + 32, basealign 64, !tbaa !4)
    renamable $p3 = VST_SRS_S16_S32_ag_pstm_nrm killed renamable $p3, renamable $m4, killed renamable $bml2, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i424.i, align 64, !tbaa !4)
    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh3, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i426.i114 + 32, basealign 64, !tbaa !4)
    renamable $p3 = VST_SRS_S16_S32_ag_pstm_nrm_imm killed renamable $p3, 64, killed renamable $bml3, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i426.i114, align 64, !tbaa !4)
    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh4, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i427.i + 32, basealign 64, !tbaa !4)
    renamable $p3 = VST_SRS_S16_S32_ag_pstm_nrm killed renamable $p3, renamable $m7, killed renamable $bml4, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i427.i, align 64, !tbaa !4)
    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh5, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i429.i115 + 32, basealign 64, !tbaa !4)
    renamable $p3 = VST_SRS_S16_S32_ag_pstm_nrm_imm killed renamable $p3, 64, killed renamable $bml5, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i429.i115, align 64, !tbaa !4)
    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh6, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i430.i + 32, basealign 64, !tbaa !4)
    renamable $p3 = VST_SRS_S16_S32_ag_pstm_nrm killed renamable $p3, renamable $m4, killed renamable $bml6, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i430.i, align 64, !tbaa !4)
    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh7, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i432.i116 + 32, basealign 64, !tbaa !4)
    renamable $p3 = VST_SRS_S16_S32_ag_pstm_nrm_imm killed renamable $p3, 64, killed renamable $bml7, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i432.i116, align 64, !tbaa !4)
    VST_SRS_S16_S32_ag_idx_imm renamable $p3, 32, renamable $bmh0, renamable $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i433.i + 32, basealign 64, !tbaa !4)
    $dc5 = MOV_mv_scl killed $r26
    $dn5 = MOV_mv_scl $r27
    $dj5 = MOV_mv_scl $r28
    $p3, $dc5 = VST_2D_SRS_S16_S32 killed $p3, $d5, killed $bml0, killed $s3, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd :: (store (<16 x s16>) into %ir.add.ptr.i433.i, align 64, !tbaa !4)
    $r26 = MOV_mv_scl killed $dc5
    $m1 = MOV_mv_scl $r10
    $dj5 = MOV_mv_scl $r11
    $dn5 = MOV_mv_scl $r12
    $dc5 = MOV_mv_scl killed $r25
    $p0, $dc1, $dc5 = PADDA_3D killed $p0, $d1_3d
    $r25 = MOV_mv_scl killed $dc5
    $m1 = MOV_mv_scl $r24
    renamable $p2 = PADD_mod_pseudo killed renamable $p2, killed renamable $m1
    renamable $r7 = ADD_add_r_ri killed renamable $r7, -1, implicit-def dead $srcarry
    $m2 = MOV_mv_scl $r13
    $p1, $dc2, $dc6 = PADDA_3D killed $p1, $d2_3d
    $m3 = MOV_mv_scl $r14
    $p2, $dc3, $dc7 = PADDA_3D killed $p2, $d3_3d
    JNZ renamable $r7, %bb.1
    DelayedSchedBarrier

  bb.4.exitStub:
    $p7 = LDA_dms_spill -32, implicit $sp :: (load (s32) from %stack.1)
    $p6 = LDA_dms_spill -28, implicit $sp :: (load (s32) from %stack.0)
    frame-destroy PADD_sp_imm_pseudo -32, implicit-def $sp, implicit $sp
    RET implicit $lr
    DelayedSchedBarrier

...
