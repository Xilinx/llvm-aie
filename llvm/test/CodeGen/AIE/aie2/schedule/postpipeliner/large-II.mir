# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 -O2 --start-before=postmisched %s -o - | FileCheck %s

# Eight loads and eight disambiguated stores need a NS=2 II=8 pipeline,
# but this would exceed the post pipeliner's II=7 limit

--- |
  target datalayout = "e-m:e-p:20:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32"
  target triple = "aie2"

  ; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
  define dso_local void @rotatepermute(ptr addrspace(5) noalias nocapture readonly %in, ptr addrspace(6) noalias nocapture writeonly %out, i32 noundef %n) local_unnamed_addr #0 {
  ; CHECK-LABEL: rotatepermute:
  ; CHECK:         .p2align 4
  ; CHECK-NEXT:  // %bb.0: // %entry
  ; CHECK-NEXT:    mova r1, #0; nopb ; nopxm
  ; CHECK-NEXT:    ge r1, r1, r0
  ; CHECK-NEXT:    jnz r1, #.LBB0_3
  ; CHECK-NEXT:    nop // Delay Slot 5
  ; CHECK-NEXT:    nop // Delay Slot 4
  ; CHECK-NEXT:    nop // Delay Slot 3
  ; CHECK-NEXT:    nop // Delay Slot 2
  ; CHECK-NEXT:    nop // Delay Slot 1
  ; CHECK-NEXT:  // %bb.1: // %for.body.preheader
  ; CHECK-NEXT:    add.nc lc, r0, #-1
  ; CHECK-NEXT:    movxm ls, #.LBB0_2
  ; CHECK-NEXT:    movxm le, #.L_LEnd0
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopb ; nopa ; nops ; nopxm ; nopv
  ; CHECK-NEXT:    nopa ; nopb ; nopxm ; nops
  ; CHECK-NEXT:    lda r0, [p0], #4
  ; CHECK-NEXT:    lda r1, [p0], #4
  ; CHECK-NEXT:    lda r2, [p0], #4
  ; CHECK-NEXT:    lda r3, [p0], #4
  ; CHECK-NEXT:    lda r4, [p0], #4
  ; CHECK-NEXT:    lda r5, [p0], #4
  ; CHECK-NEXT:    lda r6, [p0], #4
  ; CHECK-NEXT:    lda r7, [p0], #4; st r0, [p1], #4
  ; CHECK-NEXT:    .p2align 4
  ; CHECK-NEXT:  .LBB0_2: // %for.body
  ; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
  ; CHECK-NEXT:    lda r0, [p0], #4; nopb ; nopx ; st r1, [p1], #4
  ; CHECK-NEXT:    lda r1, [p0], #4; st r2, [p1], #4
  ; CHECK-NEXT:    lda r2, [p0], #4; st r3, [p1], #4
  ; CHECK-NEXT:    lda r3, [p0], #4; st r4, [p1], #4
  ; CHECK-NEXT:    lda r4, [p0], #4; st r5, [p1], #4
  ; CHECK-NEXT:    lda r5, [p0], #4; st r6, [p1], #4
  ; CHECK-NEXT:    lda r6, [p0], #4; st r7, [p1], #4
  ; CHECK-NEXT:  .L_LEnd0:
  ; CHECK-NEXT:    nopb ; lda r7, [p0], #4; st r0, [p1], #4; nopxm ; nopv
  ; CHECK-NEXT:    .p2align 4
  ; CHECK-NEXT:  .LBB0_3: // %for.cond.cleanup
  ; CHECK-NEXT:    st r1, [p1], #4; nopb ; nopx
  ; CHECK-NEXT:    st r2, [p1], #4
  ; CHECK-NEXT:    st r3, [p1], #4
  ; CHECK-NEXT:    st r4, [p1], #4
  ; CHECK-NEXT:    st r5, [p1], #4
  ; CHECK-NEXT:    st r6, [p1], #4
  ; CHECK-NEXT:    st r7, [p1], #4
  ; CHECK-NEXT:    nop
  ; CHECK-NEXT:    ret lr
  ; CHECK-NEXT:    nop // Delay Slot 5
  ; CHECK-NEXT:    nop // Delay Slot 4
  ; CHECK-NEXT:    nop // Delay Slot 3
  ; CHECK-NEXT:    nop // Delay Slot 2
  ; CHECK-NEXT:    nop // Delay Slot 1
  entry:
    %cmp27 = icmp sgt i32 %n, 0
    br i1 %cmp27, label %for.body.preheader, label %for.cond.cleanup

  for.body.preheader:                               ; preds = %entry
    call void @llvm.set.loop.iterations.i32(i32 %n)
    br label %for.body

  for.cond.cleanup:                                 ; preds = %for.body, %entry
    ret void

  for.body:                                         ; preds = %for.body.preheader, %for.body
    %in.addr.029 = phi ptr addrspace(5) [ %incdec.ptr9, %for.body ], [ %in, %for.body.preheader ]
    %out.addr.028 = phi ptr addrspace(6) [ %incdec.ptr, %for.body ], [ %out, %for.body.preheader ]
    %a1 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 4
    %0 = load i32, ptr addrspace(5) %a1, align 4, !tbaa !2
    store i32 %0, ptr addrspace(6) %out.addr.028, align 4, !tbaa !7
    %a2 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 8
    %1 = load i32, ptr addrspace(5) %a2, align 4, !tbaa !8
    %a11 = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 4
    store i32 %1, ptr addrspace(6) %a11, align 4, !tbaa !2
    %a3 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 12
    %2 = load i32, ptr addrspace(5) %a3, align 4, !tbaa !9
    %a22 = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 8
    store i32 %2, ptr addrspace(6) %a22, align 4, !tbaa !8
    %a4 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 16
    %3 = load i32, ptr addrspace(5) %a4, align 4, !tbaa !10
    %a33 = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 12
    store i32 %3, ptr addrspace(6) %a33, align 4, !tbaa !9
    %a5 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 20
    %4 = load i32, ptr addrspace(5) %a5, align 4, !tbaa !11
    %a44 = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 16
    store i32 %4, ptr addrspace(6) %a44, align 4, !tbaa !10
    %a6 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 24
    %5 = load i32, ptr addrspace(5) %a6, align 4, !tbaa !12
    %a55 = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 20
    store i32 %5, ptr addrspace(6) %a55, align 4, !tbaa !11
    %a7 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 28
    %6 = load i32, ptr addrspace(5) %a7, align 4, !tbaa !13
    %a66 = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 24
    store i32 %6, ptr addrspace(6) %a66, align 4, !tbaa !12
    %7 = load i32, ptr addrspace(5) %in.addr.029, align 4, !tbaa !7
    %a78 = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 28
    store i32 %7, ptr addrspace(6) %a78, align 4, !tbaa !13
    %incdec.ptr = getelementptr inbounds i8, ptr addrspace(6) %out.addr.028, i20 32
    %incdec.ptr9 = getelementptr inbounds i8, ptr addrspace(5) %in.addr.029, i20 32
    %8 = call i1 @llvm.loop.decrement.i32(i32 1)
    br i1 %8, label %for.body, label %for.cond.cleanup, !llvm.loop !14
  }

  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare void @llvm.set.loop.iterations.i32(i32) #1

  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i1 @llvm.loop.decrement.i32(i32) #1

  attributes #0 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }

  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 19.0.0git (git@github.com:Xilinx/llvm-aie.git 0fb89c599fc26f15b5cffce4b391420a07de285d)"}
  !2 = !{!3, !4, i64 4}
  !3 = !{!"Data", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 24, !4, i64 28}
  !4 = !{!"int", !5, i64 0}
  !5 = !{!"omnipotent char", !6, i64 0}
  !6 = !{!"Simple C/C++ TBAA"}
  !7 = !{!3, !4, i64 0}
  !8 = !{!3, !4, i64 8}
  !9 = !{!3, !4, i64 12}
  !10 = !{!3, !4, i64 16}
  !11 = !{!3, !4, i64 20}
  !12 = !{!3, !4, i64 24}
  !13 = !{!3, !4, i64 28}
  !14 = distinct !{!14, !15, !16}
  !15 = !{!"llvm.loop.mustprogress"}
  !16 = !{!"llvm.loop.itercount.range", i64 4}

...
---
name:            rotatepermute
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
calleeSavedRegisters: [ '$lr', '$r16', '$r17', '$r18', '$r19', '$r20',
                        '$r21', '$r22', '$r23', '$p6', '$p7' ]
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  varArgsFrameIndex: 0
body:             |
  bb.0.entry (align 16):
    successors: %bb.1(0x50000000), %bb.3(0x30000000)
    liveins: $p0, $p1, $r0

    renamable $r1 = MOV_RLC_imm10_pseudo 0
    renamable $r1 = GE killed renamable $r1, renamable $r0
    JNZ killed renamable $r1, %bb.3
    DelayedSchedBarrier

  bb.1.for.body.preheader:
    successors: %bb.2(0x80000000)
    liveins: $p0, $p1, $r0

    $lc = ADD_NC $r0, 0
    $ls = MOVXM_lng_cg %bb.2
    $le = MOVXM_lng_cg <mcsymbol .L_LEnd0>

  bb.2.for.body (align 16):
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $p0, $p1

    $r0, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $r1, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $r2, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $r3, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $r4, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $r5, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $r6, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $r7, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 4 :: (load (s32) from %ir.a1, !tbaa !2, addrspace 5)
    $p1 = ST_dms_sts_pstm_nrm_imm $r0, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    $p1 = ST_dms_sts_pstm_nrm_imm $r1, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    $p1 = ST_dms_sts_pstm_nrm_imm $r2, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    $p1 = ST_dms_sts_pstm_nrm_imm $r3, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    $p1 = ST_dms_sts_pstm_nrm_imm $r4, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    $p1 = ST_dms_sts_pstm_nrm_imm $r5, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    $p1 = ST_dms_sts_pstm_nrm_imm $r6, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    $p1 = ST_dms_sts_pstm_nrm_imm $r7, $p1, 4 :: (store (s32) into %ir.out.addr.028, !tbaa !7, addrspace 6)
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.2

  bb.3.for.cond.cleanup (align 16):
    RET implicit $lr
    DelayedSchedBarrier

...
