# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 %topdown-single -run-pass=postmisched %s -o - \
# RUN:   | FileCheck %s

# VADDMAC accesses CM_RM read port in cycle 3, VMOV_CM in cycle 1
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
---
name:            E3_VADDMAC_E1_VMOV_CM
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E3_VADDMAC_E1_VMOV_CM
    ; CHECK: $cm0 = VADDMAC_vmac_bm_core_dense killed $cm0, $cm2, killed $x3, killed $x4, killed $r5
    ; CHECK-NEXT: $cm7 = VMOV_mv_cm killed $cm2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm8 = VMOV_mv_cm killed $cm5
    ; CHECK-NEXT: NOP
    $cm0 = VADDMAC_vmac_bm_core_dense $cm0, $cm2, $x3, $x4, $r5
    $cm7 = VMOV_mv_cm $cm2
    $cm8 = VMOV_mv_cm $cm5
...

# VNEGADD accesses CM_RM read port in cycle 3, VMOV_CM in cycle 1
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
---
name:            E3_VNEGADD_E1_VMOV_CM
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E3_VNEGADD_E1_VMOV_CM
    ; CHECK: $cm0 = VNEGADD killed $cm3, $cm2, killed $r5
    ; CHECK-NEXT: $cm7 = VMOV_mv_cm killed $cm2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm8 = VMOV_mv_cm killed $cm5
    ; CHECK-NEXT: NOP
    $cm0 = VNEGADD $cm3, $cm2, $r5
    $cm7 = VMOV_mv_cm $cm2
    $cm8 = VMOV_mv_cm $cm5
...

# VADDMACf accesses CM_RM read port in cycle 3, VMOV_CM in cycle 1
# The scheduler needs to insert an additional NOP such that the two
# instructions don't access the same port in the same cycle
#
---
name:            E3_VADDMACf_E1_VMOV_CM
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E3_VADDMACf_E1_VMOV_CM
    ; CHECK: $bml0 = VADDMAC_F_vmac_bm_core_dense killed $bml0, killed $bml1, killed $x3, killed $x4, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $cm2 = VMOV_mv_cm killed $cm3
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm4 = VMOV_mv_cm killed $cm5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADDMAC_F_vmac_bm_core_dense $bml0, $bml1, $x3, $x4, $r5, implicit-def $srfpflags, implicit $crfpmask
    $cm2 = VMOV_mv_cm $cm3
    $cm4 = VMOV_mv_cm $cm5
...

# VACCf accesses CM_RM read port in cycle 3, VMOV_CM in cycle 1
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E3_VACCf_E1_VMOV_CM
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E3_VACCf_E1_VMOV_CM
    ; CHECK: $bml0 = VADD_F killed $bml1, $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $cm1 = VMOV_mv_cm killed $cm2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm3 = VMOV_mv_cm killed $cm4
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $cm1 = VMOV_mv_cm $cm2
    $cm3 = VMOV_mv_cm $cm4
...

# VMOV_mv_x accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VMOV_X_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VMOV_X_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml6 = VMOV_mv_x killed $bml1
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $bml7 = VMOV_mv_x killed $bmh2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $bml6 = VMOV_mv_x $bml1
    $bml7 = VMOV_mv_x $bmh2
...

# VMOV_mv_w accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VMOV_W_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VMOV_W_E3_VACCf
    ; CHECK: $bml0 = VADD_F killed $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $amlh6 = VMOV_mv_w killed $amhl5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $amlh7 = VMOV_mv_w killed $amhl6
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $amlh6 = VMOV_mv_w $amhl5
    $amlh7 = VMOV_mv_w $amhl6
...

# VSRS accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VSRS_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VSRS_E3_VACCf
    ; CHECK: $bml0 = VADD_F killed $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $wl0 = VSRS_S8_S32_mv_w_srs $cm5, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl1 = VSRS_S8_S32_mv_w_srs killed $cm5, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $wl0 = VSRS_S8_S32_mv_w_srs $cm5, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    $wl1 = VSRS_S8_S32_mv_w_srs $cm5, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
...

# VSRSM accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VSRSM_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VSRSM_E3_VACCf
    ; CHECK: $bml0 = VADD_F killed $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $wl0 = VSRSM_S16_S32 killed $bml5, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl1 = VSRSM_S16_S32 killed $bmh4, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $wl0 = VSRSM_S16_S32 $bml5, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    $wl1 = VSRSM_S16_S32 $bmh4, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
...

# VST_SRS accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_SRS_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_SRS_E3_VACCf
    ; CHECK: $bml0 = VADD_F killed $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: VST_SRS_S8_S32_ag_idx_imm $p7, -128, $cm4, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_SRS_S8_S32_ag_idx_imm killed $p7, -128, killed $cm4, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    VST_SRS_S8_S32_ag_idx_imm  $p7, -128, $cm4, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
    VST_SRS_S8_S32_ag_idx_imm  $p7, -128, $cm4, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd
...

# VST_POSTINC_SRS accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_POSTINC_SRS_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_POSTINC_SRS_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p1 = VST_SRS_D8_S32_ag_pstm_nrm_imm killed $p1, 0, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p1 = VST_SRS_D8_S32_ag_pstm_nrm_imm killed $p1, 0, killed $cm1, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p1 = VST_SRS_D8_S32_ag_pstm_nrm_imm $p1, 0, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $p1 = VST_SRS_D8_S32_ag_pstm_nrm_imm $p1, 0, $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

# VST_2D_SRS accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_2D_SRS_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_2D_SRS_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0, $dc7 = VST_2D_SRS_D16_S32 killed $p0, $d7, $bml1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc7 = VST_2D_SRS_D16_S32 killed $p0, killed $d7, killed $bml1, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0, $dc7 = VST_2D_SRS_D16_S32 $p0, $d7, $bml1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $p0, $dc7 = VST_2D_SRS_D16_S32 $p0, $d7, $bml1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

# VST_3D_SRS accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_3D_SRS_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_3D_SRS_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 killed $p0, $d3_3d, $bml1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 killed $p0, killed $d3_3d, killed $bml1, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 $p0, $d3_3d, $bml1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 $p0, $d3_3d, $bml1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

# VCONV_BF16_FP32 accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VCONV_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VCONV_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 $bml1, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 killed $bml1, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $wl3 = VCONV_BF16_FP32 $bml1, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $wl3 = VCONV_BF16_FP32 $bml1, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
...

# VST_CONV accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_CONV_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_CONV_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx_imm $p0, 0, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_CONV_BF16_FP32_ag_idx_imm killed $p0, 0, killed $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    VST_CONV_BF16_FP32_ag_idx_imm $p0, 0, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    VST_CONV_BF16_FP32_ag_idx_imm $p0, 0, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
...

# VST_CONV_POSTINC accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_CONV_POSTINC_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_CONV_POSTINC_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0 = VST_CONV_BF16_FP32_ag_pstm_nrm killed $p0, $m3, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0 = VST_CONV_BF16_FP32_ag_pstm_nrm killed $p0, killed $m3, killed $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0 = VST_CONV_BF16_FP32_ag_pstm_nrm $p0, $m3, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    $p0 = VST_CONV_BF16_FP32_ag_pstm_nrm $p0, $m3, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
...

# VST_2D_CONV accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_2D_CONV_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_2D_CONV_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0, $dc0 = VST_CONV_2D_BF16_FP32 killed $p0, $d0, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc0 = VST_CONV_2D_BF16_FP32 killed $p0, killed $d0, killed $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0, $dc0 = VST_CONV_2D_BF16_FP32 $p0, $d0, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    $p0, $dc0 = VST_CONV_2D_BF16_FP32 $p0, $d0, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
...

# VST_3D_CONV accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_3D_CONV_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_3D_CONV_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0, $dc0, $dc4 = VST_CONV_3D_BF16_FP32 killed $p0, $d0_3d, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc0, $dc4 = VST_CONV_3D_BF16_FP32 killed $p0, killed $d0_3d, killed $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0, $dc0, $dc4 = VST_CONV_3D_BF16_FP32 $p0, $d0_3d, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    $p0, $dc0, $dc4 = VST_CONV_3D_BF16_FP32 $p0, $d0_3d, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
...

# VST_AM accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_AM_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_AM_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm $amll1, $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_dmw_sts_am_ag_idx_imm killed $amll1, killed $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    VST_dmw_sts_am_ag_idx_imm $amll1, $p0, 0
    VST_dmw_sts_am_ag_idx_imm $amll1, $p0, 0
...

# VST_POSTINC_AM accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_POSTINC_AM_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_POSTINC_AM_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm $amll1, killed $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm killed $amll1, killed $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm $amll1, $p0, 0
    $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm $amll1, $p0, 0
...

# VST_2D_AM accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_2D_AM_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_2D_AM_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0, $dc0 = VST_2D_dmw_sts_am $amll1, killed $p0, $d0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc0 = VST_2D_dmw_sts_am killed $amll1, killed $p0, killed $d0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0, $dc0 = VST_2D_dmw_sts_am $amll1, $p0, $d0
    $p0, $dc0 = VST_2D_dmw_sts_am $amll1, $p0, $d0
...

# VST_3D_AM accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VST_3D_AM_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VST_3D_AM_E3_VACCf
    ; CHECK: $bml0 = VADD_F $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $p0, $dc0, $dc4 = VST_3D_dmw_sts_am $amll1, killed $p0, $d0_3d
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc0, $dc4 = VST_3D_dmw_sts_am killed $amll1, killed $p0, killed $d0_3d
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $p0, $dc0, $dc4 = VST_3D_dmw_sts_am $amll1, $p0, $d0_3d
    $p0, $dc0, $dc4 = VST_3D_dmw_sts_am $amll1, $p0, $d0_3d
...

# VFLOOR_AM accesses the CM_RM port in cycle 1, VACCf in cycle 3
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
#
---
name:            E1_VFLOOR_AM_E3_VACCf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_VFLOOR_AM_E3_VACCf
    ; CHECK: $bml0 = VADD_F killed $bml1, killed $bml2, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM killed $amll3, killed $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0 = VADD_F $bml1, $bml2, $r5, implicit-def $srfpflags, implicit $crfpmask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
...
