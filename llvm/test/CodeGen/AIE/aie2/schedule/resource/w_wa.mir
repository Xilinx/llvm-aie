# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 %topdown-single -run-pass=postmisched %s -o - \
# RUN:   | FileCheck %s

# VLDA accesses WA write port in cycle 7, VSRS in cycle 4
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
---
name:            E4_vsrs_E7_VLDA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E4_vsrs_E7_VLDA
    ; CHECK: $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

---
name:            E4_vsrs_E7_VLDA_POSTINC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E4_vsrs_E7_VLDA_POSTINC
    ; CHECK: $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm killed $p0, 0
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $wl0, $p0 = VLDA_dmw_lda_w_ag_pstm_nrm_imm $p0, 0
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

---
name:            E4_vsrs_E7_VLDA_2D
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E4_vsrs_E7_VLDA_2D
    ; CHECK: $wl0, $p0, $dc0 = VLDA_2D_dmw_lda_w killed $p0, killed $d0
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $wl0, $p0, $dc0 = VLDA_2D_dmw_lda_w $p0, $d0
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

---
name:            E4_vsrs_E7_VLDA_3D
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E4_vsrs_E7_VLDA_3D
    ; CHECK: $wl0, $p0, $dc0, $dc4 = VLDA_3D_dmw_lda_w killed $p0, killed $d0_3d
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl3 = VSRS_D8_S32_mv_w_srs killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $wl0, $p0, $dc0, $dc4 = VLDA_3D_dmw_lda_w $p0, $d0_3d
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $wl3 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

---
name:            no_conflict
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: no_conflict
    ; CHECK: $amll0 = VLDA_dmw_lda_am_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: $wl1 = VSRS_D8_S32_mv_w_srs killed $cm1, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $r0 = ADD killed $r0, $r0, implicit-def $srcarry
    ; CHECK-NEXT: $r0 = ADD killed $r0, $r0, implicit-def $srcarry
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $amll0 = VLDA_dmw_lda_am_ag_idx_imm $p0, 0
    $r0 = ADD $r0, $r0, implicit-def $srcarry
    $r0 = ADD $r0, $r0, implicit-def $srcarry
    $wl1 = VSRS_D8_S32_mv_w_srs $cm1, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

# VLDA accesses WA write port in cycle 7, VCONV in cycle 2
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
---
name:            E2_vconv_E7_VLDA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_vconv_E7_VLDA
    ; CHECK: $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: $wl3 = VCONV_BF16_FP32 killed $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    ; CHECK-NEXT: NOP
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
    $wl3 = VCONV_BF16_FP32 $bml0, implicit-def $srf2fflags, implicit $crf2fmask, implicit $crrnd
...

---
name:            E2_VFLOOR_E7_VLDA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VFLOOR_E7_VLDA
    ; CHECK: $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: $x1 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x1 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM killed $amll3, killed $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x1 = VFLOOR_S32_BF16_mFl2FxSrc_W killed $wl2, killed $s1, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: NOP
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll3, $s0, implicit-def $srf2iflags, implicit $crf2imask
    $x1 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    $x1 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    $x1 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
...

# VLDA accesses WA write port in E7 and VPACK in E2
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle

---
name:            E2_VPACK_E7_VLDA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VPACK_E7_VLDA
    ; CHECK: $wl0 = VLDA_dmw_lda_w_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 killed $x1, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: NOP
    $wl0 = VLDA_dmw_lda_w_ag_idx_imm $p0, 0
    $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x1, implicit $crsat, implicit $crpacksign
...
