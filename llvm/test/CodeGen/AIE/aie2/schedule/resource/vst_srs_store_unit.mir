# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

# This test triggers a structural conflict with the memory store interface (STORE_UNIT).

# Memory store interface:
# ST.s8/ST.s16 E8
# VST.SRS E4
# All other stores to memory E2

---
name:            VST_SRS_II_VST_W
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_SRS_II_VST_W
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p1, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm killed $wl0, killed $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p1, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
...

---
name:            VST_POSTINC_SRS_II_VST_W
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_POSTINC_SRS_II_VST_W
    ; CHECK: $p1 = VST_SRS_D8_S32_ag_pstm_nrm_imm killed $p1, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm killed $wl0, killed $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    $p1 = VST_SRS_D8_S32_ag_pstm_nrm_imm $p1, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
...

---
name:            VST_SRS_II_VST_POSTINC_W
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_SRS_II_VST_POSTINC_W
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p1, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    ; CHECK-NEXT: $p0 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, killed $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0 = VST_dmw_sts_w_ag_pstm_nrm_imm killed $wl0, killed $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p1, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    $p0 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
    $p0 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, $p0, 0 :: (store (s256) into stack - 512)
...

---
name:            VST_SRS_VST_POSTINC_AM
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_SRS_VST_POSTINC_AM
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p1, 0, $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    ; CHECK-NEXT: $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm $amll0, killed $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm killed $amll0, killed $p0, 0 :: (store (s256) into stack - 512)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p1, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm $amll0, $p0, 0 :: (store (s256) into stack - 512)
    $p0 = VST_dmw_sts_am_ag_pstm_nrm_imm $amll0, $p0, 0 :: (store (s256) into stack - 512)
...

# Currently due to the resource conflicts of the part word store (PART_WORD_STORE) we are not able
# to test the structural conflict of the memory store interface.
---
name:            ST_S16_VST_SRS
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ST_S16_VST_SRS
    ; CHECK: ST_S16_ag_idx_imm killed $r13, killed $p0, 0 :: (store (s16) into stack - 32)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_SRS_S16_S64_ag_idx_imm killed $p1, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S16_ag_idx_imm $r13, $p0, 0 :: (store (s16) into stack - 32)
    VST_SRS_S16_S64_ag_idx_imm $p1, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (s1024) into stack - 2048)
...
