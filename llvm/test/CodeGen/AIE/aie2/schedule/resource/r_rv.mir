# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi --verify-machineinstrs %s -o - | FileCheck %s

# VMUL accesses RV port of GPR in cycle 1, ST.s8/ST.s16 access it in cycle 7
# One of the  VMULs should be pushed out
---
name:            E7_STHB_E1_VMUL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_E1_VMUL
    ; CHECK: BUNDLE implicit-def $cm0, implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $bmh0, implicit-def $amhl0, implicit-def $amhh0, implicit killed $r13, implicit killed $p0, implicit $x0, implicit $x1, implicit killed $r0 {
    ; CHECK-NEXT:   ST_S8_ag_idx_imm killed $r13, killed $p0, 0
    ; CHECK-NEXT:   $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r1
    ; CHECK-NEXT: $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r2
    ; CHECK-NEXT: $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r3
    ; CHECK-NEXT: $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r4
    ; CHECK-NEXT: $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r6
    ; CHECK-NEXT: $cm3 = VMUL_vmac_cm_core_dense killed $x0, killed $x1, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S8_ag_idx_imm $r13, $p0, 0
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
    $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, $r1
    $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, $r2
    $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, $r3
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r4
    $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, $r5
    $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, $r6
    $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, $r7
...

---
name:            E7_STHB_2D_E1_VMUL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_2D_E1_VMUL
    ; CHECK: BUNDLE implicit-def $p0, implicit-def $dc0, implicit-def $cm0, implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $bmh0, implicit-def $amhl0, implicit-def $amhh0, implicit killed $r13, implicit killed $p0, implicit killed $d0, implicit $x0, implicit $x1, implicit killed $r0 {
    ; CHECK-NEXT:   $p0, $dc0 = ST_2D_S8 killed $r13, killed $p0, killed $d0
    ; CHECK-NEXT:   $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r1
    ; CHECK-NEXT: $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r2
    ; CHECK-NEXT: $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r3
    ; CHECK-NEXT: $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r4
    ; CHECK-NEXT: $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r6
    ; CHECK-NEXT: $cm3 = VMUL_vmac_cm_core_dense killed $x0, killed $x1, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $p0, $dc0 = ST_2D_S8 $r13, $p0, $d0
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
    $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, $r1
    $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, $r2
    $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, $r3
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r4
    $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, $r5
    $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, $r6
    $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, $r7
...

---
name:            E7_STHB_3D_E1_VMUL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_3D_E1_VMUL
    ; CHECK: BUNDLE implicit-def $p0, implicit-def $dc0, implicit-def $dc4, implicit-def $cm0, implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $bmh0, implicit-def $amhl0, implicit-def $amhh0, implicit killed $r13, implicit killed $p0, implicit killed $d0_3d, implicit $x0, implicit $x1, implicit killed $r0 {
    ; CHECK-NEXT:   $p0, $dc0, $dc4 = ST_3D_S8 killed $r13, killed $p0, killed $d0_3d
    ; CHECK-NEXT:   $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r1
    ; CHECK-NEXT: $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r2
    ; CHECK-NEXT: $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r3
    ; CHECK-NEXT: $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r4
    ; CHECK-NEXT: $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, killed $r6
    ; CHECK-NEXT: $cm3 = VMUL_vmac_cm_core_dense killed $x0, killed $x1, killed $r7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $p0, $dc0, $dc4 = ST_3D_S8 $r13, $p0, $d0_3d
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
    $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, $r1
    $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, $r2
    $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, $r3
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r4
    $cm1 = VMUL_vmac_cm_core_dense $x0, $x1, $r5
    $cm2 = VMUL_vmac_cm_core_dense $x0, $x1, $r6
    $cm3 = VMUL_vmac_cm_core_dense $x0, $x1, $r7
...

# ST and VMUL use the same GPR read port, they should not be in the same cycle.
---
name:            E1_ST_E1_VMUL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_ST_E1_VMUL
    ; CHECK: $cm0 = VMUL_vmac_cm_core_dense killed $x0, killed $x1, killed $r0
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r13, killed $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_dms_sts_idx_imm $r13, $p0, 0
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
...

---
name:            E1_ST_2D_E1_VMUL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_ST_2D_E1_VMUL
    ; CHECK: $cm0 = VMUL_vmac_cm_core_dense killed $x0, killed $x1, killed $r0
    ; CHECK-NEXT: $p0, $dc0 = ST_2D_dms_sts killed $r13, killed $p0, killed $d0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $p0, $dc0 = ST_2D_dms_sts $r13, $p0, $d0
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
...

---
name:            E1_ST_3D_E1_VMUL
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E1_ST_3D_E1_VMUL
    ; CHECK: $cm0 = VMUL_vmac_cm_core_dense killed $x0, killed $x1, killed $r0
    ; CHECK-NEXT: $p0, $dc0, $dc4 = ST_3D_dms_sts killed $r13, killed $p0, killed $d0_3d
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $p0, $dc0, $dc4 = ST_3D_dms_sts $r13, $p0, $d0_3d
    $cm0 = VMUL_vmac_cm_core_dense $x0, $x1, $r0
...

# VADDMACf accesses RV port of GPR in cycle 1, ST.s8/ST.s16 access it in cycle 7
---
name:            E7_STHB_E1_VADDMACf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_E1_VADDMACf
    ; CHECK: BUNDLE implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $srfpflags, implicit killed $r13, implicit killed $p0, implicit killed $bml0, implicit $bmh2, implicit $x3, implicit $x4, implicit killed $r0, implicit $crfpmask {
    ; CHECK-NEXT:   ST_S8_ag_idx_imm killed $r13, killed $p0, 0
    ; CHECK-NEXT:   $bml0 = VADDMAC_F_vmac_bm_core_dense killed $bml0, $bmh2, $x3, $x4, killed $r0, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $bml1 = VADDMAC_F_vmac_bm_core_dense killed $bml1, $bmh2, $x3, $x4, killed $r1, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml2 = VADDMAC_F_vmac_bm_core_dense killed $bml2, $bmh2, $x3, $x4, killed $r2, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml3 = VADDMAC_F_vmac_bm_core_dense killed $bml3, $bmh2, $x3, $x4, killed $r3, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml4 = VADDMAC_F_vmac_bm_core_dense killed $bml4, $bmh2, $x3, $x4, killed $r4, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml5 = VADDMAC_F_vmac_bm_core_dense killed $bml5, $bmh2, $x3, $x4, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $bml6 = VADDMAC_F_vmac_bm_core_dense killed $bml6, killed $bmh2, killed $x3, killed $x4, killed $r6, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S8_ag_idx_imm $r13, $p0, 0
    $bml0 = VADDMAC_F_vmac_bm_core_dense $bml0, $bmh2, $x3, $x4, $r0, implicit-def $srfpflags, implicit $crfpmask
    $bml1 = VADDMAC_F_vmac_bm_core_dense $bml1, $bmh2, $x3, $x4, $r1, implicit-def $srfpflags, implicit $crfpmask
    $bml2 = VADDMAC_F_vmac_bm_core_dense $bml2, $bmh2, $x3, $x4, $r2, implicit-def $srfpflags, implicit $crfpmask
    $bml3 = VADDMAC_F_vmac_bm_core_dense $bml3, $bmh2, $x3, $x4, $r3, implicit-def $srfpflags, implicit $crfpmask
    $bml4 = VADDMAC_F_vmac_bm_core_dense $bml4, $bmh2, $x3, $x4, $r4, implicit-def $srfpflags, implicit $crfpmask
    $bml5 = VADDMAC_F_vmac_bm_core_dense $bml5, $bmh2, $x3, $x4, $r5, implicit-def $srfpflags, implicit $crfpmask
    $bml6 = VADDMAC_F_vmac_bm_core_dense $bml6, $bmh2, $x3, $x4, $r6, implicit-def $srfpflags, implicit $crfpmask
...

# VNEGf accesses RV port of GPR in cycle 1, ST.s8/ST.s16 access it in cycle 7
---
name:            E7_STHB_E1_VNEGf
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_E1_VNEGf
    ; CHECK: BUNDLE implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $srfpflags, implicit killed $r13, implicit killed $p0, implicit killed $bml0, implicit killed $r0, implicit $crfpmask {
    ; CHECK-NEXT:   ST_S8_ag_idx_imm killed $r13, killed $p0, 0
    ; CHECK-NEXT:   $bml0 = VNEG_F killed $bml0, killed $r0, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $bml1 = VNEG_F killed $bml1, killed $r1, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml2 = VNEG_F killed $bml2, killed $r2, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml3 = VNEG_F killed $bml3, killed $r3, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml4 = VNEG_F killed $bml4, killed $r4, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: $bml5 = VNEG_F killed $bml5, killed $r5, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $bml6 = VNEG_F killed $bml6, killed $r6, implicit-def $srfpflags, implicit $crfpmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S8_ag_idx_imm $r13, $p0, 0
    $bml0 = VNEG_F $bml0, $r0, implicit-def $srfpflags, implicit $crfpmask
    $bml1 = VNEG_F $bml1, $r1, implicit-def $srfpflags, implicit $crfpmask
    $bml2 = VNEG_F $bml2, $r2, implicit-def $srfpflags, implicit $crfpmask
    $bml3 = VNEG_F $bml3, $r3, implicit-def $srfpflags, implicit $crfpmask
    $bml4 = VNEG_F $bml4, $r4, implicit-def $srfpflags, implicit $crfpmask
    $bml5 = VNEG_F $bml5, $r5, implicit-def $srfpflags, implicit $crfpmask
    $bml6 = VNEG_F $bml6, $r6, implicit-def $srfpflags, implicit $crfpmask
...

# VNEG accesses RV port of GPR in cycle 1, ST.s8/ST.s16 access it in cycle 7
---
name:            E7_STHB_E1_VNEG
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_E1_VNEG
    ; CHECK: BUNDLE implicit-def $cm0, implicit-def $bml0, implicit-def $amll0, implicit-def $amlh0, implicit-def $bmh0, implicit-def $amhl0, implicit-def $amhh0, implicit killed $r13, implicit killed $p0, implicit killed $cm0, implicit $r0 {
    ; CHECK-NEXT:   ST_S8_ag_idx_imm killed $r13, killed $p0, 0
    ; CHECK-NEXT:   $cm0 = VNEG killed $cm0, $r0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $cm1 = VNEG killed $cm1, $r0
    ; CHECK-NEXT: $cm2 = VNEG killed $cm2, $r0
    ; CHECK-NEXT: $cm3 = VNEG killed $cm3, $r0
    ; CHECK-NEXT: $cm4 = VNEG killed $cm4, $r0
    ; CHECK-NEXT: $cm5 = VNEG killed $cm5, $r0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm6 = VNEG killed $cm6, killed $r0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S8_ag_idx_imm $r13, $p0, 0
    $cm0 = VNEG $cm0, $r0
    $cm1 = VNEG $cm1, $r0
    $cm2 = VNEG $cm2, $r0
    $cm3 = VNEG $cm3, $r0
    $cm4 = VNEG $cm4, $r0
    $cm5 = VNEG $cm5, $r0
    $cm6 = VNEG $cm6, $r0
...


# ST_MS accesses RV port of GPR in cycle 1, ST.s8/ST.s16 access it in cycle 7
---
name:            E7_STHB_E1_ST_MS
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_E1_ST_MS
    ; CHECK: BUNDLE implicit killed $r13, implicit killed $p0, implicit $r0 {
    ; CHECK-NEXT:   ST_S8_ag_idx_imm killed $r13, killed $p0, 0
    ; CHECK-NEXT:   MOV_mv_scl2ms renamable $r0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: MOV_mv_scl2ms renamable $r0
    ; CHECK-NEXT: MOV_mv_scl2ms renamable $r0
    ; CHECK-NEXT: MOV_mv_scl2ms renamable $r0
    ; CHECK-NEXT: MOV_mv_scl2ms renamable $r0
    ; CHECK-NEXT: MOV_mv_scl2ms renamable $r0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: MOV_mv_scl2ms killed renamable $r0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S8_ag_idx_imm $r13, $p0, 0
    MOV_mv_scl2ms renamable $r0
    MOV_mv_scl2ms renamable $r0
    MOV_mv_scl2ms renamable $r0
    MOV_mv_scl2ms renamable $r0
    MOV_mv_scl2ms renamable $r0
    MOV_mv_scl2ms renamable $r0
    MOV_mv_scl2ms renamable $r0
...

# Packet switched MOV access RV port of GPR in cycle 1, ST.s8/ST.s16 access it in cycle 7
---
name:            E7_STHB_E1_MOV_PH
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_E1_MOV_PH
    ; CHECK: BUNDLE implicit killed $r13, implicit killed $p0, implicit $r0 {
    ; CHECK-NEXT:   ST_S8_ag_idx_imm killed $r13, killed $p0, 0
    ; CHECK-NEXT:   MOV_mv_ph2ms $r0, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: MOV_mv_ph2ms_doTlast_reg killed $r27, 3, $r28
    ; CHECK-NEXT: MOV_NB_mv_ph2ms_doTlast_reg killed $r12, 2, $r28, implicit-def $srms0
    ; CHECK-NEXT: MOV_mv_cph2ms killed $m0, 0, 3, killed $r1
    ; CHECK-NEXT: MOV_mv_cph2ms_doTlast_reg $m1, 1, 2, $r2, $r28
    ; CHECK-NEXT: MOV_NB_mv_cph2ms_doTlast_reg killed $m1, 1, 2, killed $r2, killed $r28, implicit-def $srms0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: MOV_mv_ph2ms killed $r0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S8_ag_idx_imm $r13, $p0, 0
    MOV_mv_ph2ms $r0, 0
    MOV_mv_ph2ms_doTlast_reg $r27, 3, $r28
    MOV_NB_mv_ph2ms_doTlast_reg $r12, 2, $r28, implicit-def $srms0
    MOV_mv_cph2ms $m0, 0, 3, $r1
    MOV_mv_cph2ms_doTlast_reg $m1, 1, 2, $r2, $r28
    MOV_NB_mv_cph2ms_doTlast_reg $m1, 1, 2, $r2, $r28, implicit-def $srms0
    MOV_mv_ph2ms $r0, 0
...
