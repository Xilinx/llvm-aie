# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %s -o - | FileCheck %s

# Different store instructions touch the store interface in different cycles
# STHB in E8, VST_SRS in E4, the rest in E2
# Note that STHB can not really be used to test for this, since it
# is fitted with other resource usage to make its read-modify-write
# atomic. Effectively, this is testing the output dependence between
# STHB and ST.

---
name:            E8_STHB_E2_ST
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E8_STHB_E2_ST
    ; CHECK: ST_S16_ag_idx_imm killed $r13, $p0, 0 :: (store (s32) into stack - 8)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r0, killed $p0, 4 :: (store (s32) into stack - 4)
    ; CHECK-NEXT: NOP
    ST_S16_ag_idx_imm $r13, $p0, 0 :: (store (s32) into stack - 8)
    ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
    ST_dms_sts_idx_imm $r0, $p0, 4 :: (store (s32) into stack - 4)
...

# Testing the memory unit resource. VST_SRS_S16_S64_ag_idx_imm uses it in E4 and
# VST_XD_dmw_sts_xx in E2. Therefore there has to be an additional NOP
# between the two VST_2D_dmw_sts_w.
---
name:            II_VST_2D_W_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VST_2D_W_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w killed $wl3, killed $p2, killed $d2 :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1 = VST_2D_dmw_sts_w killed $wl7, killed $p2, killed $d1 :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2 :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1 = VST_2D_dmw_sts_w $wl7, $p2, $d1 :: (store (<8 x s32>) into stack - 96)
...

---
name:            II_VST_3D_W_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VST_3D_W_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w killed $wl3, killed $p2, killed $d2_3d :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1, $dc5 = VST_3D_dmw_sts_w killed $wl7, killed $p2, killed $d1_3d :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1, $dc5 = VST_3D_dmw_sts_w $wl7, $p2, $d1_3d :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_2D_AM_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_2D_AM_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_am killed $amll3, killed $p2, killed $d2 :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1 = VST_2D_dmw_sts_am killed $amhl7, killed $p2, killed $d1 :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2 = VST_2D_dmw_sts_am $amll3, $p2, $d2 :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1 = VST_2D_dmw_sts_am $amhl7, $p2, $d1 :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_3D_AM_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_3D_AM_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_am killed $amll3, killed $p2, killed $d2_3d :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1, $dc5 = VST_3D_dmw_sts_am killed $amhl7, killed $p2, killed $d1_3d :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_am $amll3, $p2, $d2_3d :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1, $dc5 = VST_3D_dmw_sts_am $amhl7, $p2, $d1_3d :: (store (<8 x s32>) into stack - 96)
...

# Testing the memory unit resource. VST_XD_SRS_XXX_XXX use it in E4 and
# VST_XD_dmw_sts_w in E2. Therefore there has to be an additional NOP
# between the two VST_XD_dmw_sts_w instructions.

---
name:            VST_2D_SRS_D16_S32_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_2D_SRS_D16_S32_STORE_UNIT
    ; CHECK: $p0, $dc7 = VST_2D_SRS_D16_S32 killed $p0, killed $d7, killed $bml0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc1 = VST_2D_dmw_sts_w killed $wl7, killed $p2, killed $d1 :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w killed $wl3, killed $p2, killed $d2 :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    $p0, $dc7 = VST_2D_SRS_D16_S32 $p0, $d7, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc1 = VST_2D_dmw_sts_w $wl7, $p2, $d1 :: (store (<8 x s32>) into stack - 64)
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2 :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_3D_SRS_D16_S32_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_3D_SRS_D16_S32_STORE_UNIT
    ; CHECK: $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 killed $p0, killed $d3_3d, killed $bml0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc1, $dc5 = VST_3D_dmw_sts_w killed $wl7, killed $p2, killed $d1_3d :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w killed $wl3, killed $p2, killed $d2_3d :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 $p0, $d3_3d, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc1, $dc5 = VST_3D_dmw_sts_w $wl7, $p2, $d1_3d :: (store (<8 x s32>) into stack - 64)
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_CONV_2D_BF16_FP32_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_CONV_2D_BF16_FP32_STORE_UNIT
    ; CHECK: $p5, $dc2 = VST_2D_SRS_D16_S32 killed $p5, killed $d2, killed $bml0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc0 = VST_CONV_2D_BF16_FP32 killed $p2, killed $d0, killed $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1 = VST_CONV_2D_BF16_FP32 killed $p2, killed $d1, killed $bml2, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $p5, $dc2 = VST_2D_SRS_D16_S32 $p5, $d2, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc0 = VST_CONV_2D_BF16_FP32 $p2, $d0, $bml1, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1 = VST_CONV_2D_BF16_FP32 $p2, $d1, $bml2, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask :: (store (<8 x s32>) into stack - 96)
...

---
name:            ST_Q_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ST_Q_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm killed $q0, $p0, 0 :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: ST_dmv_sts_q_ag_idx_imm killed $q1, killed $p0, 0 :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ST_dmv_sts_q_ag_idx_imm $q0, $p0, 0 :: (store (<8 x s32>) into stack - 64)
    ST_dmv_sts_q_ag_idx_imm $q1, $p0, 0 :: (store (<8 x s32>) into stack - 96)
...

---
name:            ST_POSTINC_Q_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ST_POSTINC_Q_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2 = ST_dmv_sts_q_ag_pstm_nrm_imm killed $q0, killed $p2, 0 :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2 = ST_dmv_sts_q_ag_pstm_nrm_imm killed $q1, killed $p2, 0 :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2 = ST_dmv_sts_q_ag_pstm_nrm_imm $q0, $p2, 0 :: (store (<8 x s32>) into stack - 64)
    $p2 = ST_dmv_sts_q_ag_pstm_nrm_imm $q1, $p2, 0 :: (store (<8 x s32>) into stack - 96)
...

---
name:            ST_2D_Q_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ST_2D_Q_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2 = ST_2D_dmv_sts_q killed $q0, killed $p2, killed $d2 :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1 = ST_2D_dmv_sts_q killed $q3, killed $p2, killed $d1 :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2 = ST_2D_dmv_sts_q $q0, $p2, $d2 :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1 = ST_2D_dmv_sts_q $q3, $p2, $d1 :: (store (<8 x s32>) into stack - 96)
...

---
name:            ST_3D_Q_STORE_UNIT
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ST_3D_Q_STORE_UNIT
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2, $dc6 = ST_3D_dmv_sts_q killed $q2, killed $p2, killed $d2_3d :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1, $dc5 = ST_3D_dmv_sts_q killed $q1, killed $p2, killed $d1_3d :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2, $dc6 = ST_3D_dmv_sts_q $q2, $p2, $d2_3d :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1, $dc5 = ST_3D_dmv_sts_q $q1, $p2, $d1_3d :: (store (<8 x s32>) into stack - 96)
...

---
name:            II_ST_2D
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_ST_2D
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2 = ST_2D_dms_sts killed $r2, killed $p2, killed $d2 :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1 = ST_2D_dms_sts killed $r1, killed $p2, killed $d1 :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2 = ST_2D_dms_sts $r2, $p2, $d2 :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1 = ST_2D_dms_sts $r1, $p2, $d1 :: (store (<8 x s32>) into stack - 96)
...

---
name:            II_ST_3D
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_ST_3D
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p2, $dc2, $dc6 = ST_3D_dms_sts killed $r2, killed $p2, killed $d2_3d :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc1, $dc5 = ST_3D_dms_sts killed $r1, killed $p2, killed $d1_3d :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p2, $dc2, $dc6 = ST_3D_dms_sts $r2, $p2, $d2_3d :: (store (<8 x s32>) into stack - 64)
    $p2, $dc1, $dc5 = ST_3D_dms_sts $r1, $p2, $d1_3d :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_PACK
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_PACK
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: VST_PACK_S4_S8_ag_idx $p0, killed $dj0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_PACK_D8_D16_ag_idx_imm killed $p0, 0, killed $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    VST_PACK_S4_S8_ag_idx $p0, $dj0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    VST_PACK_D8_D16_ag_idx_imm $p0, 0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_PACK_POSTINC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_PACK_POSTINC
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p0 = VST_PACK_S4_S8_ag_pstm_nrm killed $p0, killed $m0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0 = VST_PACK_D8_D16_ag_pstm_nrm_imm killed $p0, 0, killed $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p0 = VST_PACK_S4_S8_ag_pstm_nrm $p0, $m0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    $p0 = VST_PACK_D8_D16_ag_pstm_nrm_imm $p0, 0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_2D_PACK
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_2D_PACK
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p0, $dc0 = VST_2D_PACK_S4_S8 killed $p0, $d0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc0 = VST_2D_PACK_D8_D16 killed $p0, killed $d0, killed $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p0, $dc0 = VST_2D_PACK_S4_S8 $p0, $d0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    $p0, $dc0 = VST_2D_PACK_D8_D16 $p0, $d0, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
...

---
name:            VST_3D_PACK
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_3D_PACK
    ; CHECK: VST_SRS_S16_S64_ag_idx_imm $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    ; CHECK-NEXT: $p0, $dc1, $dc5 = VST_3D_PACK_S4_S8 killed $p0, $d1_3d, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc1, $dc5 = VST_3D_PACK_S4_S8 killed $p0, killed $d1_3d, killed $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
    ; CHECK-NEXT: NOP
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign :: (store (<8 x s32>) into stack - 32)
    $p0, $dc1, $dc5 = VST_3D_PACK_S4_S8 $p0, $d1_3d, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 64)
    $p0, $dc1, $dc5 = VST_3D_PACK_S4_S8 $p0, $d1_3d, $x0, implicit $crsat, implicit $crpacksign :: (store (<8 x s32>) into stack - 96)
...
