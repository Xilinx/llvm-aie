# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -run-pass=postmisched %s %topdown-multi -o - | FileCheck %s

# Conflict on p register file in mov slot
---
name:            E1_MOVCG_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVCG_E2_VEXTRACT
    ; CHECK: $p0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p1 = MOV_mv_cg 2
    ; CHECK-NEXT: $p2 = MOV_mv_cg 2
  $p0 = VEXTRACT_S16 killed $x1, killed $r16
  $p1 = MOV_mv_cg 2
  $p2 = MOV_mv_cg 2
...
---
name:            E1_MOVSCL_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVSCL_E2_VEXTRACT
    ; CHECK: $p0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p1 = MOV_mv_scl killed $r1
    ; CHECK-NEXT: $p2 = MOV_mv_scl killed $r2
  $p0 = VEXTRACT_S16 killed $x1, killed $r16
  $p1 = MOV_mv_scl $r1
  $p2 = MOV_mv_scl $r2
...
---
name:            E1_MOVXM_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVXM_E2_VEXTRACT
    ; CHECK: $p0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p1 = MOVXM_lng_cg 2
    ; CHECK-NEXT: $p2 = MOVXM_lng_cg 2
  $p0 = VEXTRACT_S16 killed $x1, killed $r16
  $p1 = MOVXM_lng_cg 2
  $p2 = MOVXM_lng_cg 2
...
---
name:            E1_MOVA_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E2_VEXTRACT
    ; CHECK: BUNDLE implicit-def $p1, implicit-def $p0, implicit killed $x1, implicit killed $r16 {
    ; CHECK-NEXT:   $p1 = MOVA_lda_cg 2
    ; CHECK-NEXT:   $p0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
  $p0 = VEXTRACT_S16 killed $x1, killed $r16
  $p1 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
...
---
name:            E1_MOVA_E7_LDA_1D
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA_1D
    ; CHECK: $p2, $p1 = LDA_dms_lda_pstm_nrm killed $p1, killed $m0
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p0 = MOVA_lda_cg 2
  $p2, $p1 = LDA_dms_lda_pstm_nrm $p1, $m0
  $p0 = MOVA_lda_cg 2
  $p0 = MOVA_lda_cg 2
  $p0 = MOVA_lda_cg 2
  $p0 = MOVA_lda_cg 2
  $p0 = MOVA_lda_cg 2
  $p0 = MOVA_lda_cg 2
  $p0 = MOVA_lda_cg 2
...
---
name:            E1_MOVA_E7_LDA_2D
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA_2D
    ; CHECK: $p0, $p1, $dc0 = LDA_2D_dms_lda killed $p1, killed $d0
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
  $p0, $p1, $dc0 = LDA_2D_dms_lda $p1, $d0
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
...
---
name:            E1_MOVA_E7_LDA_3D
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA_3D
    ; CHECK: $p0, $p1, $dc0, $dc4 = LDA_3D_dms_lda killed $p1, killed $d0_3d
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
  $p0, $p1, $dc0, $dc4 = LDA_3D_dms_lda $p1, $d0_3d
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
...
---
name:            E1_MOVA_E7_LDA
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA
    ; CHECK: $p0 = LDA_dms_lda_idx_imm killed $p1, 0
    ; CHECK-NEXT: $p1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p3 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p4 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p5 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p6 = MOVA_lda_cg 2
    ; CHECK-NEXT: $p7 = MOVA_lda_cg 2
  $p0 = LDA_dms_lda_idx_imm $p1, 0
  $p1 = MOVA_lda_cg 2
  $p2 = MOVA_lda_cg 2
  $p3 = MOVA_lda_cg 2
  $p4 = MOVA_lda_cg 2
  $p5 = MOVA_lda_cg 2
  $p6 = MOVA_lda_cg 2
  $p7 = MOVA_lda_cg 2
...
---
name:            E1_ADD_NC_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_ADD_NC_E2_VEXTRACT
    ; CHECK: $p0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p1 = ADD_NC killed $r1, 20
    ; CHECK-NEXT: $p2 = ADD_NC killed $r2, -32
  $p0 = VEXTRACT_S16 killed $x1, killed $r16
  $p1 = ADD_NC $r1, 20
  $p2 = ADD_NC $r2, -32
...

---
name:            mov_SCL_to_P
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mov_SCL_to_P
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $p0, implicit killed $r4 {
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $p0 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $r1 = MOVX_alu_cg 0
    $p0 = MOV_mv_scl $r4
...
