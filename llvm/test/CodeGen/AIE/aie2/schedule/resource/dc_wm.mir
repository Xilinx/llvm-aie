# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2 -run-pass=postmisched %s %topdown-multi -o - | FileCheck %s

# Conflict on dc reg file in mov slot
---
name:            E1_MOVCG_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVCG_E2_VEXTRACT
    ; CHECK: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc1 = MOV_mv_cg 2
    ; CHECK-NEXT: $dc2 = MOV_mv_cg 2
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc1 = MOV_mv_cg 2
  $dc2 = MOV_mv_cg 2
...
---
name:            E1_MOVSCL_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVSCL_E2_VEXTRACT
    ; CHECK: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc1 = MOV_mv_scl killed $r1
    ; CHECK-NEXT: $dc2 = MOV_mv_scl killed $r2
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc1 = MOV_mv_scl $r1
  $dc2 = MOV_mv_scl $r2
...
---
name:            E1_MOVXM_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVXM_E2_VEXTRACT
    ; CHECK: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc1 = MOVXM_lng_cg 2
    ; CHECK-NEXT: $dc2 = MOVXM_lng_cg 2
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc1 = MOVXM_lng_cg 2
  $dc2 = MOVXM_lng_cg 2
...
---
name:            E1_MOVA_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E2_VEXTRACT
    ; CHECK: BUNDLE implicit-def $dc1, implicit-def $dc0, implicit killed $x1, implicit killed $r16 {
    ; CHECK-NEXT:   $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT:   $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc2 = MOVA_lda_cg 2
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc1 = MOVA_lda_cg 2
  $dc2 = MOVA_lda_cg 2
...
---
name:            E1_MOVA_E7_LDA
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA
    ; CHECK: $dc0 = LDA_dms_lda_idx_imm killed $p1, 0
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc3 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc4 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc5 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc6 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc7 = MOVA_lda_cg 2
  $dc0 = LDA_dms_lda_idx_imm $p1, 0
  $dc1 = MOVA_lda_cg 2
  $dc2 = MOVA_lda_cg 2
  $dc3 = MOVA_lda_cg 2
  $dc4 = MOVA_lda_cg 2
  $dc5 = MOVA_lda_cg 2
  $dc6 = MOVA_lda_cg 2
  $dc7 = MOVA_lda_cg 2
...

---
name:            E1_MOVA_E7_LDA_1D
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA_1D
    ; CHECK: $dc2, $p1 = LDA_dms_lda_pstm_nrm killed $p1, killed $m0
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
  $dc2, $p1 = LDA_dms_lda_pstm_nrm $p1, $m0
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
...

---
name:            E1_MOVA_E7_LDA_2D
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA_2D
    ; CHECK: $dc2, $p1, $dc0 = LDA_2D_dms_lda killed $p1, killed $d0
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
  $dc2, $p1, $dc0 = LDA_2D_dms_lda $p1, $d0
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
...
---
name:            E1_MOVA_E7_LDA_3D
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E1_MOVA_E7_LDA_3D
    ; CHECK: $dc2, $p1, $dc0, $dc4 = LDA_3D_dms_lda killed $p1, killed $d0_3d
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 2
  $dc2, $p1, $dc0, $dc4 = LDA_3D_dms_lda $p1, $d0_3d
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
  $dc1 = MOVA_lda_cg 2
...

---
name:            load_to_M_and_move_R_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: load_to_M_and_move_R_to_DC
    ; CHECK: BUNDLE implicit-def $m0, implicit-def $dc0, implicit killed $p7, implicit $r0 {
    ; CHECK-NEXT:   $m0 = LDA_dms_lda_idx_imm killed $p7, 0
    ; CHECK-NEXT:   $dc0 = MOV_mv_scl $r0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r0
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r0
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r0
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r0
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r0
    ; CHECK-NEXT: $dc0 = MOV_mv_scl killed $r0
    $m0 = LDA_dms_lda_idx_imm killed $p7, 0
    $dc0 = MOV_mv_scl $r0
    $dc0 = MOV_mv_scl $r0
    $dc0 = MOV_mv_scl $r0
    $dc0 = MOV_mv_scl $r0
    $dc0 = MOV_mv_scl $r0
    $dc0 = MOV_mv_scl $r0
    $dc0 = MOV_mv_scl $r0
...

---
name:            mov_SCL_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mov_SCL_to_DC
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $dc0, implicit killed $r4 {
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $dc0 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $r1 = MOVX_alu_cg 0
    $dc0 = MOV_mv_scl $r4
...

---
name:            mova_with_mov_scl_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_with_mov_scl_to_DC
    ; CHECK: BUNDLE implicit-def $r2, implicit-def $r1, implicit-def $dc0, implicit killed $r4 {
    ; CHECK-NEXT:   $r2 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $dc0 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $r2 = MOVA_lda_cg 0
    $r1 = MOVX_alu_cg 0
    $dc0 = MOV_mv_scl $r4
...

---
name:            mova_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_DC
    ; CHECK: BUNDLE implicit-def $dc1, implicit-def $r1, implicit-def $r2, implicit killed $r4 {
    ; CHECK-NEXT:   $dc1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $dc1 = MOVA_lda_cg 0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
...

---
name:            mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mov_to_DC
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $dc1 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOV_mv_cg 0
    $r1 = MOVA_lda_cg 0
...

---
name:            mova_to_dc_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dc_mov_to_DC
    ; CHECK: $dc0 = MOV_mv_cg 0
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 0
    $dc0 = MOV_mv_cg 0
    $dc1 = MOVA_lda_cg 0
...

---
name:            mova_to_dj_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dj_mov_to_DC
    ; CHECK: BUNDLE implicit-def $dj1, implicit-def $dc1 {
    ; CHECK-NEXT:   $dj1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOV_mv_cg 0
    $dj1 = MOVA_lda_cg 0
...

---
name:            mova_to_dn_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dn_mov_to_DC
    ; CHECK: BUNDLE implicit-def $dn1, implicit-def $dc1 {
    ; CHECK-NEXT:   $dn1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOV_mv_cg 0
    $dn1 = MOVA_lda_cg 0
...

---
name:            mova_to_p_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_p_mov_to_DC
    ; CHECK: BUNDLE implicit-def $p0, implicit-def $dc1 {
    ; CHECK-NEXT:   $p0 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOV_mv_cg 0
    $p0 = MOVA_lda_cg 0
...

---
name:            movx_to_R_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: movx_to_R_mov_to_DC
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r2, implicit-def $dc1 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $dc1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $r1 = MOVA_lda_cg 0
...

---
name:            mova_to_dc_movx_to_R_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dc_movx_to_R_mov_to_DC
    ; CHECK: BUNDLE implicit-def $r2, implicit-def $dc0 {
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $dc0 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $dc1 = MOVA_lda_cg 0
    $dc0 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $dc1 = MOVA_lda_cg 0
...

---
name:            mova_to_dj_movx_to_R_mov_to_M
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dj_movx_to_R_mov_to_M
    ; CHECK: BUNDLE implicit-def $dj1, implicit-def $m1 {
    ; CHECK-NEXT:   $dj1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $m1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $m1 = MOV_mv_cg 0
    $dj1 = MOVA_lda_cg 0
...

---
name:            mova_to_dn_movx_to_R_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dn_movx_to_R_mov_to_DC
    ; CHECK: BUNDLE implicit-def $dn1, implicit-def $r2, implicit-def $dc1 {
    ; CHECK-NEXT:   $dn1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $dc1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $dn1 = MOVA_lda_cg 0
...

---
name:            mova_to_p_movx_to_R_mov_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_p_movx_to_R_mov_to_DC
    ; CHECK: BUNDLE implicit-def $p0, implicit-def $r2, implicit-def $dc1 {
    ; CHECK-NEXT:   $p0 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $dc1 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $p0 = MOVA_lda_cg 0
...

---
name:            mova_to_p_movxm_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_p_movxm_to_DC
    ; CHECK: BUNDLE implicit-def $p0, implicit-def $dc1 {
    ; CHECK-NEXT:   $p0 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOVXM_lng_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOVXM_lng_cg 0
    $p0 = MOVA_lda_cg 0
...

---
name:            mova_to_dn_movxm_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dn_movxm_to_DC
    ; CHECK: BUNDLE implicit-def $dn1, implicit-def $dc1 {
    ; CHECK-NEXT:   $dn1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOVXM_lng_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOVXM_lng_cg 0
    $dn1 = MOVA_lda_cg 0
...

---
name:            mova_to_dj_movxm_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dj_movxm_to_DC
    ; CHECK: BUNDLE implicit-def $dj1, implicit-def $dc1 {
    ; CHECK-NEXT:   $dj1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOVXM_lng_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOVXM_lng_cg 0
    $dj1 = MOVA_lda_cg 0
...

---
name:            mova_to_dc_movxm_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dc_movxm_to_DC
    ; CHECK: $dc1 = MOVXM_lng_cg 0
    ; CHECK-NEXT: $dc0 = MOVA_lda_cg 0
    $dc1 = MOVXM_lng_cg 0
    $dc0 = MOVA_lda_cg 0
...

---
name:            movxm_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: movxm_to_DC
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $dc1 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $dc1 = MOVXM_lng_cg 0
    ; CHECK-NEXT: }
    $dc1 = MOVXM_lng_cg 0
    $r1 = MOVA_lda_cg 0
...

---
name:            lda_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: lda_to_DC
    ; CHECK: BUNDLE implicit-def $dc1, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $dj0, implicit $r4 {
    ; CHECK-NEXT:   $dc1 = LDA_dms_lda_idx killed $p0, killed $dj0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $dc1 = LDA_dms_lda_idx $p0, $dj0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaImm_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaImm_to_DC
    ; CHECK: BUNDLE implicit-def $dc1, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit $r4 {
    ; CHECK-NEXT:   $dc1 = LDA_dms_lda_idx_imm killed $p0, 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $dc1 = LDA_dms_lda_idx_imm $p0, 0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaPost_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaPost_to_DC
    ; CHECK: BUNDLE implicit-def $dc1, implicit-def $p0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $m0, implicit $r4 {
    ; CHECK-NEXT:   $dc1, $p0 = LDA_dms_lda_pstm_nrm killed $p0, killed $m0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $dc1, $p0 = LDA_dms_lda_pstm_nrm $p0, $m0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaPostImm_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaPostImm_to_DC
    ; CHECK: BUNDLE implicit-def $dc1, implicit-def $p0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit $r4 {
    ; CHECK-NEXT:   $dc1, $p0 = LDA_dms_lda_pstm_nrm_imm killed $p0, 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $dc1, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            lda2DPost_to_DC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: lda2DPost_to_DC
    ; CHECK: BUNDLE implicit-def $dc1, implicit-def $p0, implicit-def $dc0, implicit-def $r1, implicit-def $p2, implicit killed $p0, implicit killed $d0, implicit $r4 {
    ; CHECK-NEXT:   $dc1, $p0, $dc0 = LDA_2D_dms_lda killed $p0, killed $d0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $p2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $p2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $p2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $p2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $p2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $p2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $p2 = MOV_mv_scl killed $r4
    $dc1, $p0, $dc0 = LDA_2D_dms_lda $p0, $d0
    $r1 = MOVX_alu_cg 0
    $p2 = MOV_mv_scl $r4
    $p2 = MOV_mv_scl $r4
    $p2 = MOV_mv_scl $r4
    $p2 = MOV_mv_scl $r4
    $p2 = MOV_mv_scl $r4
    $p2 = MOV_mv_scl $r4
    $p2 = MOV_mv_scl $r4
    $p2 = MOV_mv_scl $r4
...
