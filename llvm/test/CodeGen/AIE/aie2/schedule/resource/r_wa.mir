# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

---
name:            E7_STHB_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_E1_MOVA
    ; CHECK: ST_S8_ag_idx_imm killed $r0, killed $p0, 0
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    ; CHECK-NEXT: $r7 = MOVA_lda_cg 7
    ST_S8_ag_idx_imm $r0, $p0, 0
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
    $r7 = MOVA_lda_cg 7
...

---
name:            E7_STHB_2D_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_2D_E1_MOVA
    ; CHECK: $p0, $dc0 = ST_2D_S8 killed $r0, killed $p0, killed $d0
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    $p0, $dc0 = ST_2D_S8 $r0, $p0, $d0
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
...

---
name:            E7_STHB_3D_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STHB_3D_E1_MOVA
    ; CHECK: $p0, $dc0, $dc4 = ST_3D_S8 killed $r0, killed $p0, killed $d0_3d
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    $p0, $dc0, $dc4 = ST_3D_S8 $r0, $p0, $d0_3d
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
...

---
name:            E7_STMS_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_STMS_E1_MOVA
    ; CHECK: renamable $r0 = MOV_mv_ss2scl implicit-def $srss0
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    ; CHECK-NEXT: $r7 = MOVA_lda_cg 7
    renamable $r0 = MOV_mv_ss2scl implicit-def $srss0
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
    $r7 = MOVA_lda_cg 7
...

---
name:            E7_LDA_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_LDA_E1_MOVA
    ; CHECK: $r0 = LDA_dms_lda_idx_imm killed $p0, 0
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    ; CHECK-NEXT: $r7 = MOVA_lda_cg 7
    $r0 = LDA_dms_lda_idx_imm $p0, 0
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
    $r7 = MOVA_lda_cg 7
...

---
name:            E7_LDA_1D_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_LDA_1D_E1_MOVA
    ; CHECK: $r0, $p0 = LDA_dms_lda_pstm_nrm killed $p0, killed $m0
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    ; CHECK-NEXT: $r7 = MOVA_lda_cg 7
    $r0, $p0 = LDA_dms_lda_pstm_nrm $p0, $m0
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
    $r7 = MOVA_lda_cg 7
...

---
name:            E7_LDA_2D_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_LDA_2D_E1_MOVA
    ; CHECK: $r0, $p0, $dc0 = LDA_2D_dms_lda killed $p0, killed $d0
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    $r0, $p0, $dc0 = LDA_2D_dms_lda $p0, $d0
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
...

---
name:            E7_LDA_3D_E1_MOVA
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E7_LDA_3D_E1_MOVA
    ; CHECK: $r0, $p0, $dc0, $dc4 = LDA_3D_dms_lda killed $p0, killed $d0_3d
    ; CHECK-NEXT: $r1 = MOVA_lda_cg 1
    ; CHECK-NEXT: $r2 = MOVA_lda_cg 2
    ; CHECK-NEXT: $r3 = MOVA_lda_cg 3
    ; CHECK-NEXT: $r4 = MOVA_lda_cg 4
    ; CHECK-NEXT: $r5 = MOVA_lda_cg 5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r6 = MOVA_lda_cg 6
    $r0, $p0, $dc0, $dc4 = LDA_3D_dms_lda $p0, $d0_3d
    $r1 = MOVA_lda_cg 1
    $r2 = MOVA_lda_cg 2
    $r3 = MOVA_lda_cg 3
    $r4 = MOVA_lda_cg 4
    $r5 = MOVA_lda_cg 5
    $r6 = MOVA_lda_cg 6
...

---
name:            mova_with_mov_scl_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_with_mov_scl_to_R
    ; CHECK: BUNDLE implicit-def $dc3, implicit-def $r1, implicit-def $r3, implicit killed $r4 {
    ; CHECK-NEXT:   $dc3 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r3 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $dc3 = MOVA_lda_cg 0
    $r1 = MOVX_alu_cg 0
    $r3 = MOV_mv_scl $r4
...

---
name:            mova_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $r1, implicit-def $dc0, implicit killed $r4 {
    ; CHECK-NEXT:   $r3 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $dc0 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $r3 = MOVA_lda_cg 0
    $r1 = MOVX_alu_cg 0
    $dc0 = MOV_mv_scl $r4
...

---
name:            mova_to_p_mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_p_mov_to_R
    ; CHECK: BUNDLE implicit-def $p0, implicit-def $r3 {
    ; CHECK-NEXT:   $p0 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r3 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $r3 = MOV_mv_cg 0
    $p0 = MOVA_lda_cg 0
...

---
name:            lda_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: lda_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $dj0, implicit $r4 {
    ; CHECK-NEXT:   $r3 = LDA_dms_lda_idx killed $p0, killed $dj0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3 = LDA_dms_lda_idx $p0, $dj0
    $r1 = MOVX_alu_cg 0
    $dc0 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            lda_to_R_MOV_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: lda_to_R_MOV_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $dj0, implicit $r4 {
    ; CHECK-NEXT:   $r3 = LDA_dms_lda_idx killed $p0, killed $dj0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3 = LDA_dms_lda_idx $p0, $dj0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaPost_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaPost_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $p0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $m0, implicit $r4 {
    ; CHECK-NEXT:   $r3, $p0 = LDA_dms_lda_pstm_nrm killed $p0, killed $m0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3, $p0 = LDA_dms_lda_pstm_nrm $p0, $m0
    $r1 = MOVX_alu_cg 0
    $dc0 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaPost_to_R_MOV_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaPost_to_R_MOV_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $p0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $m0, implicit $r4 {
    ; CHECK-NEXT:   $r3, $p0 = LDA_dms_lda_pstm_nrm killed $p0, killed $m0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3, $p0 = LDA_dms_lda_pstm_nrm $p0, $m0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaPostImm_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaPostImm_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $p0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit $r4 {
    ; CHECK-NEXT:   $r3, $p0 = LDA_dms_lda_pstm_nrm_imm killed $p0, 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 0
    $r1 = MOVX_alu_cg 0
    $dc0 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaPostImm_to_R_MOV_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaPostImm_to_R_MOV_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $p0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit $r4 {
    ; CHECK-NEXT:   $r3, $p0 = LDA_dms_lda_pstm_nrm_imm killed $p0, 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3, $p0 = LDA_dms_lda_pstm_nrm_imm $p0, 0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            lda2DPost_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: lda2DPost_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $p0, implicit-def $dc0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $d0, implicit $r4 {
    ; CHECK-NEXT:   $r3, $p0, $dc0 = LDA_2D_dms_lda killed $p0, killed $d0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $dj0 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3, $p0, $dc0 = LDA_2D_dms_lda $p0, $d0
    $r1 = MOVX_alu_cg 0
    $dj0 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            lda2DPost_to_R_MOV_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: lda2DPost_to_R_MOV_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $p0, implicit-def $dc0, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit killed $d0, implicit $r4 {
    ; CHECK-NEXT:   $r3, $p0, $dc0 = LDA_2D_dms_lda killed $p0, killed $d0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3, $p0, $dc0 = LDA_2D_dms_lda $p0, $d0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...
