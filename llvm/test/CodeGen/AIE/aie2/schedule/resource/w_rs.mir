# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched --issue-limit=6 %s -o - | FileCheck %s

# VST_W and VST_2D_W access W_RS_PORT at E1 and VUNPACK does so in E7.
# The scheduler needs to insert NOPs to accomodate for this fact.
# VEXTRACT is used to create a data dependency and therefore ensure VUNPACK
# is always executed first
---
name:            II_VST_W_E1_VUNPACK_E7
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VST_W_E1_VUNPACK_E7
    ; CHECK: $x1 = VUNPACK_S8_S4 $wl7 {
    ; CHECK-NEXT:   VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    ; CHECK-NEXT: }
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx killed $wl3, killed $p2, killed $dj2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2 {
    ; CHECK-NEXT:   $r17 = VEXTRACT_S32 killed $x1, killed $r16
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    $x1 = VUNPACK_S8_S4 $wl7
    $r17 = VEXTRACT_S32 $x1, $r16
    VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
    VST_dmw_sts_w_ag_idx $wl3, $p2, $dj2
...

---
name:            II_VST_POSTINC_W_E1_VUNPACK_E7
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VST_POSTINC_W_E1_VUNPACK_E7
    ; CHECK: $x1 = VUNPACK_S8_S4 $wl7 {
    ; CHECK-NEXT:   $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, killed $p2, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, killed $p2, 0
    ; CHECK-NEXT: $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, killed $p2, 0
    ; CHECK-NEXT: $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, killed $p2, 0
    ; CHECK-NEXT: $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, killed $p2, 0
    ; CHECK-NEXT: $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm killed $wl3, killed $p2, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0 {
    ; CHECK-NEXT:   $r17 = VEXTRACT_S32 killed $x1, killed $r16
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    $x1 = VUNPACK_S8_S4 $wl7
    $r17 = VEXTRACT_S32 $x1, $r16
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0
    $p2 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl3, $p2, 0
...

---
name:            II_VST_2D_W_E1_VUNPACK_E7
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VST_2D_W_E1_VUNPACK_E7
    ; CHECK: $x1 = VUNPACK_S8_S4 $wl7 {
    ; CHECK-NEXT:   $p2, $dc2 = VST_2D_dmw_sts_w $wl3, killed $p2, $d2
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w $wl3, killed $p2, $d2
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w $wl3, killed $p2, $d2
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w $wl3, killed $p2, $d2
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w $wl3, killed $p2, $d2
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w killed $wl3, killed $p2, killed $d2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2 {
    ; CHECK-NEXT:   $r17 = VEXTRACT_S32 killed $x1, killed $r16
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    $x1 = VUNPACK_S8_S4 $wl7
    $r17 = VEXTRACT_S32 $x1, $r16
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2
    $p2, $dc2 = VST_2D_dmw_sts_w $wl3, $p2, $d2
...

---
name:            II_VST_3D_W_E1_VUNPACK_E7
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VST_3D_W_E1_VUNPACK_E7
    ; CHECK: $x1 = VUNPACK_S8_S4 $wl7 {
    ; CHECK-NEXT:   $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, killed $p2, $d2_3d
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, killed $p2, $d2_3d
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, killed $p2, $d2_3d
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, killed $p2, $d2_3d
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, killed $p2, $d2_3d
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w killed $wl3, killed $p2, killed $d2_3d
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d {
    ; CHECK-NEXT:   $r17 = VEXTRACT_S32 killed $x1, killed $r16
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    $x1 = VUNPACK_S8_S4 $wl7
    $r17 = VEXTRACT_S32 $x1, $r16
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_w $wl3, $p2, $d2_3d
...

---
name:            VFLOORs32bf16_E1_VUNPACK_E7
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VFLOORs32bf16_E1_VUNPACK_E7
    ; CHECK: $x1 = VUNPACK_S8_S4 $wl7 {
    ; CHECK-NEXT:   $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll1, $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll1, $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM killed $amll1, killed $s0, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: $x0 = VFLOOR_S32_BF16_mFl2FxSrc_W killed $wl2, killed $s1, implicit-def $srf2iflags, implicit $crf2imask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r17 = VEXTRACT_S32 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
    $x1 = VUNPACK_S8_S4 $wl7
    $r17 = VEXTRACT_S32 $x1, $r16
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll1, $s0, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll1, $s0, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_AM $amll1, $s0, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
    $x0 = VFLOOR_S32_BF16_mFl2FxSrc_W $wl2, $s1, implicit-def $srf2iflags, implicit $crf2imask
...

# VLDB_4X and VST access W_RS_PORT at E1.
# The scheduler cannot put VLDB_4X and VST into the same bundle, and
# needs to delay VST to accomodate this fact.
---
name:            VLDB_4X_II_VST_W_E1
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VLDB_4X_II_VST_W_E1
    ; CHECK: $wl3 = VLDB_4x16_LO killed $wh7
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx killed $wl4, killed $p2, killed $dj2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $wl3 = VLDB_4x16_LO $wh7
    VST_dmw_sts_w_ag_idx $wl4, $p2, $dj2
...

# VLDB_4X accesses W_RS_PORT at E1 and VUNPACK does so in E7.
# The scheduler needs to insert NOPs to accomodate for this fact.
# VEXTRACT is used to create a data dependency and therefore ensure VUNPACK
# is always executed first
---
name:            VLDB_4X_II_VST_W_E1_VUNPACK_E7
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VLDB_4X_II_VST_W_E1_VUNPACK_E7
    ; CHECK: $x1 = VUNPACK_S8_S4 $wl7
    ; CHECK-NEXT: $x1 = VUNPACK_S8_S4 $wl7
    ; CHECK-NEXT: $x1 = VUNPACK_S8_S4 $wl7
    ; CHECK-NEXT: $x1 = VUNPACK_S8_S4 $wl7
    ; CHECK-NEXT: $x1 = VUNPACK_S8_S4 $wl7
    ; CHECK-NEXT: $x1 = VUNPACK_S8_S4 killed $wl7
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl4 = VLDB_4x16_LO $wh6 {
    ; CHECK-NEXT:   $r17 = VEXTRACT_S32 killed $x1, killed $r16
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $x1 = VUNPACK_S8_S4 $wl7
    $x1 = VUNPACK_S8_S4 $wl7
    $x1 = VUNPACK_S8_S4 $wl7
    $x1 = VUNPACK_S8_S4 $wl7
    $x1 = VUNPACK_S8_S4 $wl7
    $x1 = VUNPACK_S8_S4 $wl7
    $wl4 = VLDB_4x16_LO $wh6
    $r17 = VEXTRACT_S32 $x1, $r16
...

# VUNPACK accesses W_RS_PORT in E7 and VPACK in E1.
---
name:            VPACK_W_RS_E1
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VPACK_W_RS_E1
    ; CHECK: $x1 = VUNPACK_S8_S4 $wl7 {
    ; CHECK-NEXT:   $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $wl2 = VPACK_D4_D8 killed $x3, implicit $crsat, implicit $crpacksign
    ; CHECK-NEXT: NOP
    $x1 = VUNPACK_S8_S4 $wl7
    $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
    $wl2 = VPACK_D4_D8 $x3, implicit $crsat, implicit $crpacksign
...
