# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

# VEXTRACT accesses WM write port in cycle 2, MOV in cycle 1
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
---
name:            E2_VEXTRACT_E1_MOV_mv_scl
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VEXTRACT_E1_MOV_mv_scl
    ; CHECK: $r2 = VEXTRACT_S32 killed $x2, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = MOV_mv_scl killed $r4
    $r2 = VEXTRACT_S32 $x2, $r16
    $r3 = MOV_mv_scl $r4
...

---
name:            E2_VEXTRACT_E1_MOV_mv_cg
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VEXTRACT_E1_MOV_mv_cg
    ; CHECK: $r2 = VEXTRACT_S32 killed $x2, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = MOV_mv_cg 0
    $r2 = VEXTRACT_S32 $x2, $r16
    $r3 = MOV_mv_cg 0
...

---
name:            E2_VEXTRACT_E1_ADD_NC
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VEXTRACT_E1_ADD_NC
    ; CHECK: $r2 = VEXTRACT_S32 killed $x2, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = ADD_NC killed $r4, 20
    $r2 = VEXTRACT_S32 $x2, $r16
    $r3 = ADD_NC $r4, 20
...

---
name:            E2_VEXTRACT_E1_ADD_NC_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VEXTRACT_E1_ADD_NC_R
    ; CHECK: $r2 = VEXTRACT_S32 killed $x2, killed $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = ADD_NC killed $r4, -32
    $r2 = VEXTRACT_S32 $x2, $r16
    $r3 = ADD_NC $r4, -32
...

---
name:            E2_VCMP_E1_ADD_NC_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VCMP_E1_ADD_NC_R
    ; CHECK: $r16 = VLT_BF16 killed $x0, killed $x5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = ADD_NC killed $r4, -32
    $r16 = VLT_BF16 $x0, $x5
    $r3 = ADD_NC $r4, -32
...

---
name:            E2_VCMP_E1_MOV_mv_scl
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VCMP_E1_MOV_mv_scl
    ; CHECK: $r16 = VGE_BF16 killed $x0, killed $x5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = MOV_mv_scl killed $r4
    $r16 = VGE_BF16 $x0, $x5
    $r3 = MOV_mv_scl $r4
...

---
name:            E2_VSUB_LT_GE_E1_MOV_mv_scl
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VSUB_LT_GE_E1_MOV_mv_scl
    ; CHECK: $x0, $r16 = VSUB_GE_S16 killed $x5, killed $x3
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = MOV_mv_scl killed $r4
    $x0, $r16 = VSUB_GE_S16 $x5, $x3
    $r3 = MOV_mv_scl $r4
...

---
name:            E2_VMIN_GE_E1_MOV_mv_scl
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VMIN_GE_E1_MOV_mv_scl
    ; CHECK: $x0, $r16 = VMIN_GE_BF16 killed $x5, killed $x3
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = MOV_mv_scl killed $r4
    $x0, $r16 = VMIN_GE_BF16 $x5, $x3
    $r3 = MOV_mv_scl $r4
...

---
name:            E2_VMAX_LT_E1_ADD_NC_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VMAX_LT_E1_ADD_NC_R
    ; CHECK: $x0, $r22 = VMAX_LT_BF16 killed $x5, killed $x3
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = ADD_NC killed $r4, -32
    $x0, $r22 = VMAX_LT_BF16 $x5, $x3
    $r3 = ADD_NC $r4, -32
...

---
name:            E2_VMAXDIFF_LT_E1_ADD_NC_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VMAXDIFF_LT_E1_ADD_NC_R
    ; CHECK: $x0, $r22 = VMAXDIFF_LT_S16 killed $x5, killed $x3
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = ADD_NC killed $r4, -32
    $x0, $r22 = VMAXDIFF_LT_S16 $x5, $x3
    $r3 = ADD_NC $r4, -32
...

# VEQZ accesses WM write port in cycle 2, MOV in cycle 1
# The scheduler needs to insert an additional NOP such that the
# two instructions don't access the same port in the same cycle
---
name:            E2_VEQZ_E1_MOV_mv_scl
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: E2_VEQZ_E1_MOV_mv_scl
    ; CHECK: $r16 = VEQZ_16 killed $x5
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $r3 = MOV_mv_scl killed $r4
    $r16 = VEQZ_16 $x5
    $r3 = MOV_mv_scl $r4
...

---
name:            E2_MOVD1_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E2_MOVD1_E2_VEXTRACT
    ; CHECK: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: $r1 = MOV_D1 killed $dc1
    ; CHECK-NEXT: NOP
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $r1 = MOV_D1 $dc1
...
---
name:            E3_MOVD2_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E3_MOVD2_E2_VEXTRACT
    ; CHECK: $r3 = MOV_D2 killed $r1
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
  $r3 = MOV_D2 $r1
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
...
---
name:            E4_MOVD3_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E4_MOVD3_E2_VEXTRACT
    ; CHECK: $r4 = MOV_D3 killed $dc2
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
  $r4 = MOV_D3 $dc2
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
...
---
name:            E5_MOVD4_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E5_MOVD4_E2_VEXTRACT
    ; CHECK: $r4 = MOV_D4 killed $dc2
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
  $r4 = MOV_D4 $dc2
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16

...
---
name:            E6_MOVD5_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E6_MOVD5_E2_VEXTRACT
    ; CHECK: $r3 = MOV_D5 killed $r1
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
  $r3 = MOV_D5 $r1
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
...
---
name:            E7_MOVD6_E2_VEXTRACT
alignment:       16
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: E7_MOVD6_E2_VEXTRACT
    ; CHECK: $r3 = MOV_D6 killed $r1
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 $x1, $r16
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $dc0 = VEXTRACT_S16 killed $x1, killed $r16
    ; CHECK-NEXT: NOP
  $r3 = MOV_D6 $r1
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
  $dc0 = VEXTRACT_S16 killed $x1, killed $r16
...

# expected to not be in the same bundle
---
name:            mov_P_to_R_and_store_DJ
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mov_P_to_R_and_store_DJ
    ; CHECK: ST_dms_sts_idx_imm killed $dj0, $p0, 0
    ; CHECK-NEXT: $r3 = MOV_mv_scl killed $p0
    ST_dms_sts_idx_imm $dj0, $p0, 0
    $r3 = MOV_mv_scl $p0
...

---
name:            mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mov_to_R
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r2, implicit-def $r3, implicit killed $r4 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $r3 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $r1 = MOVA_lda_cg 0
    $r2 = MOVX_alu_cg 1
    $r3 = MOV_mv_scl $r4
...

---
name:            mov_SCL_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mov_SCL_to_R
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r0, implicit killed $r4 {
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r0 = MOV_mv_scl killed $r4
    ; CHECK-NEXT: }
    $r1 = MOVX_alu_cg 0
    $r0 = MOV_mv_scl $r4
...

---
name:            mova_to_dj_mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dj_mov_to_R
    ; CHECK: BUNDLE implicit-def $dj1, implicit-def $r3 {
    ; CHECK-NEXT:   $dj1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r3 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $r3 = MOV_mv_cg 0
    $dj1 = MOVA_lda_cg 0
...

---
name:            mova_to_dn_mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dn_mov_to_R
    ; CHECK: BUNDLE implicit-def $dn1, implicit-def $r3 {
    ; CHECK-NEXT:   $dn1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r3 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $r3 = MOV_mv_cg 0
    $dn1 = MOVA_lda_cg 0
...

---
name:            movx_to_R_mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: movx_to_R_mov_to_R
    ; CHECK: BUNDLE implicit-def $r1, implicit-def $r2, implicit-def $r3 {
    ; CHECK-NEXT:   $r1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $r3 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $r3 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $r1 = MOVA_lda_cg 0
...

---
name:            mova_to_dj_movx_to_R_mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dj_movx_to_R_mov_to_R
    ; CHECK: BUNDLE implicit-def $dj1, implicit-def $r2, implicit-def $r3 {
    ; CHECK-NEXT:   $dj1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $r3 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $r3 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $dj1 = MOVA_lda_cg 0
...

---
name:            mova_to_dn_movx_to_R_mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_dn_movx_to_R_mov_to_R
    ; CHECK: BUNDLE implicit-def $dn1, implicit-def $r2, implicit-def $r3 {
    ; CHECK-NEXT:   $dn1 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $r3 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $r3 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $dn1 = MOVA_lda_cg 0
...

---
name:            mova_to_p_movx_to_R_mov_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mova_to_p_movx_to_R_mov_to_R
    ; CHECK: BUNDLE implicit-def $p0, implicit-def $r2, implicit-def $r3 {
    ; CHECK-NEXT:   $p0 = MOVA_lda_cg 0
    ; CHECK-NEXT:   $r2 = MOVX_alu_cg 1
    ; CHECK-NEXT:   $r3 = MOV_mv_cg 0
    ; CHECK-NEXT: }
    $r3 = MOV_mv_cg 0
    $r2 = MOVX_alu_cg 1
    $p0 = MOVA_lda_cg 0
...

---
name:            ldaImm_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaImm_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit $r4 {
    ; CHECK-NEXT:   $r3 = LDA_dms_lda_idx_imm killed $p0, 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $dc0 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3 = LDA_dms_lda_idx_imm $p0, 0
    $r1 = MOVX_alu_cg 0
    $dc0 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...

---
name:            ldaImm_to_R_MOV_to_R
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ldaImm_to_R_MOV_to_R
    ; CHECK: BUNDLE implicit-def $r3, implicit-def $r1, implicit-def $r2, implicit killed $p0, implicit $r4 {
    ; CHECK-NEXT:   $r3 = LDA_dms_lda_idx_imm killed $p0, 0
    ; CHECK-NEXT:   $r1 = MOVX_alu_cg 0
    ; CHECK-NEXT:   $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl $r4
    ; CHECK-NEXT: $r2 = MOV_mv_scl killed $r4
    $r3 = LDA_dms_lda_idx_imm $p0, 0
    $r1 = MOVX_alu_cg 0
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
    $r2 = MOV_mv_scl $r4
...
