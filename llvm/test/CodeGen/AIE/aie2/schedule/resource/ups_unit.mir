# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 %topdown-single -run-pass=postmisched %s -o - \
# RUN:   | FileCheck %s

# This test is supposed to check the correct cycle gap between the VLDA.UPS and
# VUPS instructions due to structural conflics with the UPS_UNIT, but due to the
# output dependency of the UPS overflow flag we are not able to do so.
---
name:            vlda_ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda_ups
    ; CHECK: $bmh0 = VLDA_UPS_S32_S16_ag_idx_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh1, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh2, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh3, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh4, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh5, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh6, implicit $crmcden
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm8 = VUPS_S64_D32_mv_ups_x2c killed $x2, killed $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bmh0 = VLDA_UPS_S32_S16_ag_idx_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat
    VMOV_mv_mcd $bmh1, implicit $crmcden
    VMOV_mv_mcd $bmh2, implicit $crmcden
    VMOV_mv_mcd $bmh3, implicit $crmcden
    VMOV_mv_mcd $bmh4, implicit $crmcden
    VMOV_mv_mcd $bmh5, implicit $crmcden
    VMOV_mv_mcd $bmh6, implicit $crmcden
    $cm8 = VUPS_S64_D32_mv_ups_x2c $x2, $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
...

---
name:            vlda_post_inc_ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda_post_inc_ups
    ; CHECK: $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh1, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh2, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh3, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh4, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh5, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh6, implicit $crmcden
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm8 = VUPS_S64_D32_mv_ups_x2c killed $x2, killed $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    VMOV_mv_mcd $bmh1, implicit $crmcden
    VMOV_mv_mcd $bmh2, implicit $crmcden
    VMOV_mv_mcd $bmh3, implicit $crmcden
    VMOV_mv_mcd $bmh4, implicit $crmcden
    VMOV_mv_mcd $bmh5, implicit $crmcden
    VMOV_mv_mcd $bmh6, implicit $crmcden
    $cm8 = VUPS_S64_D32_mv_ups_x2c $x2, $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
...

---
name:            vlda_2d_ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda_2d_ups
    ; CHECK: $bmh0, $p0, $dc4 = VLDA_2D_UPS_S32_D16 killed $s0, killed $p0, killed $d4, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh1, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh2, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh3, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh4, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh5, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh6, implicit $crmcden
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm8 = VUPS_S64_D32_mv_ups_x2c killed $x2, killed $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bmh0, $p0, $dc4 = VLDA_2D_UPS_S32_D16 $s0, $p0, $d4, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    VMOV_mv_mcd $bmh1, implicit $crmcden
    VMOV_mv_mcd $bmh2, implicit $crmcden
    VMOV_mv_mcd $bmh3, implicit $crmcden
    VMOV_mv_mcd $bmh4, implicit $crmcden
    VMOV_mv_mcd $bmh5, implicit $crmcden
    VMOV_mv_mcd $bmh6, implicit $crmcden
    $cm8 = VUPS_S64_D32_mv_ups_x2c $x2, $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
...

# Structural conflicts for VLDA.UPS/VUPS occur at stage E2.
# VLDA.UPS writes to $srups_of at stage E8 while VUPS writes to it at stage E1.
---
name:            vlda_3d_ups
alignment:       16
body:             |
  bb.0 (align 16):
    ; CHECK-LABEL: name: vlda_3d_ups
    ; CHECK: $bmh0, $p0, $dc3, $dc7 = VLDA_3D_UPS_S32_D16 killed $s0, killed $p0, killed $d3_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh1, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh2, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh3, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh4, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh5, implicit $crmcden
    ; CHECK-NEXT: VMOV_mv_mcd killed $bmh6, implicit $crmcden
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $cm8 = VUPS_S64_D32_mv_ups_x2c killed $x2, killed $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bmh0, $p0, $dc3, $dc7 = VLDA_3D_UPS_S32_D16 $s0, $p0, $d3_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    VMOV_mv_mcd $bmh1, implicit $crmcden
    VMOV_mv_mcd $bmh2, implicit $crmcden
    VMOV_mv_mcd $bmh3, implicit $crmcden
    VMOV_mv_mcd $bmh4, implicit $crmcden
    VMOV_mv_mcd $bmh5, implicit $crmcden
    VMOV_mv_mcd $bmh6, implicit $crmcden
    $cm8 = VUPS_S64_D32_mv_ups_x2c $x2, $s2, implicit-def $srups_of, implicit $crsat, implicit $crupssign
...
