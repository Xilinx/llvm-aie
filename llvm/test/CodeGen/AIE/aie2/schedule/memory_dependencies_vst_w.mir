# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 -run-pass=postmisched %topdown-multi %s -o - | FileCheck %s

# This test shows how ordered load/stores are handled.
# In most cases, we just need to keep them one cycle appart, but for example
# VST.SRS stores 2 cycles later than a normal VST, so we need to have the two
# stores 3 cycles apart, instead of the normal 1 cycle.

# Note that in AIE2, all load instructions have the same behavior and read
# memory in E5. Therefore, we'll only test using LDA_dms_lda_idx_imm and
# VLDB_dmw_ldb_ag_idx_imm as representatives.

# Test organization: VST_dmw_sts_w against
# - E5 loads (LDA_dms_lda_idx_imm and VLDB_dmw_ldb_ag_idx_imm)
# - E5 stores (ST_dms_sts_idx_imm)
# - E7 stores (VST_SRS_D8_S32_ag_idx_imm or VST_CONV_BF16_FP32_ag_idx_imm)
# - E11 stores (ST_S8_ag_idx_imm)


# Tests II_VST_W, II_VST_POSTINC_W, II_VST_2D_W, II_VST_3D_W
# against E5 loads.
---
name:            W_STORE_E5_LOAD_E5
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: W_STORE_E5_LOAD_E5
    ; CHECK: $r2 = LDA_dms_lda_idx_imm $p0, 0 {
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    ; CHECK-NEXT: $r2 = LDA_dms_lda_idx_imm $p0, 0 {
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, killed $p1, 0
    ; CHECK-NEXT: $r2 = LDA_dms_lda_idx_imm $p0, 0 {
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p2, $dc0 = VST_2D_dmw_sts_w $wl0, killed $p2, killed $d0
    ; CHECK-NEXT: $r2 = LDA_dms_lda_idx_imm $p0, 0 {
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $p3, $dc1, $dc5 = VST_3D_dmw_sts_w killed $wl0, killed $p3, killed $d1_3d
    ; CHECK-NEXT: $r2 = LDA_dms_lda_idx_imm $p0, 0 {
    ; CHECK-NEXT:   $wl2 = VLDB_dmw_ldb_ag_idx_imm killed $p0, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $r2 = LDA_dms_lda_idx_imm $p0, 0
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0                 ; II_VST_W
    $r2 = LDA_dms_lda_idx_imm $p0, 0
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, $p1, 0      ; II_VST_POSTINC_W
    $r2 = LDA_dms_lda_idx_imm $p0, 0
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    $p2, $dc0 = VST_2D_dmw_sts_w $wl0, $p2, $d0           ; II_VST_2D_W
    $r2 = LDA_dms_lda_idx_imm $p0, 0
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
    $p3, $dc1, $dc5 = VST_3D_dmw_sts_w $wl0, $p3, $d1_3d  ; II_VST_3D_W
    $r2 = LDA_dms_lda_idx_imm $p0, 0
    $wl2 = VLDB_dmw_ldb_ag_idx_imm $p0, 0
...

# Tests II_VST_W, II_VST_POSTINC_W, II_VST_2D_W, II_VST_3D_W
# against E5 stores.
---
name:            W_STORE_E5_STORE_E5
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: W_STORE_E5_STORE_E5
    ; CHECK: ST_dms_sts_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, killed $p1, 0
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: $p2, $dc0 = VST_2D_dmw_sts_w $wl0, killed $p2, killed $d0
    ; CHECK-NEXT: ST_dms_sts_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: $p3, $dc1, $dc5 = VST_3D_dmw_sts_w killed $wl0, killed $p3, killed $d1_3d
    ; CHECK-NEXT: ST_dms_sts_idx_imm killed $r2, killed $p0, 0
    ; CHECK-NEXT: NOP
    ST_dms_sts_idx_imm $r2, $p0, 0
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0                 ; II_VST_W
    ST_dms_sts_idx_imm $r2, $p0, 0
    $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, $p1, 0      ; II_VST_POSTINC_W
    ST_dms_sts_idx_imm $r2, $p0, 0
    $p2, $dc0 = VST_2D_dmw_sts_w $wl0, $p2, $d0           ; II_VST_2D_W
    ST_dms_sts_idx_imm $r2, $p0, 0
    $p3, $dc1, $dc5 = VST_3D_dmw_sts_w $wl0, $p3, $d1_3d  ; II_VST_3D_W
    ST_dms_sts_idx_imm $r2, $p0, 0
...

# Tests II_VST_W, II_VST_POSTINC_W, II_VST_2D_W, II_VST_3D_W
# against E7 stores.
---
name:            W_STORE_E5_STORE_E7
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: W_STORE_E5_STORE_E7
    ; CHECK: VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, killed $p1, 0
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc0 = VST_2D_dmw_sts_w $wl0, killed $p2, killed $d0
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p3, $dc1, $dc5 = VST_3D_dmw_sts_w killed $wl0, killed $p3, killed $d1_3d
    ; CHECK-NEXT: VST_SRS_D8_S32_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0                 ; II_VST_W
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, $p1, 0      ; II_VST_POSTINC_W
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $p2, $dc0 = VST_2D_dmw_sts_w $wl0, $p2, $d0           ; II_VST_2D_W
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $p3, $dc1, $dc5 = VST_3D_dmw_sts_w $wl0, $p3, $d1_3d  ; II_VST_3D_W
    VST_SRS_D8_S32_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

# Tests II_VST_W, II_VST_POSTINC_W, II_VST_2D_W, II_VST_3D_W
# against E11 stores.
---
name:            W_STORE_E5_STORE_E11
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: W_STORE_E5_STORE_E11
    ; CHECK: ST_S8_ag_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0
    ; CHECK-NEXT: ST_S8_ag_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, killed $p1, 0
    ; CHECK-NEXT: ST_S8_ag_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc0 = VST_2D_dmw_sts_w $wl0, killed $p2, killed $d0
    ; CHECK-NEXT: ST_S8_ag_idx_imm $r2, $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p3, $dc1, $dc5 = VST_3D_dmw_sts_w killed $wl0, killed $p3, killed $d1_3d
    ; CHECK-NEXT: ST_S8_ag_idx_imm killed $r2, killed $p0, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ST_S8_ag_idx_imm $r2, $p0, 0
    VST_dmw_sts_w_ag_idx_imm $wl0, $p0, 0                 ; II_VST_W
    ST_S8_ag_idx_imm $r2, $p0, 0
    $p1 = VST_dmw_sts_w_ag_pstm_nrm_imm $wl0, $p1, 0      ; II_VST_POSTINC_W
    ST_S8_ag_idx_imm $r2, $p0, 0
    $p2, $dc0 = VST_2D_dmw_sts_w $wl0, $p2, $d0           ; II_VST_2D_W
    ST_S8_ag_idx_imm $r2, $p0, 0
    $p3, $dc1, $dc5 = VST_3D_dmw_sts_w $wl0, $p3, $d1_3d  ; II_VST_3D_W
    ST_S8_ag_idx_imm $r2, $p0, 0
...
