# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple=aie2  -run-pass=postmisched %s -o - | FileCheck %s

# Test the scheduling of VST 3D instructions.
# Specifically that all operands are read and written in E1.
# VLDA.2D writes in E7 and VST reads in E1.
# So there should be 6 NOPS in between to test the input latencies of VST.
# The output latencies are checked by the successive VSTs.

---
name:            II_VST_3D_W
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: II_VST_3D_W
    ; CHECK: $wl3, $p2, $dc0 = VLDA_2D_dmw_lda_w killed $p2, $d0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc0, $dc4 = VST_3D_dmw_sts_w $wl3, killed $p2, $d0_3d
    ; CHECK-NEXT: $p2, $dc0, $dc4 = VST_3D_dmw_sts_w killed $wl3, killed $p2, killed $d0_3d
    ; CHECK-NEXT: NOP
    $wl3, $p2, $dc0 = VLDA_2D_dmw_lda_w $p2, $d0
    $p2, $dc0, $dc4 = VST_3D_dmw_sts_w $wl3, $p2, $d0_3d
    $p2, $dc0, $dc4 = VST_3D_dmw_sts_w $wl3, $p2, $d0_3d
...

---
name:            ST_3D_Q
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ST_3D_Q
    ; CHECK: $q1, $p2 = LDA_dmv_lda_q_ag_pstm_nrm_imm killed $p2, 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc0, $dc4 = ST_3D_dmv_sts_q $q1, killed $p2, $d0_3d
    ; CHECK-NEXT: $p2, $dc0, $dc4 = ST_3D_dmv_sts_q killed $q1, killed $p2, killed $d0_3d
    ; CHECK-NEXT: NOP
    $q1, $p2 = LDA_dmv_lda_q_ag_pstm_nrm_imm $p2, 0
    $p2, $dc0, $dc4 = ST_3D_dmv_sts_q $q1, $p2, $d0_3d
    $p2, $dc0, $dc4 = ST_3D_dmv_sts_q $q1, $p2, $d0_3d
...

---
name:            VST_3D_AM
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_3D_AM
    ; CHECK: $amll3, $p2, $dc2 = VLDA_2D_dmw_lda_am killed $p2, $d2
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_am $amll3, killed $p2, $d2_3d
    ; CHECK-NEXT: $p2, $dc2, $dc6 = VST_3D_dmw_sts_am killed $amll3, killed $p2, killed $d2_3d
    ; CHECK-NEXT: NOP
    $amll3, $p2, $dc2 = VLDA_2D_dmw_lda_am $p2, $d2
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_am $amll3, $p2, $d2_3d
    $p2, $dc2, $dc6 = VST_3D_dmw_sts_am $amll3, $p2, $d2_3d
...

---
name:            VST_3D_SRS_D16_S32
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_3D_SRS_D16_S32
    ; CHECK: $bml0, $p0, $dc3 = VLDA_2D_UPS_S32_D16 $s0, killed $p0, $d3, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 killed $p0, $d3_3d, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 killed $p0, killed $d3_3d, killed $bml0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0, $p0, $dc3 = VLDA_2D_UPS_S32_D16 killed $s0, $p0, $d3, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 $p0, $d3_3d, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $p0, $dc3, $dc7 = VST_3D_SRS_D16_S32 $p0, $d3_3d, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
...

---
name:            VST_CONV_3D_BF16_FP32
alignment:       16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: VST_CONV_3D_BF16_FP32
    ; CHECK: $bml0, $p0, $dc3 = VLDA_2D_UPS_S32_D16 killed $s0, killed $p0, $d3, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $p0, $dc3, $dc7 = VST_CONV_3D_BF16_FP32 killed $p0, $d3_3d, $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: $p0, $dc3, $dc7 = VST_CONV_3D_BF16_FP32 killed $p0, killed $d3_3d, killed $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $bml0, $p0, $dc3 = VLDA_2D_UPS_S32_D16 killed $s0, $p0, $d3, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $p0, $dc3, $dc7 = VST_CONV_3D_BF16_FP32 $p0, $d3_3d, $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
    $p0, $dc3, $dc7 = VST_CONV_3D_BF16_FP32 $p0, $d3_3d, $bml0, implicit-def $srf2fflags, implicit $crrnd, implicit $crf2fmask
...
