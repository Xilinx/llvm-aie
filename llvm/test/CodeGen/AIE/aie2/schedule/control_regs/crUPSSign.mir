# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 --issue-limit=1 -verify-machineinstrs \
# RUN:   -run-pass=postmisched %s -o - | FileCheck %s

# This test checks the input latency of the control register crUPSSign.
# VLDA_UPS reads it in E7, therefore we need 5 delay slots before the MOVXM.

---
name:            vlda_ups
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0

    ; CHECK-LABEL: name: vlda_ups
    ; CHECK: liveins: $p0, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0 = VLDA_UPS_S32_D16_ag_idx_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crupssign  = MOVXM_lng_cg 0
    $bmh0 = VLDA_UPS_S32_D16_ag_idx_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign  = MOVXM_lng_cg 0
...

---
name:            vlda_ups_postinc
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0

    ; CHECK-LABEL: name: vlda_ups_postinc
    ; CHECK: liveins: $p0, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crupssign  = MOVXM_lng_cg 0
    $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign  = MOVXM_lng_cg 0
...

---
name:            vlda_ups_2d
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0, $d0

    ; CHECK-LABEL: name: vlda_ups_2d
    ; CHECK: liveins: $p0, $s0, $d0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0, $p0, $dc0 = VLDA_2D_UPS_S32_D16 killed $s0, killed $p0, killed $d0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crupssign  = MOVXM_lng_cg 0
    $bmh0, $p0, $dc0 = VLDA_2D_UPS_S32_D16 $s0, $p0, $d0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign  = MOVXM_lng_cg 0
...

---
name:            vlda_3d_ups
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0, $d0
    ; CHECK-LABEL: name: vlda_3d_ups
    ; CHECK: liveins: $p0, $s0, $d0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0, $p0, $dc0, $dc4 = VLDA_3D_UPS_S32_D16 killed $s0, killed $p0, killed $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crupssign = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crupssign  = MOVXM_lng_cg 0
    $bmh0, $p0, $dc0, $dc4 = VLDA_3D_UPS_S32_D16 $s0, $p0, $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crupssign  = MOVXM_lng_cg 0
...
