# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -march=aie2 --issue-limit=1 -verify-machineinstrs \
# RUN:    -run-pass=postmisched %s -o - | FileCheck %s

# This test checks the input latency of the control register crSat.
# VSRS and VST_SRS read it in E1, therefore we don't need any delay slots before the MOVXM.
# VLDA_UPS reads it in E8, therefore we need 6 delay slots before the MOVXM.

---
name:            srs
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $cm0, $s0

    ; CHECK-LABEL: name: srs
    ; CHECK: liveins: $cm0, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $wl1 = VSRS_D8_S32_mv_w_srs killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $wl1 = VSRS_D8_S32_mv_w_srs $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            II_VSRSM
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $bml2, $s0

    ; CHECK-LABEL: name: II_VSRSM
    ; CHECK: liveins: $bml2, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $wl1 = VSRSM_D16_S32 killed $bml2, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $wl1 = VSRSM_D16_S32 $bml2, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vlda_ups
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0

    ; CHECK-LABEL: name: vlda_ups
    ; CHECK: liveins: $p0, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0 = VLDA_UPS_S32_D16_ag_idx_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $bmh0 = VLDA_UPS_S32_D16_ag_idx_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vlda_ups_postinc
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0

    ; CHECK-LABEL: name: vlda_ups_postinc
    ; CHECK: liveins: $p0, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm killed $s0, killed $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $bmh0, $p0 = VLDA_UPS_S32_D16_ag_pstm_nrm_imm $s0, $p0, 0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vlda_ups_2d
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0, $d0

    ; CHECK-LABEL: name: vlda_ups_2d
    ; CHECK: liveins: $p0, $s0, $d0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0, $p0, $dc0 = VLDA_2D_UPS_S32_D16 killed $s0, killed $p0, killed $d0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $bmh0, $p0, $dc0 = VLDA_2D_UPS_S32_D16 $s0, $p0, $d0, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vlda_3d_ups
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0, $d0
    ; CHECK-LABEL: name: vlda_3d_ups
    ; CHECK: liveins: $p0, $s0, $d0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $bmh0, $p0, $dc0, $dc4 = VLDA_3D_UPS_S32_D16 killed $s0, killed $p0, killed $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $bmh0, $p0, $dc0, $dc4 = VLDA_3D_UPS_S32_D16 $s0, $p0, $d0_3d, implicit-def $srups_of, implicit $crsat, implicit $crupssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vst_srs
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0, $cm0
    ; CHECK-LABEL: name: vst_srs
    ; CHECK: liveins: $p0, $s0, $cm0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: VST_SRS_S16_S64_ag_idx_imm killed $p0, 0, killed $cm0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    VST_SRS_S16_S64_ag_idx_imm $p0, 0, $cm0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vst_srs_postinc
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $m7, $bml0, $s0
    ; CHECK-LABEL: name: vst_srs_postinc
    ; CHECK: liveins: $p0, $m7, $bml0, $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $p0 = VST_SRS_D16_S32_ag_pstm_nrm killed $p0, killed $m7, killed $bml0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $p0 = VST_SRS_D16_S32_ag_pstm_nrm $p0, $m7, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vst_srs_2d
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0, $d7, $bml0
    ; CHECK-LABEL: name: vst_srs_2d
    ; CHECK: liveins: $p0, $s0, $d7, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $p0, $dc7 = VST_2D_SRS_D16_S32 killed $p0, killed $d7, killed $bml0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $p0, $dc7 = VST_2D_SRS_D16_S32 $p0, $d7, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $crsat = MOVXM_lng_cg 0
...

---
name:            vst_srs_3d
alignment:       16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $p0, $s0, $d0_3d, $bml0
    ; CHECK-LABEL: name: vst_srs_3d
    ; CHECK: liveins: $p0, $s0, $d0_3d, $bml0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: $p0, $dc0, $dc4 = VST_3D_SRS_D16_S32 killed $p0, killed $d0_3d, killed $bml0, killed $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    ; CHECK-NEXT: $crsat = MOVXM_lng_cg 0
    ; CHECK-NEXT: NOP
    ; CHECK-NEXT: NOP
    $crsat = MOVXM_lng_cg 0
    $p0, $dc0, $dc4 = VST_3D_SRS_D16_S32 $p0, $d0_3d, $bml0, $s0, implicit-def $srsrs_of, implicit $crsat, implicit $crrnd, implicit $crsrssign
    $crsat = MOVXM_lng_cg 0
...
