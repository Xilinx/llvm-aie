# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --mtriple=aie2 --run-pass=pipeliner --aie-loop-min-tripcount=4 \
# RUN:   --issue-limit=6 -debug-only=aie-pipeliner %s -o - 2>&1 \
# RUN:   | FileCheck  %s --check-prefix=CHECK-TC-4
# RUN: llc --mtriple=aie2 --run-pass=pipeliner --aie-loop-min-tripcount=3 \
# RUN:   --issue-limit=6 -debug-only=aie-pipeliner %s -o - 2>&1 \
# RUN:   | FileCheck  %s --check-prefix=CHECK-TC-3
# RUN: llc --mtriple=aie2 --run-pass=pipeliner --aie-loop-min-tripcount=2 \
# RUN:   --issue-limit=6 -debug-only=aie-pipeliner %s -o - 2>&1 \
# RUN:   | FileCheck  %s --check-prefix=CHECK-TC-2
# RUN: llc --mtriple=aie2 --run-pass=pipeliner --aie-loop-min-tripcount=1 \
# RUN:   --issue-limit=6 -debug-only=aie-pipeliner %s -o - 2>&1 \
# RUN:   | FileCheck  %s --check-prefix=CHECK-TC-1


# This test covers the accept or reject behavior of ZOL loops.

...
---
name:            maxCanon
alignment:       16
tracksRegLiveness: true
debugInstrRef:   false
liveins:         []
body:             |
  ; CHECK-TC-4: PLI: Rejected schedule (Too many stages, TotStages=4 II=3)
  ; CHECK-TC-4: PLI: Accepting II=4

  ; CHECK-TC-3: PLI: Rejected schedule MaxStageCount=3 MinTripCount=3)
  ; CHECK-TC-3: PLI: Accepting II=4

  ; CHECK-TC-2: PLI: Rejected schedule MaxStageCount=3 MinTripCount=2)
  ; CHECK-TC-2: PLI: Rejected schedule MaxStageCount=2 MinTripCount=2)
  ; CHECK-TC-2: PLI: Accepting II=5

  ; CHECK-TC-1: Not interesting MinTripCount (<=1)!
  ; CHECK-TC-1-NEXT: Loop rejected

  bb.1:
    liveins: $p0, $p1
    %1:ep = COPY $p0
    %2:ep = COPY $p1
    %26:er = MOV_RLC_imm10_pseudo 4
    %29:em = COPY %26
    %17:er = MOV_RLC_imm11_pseudo 0
    %19:er = MOV_RLC_imm10_pseudo 16
    %20:er = MOV_mv_scl %19:er
    LoopStart %20:er, 0

  bb.3:
    %4:ep = PHI %1, %bb.1, %8, %bb.3
    %5:er = PHI %17, %bb.1, %0, %bb.3
    %9:er = LDA_dms_lda_idx_imm %4, 0
    %8:ep = PADD_mod_pseudo  %4, %29
    %14:er = ABS %9, implicit-def $srcarry
    %24:er27 = LT %5, %14
    %0:er = SELNEZ %14, %5, %24
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.3
    PseudoJ_jump_imm %bb.2

  bb.2:
    $r0 = COPY %0
    PseudoRET implicit $lr, implicit $r0

...
