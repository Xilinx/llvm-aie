# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates

# RUN: llc --mtriple=aie2 --run-pass=pipeliner %s -o - \
# RUN:   --aie-loop-min-tripcount=4 --aie-pipeliner-max-stagecount=3 | \
# RUN:   FileCheck  %s

---
name:            load_mul_add_store
alignment:       16
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: load_mul_add_store
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $p0, $p1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:ep = COPY $p0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:ep = COPY $p1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:er = COPY $r0
  ; CHECK-NEXT:   [[MOV_RLC_imm10_pseudo:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 0
  ; CHECK-NEXT:   [[ADD_NC_GPR:%[0-9]+]]:er = ADD_NC_GPR [[COPY2]], -2
  ; CHECK-NEXT:   LoopStart [[ADD_NC_GPR]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LDA_dms_lda_pstm_nrm_imm:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm_imm1:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_pstm_nrm_imm [[COPY1]], 4
  ; CHECK-NEXT:   [[LDA_dms_lda_pstm_nrm_imm2:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm_imm3:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_pstm_nrm_imm [[LDA_dms_lda_pstm_nrm_imm1]], 4
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   successors: %bb.5(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LDA_dms_lda_pstm_nrm_imm4:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm_imm5:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_pstm_nrm_imm [[LDA_dms_lda_pstm_nrm_imm3]], 4
  ; CHECK-NEXT:   [[LDA_dms_lda_pstm_nrm_imm6:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm_imm7:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_pstm_nrm_imm [[LDA_dms_lda_pstm_nrm_imm5]], 4
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   successors: %bb.5(0x40000000), %bb.6(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:er = PHI [[MOV_RLC_imm10_pseudo]], %bb.4, %28, %bb.5
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:ep = PHI [[LDA_dms_lda_pstm_nrm_imm7]], %bb.4, %26, %bb.5
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:er = PHI [[LDA_dms_lda_pstm_nrm_imm4]], %bb.4, %23, %bb.5
  ; CHECK-NEXT:   [[PHI3:%[0-9]+]]:er = PHI [[LDA_dms_lda_pstm_nrm_imm]], %bb.4, [[PHI2]], %bb.5
  ; CHECK-NEXT:   [[PHI4:%[0-9]+]]:er = PHI [[LDA_dms_lda_pstm_nrm_imm6]], %bb.4, %25, %bb.5
  ; CHECK-NEXT:   [[PHI5:%[0-9]+]]:er = PHI [[LDA_dms_lda_pstm_nrm_imm2]], %bb.4, [[PHI4]], %bb.5
  ; CHECK-NEXT:   [[MUL_mul_r_rr:%[0-9]+]]:er = MUL_mul_r_rr [[PHI3]], [[PHI5]]
  ; CHECK-NEXT:   [[LDA_dms_lda_pstm_nrm_imm8:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm_imm9:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_pstm_nrm_imm [[PHI1]], 4
  ; CHECK-NEXT:   [[LDA_dms_lda_pstm_nrm_imm10:%[0-9]+]]:er, [[LDA_dms_lda_pstm_nrm_imm11:%[0-9]+]]:ep_as_32bit = LDA_dms_lda_pstm_nrm_imm [[LDA_dms_lda_pstm_nrm_imm9]], 4
  ; CHECK-NEXT:   [[ADD_add_r_ri:%[0-9]+]]:er = ADD_add_r_ri [[MUL_mul_r_rr]], 1, implicit-def dead $srcarry
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:er = ADD [[PHI]], [[ADD_add_r_ri]], implicit-def dead $srcarry
  ; CHECK-NEXT:   PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.5
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6:
  ; CHECK-NEXT:   successors: %bb.7(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI6:%[0-9]+]]:er = PHI [[ADD]], %bb.5
  ; CHECK-NEXT:   [[PHI7:%[0-9]+]]:er = PHI [[LDA_dms_lda_pstm_nrm_imm8]], %bb.5
  ; CHECK-NEXT:   [[PHI8:%[0-9]+]]:er = PHI [[PHI2]], %bb.5
  ; CHECK-NEXT:   [[PHI9:%[0-9]+]]:er = PHI [[LDA_dms_lda_pstm_nrm_imm10]], %bb.5
  ; CHECK-NEXT:   [[PHI10:%[0-9]+]]:er = PHI [[PHI4]], %bb.5
  ; CHECK-NEXT:   [[MUL_mul_r_rr1:%[0-9]+]]:er = MUL_mul_r_rr [[PHI8]], [[PHI10]]
  ; CHECK-NEXT:   [[ADD_add_r_ri1:%[0-9]+]]:er = ADD_add_r_ri [[MUL_mul_r_rr1]], 1, implicit-def dead $srcarry
  ; CHECK-NEXT:   [[ADD1:%[0-9]+]]:er = ADD [[PHI6]], [[ADD_add_r_ri1]], implicit-def dead $srcarry
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI11:%[0-9]+]]:er = PHI [[ADD1]], %bb.6
  ; CHECK-NEXT:   [[PHI12:%[0-9]+]]:er = PHI [[PHI7]], %bb.6
  ; CHECK-NEXT:   [[PHI13:%[0-9]+]]:er = PHI [[PHI9]], %bb.6
  ; CHECK-NEXT:   [[MUL_mul_r_rr2:%[0-9]+]]:er = MUL_mul_r_rr [[PHI12]], [[PHI13]]
  ; CHECK-NEXT:   [[ADD_add_r_ri2:%[0-9]+]]:er = ADD_add_r_ri [[MUL_mul_r_rr2]], 1, implicit-def dead $srcarry
  ; CHECK-NEXT:   [[ADD2:%[0-9]+]]:er = ADD [[PHI11]], [[ADD_add_r_ri2]], implicit-def dead $srcarry
  ; CHECK-NEXT:   PseudoJ_jump_imm %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[ST_dms_sts_pstm_nrm_imm:%[0-9]+]]:ep = ST_dms_sts_pstm_nrm_imm [[ADD2]], [[COPY]], 4
  ; CHECK-NEXT:   PseudoRET implicit $lr, implicit [[ST_dms_sts_pstm_nrm_imm]]

  bb.1:
    liveins: $p0, $p1, $r0
    %1:ep = COPY $p0
    %2:ep = COPY $p1
    %20:er = COPY $r0
    %19:er = MOV_RLC_imm10_pseudo 0
    LoopStart %20:er

  bb.3:
    %3:er = PHI %19, %bb.1, %9, %bb.3
    %4:ep = PHI %2, %bb.1, %14, %bb.3
    %5:er, %14:ep = LDA_dms_lda_pstm_nrm_imm %4, 4
    %8:er = ADD_add_r_ri %5, 1, implicit-def $srcarry
    %9:er = ADD %3, %8, implicit-def $srcarry
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.3
    PseudoJ_jump_imm %bb.2

  bb.2:
    %13:ep = ST_dms_sts_pstm_nrm_imm %9, %1, 4
    PseudoRET implicit $lr, implicit %13
...
