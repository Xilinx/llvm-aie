#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc --mtriple=aie2 --run-pass=pipeliner --aie-loop-min-tripcount=4 \ 
# RUN: --aie-pipeliner-hoist-zol-adjustment=true --aie-pipeliner-max-stagecount=4 %s -o - |\
# RUN: FileCheck  %s
# RUN: llc --mtriple=aie2 --run-pass=pipeliner --aie-loop-min-tripcount=4 \ 
# RUN: --aie-pipeliner-hoist-zol-adjustment=false --aie-pipeliner-max-stagecount=4 %s -o - | \
# RUN: FileCheck  %s --check-prefix=CHECK-NO-HOIST

# This test set is an adaptation of a subset of tests of
# swp-downcountloop.mir to the context of ZOL.

# Test 1: as LoopStart uses a register defined by mov
# immediate, it is enough to update the immediate value.

...
---
name:            maxCanonMOV_RLC_imm10
alignment:       16
tracksRegLiveness: true
debugInstrRef:   false
liveins:         []
body:             |
  ; CHECK-LABEL: name: maxCanonMOV_RLC_imm10
  ; CHECK: [[INIT:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 4
  ; CHECK: [[COPY:%[0-9]+]]:em = COPY [[INIT]]
  ; CHECK: [[MOV:%[0-9]+]]:er = MOV_RLC_imm11_pseudo 0
  ; CHECK: [[LDEC:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 13
  ; CHECK: LoopStart [[LDEC]]
  bb.1:
    liveins: $p0, $p1
    %1:ep = COPY $p0
    %2:ep = COPY $p1
    %26:er = MOV_RLC_imm10_pseudo 4
    %29:em = COPY %26
    %17:er = MOV_RLC_imm11_pseudo 0
    %19:er = MOV_RLC_imm10_pseudo 16
    LoopStart %19:er

  bb.3:
    %4:ep = PHI %1, %bb.1, %8, %bb.3
    %5:er = PHI %17, %bb.1, %0, %bb.3
    %9:er = LDA_dms_lda_idx_imm %4, 0
    %8:ep = PADD_mod_pseudo  %4, %29
    %14:er = ABS %9, implicit-def $srcarry
    %24:er27 = LT %5, %14
    %0:er = SELNEZ %14, %5, %24
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.3
    PseudoJ_jump_imm %bb.2

  bb.2:
    $r0 = COPY %0
    PseudoRET implicit $lr, implicit $r0

...

# Test 2: as LoopStart uses a register defined by mov
# register, we need an immediate addition.

...
---
name:            maxCanonMOV_mv_scl
alignment:       16
tracksRegLiveness: true
debugInstrRef:   false
liveins:         []
body:             |
  ; CHECK-LABEL: name: maxCanonMOV_mv_scl
  ; CHECK: [[MOV1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 4
  ; CHECK: [[COPY:%[0-9]+]]:em = COPY [[MOV1]]
  ; CHECK: [[MOV2:%[0-9]+]]:er = MOV_RLC_imm11_pseudo 0
  ; CHECK: [[MOV3:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 16
  ; CHECK: [[MOV4:%[0-9]+]]:er = MOV_mv_scl [[MOV3]]
  ; CHECK: [[LDEC:%[0-9]+]]:er = ADD_NC_GPR [[MOV4]], -3
  ; CHECK: LoopStart [[LDEC]]

  bb.1:
    liveins: $p0, $p1
    %1:ep = COPY $p0
    %2:ep = COPY $p1
    %26:er = MOV_RLC_imm10_pseudo 4
    %29:em = COPY %26
    %17:er = MOV_RLC_imm11_pseudo 0
    %19:er = MOV_RLC_imm10_pseudo 16
    %20:er = MOV_mv_scl %19:er
    LoopStart %20:er

  bb.3:
    %4:ep = PHI %1, %bb.1, %8, %bb.3
    %5:er = PHI %17, %bb.1, %0, %bb.3
    %9:er = LDA_dms_lda_idx_imm %4, 0
    %8:ep = PADD_mod_pseudo  %4, %29
    %14:er = ABS %9, implicit-def $srcarry
    %24:er27 = LT %5, %14
    %0:er = SELNEZ %14, %5, %24
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.3
    PseudoJ_jump_imm %bb.2

  bb.2:
    $r0 = COPY %0
    PseudoRET implicit $lr, implicit $r0

...

# Test 3: check the possibility of hoisting ADD_NC_GPR.

...
---
name:            maxCanonMOV_mv_scl_hoist
alignment:       16
tracksRegLiveness: true
debugInstrRef:   false
liveins:         []
body:             |
  ; CHECK-LABEL: name: maxCanonMOV_mv_scl_hoist
  bb.0:
    ; CHECK: [[MOV:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 16
    ; CHECK: [[MOV1:%[0-9]+]]:er = MOV_mv_scl [[MOV]]
    ; CHECK: [[NEWTRIP:%[0-9]+]]:er = ADD_NC_GPR [[MOV1]], -3

    ; CHECK-NO-HOIST: [[MOV:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 16
    ; CHECK-NO-HOIST:[[MOVTRIP:%[0-9]+]]:er = MOV_mv_scl [[MOV]]
    ; CHECK-NO-HOIST-NOT: [%[0-9]+]:er = ADD_NC_GPR [%[0-9]+], -3
    ; CHECK-NO-HOIST: PseudoJ_jump_imm %bb.1

    liveins: $p0, $p1
    %1:ep = COPY $p0
    %2:ep = COPY $p1
    %19:er = MOV_RLC_imm10_pseudo 16
    %20:er = MOV_mv_scl %19:er
    PseudoJ_jump_imm %bb.1

  bb.1:
    ; CHECK: [[MOV:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 4
    ; CHECK: [[MOV1:%[0-9]+]]:em = COPY [[MOV]]
    ; CHECK: [[MOV2:%[0-9]+]]:er = MOV_RLC_imm11_pseudo 0
    ; CHECK: LoopStart [[NEWTRIP]]

    ; CHECK-NO-HOIST: [[MOV:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 4
    ; CHECK-NO-HOIST: [[MOV1:%[0-9]+]]:em = COPY [[MOV]]
    ; CHECK-NO-HOIST: [[MOV2:%[0-9]+]]:er = MOV_RLC_imm11_pseudo 0
    ; CHECK-NO-HOIST: [[NEWTRIP:%[0-9]+]]:er = ADD_NC_GPR %3, -3
    ; CHECK-NOT: [%[0-9]+]:er = ADD_NC_GPR [%[0-9]+], -3
    ; CHECK-NO-HOIST: LoopStart [[NEWTRIP]]

    %26:er = MOV_RLC_imm10_pseudo 4
    %29:em = COPY %26
    %17:er = MOV_RLC_imm11_pseudo 0
    LoopStart %20:er

  bb.3:
    %4:ep = PHI %1, %bb.1, %8, %bb.3
    %5:er = PHI %17, %bb.1, %0, %bb.3
    %9:er = LDA_dms_lda_idx_imm %4, 0
    %8:ep = PADD_mod_pseudo  %4, %29
    %14:er = ABS %9, implicit-def $srcarry
    %24:er27 = LT %5, %14
    %0:er = SELNEZ %14, %5, %24
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.3
    PseudoJ_jump_imm %bb.2

  bb.2:
    $r0 = COPY %0
    PseudoRET implicit $lr, implicit $r0

...

# Test 4: LoopStart uses a register defined by mov
# immediate, but we cannot update the immediate value
# because LoopStart is not the only user of the result

...
---
name:            maxCanonMOV_RLC_imm10_2_users
alignment:       16
tracksRegLiveness: true
debugInstrRef:   false
liveins:         []
body:             |
  ; CHECK-LABEL: name: maxCanonMOV_RLC_imm10
  ; CHECK: [[INIT:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 4
  ; CHECK: [[COPY:%[0-9]+]]:em = COPY [[INIT]]
  ; CHECK: [[MOV:%[0-9]+]]:er = MOV_RLC_imm11_pseudo 0
  ; CHECK: [[MOV1:%[0-9]+]]:er = MOV_RLC_imm10_pseudo 16
  ; CHECK: [[LDEC:%[0-9]+]]:er = ADD_NC_GPR [[MOV1]], -3 
  ; CHECK: LoopStart [[LDEC]]
  bb.1:
    liveins: $p0, $p1
    %1:ep = COPY $p0
    %2:ep = COPY $p1
    %26:er = MOV_RLC_imm10_pseudo 4
    %29:em = COPY %26
    %17:er = MOV_RLC_imm11_pseudo 0
    %19:er = MOV_RLC_imm10_pseudo 16
    LoopStart %19:er

  bb.3:
    %4:ep = PHI %1, %bb.1, %8, %bb.3
    %5:er = PHI %17, %bb.1, %0, %bb.3
    %9:er = LDA_dms_lda_idx_imm %4, 0
    %8:ep = PADD_mod_pseudo  %4, %29
    %14:er = ABS %9, implicit-def $srcarry
    %24:er27 = LT %5, %14
    %0:er = SELNEZ %14, %5, %24
    PseudoLoopEnd <mcsymbol .L_LEnd0>, %bb.3
    PseudoJ_jump_imm %bb.2

  bb.2:
    $r0 = COPY %0
    $r1 = COPY %19
    PseudoRET implicit $lr, implicit $r0, implicit $r1

...
