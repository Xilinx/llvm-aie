; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc < %s -verify-machineinstrs -mtriple=aie2 | FileCheck %s

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read)
define dso_local noundef <8 x i32> @test_load_4x16_lo(<8 x i32> %0) local_unnamed_addr #0 {
; CHECK-LABEL: test_load_4x16_lo:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vldb.4x16.lo wl0, wl2; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %2 = tail call <8 x i32> @llvm.aie2.load.4x16.lo(<8 x i32> %0)
  ret <8 x i32> %2
}

define dso_local noundef <8 x i32> @test_load_4x16_hi(<8 x i32> %0) local_unnamed_addr #0 {
; CHECK-LABEL: test_load_4x16_hi:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vldb.4x16.hi wl0, wl2; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %2 = tail call <8 x i32> @llvm.aie2.load.4x16.hi(<8 x i32> %0)
  ret <8 x i32> %2
}

define dso_local noundef <8 x i32> @test_load_4x32_lo(<8 x i32> %0) local_unnamed_addr #0 {
; CHECK-LABEL: test_load_4x32_lo:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vldb.4x32.lo wl0, wl2; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %2 = tail call <8 x i32> @llvm.aie2.load.4x32.lo(<8 x i32> %0)
  ret <8 x i32> %2
}

define dso_local noundef <8 x i32> @test_load_4x32_hi(<8 x i32> %0) local_unnamed_addr #0 {
; CHECK-LABEL: test_load_4x32_hi:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vldb.4x32.hi wl0, wl2; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %2 = tail call <8 x i32> @llvm.aie2.load.4x32.hi(<8 x i32> %0)
  ret <8 x i32> %2
}

define dso_local noundef <8 x i32> @test_load_4x64_lo(<8 x i32> %0) local_unnamed_addr #0 {
; CHECK-LABEL: test_load_4x64_lo:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vldb.4x64.lo wl0, wl2; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %2 = tail call <8 x i32> @llvm.aie2.load.4x64.lo(<8 x i32> %0)
  ret <8 x i32> %2
}

define dso_local noundef <8 x i32> @test_load_4x64_hi(<8 x i32> %0) local_unnamed_addr #0 {
; CHECK-LABEL: test_load_4x64_hi:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    vldb.4x64.hi wl0, wl2; nopa ; nops ; nopxm ; nopv
; CHECK-NEXT:    nopa ; ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %2 = tail call <8 x i32> @llvm.aie2.load.4x64.hi(<8 x i32> %0)
  ret <8 x i32> %2
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x64.lo(<8 x i32>) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x64.hi(<8 x i32>) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x32.lo(<8 x i32>) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x32.hi(<8 x i32>) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x16.lo(<8 x i32>) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x16.hi(<8 x i32>) #1

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(read) }
