; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -O2 -mtriple=aie2 %s -o - | FileCheck %s

define dso_local noundef <64 x i8> @_Z23test_insert_upd_512_256Dv64_DU8_iDv32_S_(<64 x i8> noundef %a, i32 noundef %idx, <32 x i8> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z23test_insert_upd_512_256Dv64_DU8_iDv32_S_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    jnz r0, #.LBB0_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    vmov x0, x2 // Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %if.then.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov wl0, wl4 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB0_2: // %if.else.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov wh0, wl4 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = and i32 %idx, 1
  %cmp.i = icmp eq i32 %0, 0
  %1 = bitcast <64 x i8> %a to <16 x i32>
  %2 = bitcast <32 x i8> %b to <8 x i32>
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:
  %3 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %1, <8 x i32> %2, i32 0)
  br label %_ZL6insertDv64_DU8_iDv32_S_.exit

if.else.i:
  %4 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %1, <8 x i32> %2, i32 1)
  br label %_ZL6insertDv64_DU8_iDv32_S_.exit

_ZL6insertDv64_DU8_iDv32_S_.exit:
  %retval.0.in.i = phi <16 x i32> [ %3, %if.then.i ], [ %4, %if.else.i ]
  %retval.0.i = bitcast <16 x i32> %retval.0.in.i to <64 x i8>
  ret <64 x i8> %retval.0.i
}


define dso_local noundef <64 x i8> @_Z23test_insert_upd_512_256Dv64_DU8_Dv32_S_(<64 x i8> noundef %a, <32 x i8> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z23test_insert_upd_512_256Dv64_DU8_Dv32_S_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov x0, x2 // Delay Slot 3
; CHECK-NEXT:    vmov wh0, wl4 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <64 x i8> %a to <16 x i32>
  %1 = bitcast <32 x i8> %b to <8 x i32>
  %2 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %0, <8 x i32> %1, i32 1)
  %retval.0.i = bitcast <16 x i32> %2 to <64 x i8>
  ret <64 x i8> %retval.0.i
}


define dso_local noundef <128 x i8> @_Z20test_insert_1024_512Dv128_DU8_iDv64_S_(<128 x i8> noundef %a, i32 noundef %idx, <64 x i8> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z20test_insert_1024_512Dv128_DU8_iDv64_S_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    jnz r0, #.LBB2_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov x4, x6 // Delay Slot 2
; CHECK-NEXT:    vmov x5, x7 // Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %if.then.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov x4, x0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB2_2: // %if.else.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov x5, x0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = and i32 %idx, 1
  %cmp.i = icmp eq i32 %0, 0
  %1 = bitcast <128 x i8> %a to <32 x i32>
  %2 = bitcast <64 x i8> %b to <16 x i32>
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:
  %3 = tail call <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> %1, <16 x i32> %2, i32 0)
  br label %_ZL6insertDv128_DU8_iDv64_S_.exit

if.else.i:
  %4 = tail call <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> %1, <16 x i32> %2, i32 1)
  br label %_ZL6insertDv128_DU8_iDv64_S_.exit

_ZL6insertDv128_DU8_iDv64_S_.exit:
  %retval.0.in.i = phi <32 x i32> [ %3, %if.then.i ], [ %4, %if.else.i ]
  %retval.0.i = bitcast <32 x i32> %retval.0.in.i to <128 x i8>
  ret <128 x i8> %retval.0.i
}


define dso_local noundef <128 x i8> @_Z20test_insert_1024_512Dv128_DU8_Dv64_S_(<128 x i8> noundef %a, <64 x i8> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z20test_insert_1024_512Dv128_DU8_Dv64_S_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov x4, x6 // Delay Slot 3
; CHECK-NEXT:    vmov x5, x0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <128 x i8> %a to <32 x i32>
  %1 = bitcast <64 x i8> %b to <16 x i32>
  %2 = tail call <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32> %0, <16 x i32> %1, i32 1)
  %retval.0.i = bitcast <32 x i32> %2 to <128 x i8>
  ret <128 x i8> %retval.0.i
}


define dso_local noundef <128 x i8> @_Z20test_insert_1024_256Dv128_DU8_Dv32_S_(<128 x i8> noundef %a, <32 x i8> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z20test_insert_1024_256Dv128_DU8_Dv32_S_:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    vmov x4, x6 // Delay Slot 4
; CHECK-NEXT:    vmov x5, x7 // Delay Slot 3
; CHECK-NEXT:    vmov wh4, wl0 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = bitcast <128 x i8> %a to <32 x i32>
  %1 = bitcast <32 x i8> %b to <8 x i32>
  %2 = tail call <32 x i32> @llvm.aie2.upd.I1024.I256(<32 x i32> %0, <8 x i32> %1, i32 1)
  %3 = bitcast <32 x i32> %2 to <128 x i8>
  ret <128 x i8> %3
}


define dso_local noundef <8 x i64> @_Z11test_insertDv16_u7__acc32iDv8_u7__acc32(<8 x i64> noundef %a, i32 noundef %idx, <4 x i64> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv16_u7__acc32iDv8_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    jnz r0, #.LBB5_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    vmov bml0, bml1 // Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %if.then.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov amll0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB5_2: // %if.else.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov amlh0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = and i32 %idx, 1
  %cmp.i = icmp eq i32 %0, 0
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:
  %1 = tail call <8 x i64> @llvm.aie2.upd.512.256.acc(<8 x i64> %a, <4 x i64> %b, i32 0)
  br label %_ZL6insertDv16_u7__acc32iDv8_u7__acc32.exit

if.else.i:
  %2 = tail call <8 x i64> @llvm.aie2.upd.512.256.acc(<8 x i64> %a, <4 x i64> %b, i32 1)
  br label %_ZL6insertDv16_u7__acc32iDv8_u7__acc32.exit

_ZL6insertDv16_u7__acc32iDv8_u7__acc32.exit:
  %retval.0.i = phi <8 x i64> [ %1, %if.then.i ], [ %2, %if.else.i ]
  ret <8 x i64> %retval.0.i
}


define dso_local noundef <8 x i64> @_Z11test_insertDv16_u7__acc32Dv8_u7__acc32(<8 x i64> noundef %a, <4 x i64> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv16_u7__acc32Dv8_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov bml0, bml1 // Delay Slot 3
; CHECK-NEXT:    vmov amlh0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.upd.512.256.acc(<8 x i64> %a, <4 x i64> %b, i32 1)
  ret <8 x i64> %0
}


define dso_local noundef <8 x i64> @_Z11test_insertDv8_u7__acc64iDv4_u7__acc64(<8 x i64> noundef %a, i32 noundef %idx, <4 x i64> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv8_u7__acc64iDv4_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    jnz r0, #.LBB7_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    vmov bml0, bml1 // Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %if.then.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov amll0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB7_2: // %if.else.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov amlh0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = and i32 %idx, 1
  %cmp.i = icmp eq i32 %0, 0
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:
  %1 = tail call <8 x i64> @llvm.aie2.upd.512.256.acc(<8 x i64> %a, <4 x i64> %b, i32 0)
  br label %_ZL6insertDv8_u7__acc64iDv4_u7__acc64.exit

if.else.i:
  %2 = tail call <8 x i64> @llvm.aie2.upd.512.256.acc(<8 x i64> %a, <4 x i64> %b, i32 1)
  br label %_ZL6insertDv8_u7__acc64iDv4_u7__acc64.exit

_ZL6insertDv8_u7__acc64iDv4_u7__acc64.exit:
  %retval.0.i = phi <8 x i64> [ %1, %if.then.i ], [ %2, %if.else.i ]
  ret <8 x i64> %retval.0.i
}


define dso_local noundef <8 x i64> @_Z11test_insertDv8_u7__acc64Dv4_u7__acc64(<8 x i64> noundef %a, <4 x i64> noundef %b) local_unnamed_addr #0 {
; CHECK-LABEL: _Z11test_insertDv8_u7__acc64Dv4_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov bml0, bml1 // Delay Slot 3
; CHECK-NEXT:    vmov amlh0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <8 x i64> @llvm.aie2.upd.512.256.acc(<8 x i64> %a, <4 x i64> %b, i32 1)
  ret <8 x i64> %0
}


define dso_local noundef <16 x i64> @_Z11test_insertDv32_u7__acc32Dv8_u7__acc32(<16 x i64> noundef %a, <4 x i64> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z11test_insertDv32_u7__acc32Dv8_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov cm0, cm1 // Delay Slot 3
; CHECK-NEXT:    vmov amll0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.upd.1024.256.acc(<16 x i64> %a, <4 x i64> %b, i32 0)
  ret <16 x i64> %0
}


define dso_local noundef <16 x i64> @_Z11test_insertDv32_u7__acc32iDv16_u7__acc32(<16 x i64> noundef %a, i32 noundef %idx, <8 x i64> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z11test_insertDv32_u7__acc32iDv16_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    jnz r0, #.LBB10_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    vmov cm0, cm1 // Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %if.then.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov bml0, bml2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB10_2: // %if.else.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov bmh0, bml2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = and i32 %idx, 1
  %cmp.i = icmp eq i32 %0, 0
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:
  %1 = tail call <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> %a, <8 x i64> %b, i32 0)
  br label %_ZL6insertDv32_u7__acc32iDv16_u7__acc32.exit

if.else.i:
  %2 = tail call <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> %a, <8 x i64> %b, i32 1)
  br label %_ZL6insertDv32_u7__acc32iDv16_u7__acc32.exit

_ZL6insertDv32_u7__acc32iDv16_u7__acc32.exit:
  %retval.0.i = phi <16 x i64> [ %1, %if.then.i ], [ %2, %if.else.i ]
  ret <16 x i64> %retval.0.i
}


define dso_local noundef <16 x i64> @_Z11test_insertDv32_u7__acc32Dv16_u7__acc32(<16 x i64> noundef %a, <8 x i64> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z11test_insertDv32_u7__acc32Dv16_u7__acc32:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov cm0, cm1 // Delay Slot 3
; CHECK-NEXT:    vmov bmh0, bml2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> %a, <8 x i64> %b, i32 1)
  ret <16 x i64> %0
}


define dso_local noundef <16 x i64> @_Z11test_insertDv16_u7__acc64Dv4_u7__acc64(<16 x i64> noundef %a, <4 x i64> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z11test_insertDv16_u7__acc64Dv4_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov cm0, cm1 // Delay Slot 3
; CHECK-NEXT:    vmov amlh0, amll2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.upd.1024.256.acc(<16 x i64> %a, <4 x i64> %b, i32 1)
  ret <16 x i64> %0
}


define dso_local noundef <16 x i64> @_Z11test_insertDv16_u7__acc64iDv8_u7__acc64(<16 x i64> noundef %a, i32 noundef %idx, <8 x i64> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z11test_insertDv16_u7__acc64iDv8_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    mova r1, #1
; CHECK-NEXT:    and r0, r0, r1
; CHECK-NEXT:    jnz r0, #.LBB13_2
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    vmov cm0, cm1 // Delay Slot 1
; CHECK-NEXT:  // %bb.1: // %if.then.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov bml0, bml2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    .p2align 4
; CHECK-NEXT:  .LBB13_2: // %if.else.i
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    vmov bmh0, bml2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = and i32 %idx, 1
  %cmp.i = icmp eq i32 %0, 0
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:
  %1 = tail call <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> %a, <8 x i64> %b, i32 0)
  br label %_ZL6insertDv16_u7__acc64iDv8_u7__acc64.exit

if.else.i:
  %2 = tail call <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> %a, <8 x i64> %b, i32 1)
  br label %_ZL6insertDv16_u7__acc64iDv8_u7__acc64.exit

_ZL6insertDv16_u7__acc64iDv8_u7__acc64.exit:
  %retval.0.i = phi <16 x i64> [ %1, %if.then.i ], [ %2, %if.else.i ]
  ret <16 x i64> %retval.0.i
}


define dso_local noundef <16 x i64> @_Z11test_insertDv16_u7__acc64Dv8_u7__acc64(<16 x i64> noundef %a, <8 x i64> noundef %b) local_unnamed_addr #1 {
; CHECK-LABEL: _Z11test_insertDv16_u7__acc64Dv8_u7__acc64:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    vmov cm0, cm1 // Delay Slot 3
; CHECK-NEXT:    vmov bmh0, bml2 // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  %0 = tail call <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64> %a, <8 x i64> %b, i32 1)
  ret <16 x i64> %0
}


declare <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32>, <8 x i32>, i32) #2
declare <32 x i32> @llvm.aie2.upd.I1024.I512(<32 x i32>, <16 x i32>, i32) #2
declare <32 x i32> @llvm.aie2.upd.I1024.I256(<32 x i32>, <8 x i32>, i32) #2
declare <8 x i64> @llvm.aie2.upd.512.256.acc(<8 x i64>, <4 x i64>, i32) #2
declare <16 x i64> @llvm.aie2.upd.1024.256.acc(<16 x i64>, <4 x i64>, i32) #2
declare <16 x i64> @llvm.aie2.upd.1024.512.acc(<16 x i64>, <8 x i64>, i32) #2
