# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
# RUN: llc -mtriple aie2 --issue-limit=8 -start-before=postmisched -stop-before=%last-mi-pass %s -o - | FileCheck %s


# Verify bundling of instructions in VLIW formats of different sizes.

---
name: test_alu_lda
body: |
  bb.0:
    liveins: $p0, $r0, $r1
    ; CHECK-LABEL: name: test_alu_lda
    ; CHECK: liveins: $p0, $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $p1, implicit-def $r0, implicit-def $srcarry, implicit $p1, implicit killed $r0, implicit killed $r1 {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
    ; CHECK-NEXT:   $r0 = ADD killed $r0, killed $r1, implicit-def $srcarry
    ; CHECK-NEXT: }
      $r0 = ADD $r0, $r1, implicit-def $srcarry
      $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
...

---
name: test_lda_mv
body: |
  bb.0:
    liveins: $r1, $p0
    ; CHECK-LABEL: name: test_lda_mv
    ; CHECK: liveins: $r1, $p0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $p0, implicit-def $r0, implicit $p0, implicit killed $r1 {
    ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    ; CHECK-NEXT:   $r0 = MOV_mv_scl killed $r1
    ; CHECK-NEXT: }
      $r0 = MOV_mv_scl $r1
      $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
...

---
name: test_lda_st
body: |
  bb.0:
    liveins: $r0, $p0, $p1
    ; CHECK-LABEL: name: test_lda_st
    ; CHECK: liveins: $r0, $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $p0, implicit $p0, implicit killed $r0, implicit killed $p1 {
    ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
    ; CHECK-NEXT:   ST_dms_sts_idx_imm killed $r0, killed $p1, 0
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE {
    ; CHECK-NEXT:   NOP
    ; CHECK-NEXT: }
      $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 4
      ST_dms_sts_idx_imm $r0, $p1, 0
...

---
name: test_lda_alu_mv
body: |
  bb.0:
    liveins: $r0, $r1, $p1
    ; CHECK-LABEL: name: test_lda_alu_mv
    ; CHECK: liveins: $r0, $r1, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $p1, implicit-def $r0, implicit-def $srcarry, implicit-def $r2, implicit $p1, implicit killed $r0, implicit killed $r1 {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
    ; CHECK-NEXT:   $r0 = ADD killed $r0, $r1, implicit-def $srcarry
    ; CHECK-NEXT:   $r2 = MOV_mv_scl killed $r1
    ; CHECK-NEXT: }
      $r0 = ADD $r0, $r1, implicit-def $srcarry
      $r2 = MOV_mv_scl $r1
      $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
...


---
name: test_lng_lda
body: |
  bb.0:
    liveins: $p1
    ; CHECK-LABEL: name: test_lng_lda
    ; CHECK: liveins: $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $p1, implicit-def $r2, implicit $p1 {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
    ; CHECK-NEXT:   $r2 = MOVXM_lng_cg 64
    ; CHECK-NEXT: }
      $r2 = MOVXM_lng_cg 64
      $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
...

---
name: test_lda_st_mv_vec
body: |
  bb.0:
    liveins: $r0, $r1, $p1, $x0
    ; CHECK-LABEL: name: test_lda_st_mv_vec
    ; CHECK: liveins: $r0, $r1, $p1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $p1, implicit-def $r0, implicit-def $srcarry, implicit-def $r2, implicit $p1, implicit killed $x0, implicit $crmcden, implicit killed $r0, implicit killed $r1 {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
    ; CHECK-NEXT:   VMOV_mv_mcd killed $x0, implicit $crmcden
    ; CHECK-NEXT:   $r0 = ADD killed $r0, $r1, implicit-def $srcarry
    ; CHECK-NEXT:   $r2 = MOV_mv_scl killed $r1
    ; CHECK-NEXT: }
      $r0 = ADD $r0, $r1, implicit-def $srcarry
      $r2 = MOV_mv_scl $r1
      $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
      VMOV_mv_mcd $x0, implicit $crmcden
...


---
name: test_lda_lda
body: |
  bb.0:
    liveins: $p0, $p1
    ; CHECK-LABEL: name: test_lda_lda
    ; CHECK: liveins: $p0, $p1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: BUNDLE implicit-def $p0, implicit killed $p0 {
    ; CHECK-NEXT:   $p0 = PADDA_lda_ptr_inc_idx_imm killed $p0, 8
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $p1, implicit killed $p1 {
    ; CHECK-NEXT:   $p1 = PADDA_lda_ptr_inc_idx_imm killed $p1, 4
    ; CHECK-NEXT: }
      $p0 = PADDA_lda_ptr_inc_idx_imm $p0, 8
      $p1 = PADDA_lda_ptr_inc_idx_imm $p1, 4
...
