; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: llc -mtriple=aie --issue-limit=1 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

%struct.S_EMPTY = type { [0 x i32] }
%struct.S64xI = type { [64 x i32] }

declare void @pass_S_EMPTY(%struct.S_EMPTY, i32 %v)

define void @call_use_pass_S_EMPTY(%struct.S_EMPTY %s, i32 %v) {
; CHECK-LABEL: call_use_pass_S_EMPTY:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    padda [sp], #32
; CHECK-NEXT:    add r6, r6, #1
; CHECK-NEXT:    st.spil lr, [sp, #-32]
; CHECK-NEXT:    jal pass_S_EMPTY
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    ldb lr, [sp, #-32]
; CHECK-NEXT:    padda [sp], #-32
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
  %v.add = add i32 %v, 1
  call void @pass_S_EMPTY(%struct.S_EMPTY %s, i32 %v.add)
  ret void
}

declare void @pass_S64xI(%struct.S64xI)

define dso_local void @call_pass_S64xI() {
; CHECK-LABEL: call_pass_S64xI:
; CHECK:         .p2align 4
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    padda [sp], #256
; CHECK-NEXT:    mov.u20 r12, #5
; CHECK-NEXT:    st.spil lr, [sp, #-256]
; CHECK-NEXT:    st.spil r12, [sp, #-4]
; CHECK-NEXT:    mov.u20 r12, #6
; CHECK-NEXT:    st.spil r12, [sp, #-8]
; CHECK-NEXT:    mov.u20 r12, #0
; CHECK-NEXT:    mov.u20 r6, #1
; CHECK-NEXT:    mov.u20 r7, #2
; CHECK-NEXT:    mov.u20 r8, #3
; CHECK-NEXT:    mov.u20 r9, #4
; CHECK-NEXT:    st.spil r12, [sp, #-12]
; CHECK-NEXT:    st.spil r12, [sp, #-16]
; CHECK-NEXT:    st.spil r12, [sp, #-20]
; CHECK-NEXT:    st.spil r12, [sp, #-24]
; CHECK-NEXT:    st.spil r12, [sp, #-28]
; CHECK-NEXT:    st.spil r12, [sp, #-32]
; CHECK-NEXT:    st.spil r12, [sp, #-36]
; CHECK-NEXT:    st.spil r12, [sp, #-40]
; CHECK-NEXT:    st.spil r12, [sp, #-44]
; CHECK-NEXT:    st.spil r12, [sp, #-48]
; CHECK-NEXT:    st.spil r12, [sp, #-52]
; CHECK-NEXT:    st.spil r12, [sp, #-56]
; CHECK-NEXT:    st.spil r12, [sp, #-60]
; CHECK-NEXT:    st.spil r12, [sp, #-64]
; CHECK-NEXT:    st.spil r12, [sp, #-68]
; CHECK-NEXT:    st.spil r12, [sp, #-72]
; CHECK-NEXT:    st.spil r12, [sp, #-76]
; CHECK-NEXT:    st.spil r12, [sp, #-80]
; CHECK-NEXT:    st.spil r12, [sp, #-84]
; CHECK-NEXT:    st.spil r12, [sp, #-88]
; CHECK-NEXT:    st.spil r12, [sp, #-92]
; CHECK-NEXT:    st.spil r12, [sp, #-96]
; CHECK-NEXT:    st.spil r12, [sp, #-100]
; CHECK-NEXT:    st.spil r12, [sp, #-104]
; CHECK-NEXT:    st.spil r12, [sp, #-108]
; CHECK-NEXT:    st.spil r12, [sp, #-112]
; CHECK-NEXT:    st.spil r12, [sp, #-116]
; CHECK-NEXT:    st.spil r12, [sp, #-120]
; CHECK-NEXT:    st.spil r12, [sp, #-124]
; CHECK-NEXT:    st.spil r12, [sp, #-128]
; CHECK-NEXT:    st.spil r12, [sp, #-132]
; CHECK-NEXT:    st.spil r12, [sp, #-136]
; CHECK-NEXT:    st.spil r12, [sp, #-140]
; CHECK-NEXT:    st.spil r12, [sp, #-144]
; CHECK-NEXT:    st.spil r12, [sp, #-148]
; CHECK-NEXT:    st.spil r12, [sp, #-152]
; CHECK-NEXT:    st.spil r12, [sp, #-156]
; CHECK-NEXT:    st.spil r12, [sp, #-160]
; CHECK-NEXT:    st.spil r12, [sp, #-164]
; CHECK-NEXT:    st.spil r12, [sp, #-168]
; CHECK-NEXT:    st.spil r12, [sp, #-172]
; CHECK-NEXT:    st.spil r12, [sp, #-176]
; CHECK-NEXT:    st.spil r12, [sp, #-180]
; CHECK-NEXT:    st.spil r12, [sp, #-184]
; CHECK-NEXT:    st.spil r12, [sp, #-188]
; CHECK-NEXT:    st.spil r12, [sp, #-192]
; CHECK-NEXT:    st.spil r12, [sp, #-196]
; CHECK-NEXT:    st.spil r12, [sp, #-200]
; CHECK-NEXT:    st.spil r12, [sp, #-204]
; CHECK-NEXT:    st.spil r12, [sp, #-208]
; CHECK-NEXT:    st.spil r12, [sp, #-212]
; CHECK-NEXT:    st.spil r12, [sp, #-216]
; CHECK-NEXT:    st.spil r12, [sp, #-220]
; CHECK-NEXT:    st.spil r12, [sp, #-224]
; CHECK-NEXT:    st.spil r12, [sp, #-228]
; CHECK-NEXT:    st.spil r12, [sp, #-232]
; CHECK-NEXT:    st.spil r12, [sp, #-236]
; CHECK-NEXT:    st.spil r12, [sp, #-240]
; CHECK-NEXT:    jal pass_S64xI
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
; CHECK-NEXT:    ldb lr, [sp, #-256]
; CHECK-NEXT:    padda [sp], #-256
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    nop
; CHECK-NEXT:    ret lr
; CHECK-NEXT:    nop // Delay Slot 5
; CHECK-NEXT:    nop // Delay Slot 4
; CHECK-NEXT:    nop // Delay Slot 3
; CHECK-NEXT:    nop // Delay Slot 2
; CHECK-NEXT:    nop // Delay Slot 1
entry:
  call void @pass_S64xI(%struct.S64xI { [64 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0] })
  ret void
}
