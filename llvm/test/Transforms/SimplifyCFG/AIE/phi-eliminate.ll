; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
;
; This file is licensed under the Apache License v2.0 with LLVM Exceptions.
; See https://llvm.org/LICENSE.txt for license information.
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
;
; (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
; RUN: opt -mtriple=aie2 < %s -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -S -two-entry-phi-node-folding-threshold=4 | FileCheck %s --check-prefixes=CHECK-DEFAULT-4
; RUN: opt -mtriple=aie2 < %s -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -S -two-entry-phi-node-folding-threshold=10 | FileCheck %s --check-prefixes=CHECK-AIE-DEFAULT-10

; Any if-then-else cascade requires executing 5 delay slot instructions for
; condition evaluation, plus 5 delay slot instructions on one of the branches
; (in the test below, the branch in if.then.i)
; It is thus profitable to speculatively execute 10 instructions, as it has the
; potential of helping later alias analysis passes which handle selects better
; than Phi instructions.
define i32 @test(i1 %cmp, ptr nonnull dereferenceable(128) %ptr, ptr nonnull dereferenceable(128) %ptr2, ptr nonnull align 32 dereferenceable(128) %config, i20 %idx, i32 %idx2) {
; CHECK-DEFAULT-4-LABEL: @test(
; CHECK-DEFAULT-4-NEXT:  entry:
; CHECK-DEFAULT-4-NEXT:    br i1 [[CMP:%.*]], label [[IF_ELSE_I:%.*]], label [[IF_THEN_I:%.*]]
; CHECK-DEFAULT-4:       if.then.i:
; CHECK-DEFAULT-4-NEXT:    [[ADD_PTR1:%.*]] = getelementptr inbounds i32, ptr [[PTR:%.*]], i20 4
; CHECK-DEFAULT-4-NEXT:    [[ADD_PTR2:%.*]] = getelementptr inbounds i32, ptr [[ADD_PTR1]], i20 [[IDX:%.*]]
; CHECK-DEFAULT-4-NEXT:    br label [[IF_END_I:%.*]]
; CHECK-DEFAULT-4:       if.else.i:
; CHECK-DEFAULT-4-NEXT:    [[OFFSET:%.*]] = load i32, ptr [[CONFIG:%.*]], align 4
; CHECK-DEFAULT-4-NEXT:    [[OFFSET2:%.*]] = lshr i32 [[OFFSET]], 2
; CHECK-DEFAULT-4-NEXT:    [[IDX3:%.*]] = trunc i32 [[OFFSET2]] to i20
; CHECK-DEFAULT-4-NEXT:    [[ADD_PTR3:%.*]] = getelementptr inbounds i32, ptr [[PTR2:%.*]], i20 [[IDX3]]
; CHECK-DEFAULT-4-NEXT:    br label [[IF_END_I]]
; CHECK-DEFAULT-4:       if.end.i:
; CHECK-DEFAULT-4-NEXT:    [[PTR3:%.*]] = phi ptr [ [[ADD_PTR3]], [[IF_ELSE_I]] ], [ [[ADD_PTR2]], [[IF_THEN_I]] ]
; CHECK-DEFAULT-4-NEXT:    [[RETVAL:%.*]] = load i32, ptr [[PTR3]], align 4
; CHECK-DEFAULT-4-NEXT:    ret i32 [[RETVAL]]
;
; CHECK-AIE-DEFAULT-10-LABEL: @test(
; CHECK-AIE-DEFAULT-10-NEXT:  entry:
; CHECK-AIE-DEFAULT-10-NEXT:    [[OFFSET:%.*]] = load i32, ptr [[CONFIG:%.*]], align 4
; CHECK-AIE-DEFAULT-10-NEXT:    [[OFFSET2:%.*]] = lshr i32 [[OFFSET]], 2
; CHECK-AIE-DEFAULT-10-NEXT:    [[IDX3:%.*]] = trunc i32 [[OFFSET2]] to i20
; CHECK-AIE-DEFAULT-10-NEXT:    [[ADD_PTR3:%.*]] = getelementptr inbounds i32, ptr [[PTR2:%.*]], i20 [[IDX3]]
; CHECK-AIE-DEFAULT-10-NEXT:    [[ADD_PTR1:%.*]] = getelementptr inbounds i32, ptr [[PTR:%.*]], i20 4
; CHECK-AIE-DEFAULT-10-NEXT:    [[ADD_PTR2:%.*]] = getelementptr inbounds i32, ptr [[ADD_PTR1]], i20 [[IDX:%.*]]
; CHECK-AIE-DEFAULT-10-NEXT:    [[PTR3:%.*]] = select i1 [[CMP:%.*]], ptr [[ADD_PTR3]], ptr [[ADD_PTR2]]
; CHECK-AIE-DEFAULT-10-NEXT:    [[RETVAL:%.*]] = load i32, ptr [[PTR3]], align 4
; CHECK-AIE-DEFAULT-10-NEXT:    ret i32 [[RETVAL]]
;
entry:
  br i1 %cmp, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %add.ptr1 = getelementptr inbounds i32, ptr %ptr, i20 4
  %add.ptr2 = getelementptr inbounds i32, ptr %add.ptr1, i20 %idx
  br label %if.end.i

if.else.i:                                        ; preds = %entry
  %offset = load i32, ptr %config, align 4
  %offset2 = lshr i32 %offset, 2
  %idx3 = trunc i32 %offset2 to i20
  %add.ptr3 = getelementptr inbounds i32, ptr %ptr2, i20 %idx3
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then.i
  %ptr3 = phi ptr [ %add.ptr3, %if.else.i ], [ %add.ptr2, %if.then.i ]
  %retval = load i32, ptr %ptr3, align 4
  ret i32 %retval
}
