//===- AIE_rela.inc -------------------------------------------------------===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023-2024 Advanced Micro Devices, Inc. or its affiliates
//
//===----------------------------------------------------------------------===//

// This file is automatically generated.
// Please do not modify directly.

//0 : (symbol_addr_AR  + addend )  :  addr [19..17]@64 [16..0]@71 in iword[16] nostrict      // with default addend 0
case 0:
checkUInt(Loc, Val, 20, rel);
patch16bytes(Loc, Val, 19, 17, 64);
patch16bytes(Loc, Val, 16, 0, 71);
return;

//1 : (symbol_addr_AR  + addend )  :  addr [19..17]@4 [16..0]@11 in iword[4] nostrict      // with default addend 0
case 1:
checkUInt(Loc, Val, 20, rel);
patch4bytes(Loc, Val, 19, 17, 4);
patch4bytes(Loc, Val, 16, 0, 11);
return;

//2 : (symbol_addr_AR  + addend )  :  addr [19..17]@28 [16..0]@35 in iword[8] nostrict      // with default addend 0
case 2:
checkUInt(Loc, Val, 20, rel);
patch8bytes(Loc, Val, 19, 17, 28);
patch8bytes(Loc, Val, 16, 0, 35);
return;

//3 : (symbol_addr_AR  + addend )  :  addr [19..17]@25 [16..0]@32 in iword[8] nostrict      // with default addend 0
case 3:
checkUInt(Loc, Val, 20, rel);
patch8bytes(Loc, Val, 19, 17, 25);
patch8bytes(Loc, Val, 16, 0, 32);
return;

//4 : (symbol_addr_AR  + addend )  :  addr [19..17]@64 [16..0]@71 in iword[12] nostrict      // with default addend 0
case 4:
checkUInt(Loc, Val, 20, rel);
patch12bytes(Loc, Val, 19, 17, 64);
patch12bytes(Loc, Val, 16, 0, 71);
return;

//5 : (symbol_addr_AR  + addend )  :  addr [19..17]@25 [16..0]@32 in iword[12] nostrict      // with default addend 0
case 5:
checkUInt(Loc, Val, 20, rel);
patch12bytes(Loc, Val, 19, 17, 25);
patch12bytes(Loc, Val, 16, 0, 32);
return;

//6 : (symbol_addr_AR  + addend )  :  t10s [9..0]@8 in iword[16]      // with default addend 0
case 6:
checkInt(Loc, Val, 10, rel);
patch16bytes(Loc, Val, 9, 0, 8);
return;

//7 : (symbol_addr_AR  + addend )  :  t10s [9..0]@9 in iword[4]      // with default addend 0
case 7:
checkInt(Loc, Val, 10, rel);
patch4bytes(Loc, Val, 9, 0, 9);
return;

//8 : (symbol_addr_AR  + addend )  :  t10s [9..0]@8 in iword[8]      // with default addend 0
case 8:
checkInt(Loc, Val, 10, rel);
patch8bytes(Loc, Val, 9, 0, 8);
return;

//9 : (symbol_addr_AR  + addend )  :  t10s [9..0]@9 in iword[8]      // with default addend 0
case 9:
checkInt(Loc, Val, 10, rel);
patch8bytes(Loc, Val, 9, 0, 9);
return;

//10 : (symbol_addr_AR  + addend )  :  t10s [9..0]@8 in iword[12]      // with default addend 0
case 10:
checkInt(Loc, Val, 10, rel);
patch12bytes(Loc, Val, 9, 0, 8);
return;

//11 : (symbol_addr_AR  + addend )  :  t12s [11..0]@57 in iword[16]      // with default addend 0
case 11:
checkInt(Loc, Val, 12, rel);
patch16bytes(Loc, Val, 11, 0, 57);
return;

//12 : (symbol_addr_AR  + addend )  :  t12s [11..0]@2 in iword[4]      // with default addend 0
case 12:
checkInt(Loc, Val, 12, rel);
patch4bytes(Loc, Val, 11, 0, 2);
return;

//13 : (symbol_addr_AR  + addend )  :  t12s [11..0]@19 in iword[8]      // with default addend 0
case 13:
checkInt(Loc, Val, 12, rel);
patch8bytes(Loc, Val, 11, 0, 19);
return;

//14 : (symbol_addr_AR  + addend )  :  t12s [11..0]@37 in iword[8]      // with default addend 0
case 14:
checkInt(Loc, Val, 12, rel);
patch8bytes(Loc, Val, 11, 0, 37);
return;

//15 : (symbol_addr_AR  + addend )  :  t12s [11..0]@2 in iword[8]      // with default addend 0
case 15:
checkInt(Loc, Val, 12, rel);
patch8bytes(Loc, Val, 11, 0, 2);
return;

//16 : (symbol_addr_AR  + addend )  :  t12s [11..0]@21 in iword[8]      // with default addend 0
case 16:
checkInt(Loc, Val, 12, rel);
patch8bytes(Loc, Val, 11, 0, 21);
return;

//17 : (symbol_addr_AR  + addend )  :  t12s [11..0]@57 in iword[12]      // with default addend 0
case 17:
checkInt(Loc, Val, 12, rel);
patch12bytes(Loc, Val, 11, 0, 57);
return;

//18 : (symbol_addr_AR  + addend )  :  t12s [11..0]@19 in iword[12]      // with default addend 0
case 18:
checkInt(Loc, Val, 12, rel);
patch12bytes(Loc, Val, 11, 0, 19);
return;

//19 : (symbol_addr_AR  + addend )  :  t12s [11..0]@20 in iword[12]      // with default addend 0
case 19:
checkInt(Loc, Val, 12, rel);
patch12bytes(Loc, Val, 11, 0, 20);
return;

//20 : (symbol_addr_AR  + addend )  :  t12s [11..0]@21 in iword[12]      // with default addend 0
case 20:
checkInt(Loc, Val, 12, rel);
patch12bytes(Loc, Val, 11, 0, 21);
return;

//21 : (symbol_addr_AR  + addend )  :  t12s [11..0]@37 in iword[16]      // with default addend 0
case 21:
checkInt(Loc, Val, 12, rel);
patch16bytes(Loc, Val, 11, 0, 37);
return;

//22 : (symbol_addr_AR  + addend )  :  t12s [11..0]@37 in iword[12]      // with default addend 0
case 22:
checkInt(Loc, Val, 12, rel);
patch12bytes(Loc, Val, 11, 0, 37);
return;

//23 : (symbol_addr_AR  + addend )  :  t12s [11..0]@83 in iword[16]      // with default addend 0
case 23:
checkInt(Loc, Val, 12, rel);
patch16bytes(Loc, Val, 11, 0, 83);
return;

//24 : (symbol_addr_AR  + addend )  :  t12s [11..0]@56 in iword[12]      // with default addend 0
case 24:
checkInt(Loc, Val, 12, rel);
patch12bytes(Loc, Val, 11, 0, 56);
return;

//25 : (symbol_addr_AR  + addend )  :  t08s [7..0]@20 in iword[16]      // with default addend 0
case 25:
checkInt(Loc, Val, 8, rel);
patch16bytes(Loc, Val, 7, 0, 20);
return;

//26 : (symbol_addr_AR  + addend )  :  t08s [7..0]@3 in iword[8]      // with default addend 0
case 26:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 0, 3);
return;

//27 : (symbol_addr_AR  + addend )  :  t08s [7..0]@39 in iword[12]      // with default addend 0
case 27:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 0, 39);
return;

//28 : (symbol_addr_AR  + addend )  :  t08s [7..0]@22 in iword[12]      // with default addend 0
case 28:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 0, 22);
return;

//29 : (symbol_addr_AR  + addend )  :  t08s [7..0]@21 in iword[12]      // with default addend 0
case 29:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 0, 21);
return;

//30 : (symbol_addr_AR  + addend )  :  t09s [8..0]@26 in iword[16]      // with default addend 0
case 30:
checkInt(Loc, Val, 9, rel);
patch16bytes(Loc, Val, 8, 0, 26);
return;

//31 : (symbol_addr_AR  + addend )  :  t09s [8..0]@9 in iword[4]      // with default addend 0
case 31:
checkInt(Loc, Val, 9, rel);
patch4bytes(Loc, Val, 8, 0, 9);
return;

//32 : (symbol_addr_AR  + addend )  :  t09s [8..0]@26 in iword[8]      // with default addend 0
case 32:
checkInt(Loc, Val, 9, rel);
patch8bytes(Loc, Val, 8, 0, 26);
return;

//33 : (symbol_addr_AR  + addend )  :  t09s [8..0]@9 in iword[8]      // with default addend 0
case 33:
checkInt(Loc, Val, 9, rel);
patch8bytes(Loc, Val, 8, 0, 9);
return;

//34 : (symbol_addr_AR  + addend )  :  t09s [8..0]@26 in iword[12]      // with default addend 0
case 34:
checkInt(Loc, Val, 9, rel);
patch12bytes(Loc, Val, 8, 0, 26);
return;

//35 : (symbol_addr_AR  + addend )  :  t08s [7..0]@60 in iword[16]      // with default addend 0
case 35:
checkInt(Loc, Val, 8, rel);
patch16bytes(Loc, Val, 7, 0, 60);
return;

//36 : (symbol_addr_AR  + addend )  :  t08s [7..0]@37 in iword[12]      // with default addend 0
case 36:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 0, 37);
return;

//37 : (symbol_addr_AR  + addend )  :  t20s [19..14]@62 [13..0]@74 in iword[16] nostrict      // with default addend 0
case 37:
checkInt(Loc, Val, 20, rel);
patch16bytes(Loc, Val, 19, 14, 62);
patch16bytes(Loc, Val, 13, 0, 74);
return;

//38 : (symbol_addr_AR  + addend )  :  t20s [19..14]@23 [13..0]@35 in iword[12] nostrict      // with default addend 0
case 38:
checkInt(Loc, Val, 20, rel);
patch12bytes(Loc, Val, 19, 14, 23);
patch12bytes(Loc, Val, 13, 0, 35);
return;

//39 : (symbol_addr_AR  + addend )  :  t20u [19..14]@62 [13..0]@74 in iword[16] nostrict      // with default addend 0
case 39:
checkUInt(Loc, Val, 20, rel);
patch16bytes(Loc, Val, 19, 14, 62);
patch16bytes(Loc, Val, 13, 0, 74);
return;

//40 : (symbol_addr_AR  + addend )  :  t20u [19..14]@23 [13..0]@35 in iword[12] nostrict      // with default addend 0
case 40:
checkUInt(Loc, Val, 20, rel);
patch12bytes(Loc, Val, 19, 14, 23);
patch12bytes(Loc, Val, 13, 0, 35);
return;

//41 : (symbol_addr_AR  + addend )  :  t08s [7..0]@3 in iword[4]      // with default addend 0
case 41:
checkInt(Loc, Val, 8, rel);
patch4bytes(Loc, Val, 7, 0, 3);
return;

//42 : (symbol_addr_AR  + addend )  :  t08s [7..0]@20 in iword[8]      // with default addend 0
case 42:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 0, 20);
return;

//43 : (symbol_addr_AR  + addend )  :  t08s [7..0]@24 in iword[8]      // with default addend 0
case 43:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 0, 24);
return;

//44 : (symbol_addr_AR  + addend )  :  t08s [7..0]@41 in iword[8]      // with default addend 0
case 44:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 0, 41);
return;

//45 : (symbol_addr_AR  + addend )  :  t08s [7..0]@21 in iword[8]      // with default addend 0
case 45:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 0, 21);
return;

//46 : (symbol_addr_AR  + addend )  :  t08s [7..0]@20 in iword[12]      // with default addend 0
case 46:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 0, 20);
return;

//47 : (symbol_addr_AR  + addend )  :  t08s [7..0]@37 in iword[8]      // with default addend 0
case 47:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 0, 37);
return;

//48 : (symbol_addr_AR  + addend )  :  t08s [7..0]@76 in iword[12]      // with default addend 0
case 48:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 0, 76);
return;

//49 : (symbol_addr_AR  + addend )  :  t08s [7..0]@60 in iword[12]      // with default addend 0
case 49:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 0, 60);
return;

//50 : (symbol_addr_AR  + addend )  :  t20s [19..14]@2 [13..0]@14 in iword[4] nostrict      // with default addend 0
case 50:
checkInt(Loc, Val, 20, rel);
patch4bytes(Loc, Val, 19, 14, 2);
patch4bytes(Loc, Val, 13, 0, 14);
return;

//51 : (symbol_addr_AR  + addend )  :  t20s [19..14]@26 [13..0]@38 in iword[8] nostrict      // with default addend 0
case 51:
checkInt(Loc, Val, 20, rel);
patch8bytes(Loc, Val, 19, 14, 26);
patch8bytes(Loc, Val, 13, 0, 38);
return;

//52 : (symbol_addr_AR  + addend )  :  t20s [19..14]@23 [13..0]@35 in iword[8] nostrict      // with default addend 0
case 52:
checkInt(Loc, Val, 20, rel);
patch8bytes(Loc, Val, 19, 14, 23);
patch8bytes(Loc, Val, 13, 0, 35);
return;

//53 : (symbol_addr_AR  + addend )  :  t20s [19..14]@62 [13..0]@74 in iword[12] nostrict      // with default addend 0
case 53:
checkInt(Loc, Val, 20, rel);
patch12bytes(Loc, Val, 19, 14, 62);
patch12bytes(Loc, Val, 13, 0, 74);
return;

//54 : (symbol_addr_AR  + addend )  :  t20u [19..14]@2 [13..0]@14 in iword[4] nostrict      // with default addend 0
case 54:
checkUInt(Loc, Val, 20, rel);
patch4bytes(Loc, Val, 19, 14, 2);
patch4bytes(Loc, Val, 13, 0, 14);
return;

//55 : (symbol_addr_AR  + addend )  :  t20u [19..14]@26 [13..0]@38 in iword[8] nostrict      // with default addend 0
case 55:
checkUInt(Loc, Val, 20, rel);
patch8bytes(Loc, Val, 19, 14, 26);
patch8bytes(Loc, Val, 13, 0, 38);
return;

//56 : (symbol_addr_AR  + addend )  :  t20u [19..14]@23 [13..0]@35 in iword[8] nostrict      // with default addend 0
case 56:
checkUInt(Loc, Val, 20, rel);
patch8bytes(Loc, Val, 19, 14, 23);
patch8bytes(Loc, Val, 13, 0, 35);
return;

//57 : (symbol_addr_AR  + addend )  :  t20u [19..14]@62 [13..0]@74 in iword[12] nostrict      // with default addend 0
case 57:
checkUInt(Loc, Val, 20, rel);
patch12bytes(Loc, Val, 19, 14, 62);
patch12bytes(Loc, Val, 13, 0, 74);
return;

//58 : (symbol_addr_AR  + addend )  :  t08s [7..4]@63 [3..0]@71 in iword[16]      // with default addend 0
case 58:
checkInt(Loc, Val, 8, rel);
patch16bytes(Loc, Val, 7, 4, 63);
patch16bytes(Loc, Val, 3, 0, 71);
return;

//59 : (symbol_addr_AR  + addend )  :  t08s [7..4]@8 [3..0]@16 in iword[4]      // with default addend 0
case 59:
checkInt(Loc, Val, 8, rel);
patch4bytes(Loc, Val, 7, 4, 8);
patch4bytes(Loc, Val, 3, 0, 16);
return;

//60 : (symbol_addr_AR  + addend )  :  t08s [7..4]@25 [3..0]@33 in iword[8]      // with default addend 0
case 60:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 4, 25);
patch8bytes(Loc, Val, 3, 0, 33);
return;

//61 : (symbol_addr_AR  + addend )  :  t08s [7..4]@43 [3..0]@51 in iword[8]      // with default addend 0
case 61:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 4, 43);
patch8bytes(Loc, Val, 3, 0, 51);
return;

//62 : (symbol_addr_AR  + addend )  :  t08s [7..4]@8 [3..0]@16 in iword[8]      // with default addend 0
case 62:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 4, 8);
patch8bytes(Loc, Val, 3, 0, 16);
return;

//63 : (symbol_addr_AR  + addend )  :  t08s [7..4]@27 [3..0]@35 in iword[8]      // with default addend 0
case 63:
checkInt(Loc, Val, 8, rel);
patch8bytes(Loc, Val, 7, 4, 27);
patch8bytes(Loc, Val, 3, 0, 35);
return;

//64 : (symbol_addr_AR  + addend )  :  t08s [7..4]@63 [3..0]@71 in iword[12]      // with default addend 0
case 64:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 4, 63);
patch12bytes(Loc, Val, 3, 0, 71);
return;

//65 : (symbol_addr_AR  + addend )  :  t08s [7..4]@25 [3..0]@33 in iword[12]      // with default addend 0
case 65:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 4, 25);
patch12bytes(Loc, Val, 3, 0, 33);
return;

//66 : (symbol_addr_AR  + addend )  :  t08s [7..4]@26 [3..0]@34 in iword[12]      // with default addend 0
case 66:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 4, 26);
patch12bytes(Loc, Val, 3, 0, 34);
return;

//67 : (symbol_addr_AR  + addend )  :  t08s [7..4]@27 [3..0]@35 in iword[12]      // with default addend 0
case 67:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 4, 27);
patch12bytes(Loc, Val, 3, 0, 35);
return;

//68 : (symbol_addr_AR  + addend )  :  t08s [7..4]@43 [3..0]@51 in iword[16]      // with default addend 0
case 68:
checkInt(Loc, Val, 8, rel);
patch16bytes(Loc, Val, 7, 4, 43);
patch16bytes(Loc, Val, 3, 0, 51);
return;

//69 : (symbol_addr_AR  + addend )  :  t08s [7..4]@43 [3..0]@51 in iword[12]      // with default addend 0
case 69:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 4, 43);
patch12bytes(Loc, Val, 3, 0, 51);
return;

//70 : (symbol_addr_AR  + addend )  :  t08s [7..4]@89 [3..0]@97 in iword[16]      // with default addend 0
case 70:
checkInt(Loc, Val, 8, rel);
patch16bytes(Loc, Val, 7, 4, 89);
patch16bytes(Loc, Val, 3, 0, 97);
return;

//71 : (symbol_addr_AR  + addend )  :  t08s [7..4]@62 [3..0]@70 in iword[12]      // with default addend 0
case 71:
checkInt(Loc, Val, 8, rel);
patch12bytes(Loc, Val, 7, 4, 62);
patch12bytes(Loc, Val, 3, 0, 70);
return;
